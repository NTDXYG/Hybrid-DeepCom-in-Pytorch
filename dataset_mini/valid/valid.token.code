public void cursor down ( double units ) { this . cursor = this . cursor + units ; }
public static rf filter from frequency ( long frequency ) { if ( frequency < num_ ) { return n o_ filter ; } for ( rf filter filter : values ( ) ) { if ( filter . get minimum frequency ( ) <= frequency && frequency < filter . get maximum frequency ( ) ) { return filter ; } } throw new illegal argument exception ( str_ + str_ + frequency + str_ ) ; }
public void drop view ( ) { on drop view ( ) ; this . view = null ; }
public c sub function menu ( final c graph model model , final list < pair < i navi instruction , i navi function > > functions , final boolean allow uninlining ) { super ( str_ ) ; final set < i navi function > added = new hash set < i navi function > ( ) ; for ( final pair < i navi instruction , i navi function > p : functions ) { if ( added . contains ( p . second ( ) ) ) { continue ; } added . add ( p . second ( ) ) ; add ( new j menu item ( c action proxy . proxy ( new c open function action ( model . get parent ( ) , model . get view container ( ) , p . second ( ) ) ) ) ) ; } set enabled ( allow uninlining || ! functions . is empty ( ) ) ; }
public bindings add ( string property , string state property , j toggle button button , j text area text area ) { register property change listener ( button ) ; register property change listener ( text area ) ; return add ( new opt j text area binding ( property , state property , button , text area ) ) ; }
public static void copy mutation mapping file ( file origin dir , file destination dir ) throws io exception { final file origin file = new file ( origin dir , mutatio n_ ma p_ file ) ; if ( origin file . exists ( ) ) { final sdf id id = read mutation map ( origin dir ) ; write mutation mapping file ( destination dir , id ) ; } }
private long define invocation time ( string date source ) { final long invocation time = calculate millis ( date source ) ; calendar calendar = calendar . get instance ( ) ; calendar . set time in millis ( invocation time ) ; date factory . set instance ( new test date factory ( calendar . get time ( ) ) ) ; return invocation time ; }
public static void println ( float x ) { out . println ( x ) ; }
public phase advance phase ( phase phase ) { if ( phase == left ) { return self ; } if ( phase == right ) { return done ; } return right ; }
public static int [ ] random permutation ( final int [ ] out , random random ) { for ( int i = out . length - num_ ; i > num_ ; i -- ) { int ri = random . next int ( i + num_ ) ; int tmp = out [ ri ] ; out [ ri ] = out [ i ] ; out [ i ] = tmp ; } return out ; }
public static base response new response object ( string content type header ) { string content type = string utils . is not blank ( content type header ) ? content type header : str_ ; if ( content type . contains ( str_ ) ) { return new xml response ( ) ; } else if ( content type . contains ( str_ ) ) { return new json response ( ) ; } else { return new binary response ( ) ; } }
public static value compresson holder . un compress value un compress max min ( data type comp data type , data type actual data type ) { switch ( comp data type ) { case dat a_ byte : return new un compress max min byte ( ) ; case dat a_ short : return new un compress max min short ( ) ; case dat a_ int : return new un compress max min int ( ) ; case dat a_ long : return new un compress max min long ( ) ; case dat a_ float : return new un compress max min float ( ) ; default : return new un compress max min default ( ) ; } }
public abstract boolean is slave ( ) ;
public int size ( ) { return list . size ( ) ; }
private void do acquire interruptibly ( int arg ) throws interrupted exception { final node node = add waiter ( node . exclusive ) ; boolean failed = bool_ ; try { for ( ; ; ) { final node p = node . predecessor ( ) ; if ( p == head && try acquire ( arg ) ) { set head ( node ) ; p . next = null ; failed = bool_ ; return ; } if ( should park after failed acquire ( p , node ) && park and check interrupt ( ) ) throw new interrupted exception ( ) ; } } finally { if ( failed ) cancel acquire ( node ) ; } }
public synchronized void add iteration notification listener ( iteration notification listener l ) { if ( m _ iteration notfication listeners == null ) m _ iteration notfication listeners = new hash set < > ( ) ; m _ iteration notfication listeners . add ( l ) ; }
public void delete tag ( int tag id ) { int ifd id = get defined tag default ifd ( tag id ) ; delete tag ( tag id , ifd id ) ; }
public void on consume finished ( purchase purchase , iab result result ) ;
public boolean container node ( ) { return bool_ ; }
private bsp tree < sphere 1 d > next internal node ( bsp tree < sphere 1 d > node ) { if ( child after ( node ) . get cut ( ) != null ) { return leaf after ( node ) . get parent ( ) ; } while ( is after parent ( node ) ) { node = node . get parent ( ) ; } return node . get parent ( ) ; }
private void search jar path ( file file , list < string > paths ) { if ( file . get name ( ) . to lower case ( ) . ends with ( str_ ) && file . is file ( ) ) { try { jar input stream jis ; jar entry je ; jis = new jar input stream ( new buffered input stream ( new file input stream ( file ) ) ) ; je = jis . get next jar entry ( ) ; while ( je != null ) { if ( je . get name ( ) . starts with ( helproot ) ) { string [ ] name = je . get name ( ) . split ( str_ ) ; if ( name . length > num_ ) { add to list ( paths , name [ num_ ] ) ; } } je = jis . get next jar entry ( ) ; } jis . close ( ) ; } catch ( io exception ignored ) { } } }
protected abstract void impl configure blocking ( boolean blocking ) throws io exception ;
public boolean has permissions by internal id ( string internal id , permission ... permissions ) { return has permissions by internal id ( internal id , arrays . as list ( permissions ) ) ; }
public static void maintain ( properties ctx ) { list < m language > list = new query ( ctx , table _ name , str_ , null ) . set parameters ( bool_ , bool_ ) . set only active records ( bool_ ) . list ( ) ; for ( m language language : list ) { language . maintain ( bool_ ) ; } }
public static void e ( string tag , string msg ) { if ( s level > leve l_ error ) { return ; } log . e ( tag , msg ) ; }
public static string parse ( command line parser . parameter [ ] params ) throws io exception { string name = null ; for ( int i = num_ ; i < params . length ; i ++ ) { if ( params [ i ] . get name ( ) . equals ignore case ( spac e_ nam e_ parameter ) ) { for ( int j = num_ ; j < params [ i ] . get arguments ( ) . length ; j ++ ) { name = params [ i ] . get arguments ( ) [ j ] ; break ; } } } return name ; }
public void write int ( int x ) { byte [ ] buff = data ; buff [ pos ] = ( byte ) ( x > > num_ ) ; buff [ pos + num_ ] = ( byte ) ( x > > num_ ) ; buff [ pos + num_ ] = ( byte ) ( x > > num_ ) ; buff [ pos + num_ ] = ( byte ) x ; pos += num_ ; }
public static date time formatter weekyear ( ) { return weekyear element ( ) ; }
t convert ( s value ) ;
public illegal format conversion exception ( char c , class < ? > arg ) { if ( arg == null ) throw new null pointer exception ( ) ; this . c = c ; this . arg = arg ; }
public static void remove cached file ( cached file cf ) { remove cached file ( ( file ) cf ) ; }
protected boolean is camel case matching ( ) { string value = java core . get option ( java core . codeassis t_ came l_ cas e_ match ) ; return java core . enabled . equals ( value ) ; }
public static boolean check for adjacent manipulators ( world world , block pos pos ) { for ( enum facing face : enum facing . values ( ) ) if ( is manipulator ( world . get tile entity ( pos . offset ( face ) ) ) ) return bool_ ; if ( is manipulator ( world . get tile entity ( pos . up ( num_ ) ) ) ) return bool_ ; if ( is manipulator ( world . get tile entity ( pos . down ( num_ ) ) ) ) return bool_ ; return bool_ ; }
private int keep sprite on map x ( sprite sprite , int sx ) { sx = math . max ( sx , num_ ) ; if ( ww != num_ ) { sx = math . min ( sx , math . max ( get width ( ) + svx , convert world x to scaled screen ( ww ) ) - sprite . get width ( ) ) ; } return sx ; }
public boolean supports concurrency checks ( ) { return ! is secret ( ) || this . data policy . with persistence ( ) ; }
public m p3 header ( int data ) throws exception { if ( ( data & num_ ) != num_ ) { throw new exception ( str_ ) ; } this . data = data ; data &= num_ ; audio version id = ( byte ) ( ( data > > num_ ) & num_ ) ; layer description = ( byte ) ( ( data > > num_ ) & num_ ) ; protection bit = ( ( data > > num_ ) & num_ ) == num_ ; bit rate index = ( byte ) ( ( data > > num_ ) & num_ ) ; sampling rate index = ( byte ) ( ( data > > num_ ) & num_ ) ; padding bit = ( ( data > > num_ ) & num_ ) != num_ ; channel mode = ( byte ) ( ( data > > num_ ) & num_ ) ; }
public entry ( string tag , long millis , file data , int flags ) throws io exception { if ( tag == null ) throw new null pointer exception ( str_ ) ; if ( ( flags & i s_ empty ) != num_ ) throw new illegal argument exception ( str_ + flags ) ; m tag = tag ; m time millis = millis ; m data = null ; m file descriptor = parcel file descriptor . open ( data , parcel file descriptor . mod e_ rea d_ only ) ; m flags = flags ; }
public invoke synchronizer exception ( string msg , throwable cause ) { super ( msg , cause ) ; }
public final < r > parallel flux < r > flat map ( function < ? super t , ? extends publisher < ? extends r > > mapper , boolean delay error , int max concurrency ) { return flat map ( mapper , delay error , max concurrency , queue supplier . smal l_ buffe r_ size ) ; }
public static endpoint description select ( endpoint description [ ] endpoints ) throws service result exception { exit : { endpoint description [ ] tcp endpoints = endpoint util . select by protocol ( endpoints , str_ ) ; tcp endpoints = endpoint util . select by message security mode ( tcp endpoints , message security mode . sign and encrypt ) ; if ( tcp endpoints . length == num_ ) break exit ; tcp endpoints = endpoint util . sort by security level ( tcp endpoints ) ; return tcp endpoints [ tcp endpoints . length - num_ ] ; } exit : { endpoint description [ ] https endpoints = endpoint util . select by protocol ( endpoints , str_ ) ; if ( https endpoints . length == num_ ) break exit ; return https endpoints [ num_ ] ; } throw new service result exception ( str_ ) ; }
public input stream reader ( java . io . input stream is , java . lang . string enc ) throws java . io . unsupported encoding exception { internal = is ; this . enc = enc . intern ( ) ; }
public final void test factory method with char sequence parameter ( ) { char sequence error message = str_ ; validator < object > validator = new abstract validator implementation ( str_ , bool_ ) ; negate validator < object > negate validator = negate validator . create ( error message , validator ) ; assert equals ( error message , negate validator . get error message ( ) ) ; assert equals ( validator , negate validator . get validator ( ) ) ; }
boolean unmap lun ( string init group ) { na element elem = new na element ( str_ ) ; elem . add new child ( str_ , init group ) ; elem . add new child ( str_ , path ) ; try { server . invoke elem ( elem ) ; return bool_ ; } catch ( exception e ) { string msg = str_ + path ; log . error ( msg , e ) ; throw new net app exception ( msg , e ) ; } }
protected void prepare ( ) { process info parameter [ ] para = get parameter ( ) ; for ( int i = num_ ; i < para . length ; i ++ ) { string name = para [ i ] . get parameter name ( ) ; if ( para [ i ] . get parameter ( ) == null ) ; else if ( name . equals ( str_ ) ) p _ a d_ client _ id = para [ i ] . get parameter as int ( ) ; else if ( name . equals ( str_ ) ) p _ a d_ workflow _ id = para [ i ] . get parameter as int ( ) ; else log . log ( level . severe , str_ + name ) ; } }
public void stop load more ( boolean is have more ) { if ( m pull loading == bool_ ) { m pull loading = bool_ ; m footer view . set state ( is have more ? x list view footer . stat e_ normal : x list view footer . stat e_ complete ) ; } }
public min engagement filter ( int min engagement , bipartite graph bipartite graph , stats receiver stats receiver ) { super ( stats receiver ) ; this . min engagement = min engagement ; this . bipartite graph = bipartite graph ; }
protected void start up ( ) throws exception { }
public static project read project ( string argument ) throws io exception { string project file name = argument ; file project file = new file ( project file name ) ; if ( project file name . ends with ( str_ ) || project file name . ends with ( str_ ) ) { try { return project . read xml ( project file ) ; } catch ( sax exception e ) { io exception ioe = new io exception ( str_ ) ; ioe . init cause ( e ) ; throw ioe ; } } throw new illegal argument exception ( str_ + argument ) ; }
public void on state changed ( view header view , int state ) ;
public case insensitive hash set ( string [ ] a , int offset , int length , float f ) { super ( a , offset , length , f , case insensitive hashing strategy . instance ) ; }
public static string decrypt with symmetric key ( string data , string enc algorithm , string secret ) throws exception { try { string algorithm = enc algorithm ; if ( ! algorithm . starts with ( str_ ) ) { algorithm = str_ + enc algorithm ; } secret key factory sk factory = secret key factory . get instance ( algorithm ) ; pbe key spec pbe key spec = new pbe key spec ( secret . to char array ( ) ) ; secret key s key = sk factory . generate secret ( pbe key spec ) ; cipher cipher = cipher . get instance ( algorithm ) ; cipher . init ( cipher . decryp t_ mode , s key , pbe parameter spec ) ; byte [ ] tmp = base 6 4 . decode ( data ) ; byte [ ] enc data = remove prefix ( tmp ) ; byte [ ] dec data = cipher . do final ( enc data ) ; return base 6 4 . encode ( dec data ) ; } catch ( no such algorithm exception nse ) { throw new exception ( nse . get message ( ) ) ; } }
public bios command result remove aliases ( network system network , list < zone wwn alias > aliases , string fabric id , string fabric wwn ) throws network device controller exception ;
public abstract boolean has string ( ) ;
public list < shard routing > all shards ( ) { list < shard routing > shards = new array list < > ( ) ; string [ ] indices = indices routing . key set ( ) . to array ( new string [ indices routing . key set ( ) . size ( ) ] ) ; for ( string index : indices ) { list < shard routing > all shards index = all shards ( index ) ; shards . add all ( all shards index ) ; } return shards ; }
public static float parse float ( string s ) { if ( positiv e_ infinity . equals ( s ) ) { return float . positiv e_ infinity ; } else if ( negativ e_ infinity . equals ( s ) ) { return float . negativ e_ infinity ; } else if ( na n . equals ( s ) ) { return float . na n ; } else { s = trim plus sign ( s ) ; return float . parse float ( s ) ; } }
concurrent skip list map . node < k , v > lo node ( comparator < ? super k > cmp ) { if ( lo == null ) return m . find first ( ) ; else if ( lo inclusive ) return m . find near ( lo , gt | eq , cmp ) ; else return m . find near ( lo , gt , cmp ) ; }
public abstract i list < t > create agents ( i scope scope , int number , list < ? extends map < string , object > > initial values , boolean is restored , boolean to be scheduled ) throws gama runtime exception ;
protected void check property ( string property id ) throws xml configuration exception { if ( ! f recognized properties . contains ( property id ) ) { if ( f parent settings != null ) { f parent settings . get property ( property id ) ; } else { short type = xml configuration exception . no t_ recognized ; throw new xml configuration exception ( type , property id ) ; } } }
public void clear local ( ) { super . clear ( ) ; }
public void launch ( ) { if ( should print version ( ) ) { argument parser parser = get argument parser ( ) ; if ( parser == null || ! parser . usage or version displayed ( ) ) { print version ( ) ; } system . exit ( return code . prin t_ version . get return code ( ) ) ; } else if ( should print usage ( ) ) { argument parser parser = get argument parser ( ) ; if ( parser == null || ! parser . usage or version displayed ( ) ) { print usage ( bool_ ) ; } system . exit ( return code . successful . get return code ( ) ) ; } else if ( is cli ( ) ) { cli application cli app = create cli application ( ) ; int exit code = launch cli ( cli app ) ; pre exit ( cli app ) ; system . exit ( exit code ) ; } else { will launch gui ( ) ; int exit code = launch gui ( args ) ; if ( exit code != num_ ) { gui launch failed ( ) ; cli application cli app = create cli application ( ) ; exit code = launch cli ( cli app ) ; pre exit ( cli app ) ; system . exit ( exit code ) ; } } }
set < string > search names ( set < search filter > filter , int search size limit , int search time limit ) throws entitlement exception ;
public boolean nulls are sorted at end ( ) throws sql exception { return bool_ ; }
public void remove attribute ( int index ) { if ( index >= num_ && index < length ) { if ( index < length - num_ ) { system . arraycopy ( data , ( index + num_ ) * num_ , data , index * num_ , ( length - index - num_ ) * num_ ) ; } index = ( length - num_ ) * num_ ; data [ index ++ ] = null ; data [ index ++ ] = null ; data [ index ++ ] = null ; data [ index ++ ] = null ; data [ index ] = null ; length -- ; } else { bad index ( index ) ; } }
public static node select single node ( node context node , string str , node namespace node ) throws transformer exception { node iterator nl = select node iterator ( context node , str , namespace node ) ; return nl . next node ( ) ; }
public void test delay assignment cache start ( ) throws exception { ignite ignite 0 = start server ( num_ , num_ ) ; test recording communication spi spi = ( test recording communication spi ) ignite 0 . configuration ( ) . get communication spi ( ) ; block supply send ( spi , cach e_ nam e1 ) ; start server ( num_ , num_ ) ; start server ( num_ , num_ ) ; check affinity ( num_ , top ver ( num_ , num_ ) , bool_ ) ; cache configuration ccfg = cache configuration ( ) ; ccfg . set name ( cach e_ nam e2 ) ; ignite 0 . create cache ( ccfg ) ; calculate affinity ( num_ ) ; check affinity ( num_ , top ver ( num_ , num_ ) , bool_ ) ; spi . stop block ( ) ; check affinity ( num_ , top ver ( num_ , num_ ) , bool_ ) ; }
public pair < string , string > compare xml ( string old xml , string new xml ) { if ( old xml == null && new xml == null ) { return null ; } if ( old xml == null ) { return new pair < string , string > ( null , new xml ) ; } if ( new xml == null ) { return new pair < string , string > ( old xml , null ) ; } sax builder sax builder = new sax builder ( ) ; sax builder . set reuse parser ( bool_ ) ; document old document = null , new document = null ; try { old document = sax builder . build ( new string reader ( old xml ) ) ; new document = sax builder . build ( new string reader ( new xml ) ) ; } catch ( exception ex ) { system . err . println ( str_ + old xml + str_ + new xml ) ; } if ( old document == null || new document == null ) { return null ; } return xml diff . compare xml ( old document , new document ) ; }
public header card ( string key , long value , string comment ) throws header card exception { this ( key , string . value of ( value ) , comment , bool_ , bool_ ) ; }
public void add layout component ( string name , component comp ) { invalidate layout ( comp . get parent ( ) ) ; }
protected abstract double left ( ) ;
public double [ ] fast project relative data to render space ( number vector data ) ;
public void stop ( final object name name pattern , final string pid attribute , final string stop method , final string [ ] attributes , final object [ ] values ) throws connection failed exception , io exception , m bean invocation failed exception , pid unavailable exception { invoke operation on target m bean ( name pattern , pid attribute , stop method , attributes , values ) ; }
public void test bad mro ( ) throws exception { ensure no members ( str_ ) ; }
private object registered object read ( int handle ) throws invalid object exception { object res = objects read . get ( handle - object stream constants . base wire handle ) ; if ( res == unshare d_ obj ) { throw new invalid object exception ( str_ ) ; } return res ; }
public boolean is committing ( ) { return ( ( commit after rows > num_ ) || ( commit after millis > num_ ) ) ; }
string arg val ( ) { string arg 1 val = str_ + arg 1 ; string arg 2 val = str_ + arg 2 ; string arg 3 val = str_ + arg 3 ; return arg 1 val + str_ + arg 2 val + str_ + arg 3 val ; }
private view fill specific ( int position , int top ) { if ( debug ) log . d ( str_ , str_ + position + str_ + top ) ; view temp = make and add view ( position , top , bool_ , bool_ ) ; m first position = position ; final int divider height = m divider height ; if ( ! m stack from bottom ) { fill up ( position - num_ , temp . get top ( ) - divider height ) ; adjust views up or down ( ) ; fill down ( position + num_ , temp . get bottom ( ) + divider height ) ; int child count = get child count ( ) ; if ( child count > num_ ) { correct too high ( child count ) ; } } else { fill down ( position + num_ , temp . get bottom ( ) + divider height ) ; adjust views up or down ( ) ; fill up ( position - num_ , temp . get top ( ) - divider height ) ; int child count = get child count ( ) ; if ( child count > num_ ) { correct too low ( child count ) ; } } return null ; }
public void flush ( ) throws io exception ;
text graphics new text graphics ( ) ;
public void disable gui buttons ( ) { gui . disable buttons ( ) ; }
void add naming attributes ( object service , entry [ ] attr sets ) throws remote exception ;
boolean update graphics data ( graphics configuration gc ) ;
public rem expr new rem expr ( value op 1 , value op 2 ) { return new g rem expr ( op 1 , op 2 ) ; }
public builder resolve link tos ( boolean resolve link tos ) { this . resolve link tos = resolve link tos ; return this ; }
public static int indicator ( final int x ) { return ( x >= num_ ) ? num_ : - num_ ; }
string evaluate ( string ... args ) ;
private boolean is semicolon part of for statement ( ) { int semi colon count = num_ ; while ( bool_ ) { next token ( ) ; switch ( f token ) { case symbols . token for : return bool_ ; case symbols . token lbrace : return bool_ ; case symbols . token semicolon : semi colon count ++ ; if ( semi colon count > num_ ) return bool_ ; break ; case symbols . token colon : return bool_ ; case symbols . token eof : return bool_ ; } } }
boolean on bubble click ( em message message ) ;
public static placeholder fragment new instance ( int section number ) { placeholder fragment fragment = new placeholder fragment ( ) ; bundle args = new bundle ( ) ; args . put int ( ar g_ sectio n_ number , section number ) ; fragment . set arguments ( args ) ; return fragment ; }
protected void on group collapsible status changed ( sublime group sublime group ) { if ( m block updates || m presenter == null ) return ; list < sublime base menu item > group items = get items for group ( sublime group . get group id ( ) ) ; if ( group items . size ( ) > num_ ) { int header pos = get adapter pos for id ( group items . get ( num_ ) . get item id ( ) ) ; if ( header pos != - num_ ) { if ( sublime group . is collapsible ( ) || ! sublime group . is collapsed ( ) ) { m presenter . report change ( new change ( change . change type . ite m_ changed , header pos , - num_ , - num_ , - num_ ) , m adapter data ) ; } else { sublime group . set state collapsed ( bool_ ) ; } } else { m presenter . invalidate entire menu ( ) ; } } }
private boolean is attribute external resource ( string attribute name ) { return ( string utils . equals ignore case ( attribute name , sr c_ attr ) || string utils . equals ignore case ( attribute name , hre f_ attr ) ) ; }
public pkc s 1 0 attribute ( pkc s9 attribute attr ) { this . attribute id = attr . get oid ( ) ; this . attribute value = attr . get value ( ) ; }
public static copy participant [ ] load copy participants ( refactoring status status , refactoring processor processor , object element , copy arguments arguments , string affected natures [ ] , sharable participants shared ) { return load copy participants ( status , processor , element , arguments , null , affected natures , shared ) ; }
private void add to relation ( ) { insert new membership ( ( linear layout ) get our view ( ) , null , null , - num_ , bool_ ) . role edit . request focus ( ) ; }
public topological node ( int node id , string node name , int x , int y ) { this . node id = node id ; this . node name = node name ; world x = x ; world y = y ; }
public void fail ( string error message ) { test event collector . fail ( error message ) ; throw new assertion error ( error message ) ; }
protected string render uri ( uri uri ) { return uri . to ascii string ( ) ; }
public void do post ( http servlet request request , http servlet response response ) throws servlet exception , io exception { do get ( request , response ) ; }
public static boolean [ ] to reference type ( boolean [ ] prim arr ) { boolean [ ] ref arr = new boolean [ prim arr . length ] ; for ( int i = num_ ; i < prim arr . length ; i ++ ) ref arr [ i ] = caster . to boolean ( prim arr [ i ] ) ; return ref arr ; }
partition convert ( string stream name ) ;
private void show feedback ( string message ) { if ( my host != null ) { my host . show feedback ( message ) ; } else { system . out . println ( message ) ; } }
public void clear state ( w window ) throws exception { executable trigger . invoke clear ( context factory . base ( window , new test timers ( window namespace ( window ) ) , executable trigger , get finished set ( window ) ) ) ; }
public date load price model start date ( long price model key for subscription ) ;
void connect cable ( wire type cable type , targeting info target , i immersive connectable other ) ;
final void reject ( runnable command ) { handler . rejected execution ( command , this ) ; }
public static < t > boolean all elements are null ( t [ ] array ) { for ( t element : array ) { if ( element != null ) return bool_ ; } return bool_ ; }
public synchronized boolean is released ( ) { return m native ref count == num_ ; }
static void register border painter ( value style , border painter painter ) { border painters . put ( style , painter ) ; }
public boolean is encryption enabled ( ) { if ( is device admin active ( ) ) { switch ( device policy manager . get storage encryption status ( ) ) { case device policy manager . encryptio n_ statu s_ active : return bool_ ; case device policy manager . encryptio n_ statu s_ inactive : return bool_ ; case device policy manager . encryptio n_ statu s_ activating : return bool_ ; default : return bool_ ; } } return bool_ ; }
public void run test ( ) throws throwable { document doc ; node list test list ; node comment node ; string comment node name ; int node type ; doc = ( document ) load ( str_ , bool_ ) ; test list = doc . get child nodes ( ) ; for ( int index n 1 0 0 4 0 = num_ ; index n 1 0 0 4 0 < test list . get length ( ) ; index n 1 0 0 4 0 ++ ) { comment node = ( node ) test list . item ( index n 1 0 0 4 0 ) ; comment node name = comment node . get node name ( ) ; if ( equals ( str_ , comment node name ) ) { node type = ( int ) comment node . get node type ( ) ; assert equals ( str_ , num_ , node type ) ; } } }
public composite title ( block container container ) { param checks . null not permitted ( container , str_ ) ; this . container = container ; this . background paint = null ; }
public void document registration ( ) { }
void show presentation step ( canceler synchronous message message , string text to show ) ;
public void add table definitions ( collection < table definition > table defs ) { this . table definitions . add all ( table defs ) ; }
public void add char option ( localizable message c , localizable message description , menu callback < t > callback ) { char keys . add ( c ) ; char synopsis . add ( description ) ; char callbacks . add ( callback ) ; }
protected void postorder ( tree node < e > root ) { if ( root == null ) return ; postorder ( root . left ) ; postorder ( root . right ) ; system . out . print ( root . element + str_ ) ; }
void popover view did dismiss ( ab popover view view ) ;
public boolean is connect enabled ( ) { return connect enabled ; }
public less than ( ) { super ( boolean . class , number . class , number . class ) ; }
protected void write component ( element elem ) throws io exception { }
protected abstract void engine init ( key store ks ) throws key store exception ;
public static int convert day of week from time to calendar ( int time day of week ) { switch ( time day of week ) { case time . monday : return calendar . monday ; case time . tuesday : return calendar . tuesday ; case time . wednesday : return calendar . wednesday ; case time . thursday : return calendar . thursday ; case time . friday : return calendar . friday ; case time . saturday : return calendar . saturday ; case time . sunday : return calendar . sunday ; default : throw new illegal argument exception ( str_ + str_ ) ; } }
public om arc ( int x 1 , int y 1 , int w , int h , double s , double e ) { super ( rendertyp e_ xy , linetyp e_ unknown , decluttertyp e_ none ) ; this . x 1 = x 1 ; this . y 1 = y 1 ; width = w ; height = h ; start = s ; extent = e ; }
private boolean force settle captured view at ( int final left , int final top , int xvel , int yvel ) { final int start left = m captured view . get left ( ) ; final int start top = m captured view . get top ( ) ; final int dx = final left - start left ; final int dy = final top - start top ; if ( dx == num_ && dy == num_ ) { m scroller . abort animation ( ) ; set drag state ( stat e_ idle ) ; return bool_ ; } final int duration = compute settle duration ( m captured view , dx , dy , xvel , yvel ) ; m scroller . start scroll ( start left , start top , dx , dy , duration ) ; set drag state ( stat e_ settling ) ; return bool_ ; }
public json exception ( final string message , final throwable cause ) { super ( message , cause ) ; }
public static map < uri , list < initiator > > make host initiators map ( list < uri > initiators , db client db client ) { map < uri , list < initiator > > host initiator map = new hash map < > ( ) ; if ( ! initiators . is empty ( ) ) { for ( uri initiator uri : initiators ) { initiator initiator = db client . query object ( initiator . class , initiator uri ) ; uri initiator host uri = v plex util . get initiator host ( initiator ) ; list < initiator > initiator set = host initiator map . get ( initiator host uri ) ; if ( initiator set == null ) { host initiator map . put ( initiator host uri , new array list < initiator > ( ) ) ; initiator set = host initiator map . get ( initiator host uri ) ; } initiator set . add ( initiator ) ; } } _log . info ( str_ + host initiator map ) ; return host initiator map ; }
public http request accept json ( ) { return accept ( conten t_ typ e_ json ) ; }
int process ( callback [ ] callbacks , int state ) throws auth login exception { switch ( state ) { case is auth constants . logi n_ start : { if ( device print profile == null || device print profile . is empty ( ) ) { return is auth constants . logi n_ succeed ; } else if ( auto store profiles ) { profile persister . save device print ( device print profile ) ; return is auth constants . logi n_ succeed ; } else { return sav e_ profil e_ state ; } } case sav e_ profil e_ state : { choice callback choice callback = ( choice callback ) callbacks [ num_ ] ; if ( choice callback . get selected indexes ( ) [ num_ ] == stor e_ profil e_ choice ) { return nam e_ profil e_ state ; } return is auth constants . logi n_ succeed ; } case nam e_ profil e_ state : { name callback name callback = ( name callback ) callbacks [ num_ ] ; string name = name callback . get name ( ) ; profile persister . save device print ( name , device print profile ) ; return is auth constants . logi n_ succeed ; } default : { throw new auth login exception ( bundl e_ name , str_ , null ) ; } } }
int elements ( ) ;
public int on same side ( vec 4 [ ] pts ) { if ( pts == null ) { throw new illegal argument exception ( str_ ) ; } double d = this . distance to ( pts [ num_ ] ) ; int side = d < num_ ? - num_ : d > num_ ? num_ : num_ ; if ( side == num_ ) return num_ ; for ( int i = num_ ; i < pts . length ; i ++ ) { if ( pts [ i ] == null ) { throw new illegal argument exception ( str_ ) ; } d = this . distance to ( pts [ i ] ) ; if ( ( side == - num_ && d < num_ ) || ( side == num_ && d > num_ ) ) continue ; return num_ ; } return side ; }
public boolean is multiple snapshots supported ( ) { return multiple snapshots supported ; }
boolean is case sensitive ( ) ;
public element type parent ( ) { return the parent ; }
public void add item bounds listener ( item bounds listener ibl ) { if ( m _bounders == null ) m _bounders = new copy on write array list ( ) ; m _bounders . add ( ibl ) ; }
public static double [ ] calc histogram ( array list < double > data , double min , double max , int num bins , boolean logrpu ) { final double [ ] result = new double [ num bins ] ; final double bin size = ( max - min ) / num bins ; for ( double d : data ) { if ( logrpu ) { d = math . log 1 0 ( d ) ; } int bin = ( int ) ( ( d - min ) / bin size ) ; if ( bin < num_ ) { } else if ( bin >= num bins ) { } else { result [ bin ] += num_ ; } } return result ; }
public storage ( ) { this ( new file ( get temporary storage directory string ( ) ) ) ; }
public void test invoke any 3 ( ) throws throwable { executor service e = new fork join pool ( num_ ) ; pool cleaner cleaner = null ; try { cleaner = cleaner ( e ) ; list < callable < string > > l = new array list < callable < string > > ( ) ; l . add ( null ) ; try { e . invoke any ( l ) ; should throw ( ) ; } catch ( null pointer exception success ) { } } finally { if ( cleaner != null ) { cleaner . close ( ) ; } } }
public _ weave lexer ( java . io . reader in ) { this . zz reader = in ; }
protected string builder encode body ( string builder retval ) { retval . append ( integer . to string ( expires ) ) ; if ( ! parameters . is empty ( ) ) { retval . append ( semicolon ) ; parameters . encode ( retval ) ; } return retval ; }
public abstract void do test ( ) ;
public void add behaviour ( class < ? > behaviour ) throws object store config exception { if ( behaviours . contains key ( behaviour ) ) throw new object store config exception ( behaviour . get simple name ( ) + str_ ) ; try { behaviour . get constructor ( ) ; } catch ( no such method exception e ) { throw new object store config exception ( behaviour . get simple name ( ) + str_ ) ; } behaviours . put ( behaviour , null ) ; }
public int size ( ) { return buffer . length ; }
public static string to comma delimited string in quotes ( collection c ) { string buffer result = new string buffer ( ) ; for ( iterator i = c . iterator ( ) ; i . has next ( ) ; ) { object o = i . next ( ) ; result . append ( str_ + o . to string ( ) + str_ ) ; } return result . substring ( num_ ) ; }
public static void register fuel handler ( i fuel handler handler , fuel type type ) { switch ( type ) { case crystallizer : crystallizer fuel handlers . add ( handler ) ; break ; case transmutator : transmutator fuel handlers . add ( handler ) ; break ; case furnace : game registry . register fuel handler ( handler ) ; } }
public peer task results < t > execute parallel ( ) { preconditions . check argument ( ! collection util . is collection empty ( peer tasks ) , str_ ) ; set < peer task result < t > > results = execute parallel ( peer tasks , bool_ ) ; peer tasks . clear ( ) ; return new peer task results < > ( results ) ; }
public void component resized ( component event e ) { }
private void on trigger 5 ( ) { add instruction ( r . string . accessibility _tutorial _lesson _ 1 _text _ 6 , bool_ , get context ( ) . get string ( r . string . accessibility _tutorial _next ) ) ; }
< t > void query ( result < t > result , object ... args ) ;
public im adapter factory ( ) { if ( model package == null ) { model package = im package . e instance ; } }
public void test remove all full ( ) { trie remove = build trie ( m _ data ) ; trie clone = ( trie ) m _ trie . clone ( ) ; m _ trie . remove all ( remove ) ; assert equals ( str_ , clone . size ( ) , m _ trie . size ( ) + m _ data . length ) ; }
union 2 < first , second > second ( second value ) ;
void stop scanning ( ) ;
public static void traverse ( final file directory , final i directory traversel callback callback ) { final file [ ] files = directory . list files ( ) ; if ( files == null ) { return ; } callback . entering ( directory ) ; for ( final file file : files ) { if ( ! file . is directory ( ) ) { callback . next file ( file ) ; } } for ( final file file : files ) { if ( file . is directory ( ) ) { traverse ( file , callback ) ; } } callback . leaving ( directory ) ; }
private double add recursively ( array list < double [ ] > hull , hierarchy < cluster < model > > hier , cluster < model > clus ) { final dbi ds ids = clus . get i ds ( ) ; double weight = ids . size ( ) ; for ( dbid iter iter = ids . iter ( ) ; iter . valid ( ) ; iter . advance ( ) ) { double [ ] proj p = proj . fast project data to render space ( rel . get ( iter ) ) ; if ( proj p [ num_ ] != proj p [ num_ ] || proj p [ num_ ] != proj p [ num_ ] ) { continue ; } hull . add ( proj p ) ; } for ( iter < cluster < model > > iter = hier . iter children ( clus ) ; iter . valid ( ) ; iter . advance ( ) ) { weight += num_ * add recursively ( hull , hier , iter . get ( ) ) ; } return weight ; }
public element type peek ( ) { return is empty ( ) ? null : stack . get ( stack . size ( ) - num_ ) ; }
public static int kill all requests ( ) { return request timer . purge ( ) ; }
public double [ ] unhomogene relative vector ( double [ ] v ) { assert ( v . length == dim + num_ ) ; double [ ] dv = new double [ dim ] ; system . arraycopy ( v , num_ , dv , num_ , dim ) ; assert ( math . abs ( v [ dim ] ) < double . mi n_ normal ) ; return dv ; }
sink create request body ( request request , long content length ) throws io exception ;
public void test send with delay and opt ack delay off ( ) { pseudo tcp test transfer test = new pseudo tcp test transfer ( ) ; test . set local mtu ( num_ ) ; test . set remote mtu ( num_ ) ; test . set delay ( num_ ) ; test . set opt ack delay ( num_ ) ; test . do test transfer ( num_ ) ; }
public boolean is private user group ( ) { return is private user group ( this . type , this . auto delete , this . name ) ; }
public static void verify project for volume to be added to cg ( volume volume , block consistency group cg , db client db client ) { uri cg project uri = cg . get project ( ) . get uri ( ) ; uri volume project uri = volume . get project ( ) . get uri ( ) ; if ( ! volume project uri . equals ( cg project uri ) ) { list < project > projects = db client . query object field ( project . class , str_ , arrays . as list ( cg project uri , volume project uri ) ) ; throw api exception . bad requests . consistency group add volume that is in different project ( volume . get label ( ) , projects . get ( num_ ) . get label ( ) , projects . get ( num_ ) . get label ( ) ) ; } }
void delete property fields ( long id ) ;
public importance transfer notification ( final account lessor , final account lessee , final importance transfer mode mode ) { super ( notification type . importance transfer ) ; this . lessor = lessor ; this . lessee = lessee ; this . mode = mode ; }
public boolean is fail on build differ ( ) ;
public static simple paged results control new control ( final boolean is critical , final int size , final byte string cookie ) { reject . if null ( cookie ) ; return new simple paged results control ( is critical , size , cookie ) ; }
public cluster unit ( cluster unit database db , string name , int start , int end ) { this . db = db ; this . start = start ; this . end = end ; this . name = name ; }
public separator ( ) { this ( null ) ; }
public void load depots ( buffered reader reader ) throws io exception { string line = null ; outer : while ( ( line = reader . read line ( ) ) != null ) { string [ ] tokens = line . trim ( ) . split ( str_ ) ; for ( int i = num_ ; i < tokens . length ; i ++ ) { int id = integer . parse int ( tokens [ i ] ) ; if ( id == - num_ ) { break outer ; } else { depots . add ( id ) ; } } } }
protected static void send text content ( http servlet response response , string content , string content type ) throws io exception { response . set content type ( content type ) ; response . get writer ( ) . print ( content ) ; }
public static attr set combine attr sets ( attr set attr set 1 , attr set attr set 2 ) { attr set ret attr set = new attr set ( ) ; if ( attr set 1 != null ) { int count = attr set 1 . size ( ) ; for ( int i = num_ ; i < count ; i ++ ) { attr attr = attr set 1 . element at ( i ) ; ret attr set . add ( attr ) ; } } if ( attr set 2 != null ) { int count = attr set 2 . size ( ) ; for ( int i = num_ ; i < count ; i ++ ) { attr attr = attr set 2 . element at ( i ) ; ret attr set . add ( attr ) ; } } return ret attr set ; }
protected data input stream open file on mounted obb ( string obb path , string file name ) { assert true ( str_ , m sm . is obb mounted ( obb path ) ) ; string path = m sm . get mounted obb path ( obb path ) ; assert true ( str_ , path != null ) ; file in file = new file ( path , file name ) ; data input stream in stream = null ; try { in stream = new data input stream ( new file input stream ( in file ) ) ; log . i ( lo g_ tag , str_ + file name + str_ + path ) ; } catch ( file not found exception e ) { log . e ( lo g_ tag , e . to string ( ) ) ; return null ; } catch ( security exception e ) { log . e ( lo g_ tag , e . to string ( ) ) ; return null ; } return in stream ; }
static public final int max ( int [ ] list ) { if ( list . length == num_ ) { throw new array index out of bounds exception ( erro r_ mi n_ max ) ; } int max = list [ num_ ] ; for ( int i = num_ ; i < list . length ; i ++ ) { if ( list [ i ] > max ) max = list [ i ] ; } return max ; }
map < string , t > map ( string function name , list < string > raw ) ;
public boolean has languages ( ) { return has repeating extension ( language . class ) ; }
public static void warn ( int window no , string ad message ) { warn ( window no , null , ad message , null , null ) ; }
abstract protected int bytes per atom ( ) ;
private int count above threshold ( int [ ] [ ] mat , double threshold ) { int ret = num_ ; for ( int i = num_ ; i < mat . length ; i ++ ) { int [ ] row = mat [ i ] ; for ( int j = num_ ; j < row . length ; j ++ ) { if ( row [ j ] >= threshold ) { ret ++ ; } } } return ret ; }
protected void finalize ( ) throws throwable { this . prototype = null ; this . root = null ; this . stack . clear ( ) ; this . stack = null ; super . finalize ( ) ; }
void deregister user monitor ( user monitor user monitor ) ;
public void on drawer closed ( view view ) { super . on drawer closed ( view ) ; }
public u f8 ( ) { this ( num_ ) ; }
public boolean is editable ( ) { return editable ; }
public void save key frame meta ( file file , key frame meta meta ) ;
public static active lag graph serializable instance ( ) { return new manual active lag graph ( ) ; }
default void infof ( string format , object ... args ) { info ( string . format ( format , args ) ) ; }
public final boolean is quick scale enabled ( ) { return quick scale enabled ; }
public static int create and link program ( final int vertex shader handle , final int fragment shader handle , final string [ ] attributes ) { int program handle = gle s 2 0 . gl create program ( ) ; if ( program handle != num_ ) { gle s 2 0 . gl attach shader ( program handle , vertex shader handle ) ; gle s 2 0 . gl attach shader ( program handle , fragment shader handle ) ; if ( attributes != null ) { final int size = attributes . length ; for ( int i = num_ ; i < size ; i ++ ) { gle s 2 0 . gl bind attrib location ( program handle , i , attributes [ i ] ) ; } } gle s 2 0 . gl link program ( program handle ) ; final int [ ] link status = new int [ num_ ] ; gle s 2 0 . gl get programiv ( program handle , gle s 2 0 . g l_ lin k_ status , link status , num_ ) ; if ( link status [ num_ ] == num_ ) { log . e ( tag , str_ + gle s 2 0 . gl get program info log ( program handle ) ) ; gle s 2 0 . gl delete program ( program handle ) ; program handle = num_ ; } } if ( program handle == num_ ) { throw new runtime exception ( str_ ) ; } return program handle ; }
public sc replay profile create consistency group ( string ssn , string name ) throws storage center api exception { log . debug ( str_ , name ) ; string error message = str_ ; parameters params = new parameters ( ) ; params . add ( str_ , name ) ; params . add ( str_ , note s_ string ) ; params . add ( str_ , str_ ) ; params . add ( str_ , ssn ) ; try { rest result result = rest client . post ( str_ , params . to json ( ) ) ; if ( check results ( result ) ) { return gson . from json ( result . get result ( ) , sc replay profile . class ) ; } error message = string . format ( str_ , name , ssn , result . get error msg ( ) ) ; } catch ( exception e ) { error message = string . format ( str_ , e ) ; log . warn ( error message ) ; } if ( error message . length ( ) == num_ ) { error message = string . format ( str_ , name , ssn ) ; } throw new storage center api exception ( error message ) ; }
public void add button pressed listener ( field config string button interface listener ) { if ( button pressed listener list == null ) { button pressed listener list = new array list < field config string button interface > ( ) ; } button pressed listener list . add ( listener ) ; }
void unzip ( input stream zipped , boolean overwrite , int strip number ) throws forbidden exception , conflict exception , server exception ;
private static int unsigned byte to int ( byte b ) { return b & num_ ; }
public rect f to camera space ( rect f source ) { rect f result = new rect f ( ) ; m preview to camera transform . map rect ( result , source ) ; return result ; }
public boolean validate ( vera pdfxmp node node , string type name ) { string type = get simplified type ( type name ) ; for ( array type validator . array type enum entr : array type validator . array type enum . values ( ) ) { string prefix = entr . get type ( ) + str_ ; if ( type . starts with ( prefix ) ) { return this . array validators . get ( entr . get type ( ) ) . is corresponding ( node , type . substring ( prefix . length ( ) ) ) ; } } return this . validators . contains key ( type ) && this . validators . get ( type ) . is corresponding ( node ) ; }
public static long abs ( long number ) { return math . abs ( number . long value ( ) ) ; }
public jk server down exception ( final throwable cause ) { super ( cause ) ; }
public static builders context create builders context ( class name type , class name generated type , builder lifecycle builder lifecycle ) { return new builders context ( builder lifecycle , type , generated type ) ; }
public default streaming message queue producer ( final string queue id , final excerpt appender queue producer , final streaming message queue wait strategy wait strategy ) { this . queue id = queue id ; this . queue producer = queue producer ; this . wait strategy = wait strategy ; }
public boolean is public ( ) { return modifier . is public ( this . get modifiers ( ) ) ; }
public static record create record ( model record model record , map < string , object > fields ) throws data file exception { record record = new record ( model record , fields ) ; return record ; }
private void push ( final class writer cw , final string desc ) { int type = type ( cw , desc ) ; if ( type != num_ ) { push ( type ) ; if ( type == long || type == double ) { push ( top ) ; } } }
private static string out ( float f ) { return nf . format ( f ) ; }
public void remove all ( ) { synchronized ( this ) { if ( peer != null ) { ( ( choice peer ) peer ) . remove all ( ) ; } p items . remove all elements ( ) ; selected index = - num_ ; } invalidate if valid ( ) ; }
public static int show yes no cancel question ( final component parent , final string msg ) { return j option pane . show confirm dialog ( is iconified ( parent ) ? null : parent , msg , system . get property ( defaul t_ windo w_ titl e_ property ) , j option pane . ye s_ n o_ cance l_ option , j option pane . questio n_ message ) ; }
public http request accept charset ( final string accept charset ) { return header ( heade r_ accep t_ charset , accept charset ) ; }
public synchronized boolean is consumer ( image consumer ic ) { return ics . contains ( ic ) ; }
public static s m_ syste m_ message st r_ giv e_ ite m_ optio n_ invali d_ stance ( string value 0 ) { return new s m_ syste m_ message ( num_ , value 0 ) ; }
private double smart add ( double a , double b ) { final double _a = fast math . abs ( a ) ; final double _b = fast math . abs ( b ) ; if ( _a > _b ) { final double eps = _a * precision . epsilon ; if ( _b > eps ) { return a + b ; } return a ; } else { final double eps = _b * precision . epsilon ; if ( _a > eps ) { return a + b ; } return b ; } }
private void update texts ( document event e ) { document doc = e . get document ( ) ; if ( doc == project name text field . get document ( ) || doc == project location text field . get document ( ) ) { string project name = project name text field . get text ( ) ; string project folder = project location text field . get text ( ) ; created folder text field . set text ( project folder + file . separator char + project name ) ; } panel . fire change event ( ) ; }
union 2 < first , second > first ( first value ) ;
public index column ( string column name ) { name = column name ; }
public per file suite ( class < ? > klass ) throws throwable { super ( klass , collections . < runner > empty list ( ) ) ; final test class test class = get test class ( ) ; final class < ? > java test class = test class . get java class ( ) ; final list < object [ ] > parameters list = get parameters list ( test class ) ; for ( object [ ] parameters : parameters list ) { runners . add ( new per parameter set test runner ( java test class , parameters ) ) ; } }
public void init $ children ( ) { children = new ast node [ num_ ] ; set child ( new opt ( ) , num_ ) ; set child ( new list ( ) , num_ ) ; }
public void write offset ( long offset ) throws io exception { data output stream . write long ( offset ) ; }
public static void main ( final string [ ] args ) { dom test case . do main ( nodeinsertbeforeinvalidnodetype . class , args ) ; }
void send request ( request request ) ;
public om raster ( ) { super ( rendertyp e_ unknown , linetyp e_ unknown , decluttertyp e_ none ) ; }
public void build spanning tree ( node root ) { super . clear edges ( ) ; super . set root ( root ) ; linked list q = new linked list ( ) ; bit set visit = new bit set ( ) ; q . add ( root ) ; visit . set ( root . get row ( ) ) ; table edges = get edge table ( ) ; while ( ! q . is empty ( ) ) { node p = ( node ) q . remove first ( ) ; for ( iterator iter = p . edges ( ) ; iter . has next ( ) ; ) { edge e = ( edge ) iter . next ( ) ; node n = e . get adjacent node ( p ) ; if ( ! visit . get ( n . get row ( ) ) ) { q . add ( n ) ; visit . set ( n . get row ( ) ) ; int er = super . add child edge ( p . get row ( ) , n . get row ( ) ) ; edges . set int ( er , sourc e_ edge , e . get row ( ) ) ; } } } }
public void test create standalone local configuration when no home directory specified ( ) { this . factory . register configuration ( str_ , container type . installed , configuration type . standalone , standalone local configuration stub . class ) ; local configuration configuration = ( local configuration ) this . factory . create configuration ( str_ , container type . installed , configuration type . standalone ) ; assert equals ( new default file handler ( ) . get tmp path ( str_ ) , configuration . get home ( ) ) ; }
public void quit ( ) { m quit = bool_ ; interrupt ( ) ; }
public map flatten ( map target ) { if ( target == null ) target = new config object ( ) ; populate ( str_ , target , this ) ; return target ; }
public static attributes ( ) { property values = new hash set < string > ( ) ; }
public final boolean is private ( ) { return modifier . is private ( get modifiers ( ) ) ; }
public json array put ( int index , long value ) throws json exception { put ( index , new long ( value ) ) ; return this ; }
public int size ( ) { return size ; }
public list < business object data > search business object data ( list < business object data search filter > filters ) ;
private static byte [ ] generate multipart boundary ( ) { random rand = new random ( ) ; byte [ ] bytes = new byte [ rand . next int ( num_ ) + num_ ] ; for ( int i = num_ ; i < bytes . length ; i ++ ) { bytes [ i ] = multipar t_ chars [ rand . next int ( multipar t_ chars . length ) ] ; } return bytes ; }
public void required ( int table , int field ) { int table _start = bb . capacity ( ) - table ; int vtable _start = table _start - bb . get int ( table _start ) ; boolean ok = bb . get short ( vtable _start + field ) != num_ ; if ( ! ok ) throw new assertion error ( str_ + field + str_ ) ; }
public void push ( final int value ) { if ( value >= - num_ && value <= num_ ) { mv . visit insn ( opcodes . icons t _ 0 + value ) ; } else if ( value >= byte . mi n_ value && value <= byte . ma x_ value ) { mv . visit int insn ( opcodes . bipush , value ) ; } else if ( value >= short . mi n_ value && value <= short . ma x_ value ) { mv . visit int insn ( opcodes . sipush , value ) ; } else { mv . visit ldc insn ( new integer ( value ) ) ; } }
public boolean is tag present ( int tag ) { return field index . contains key ( new integer ( tag ) ) ; }
public int compare to ( readonly vec 3 d v ) ;
public application component component ( ) { return application component ; }
void start ( ) ;
public stream corrupted exception ( string reason ) { super ( reason ) ; }
public static review first ( cursor c , boolean close ) { review review = null ; if ( c . move to first ( ) ) { review = current ( c ) ; } if ( close ) { c . close ( ) ; } return review ; }
public boolean connect ( string user name , string password ) ;
public s m_ skil l_ activation ( int skill id ) { this . skill id = skill id ; this . is active = bool_ ; this . unk = num_ ; }
public void scan ( string filename ) throws exception { bug collection bug collection = new sorted bug collection ( ) ; bug collection . read xml ( filename ) ; scan ( bug collection , filename ) ; }
private void giveup ( url url , io exception e ) throws io exception { if ( e instanceof socket timeout exception || e instanceof socket exception || e instanceof eof exception ) { if ( reattempts left -- > num_ ) { return ; } } if ( e instanceof socket timeout exception ) { socket timeout exception new exception = new socket timeout exception ( str_ + url ) ; new exception . init cause ( e ) ; e = new exception ; } throw e ; }
public static < a extends common allocator < a > , value t > value t from mem buffer holder ( mem buffer holder < a > mbh ) throws io exception , class not found exception { return to object ( mbh . get ( ) ) ; }
public void add terms ( bigdata value [ ] terms ) ;
public synchronized void clear cache ( ) { id repo cache . clear ( ) ; initialize cache ( ) ; }
boolean can zoom ( ) ;
void add conflicting file ( string file path ) ;
public valid edge predicate ( graph g ) { m _g = g ; }
public theory builder ( final supplier < strategy > state , final source < a > source , predicate < a > assumptions ) { this . state = state ; this . ps = source ; this . assumptions = assumptions ; }
public pickled graphite ( inet socket address address , socket factory socket factory , charset charset , int batch size ) { this . address = address ; this . hostname = null ; this . port = - num_ ; this . socket factory = socket factory ; this . charset = charset ; this . batch size = batch size ; }
public int size ( ) { return m sample ids . length ; }
public void remove all firmware update callbacks ( ) { firmware update callbacks . clear ( ) ; }
e take last ( ) throws interrupted exception ;
private camera source ( ) { }
public void test _simple premature close ( ) { striterator iter = new striterator ( m _data . iterator ( ) ) ; int i = num_ ; while ( iter . has next ( ) ) { iter . next ( ) ; if ( ++ i == num_ ) { iter . close ( ) ; assert true ( ! iter . has next ( ) ) ; } } assert true ( ! iter . is open ( ) ) ; assert true ( i == num_ ) ; }
void recycle ( long timeout , time unit unit ) { for ( ; ; ) { status status = resource key . get status ( ) ; switch ( status ) { case i n_ flight : if ( resource key . go from in flight to idle ( ) ) { release to pool ( timeout , unit ) ; return ; } break ; case retired : if ( resource key . go from retired to dead ( ) ) { discard resource ( ) ; return ; } break ; default : throw new illegal state exception ( str_ + status ) ; } } }
protected compute state create compute host ( compute description compute host description ) throws throwable { compute state compute state = new compute state ( ) ; compute state . id = uuid . random uuid ( ) . to string ( ) ; compute state . name = compute host description . name ; compute state . document self link = compute state . id ; compute state . description link = compute host description . document self link ; compute state . resource pool link = this . resource pool . document self link ; compute state . adapter management reference = get adapter management reference ( ) ; compute state return state = test utils . do post ( this . host , compute state , compute state . class , uri utils . build uri ( this . host , compute service . factor y_ link ) ) ; return return state ; }
private void write java parameter spec ( java parameter spec spec , document document , element parent element ) { element parameter = document . create element ( str_ ) ; parent element . append child ( parameter ) ; parameter . set attribute ( str_ , spec . get package name ( ) ) ; parameter . set attribute ( str_ , spec . get class name ( ) ) ; parameter . set attribute ( str_ , spec . get half signature ( ) ) ; parameter . set attribute ( str_ , integer . to string ( spec . get param idx ( ) ) ) ; }
public static < t > boolean contains identical ( collection < t > c , object o ) { for ( t t : c ) { if ( t == o ) return bool_ ; } return bool_ ; }
public static void write to ( media source source , output stream output stream ) throws io exception { input stream source stream = source . get input stream ( ) ; buffered output stream bos = new buffered output stream ( output stream ) ; buffered input stream bis = new buffered input stream ( source stream ) ; try { byte [ ] buf = new byte [ num_ ] ; int bytes read = num_ ; while ( ( bytes read = bis . read ( buf , num_ , buf . length ) ) >= num_ ) { bos . write ( buf , num_ , bytes read ) ; } bos . flush ( ) ; } finally { bis . close ( ) ; } }
public node add interaction correlation id ( string id ) { this . correlation ids . add ( new correlation identifier ( scope . interaction , id ) ) ; return this ; }
public void dump b2 n for bucket ( int b id ) { get region advisor ( ) . get bucket ( b id ) . get bucket advisor ( ) . dump profiles ( str_ + bucket string for logs ( b id ) + str_ + get bucket name ( b id ) ) ; }
public void destroy view ( ) throws canceled exception { megan properties . remove properties list listener ( menu bar . get recent files listener ( ) ) ; dir . remove viewer ( this ) ; frame . dispose ( ) ; }
public void add translator ( class pool cp , translator t ) throws not found exception , cannot compile exception { class pool = cp ; translator = t ; t . start ( class pool ) ; }
private void enlarge ( final int size ) { int length 1 = num_ * data . length ; int length 2 = length + size ; byte [ ] new data = new byte [ length 1 > length 2 ? length 1 : length 2 ] ; system . arraycopy ( data , num_ , new data , num_ , length ) ; data = new data ; }
public static bfs node create ( byte [ ] bytes ) throws io exception { return create ( new data input stream ( new byte array input stream ( bytes ) ) ) ; }
private void inc edge counter ( gpr counters , gpr scratch , gpr scratch for xer , int counter idx ) { asm . emit l int ( scratch , counter idx << num_ , counters ) ; emit edge counter increase ( scratch , scratch for xer ) ; asm . emit stw ( scratch , counter idx << num_ , counters ) ; }
private void reset color ( list < ui component > children ) { for ( ui component ui component : children ) { if ( is error style ( ui component ) ) { ui component . get attributes ( ) . put ( attribut e_ style , str_ ) ; } reset color ( ui component . get children ( ) ) ; } }
private void load server details activity ( ) { preference . put string ( context , constants . preference flag . ip , null ) ; intent intent = new intent ( already registered activity . this , server details . class ) ; intent . put extra ( get resources ( ) . get string ( r . string . intent _extra _regid ) , reg id ) ; intent . put extra ( get resources ( ) . get string ( r . string . intent _extra _from _activity ) , already registered activity . class . get simple name ( ) ) ; intent . set flags ( intent . fla g_ activit y_ clea r_ top ) ; start activity ( intent ) ; finish ( ) ; }
public void tab closure cancelled ( long time , int id ) { final boolean selected = tab model utils . get current tab id ( m model ) == id ; tab created ( time , id , tab . invali d_ ta b_ id , selected ) ; }
private void abort with error ( string msg , element e ) throws compile exception { report error ( msg , e ) ; throw new compile exception ( ) ; }
public void out ( data output stream dos ) throws io exception { dos . write utf ( str_ ) ; dos . write int ( columns ) ; dos . write int ( rows ) ; dos . write int ( data . length ) ; for ( int i = num_ ; i < data . length ; i ++ ) { dos . write float ( data [ i ] ) ; } }
public static double abs max ( double [ ] data ) { return abs max ( data , num_ , data . length ) ; }
public void add notify ( ) { synchronized ( get tree lock ( ) ) { if ( parent != null && parent . get peer ( ) == null ) { parent . add notify ( ) ; } if ( peer == null ) peer = get toolkit ( ) . create file dialog ( this ) ; super . add notify ( ) ; } }
public void times equals ( double f ) { times equals ( x , f ) ; }
public void clear ( ) { m . clear ( ) ; }
public static long sum to long ( byte [ ] array ) { long sum = num_ ; for ( byte x : array ) { sum += x ; } return sum ; }
private void write q name attribute ( java . lang . string namespace , java . lang . string att name , javax . xml . namespace . q name qname , javax . xml . stream . xml stream writer xml writer ) throws javax . xml . stream . xml stream exception { java . lang . string attribute namespace = qname . get namespace uri ( ) ; java . lang . string attribute prefix = xml writer . get prefix ( attribute namespace ) ; if ( attribute prefix == null ) { attribute prefix = register prefix ( xml writer , attribute namespace ) ; } java . lang . string attribute value ; if ( attribute prefix . trim ( ) . length ( ) > num_ ) { attribute value = attribute prefix + str_ + qname . get local part ( ) ; } else { attribute value = qname . get local part ( ) ; } if ( namespace . equals ( str_ ) ) { xml writer . write attribute ( att name , attribute value ) ; } else { register prefix ( xml writer , namespace ) ; xml writer . write attribute ( namespace , att name , attribute value ) ; } }
protected final void enable retransmission timer ( ) { enable retransmission timer ( num_ ) ; }
public local variable table _attribute find local variable table ( ) { int i ; for ( i = num_ ; i < attributes _count ; i ++ ) { if ( attributes [ i ] instanceof local variable table _attribute ) return ( local variable table _attribute ) ( attributes [ i ] ) ; } return null ; }
public void scan for ignored sections ( string original xml ) { this . original xml = original xml ; sortpom pi scanner sortpom pi scanner = new sortpom pi scanner ( logger ) ; sortpom pi scanner . scan ( original xml ) ; if ( sortpom pi scanner . is scan error ( ) ) { throw new failure exception ( sortpom pi scanner . get first error ( ) ) ; } contains ignored sections = sortpom pi scanner . contains ignored sections ( ) ; }
public bean box dn d catcher ( drag source ds ) { this ( ds , null ) ; }
public void reverse move ( ) { temp apk . rename to ( orig apk ) ; temp odex . rename to ( orig odex ) ; }
protected boolean is outside ( mutable coord p1 , mutable coord p2 , mutable coord p3 ) { double minx = math . min ( p1 . get x ( ) , p2 . get x ( ) ) , miny = math . min ( p1 . get y ( ) , p2 . get y ( ) ) ; double maxx = math . max ( p1 . get x ( ) , p2 . get x ( ) ) , maxy = math . max ( p1 . get y ( ) , p2 . get y ( ) ) ; double x = p3 . get x ( ) , y = p3 . get y ( ) ; if ( x >= minx && x <= maxx && y >= miny && y <= maxy ) return bool_ ; else return bool_ ; }
private void update progress ( string progress label , int progress ) { if ( my host != null && ( ( progress != previous progress ) || ( ! progress label . equals ( previous progress label ) ) ) ) { my host . update progress ( progress label , progress ) ; } previous progress = progress ; previous progress label = progress label ; }
public static final int find ( int [ ] a , int key ) { for ( int i = num_ ; i < a . length ; i ++ ) { if ( a [ i ] == key ) { return i ; } } return - num_ ; }
public boolean is deleted ( ) { return deleted ; }
private void complete ( ) { if ( is tap ( ) ) { m preforming tap = bool_ ; if ( m gesture listener != null ) { m gesture listener . on tap ( ) ; } animate out radius ( get width ( ) ) ; } else if ( is complete ( ) ) { if ( is left ( ) ) { if ( m gesture listener != null ) { m gesture listener . on left swipe ( ) ; } animate out radius ( - num_ * get width ( ) ) ; } else { if ( m gesture listener != null ) { m gesture listener . on right swipe ( ) ; } animate out radius ( get width ( ) ) ; } } else { animate out radius ( num_ ) ; } }
public void test _load and verify _sample data ( ) throws exception { final string resource = str_ ; do load and verify test ( resource , get properties ( ) ) ; }
public implicit client register implicit client ( uri login redirect uri , uri logout redirect uri ) throws auth exception { try { oidc tokens tokens = token handler . get admin server access token ( user , password ) ; oidc client dto oidc client dto = register client ( login redirect uri , login redirect uri , logout redirect uri ) ; client id client id = new client id ( oidc client dto . get client id ( ) ) ; uri login uri = build authentication request uri ( client id , login redirect uri ) ; uri logout uri = build logout request uri ( client id , tokens . get client id token ( ) , logout redirect uri ) ; return new implicit client ( oidc client dto . get client id ( ) , login uri . to string ( ) , logout uri . to string ( ) ) ; } catch ( exception e ) { throw new auth exception ( string . format ( str_ + str_ , login redirect uri , logout redirect uri ) , e ) ; } }
public boolean has family name ( ) { return has extension ( family name . class ) ; }
int restore ( int node ) ;
protected node new node ( ) { return new svgom flow region exclude element ( ) ; }
public static request new status update request ( session session , string message , graph place place , list < graph user > tags , callback callback ) { list < string > tag ids = null ; if ( tags != null ) { tag ids = new array list < string > ( tags . size ( ) ) ; for ( graph user tag : tags ) { tag ids . add ( tag . get id ( ) ) ; } } string place id = place == null ? null : place . get id ( ) ; return new status update request ( session , message , place id , tag ids , callback ) ; }
policy entry ( code source cs ) { this . codesource = cs ; this . permissions = new vector < permission > ( ) ; }
public boolean is constant ( ) { return constant ; }
public final void push predicate root ( int n ) { m _predicate roots . push ( n ) ; }
< s extends t > s save ( s entity ) ;
protected void node completed ( object parent , object node ) { get proxy builder ( ) . get current factory ( ) . on node completed ( get proxy builder ( ) . get child builder ( ) , parent , node ) ; }
public edge list graph single connections ( ) { edge lists = new concurrent hash map < > ( ) ; nodes = new array list < > ( ) ; edges set = new hash set < > ( ) ; }
public void write config xml ( document config xml ) { string config file = get config xml path ( ) ; xml tool . save xml ( config xml , config file ) ; }
protected final void assert still up ( ) throws illegal state exception { if ( this . is shut down ) throw new illegal state exception ( str_ ) ; }
neural net clone ( ) ;
private void increment value ( int inc ) { if ( inc > num_ ) { nread += inc ; if ( nread > size ) { size = nread ; } fire state changed ( ) ; } }
void enable monitoring ( ) ;
public void on success ( json object response ) { }
public symbol new symbol ( string name , int id ) ;
public boolean is auto indent enabled ( ) { return auto indent enabled ; }
public void str ( int dest size , register rt , a arch 6 4 address address ) { assert rt . get register category ( ) . equals ( cpu ) ; assert dest size == num_ || dest size == num_ || dest size == num_ || dest size == num_ ; int transfer size = num util . log 2 ceil ( dest size / num_ ) ; load store instruction ( str , rt , address , general 6 4 , transfer size ) ; }
public void sleep ( int ms ) { system clock . sleep ( ms ) ; }
public element create ( string prefix , document doc ) { return new xblom import element ( prefix , ( abstract document ) doc ) ; }
protected abstract completable future < command response > command ( command request request ) ;
public boolean is total ( ) { return operand type != null && operand type . equals ( typ e_ total ) ; }
private void init ( ) throws io exception { init path ( ) ; open thrift reader ( ) ; }
public boolean is status ( ) { return status ; }
private boolean is missing key ( string key , list < string > list to check ) { boolean is user op log key = pattern . matches ( str_ , key ) ; boolean is debug key = str_ . equals ( key ) ; boolean is error key = str_ . equals ( key ) ; return ! ( list to check . contains ( key ) || is user op log key || is debug key || is error key ) ; }
public static double small number ( ) { if ( small number == num_ ) small number = math . sqrt ( get smallest number ( ) ) ; return small number ; }
public boolean has session ticket ( ) { return ticket != null ; }
public static boolean is all filter ( extension file filter filter ) { for ( string ext : filter . get extensions ( ) ) { if ( ext . ends with ( str_ ) || ext . ends with ( str_ ) ) return bool_ ; } return bool_ ; }
protected void response exception ( throwable t ) { if ( sync protocol != null ) sync protocol . response exception ( t ) ; }
protected string calculate chain value ( string previous receipt jws representation , rk suite rk suite ) { try { string input for chain calculation ; if ( previous receipt jws representation == null ) { input for chain calculation = cash box parameters . get cash box id ( ) ; } else { input for chain calculation = previous receipt jws representation ; } message digest md = message digest . get instance ( rk suite . get hash algorithm for previous signature value ( ) ) ; md . update ( input for chain calculation . get bytes ( ) ) ; byte [ ] digest = md . digest ( ) ; int bytes to extract = rk suite . get number of bytes extracted from prev sig hash ( ) ; byte [ ] con digest = new byte [ bytes to extract ] ; system . arraycopy ( digest , num_ , con digest , num_ , bytes to extract ) ; return cash box utils . base 6 4 encode ( con digest , bool_ ) ; } catch ( no such algorithm exception e ) { e . print stack trace ( ) ; } return null ; }
public stack ( ) { }
void add route ( string url pattern , route route ) ;
public void do link block snapshot session target ( storage system system , uri snap session uri , uri snapshot uri , string copy mode , boolean target exists , task completer completer ) throws device controller exception ;
public map route movement ( settings settings ) { super ( settings ) ; string file name = settings . get setting ( rout e_ fil e_ s ) ; int type = settings . get int ( rout e_ typ e_ s ) ; all routes = map route . read routes ( file name , type , get map ( ) ) ; next route index = num_ ; path finder = new dijkstra path finder ( get ok map node types ( ) ) ; this . route = this . all routes . get ( this . next route index ) . replicate ( ) ; if ( this . next route index >= this . all routes . size ( ) ) { this . next route index = num_ ; } if ( settings . contains ( rout e_ firs t_ sto p_ s ) ) { this . first stop index = settings . get int ( rout e_ firs t_ sto p_ s ) ; if ( this . first stop index >= this . route . get nrof stops ( ) ) { throw new settings error ( str_ + this . first stop index + str_ + this . route . get nrof stops ( ) + str_ ) ; } } }
public void fade up to layer ( int index ) { m transition state = transitio n_ starting ; arrays . fill ( m is layer on , num_ , index + num_ , bool_ ) ; arrays . fill ( m is layer on , index + num_ , m layers . length , bool_ ) ; invalidate self ( ) ; }
public static boolean is decimal datatype ( iri datatype ) { return datatype . equals ( xml schema . decimal ) || is integer datatype ( datatype ) ; }
public void navigate to main activity ( context context ) { intent intent = new intent ( context , lesson catalog activity . class ) ; context . start activity ( intent ) ; }
void close ( ) ;
public boolean can attack with item ( ) { return bool_ ; }
public boolean is rotation enabled ( ) { return m rotate enabled ; }
public boolean has realm ( ) { return super . has attribute ( realm ) ; }
public boolean contains angle ( double angle ) { double ang ext = get angle extent ( ) ; boolean backwards = ( ang ext < num_ ) ; if ( backwards ) { ang ext = - ang ext ; } if ( ang ext >= num_ ) { return bool_ ; } angle = normalize degrees ( angle ) - normalize degrees ( get angle start ( ) ) ; if ( backwards ) { angle = - angle ; } if ( angle < num_ ) { angle += num_ ; } return ( angle >= num_ ) && ( angle < ang ext ) ; }
public void test constructor sign bytes negative 4 ( ) { byte a bytes [ ] = { num_ , num_ , num_ , - num_ } ; int a sign = - num_ ; byte r bytes [ ] = { - num_ , - num_ , - num_ , num_ } ; big integer a number = new big integer ( a sign , a bytes ) ; byte res bytes [ ] = new byte [ r bytes . length ] ; res bytes = a number . to byte array ( ) ; for ( int i = num_ ; i < res bytes . length ; i ++ ) { assert true ( res bytes [ i ] == r bytes [ i ] ) ; } assert equals ( str_ , - num_ , a number . signum ( ) ) ; }
public void run test ( ) throws throwable { document doc ; document fragment doc fragment ; string document fragment name ; doc = ( document ) load ( str_ , bool_ ) ; doc fragment = doc . create document fragment ( ) ; document fragment name = doc fragment . get node name ( ) ; assert equals ( str_ , str_ , document fragment name ) ; }
public frame body wors ( ) { }
public facebook authorization exception ( string message ) { super ( message ) ; }
public async result modify monitored items async ( modify monitored items request req ) { return channel . service request async ( req ) ; }
public user config update ( user config config ) { config . add credentials ( this ) ; string xml = post ( this . url + str_ , config . to xml ( ) ) ; element root = parse ( xml ) ; if ( root == null ) { return null ; } try { user config user = new user config ( ) ; user . parse xml ( root ) ; this . user = user ; return user ; } catch ( exception exception ) { this . exception = sdk exception . parse failure ( exception ) ; throw this . exception ; } }
public mx html canvas ( document document ) { set document ( document ) ; }
public static string make suffix for mime type ( string mime type ) { if ( mime type == null ) { string message = logging . get message ( str_ ) ; logging . logger ( ) . severe ( message ) ; throw new illegal state exception ( message ) ; } if ( ! mime type . contains ( str_ ) || mime type . ends with ( str_ ) ) { string message = logging . get message ( str_ ) ; logging . logger ( ) . severe ( message ) ; throw new illegal state exception ( message ) ; } int param index = mime type . index of ( str_ ) ; if ( param index != - num_ ) mime type = mime type . substring ( num_ , param index ) ; string suffix = mime type to suffix map . get ( mime type ) ; if ( suffix == null ) suffix = mime type . substring ( mime type . last index of ( str_ ) + num_ ) ; suffix = suffix . replace first ( str_ , str_ ) ; suffix = suffix . replace first ( str_ , str_ ) ; return str_ + suffix ; }
condition ( string condition string ) { string [ ] parts = c_ se p_ pattern . split ( condition string ) ; type = type . get for name ( parts [ num_ ] ) ; handle special types ( ) ; realm class = parts [ num_ ] ; if ( ! is realm class valid ( ) ) throw new illegal argument exception ( string . format ( str_ , parts [ num_ ] ) ) ; if ( transformer != null ) return ; else if ( type == type . normal ) { set field ( parts [ num_ ] ) ; args = args from string ( parts [ num_ ] ) ; } transformer = parts [ type == type . normal ? num_ : num_ ] ; if ( ! is transformer valid ( ) ) throw new illegal argument exception ( string . format ( str_ + str_ , transformer ) ) ; }
public void test set speed setting ( ) { float speed = num_ ; abstract throttle instance = new abstract throttle impl ( ) ; instance . set speed setting ( speed ) ; assert equals ( speed , instance . get speed setting ( ) , num_ ) ; }
public static string quote identifier ( string s ) { int length = s . length ( ) ; string builder buff = new string builder ( length + num_ ) ; buff . append ( str_ ) ; for ( int i = num_ ; i < length ; i ++ ) { char c = s . char at ( i ) ; if ( c == str_ ) { buff . append ( c ) ; } buff . append ( c ) ; } return buff . append ( str_ ) . to string ( ) ; }
protected void tear down ( ) { test field . pubfield 1 = num_ ; test field . privfield 1 = num_ ; test field . int s field = integer . ma x_ value ; test field . short s field = short . ma x_ value ; test field . boolean s field = bool_ ; test field . byte s field = byte . ma x_ value ; test field . long s field = long . ma x_ value ; test field . double s field = double . ma x_ value ; test field . float s field = float . ma x_ value ; test field . char s field = str_ ; test field . prsttrvol = num_ ; }
public string remove tags ( string string ) { if ( string == null || string . length ( ) == num_ ) { return string ; } matcher m = remov e_ tags . matcher ( string ) ; return m . replace all ( str_ ) ; }
public boolean rename to ( path impl path ) throws io exception { return bool_ ; }
public void halt ( ) { synchronized ( this ) { been halted = bool_ ; } }
public long value ( ) { return value ; }
public int push message sync ( message packet ) throws org . apache . thrift . t exception ;
public boolean contains ( int index ) { return index >= get first ( ) && index <= get last ( ) ; }
public void simulate method ( soot method method , reference variable this var , reference variable return var , reference variable params [ ] ) { string sub signature = method . get sub signature ( ) ; { default method ( method , this var , return var , params ) ; return ; } }
public static boolean is first run ( context m context ) { final shared preferences preferences = m context . get shared preferences ( first run prefs , context . mod e_ private ) ; return preferences . get boolean ( str_ , bool_ ) ; }
public abstract i minecraft loader launch ( launch options options , user profile provider p ) throws game exception ;
void visit nonterminal primitive fragment ( string fragment , int offset , int length ) ;
public boolean is repeatable ( ) { return bool_ ; }
public http headers headers ( ) { return headers ; }
public void update storage data ( storage data storage data ) throws business exception , io exception , serialization exception { storage data local = get local storage data object ( storage data ) ; if ( null == local ) { throw new business exception ( str_ + storage data + str_ , storage error code enum . storag e_ doe s_ no t_ exist ) ; } else { synchronized ( local ) { local . set name ( storage data . get name ( ) ) ; local . set description ( storage data . get description ( ) ) ; write storage data to disk ( local ) ; } } }
for next for comp int ( any val < integer > any , supplier < int stream > stream ) ;
unsorted iter < v > unsorted iter ( ) ;
protected void check accept permission ( access control context acc ) { security manager sm = system . get security manager ( ) ; if ( sm == null ) { return ; } connection handler h = thread connection handler . get ( ) ; if ( h == null ) { throw new error ( str_ ) ; } h . check accept permission ( sm , acc ) ; }
public boolean is scrolling while refreshing enabled ( ) ;
private int check class ( final class reader reader , pattern suppress annotations pattern ) { final string class name = type . get object type ( reader . get class name ( ) ) . get class name ( ) ; final class scanner scanner = new class scanner ( this , forbidden classes , forbidden class patterns , forbidden methods , forbidden fields , suppress annotations pattern , forbid non portable runtime ) ; reader . accept ( scanner , class reader . ski p_ frames ) ; final list < forbidden violation > violations = scanner . get sorted violations ( ) ; final pattern splitter = pattern . compile ( pattern . quote ( forbidden violation . separator ) ) ; for ( final forbidden violation v : violations ) { for ( final string line : splitter . split ( v . format ( class name , scanner . get source file ( ) ) ) ) { logger . error ( line ) ; } } return violations . size ( ) ; }
void update and sync gradle ( ) ;
public void on last item visible ( ) ;
private void start ( ) { if ( m destinations == null || ! m map fragment . is initialised ( ) ) { return ; } if ( ! m is live ) { start tracking ( ) ; } }
public final int increment and get ( ) { for ( ; ; ) { int current = get ( ) ; int next = current + num_ ; if ( compare and set ( current , next ) ) return next ; } }
public static byte buffer create byte buffer ( int size ) { byte buffer buf = byte buffer . allocate direct ( size ) . order ( byte order . native order ( ) ) ; buf . clear ( ) ; if ( track direct memory ) { tracking hash . put ( buf , ref ) ; } return buf ; }
public void grant unit role ( platform user user , user role type role ) ;
int [ ] determine dimensions ( int source code words , int error correction code words ) throws writer exception { float ratio = num_ ; int [ ] dimension = null ; for ( int cols = min cols ; cols <= max cols ; cols ++ ) { int rows = calculate number of rows ( source code words , error correction code words , cols ) ; if ( rows < min rows ) { break ; } if ( rows > max rows ) { continue ; } float new ratio = ( ( num_ * cols + num_ ) * defaul t_ modul e_ width ) / ( rows * height ) ; if ( dimension != null && math . abs ( new ratio - preferre d_ ratio ) > math . abs ( ratio - preferre d_ ratio ) ) { continue ; } ratio = new ratio ; dimension = new int [ ] { cols , rows } ; } if ( dimension == null ) { int rows = calculate number of rows ( source code words , error correction code words , min cols ) ; if ( rows < min rows ) { dimension = new int [ ] { min cols , min rows } ; } } if ( dimension == null ) { throw new writer exception ( str_ ) ; } return dimension ; }
public boolean is default namespace defined ( ) { return this . default namespace != null ; }
public void add server to system ( object name object name , cache server mx bean proxy , federation component new state ) { if ( map of servers != null ) { map of servers . put ( object name , proxy ) ; server set size = map of servers . values ( ) . size ( ) ; } update cache server ( object name , new state , null ) ; }
private void clear notification internal ( ) { notification manager notification manager = ( notification manager ) get system service ( notificatio n_ service ) ; notification manager . cancel ( constants . wea r_ notificatio n_ id ) ; }
public int index of child ( view child ) { final int count = m children count ; final view [ ] children = m children ; for ( int i = num_ ; i < count ; i ++ ) { if ( children [ i ] == child ) { return i ; } } return - num_ ; }
public void close ( ) throws io exception { br . close ( ) ; }
public boolean contains value ( ns object val ) { return val != null && dict . contains value ( val ) ; }
public int compare to ( byte object ) { return compare ( value , object . value ) ; }
public ads add office users query ( vk api client client , user actor actor , int account id , string data ) { super ( client , str_ , boolean . class ) ; access token ( actor . get access token ( ) ) ; account id ( account id ) ; data ( data ) ; }
public long add ( long instant , long value ) { return get duration field ( ) . add ( instant , value ) ; }
public shader var add ( shader var value ) { shader var v = get return type for operation ( m data type , value . get data type ( ) ) ; v . set value ( this . m name + str_ + value . get name ( ) ) ; v . set name ( v . get value ( ) ) ; return v ; }
public static s m_ syste m_ message st r_ skil l_ suc c_ pet order un summon _ m e_ t o_ b ( string skilltarget , string skillname ) { return new s m_ syste m_ message ( num_ , skilltarget , skillname ) ; }
public open int double hash map ( int initial capacity , double min load factor , double max load factor ) { set up ( initial capacity , min load factor , max load factor ) ; }
public synchronized int add ( i audio provider provider ) { providers . add ( provider ) ; return providers . index of ( provider ) ; }
public void paint file chooser background ( synth context context , graphics g , int x , int y , int w , int h ) { paint background ( context , g , x , y , w , h , null ) ; }
public void commit sample ( long sample time us , int flags , long position , int size , byte [ ] encryption key ) { info queue . commit sample ( sample time us , flags , position , size , encryption key ) ; }
public void remove table model listener ( table model listener l ) { listener . remove ( l ) ; }
protected void print pi ( ) throws transcoder exception , xml exception , io exception { char [ ] target = get current value ( ) ; type = scanner . next ( ) ; char [ ] space = { } ; if ( type == lexical units . s ) { space = get current value ( ) ; type = scanner . next ( ) ; } if ( type != lexical units . p i_ data ) { throw fatal error ( str_ , null ) ; } char [ ] data = get current value ( ) ; type = scanner . next ( ) ; if ( type != lexical units . p i_ end ) { throw fatal error ( str_ , null ) ; } output . print pi ( target , space , data ) ; type = scanner . next ( ) ; }
public static string make resource path ( string bucket , string key ) { if ( bucket != null ) { return bucket + str_ + ( key != null ? oss utils . url encode key ( key ) : str_ ) ; } else { return null ; } }
public void write ( byte b ) { check ( num_ ) ; buffer [ write _pos ++ ] = b ; }
public void verify transactions ( ) throws verification exception { if ( transactions . is empty ( ) ) throw new verification exception ( str_ ) ; maybe parse transactions ( ) ; if ( this . get optimal encoding message size ( ) > ma x_ bloc k_ size ) throw new verification exception ( str_ ) ; check transactions ( ) ; check merkle root ( ) ; check sig ops ( ) ; for ( transaction transaction : transactions ) transaction . verify ( ) ; }
void on event ( event event ) ;
public splitter ( boolean vertical , float proportion ) { this ( vertical , proportion , num_ , num_ ) ; }
public void test start fire loop ( ) { string pattern expr = str_ + support bean . class . get name ( ) ; ep statement pattern stmt = ep service . get ep administrator ( ) . create pattern ( pattern expr ) ; pattern stmt . add listener ( new pattern update listener ( ) ) ; pattern stmt . stop ( ) ; pattern stmt . start ( ) ; }
public void put ( final request header . file type file type , final string key , final string value ) { if ( file type == file type . json ) put json ( key , value == null ? str_ : value ) ; else if ( file type == file type . xml ) put xml ( key , value == null ? str_ : value ) ; else put html ( key , value == null ? str_ : value ) ; }
public static string encode bytes ( byte [ ] source ) { string encoded = null ; try { encoded = encode bytes ( source , num_ , source . length , n o_ options ) ; } catch ( java . io . io exception ex ) { assert bool_ : ex . get message ( ) ; } assert encoded != null ; return encoded ; }
public void configure managers m s 1 0 0 ( ) { mode = m s 1 0 0 mode ; tm = new loco net throttled transmitter ( get ln traffic controller ( ) , m turnout extra space ) ; log . debug ( str_ + m turnout extra space ) ; instance manager . store ( super . get power manager ( ) , jmri . power manager . class ) ; instance manager . set turnout manager ( get turnout manager ( ) ) ; instance manager . set light manager ( get light manager ( ) ) ; instance manager . set sensor manager ( get sensor manager ( ) ) ; instance manager . set throttle manager ( super . get throttle manager ( ) ) ; jmri . instance manager . set programmer manager ( get programmer manager ( ) ) ; instance manager . set reporter manager ( get reporter manager ( ) ) ; instance manager . add clock control ( get clock control ( ) ) ; }
public static exception builder not found ( ) { return new exception builder ( status . no t_ found ) ; }
public double [ ] as radians array ( ) { return new double [ ] { this . get latitude ( ) . radians , this . get longitude ( ) . radians } ; }
public selectable regex ( string regex , int group ) ;
public boolean is mark as local supported ( ) { return mark as local supported ; }
public rect f ( float left , float top , float right , float bottom ) { this . left = left ; this . top = top ; this . right = right ; this . bottom = bottom ; }
public void join ( pla point float p _point ) { lx = math . min ( p _point . v _x , lx ) ; ly = math . min ( p _point . v _y , ly ) ; rx = math . max ( rx , p _point . v _x ) ; uy = math . max ( uy , p _point . v _y ) ; double tmp = p _point . v _x - p _point . v _y ; ulx = math . min ( ulx , tmp ) ; lrx = math . max ( lrx , tmp ) ; tmp = p _point . v _x + p _point . v _y ; llx = math . min ( llx , tmp ) ; urx = math . max ( urx , tmp ) ; }
public static long read long ( ) { long x = num_ ; for ( int i = num_ ; i < num_ ; i ++ ) { char c = read char ( ) ; x <<= num_ ; x |= c ; } return x ; }
void cancel pressed ( action event e ) { cancel edit ( ) ; }
public knowledge 2 ( collection < string > nodes ) { for ( string my node : nodes ) { if ( ! check var name ( my node ) ) { throw new illegal argument exception ( str_ + my node ) ; } } for ( string name : nodes ) { add variable ( name ) ; } this . forbidden rules specs = new array list < > ( ) ; this . required rules specs = new array list < > ( ) ; this . knowledge group rules = new hash map < > ( ) ; this . tier specs = new array list < > ( ) ; }
public field config transformation ( field config common data common data , string edit button text , string clear button text ) { super ( common data ) ; this . edit button text = edit button text ; this . clear button text = clear button text ; }
public abstract void fill rect ( double x , double y , double width , double height ) ;
public double compute outside distance ( final distance style distance style , final double x , final double y , final double z ) ;
public boolean is device ( ) { return device . equals ( value ) ; }
public background layer ( ) { this ( image source . from resource ( r . drawable . gov _nasa _worldwind _worldtopobathy 2 0 0 4 0 5 3 ) , new image options ( world wind . rg b _ 5 6 5 ) ) ; }
public void recompose ( stylesheet root root ) { root . recompose attribute sets ( this ) ; }
abstract void update presets ( ) ;
void on ride information loaded ( ) ;
public jdbc connection query ( string query , result set consumer result consumer ) throws sql exception { return query ( query , null , result consumer ) ; }
private void update z values for state ( stack scroll state result state , stack scroll algorithm state algorithm state ) { int child count = algorithm state . visible children . size ( ) ; for ( int i = num_ ; i < child count ; i ++ ) { view child = algorithm state . visible children . get ( i ) ; stack scroll state . view state child view state = result state . get view state for view ( child ) ; if ( i < algorithm state . items in top stack ) { float stack index = algorithm state . items in top stack - i ; stack index = math . min ( stack index , ma x_ item s_ i n_ to p_ stack + num_ ) ; if ( i == num_ && algorithm state . items in top stack < num_ ) { stack index -= num_ ; if ( algorithm state . scroll y > m collapsed size ) { stack index = num_ + stack index * num_ ; } } child view state . z translation = m z basic height + stack index * m z distance between elements ; } else if ( i > ( child count - num_ - algorithm state . items in bottom stack ) ) { float num items above = i - ( child count - num_ - algorithm state . items in bottom stack ) ; float translation z = m z basic height - num items above * m z distance between elements ; child view state . z translation = translation z ; } else { child view state . z translation = m z basic height ; } } }
public static void f ( string msg ) { if ( ! allow wtf ) return ; stack trace element caller = get caller stack trace element ( ) ; string tag = generate tag ( caller ) ; if ( s level > leve l_ fatal ) { return ; } log . wtf ( tag , msg ) ; }
public url validator ( regex validator authority validator , long options ) { this ( null , authority validator , options ) ; }
int count ( ) ;
protected string [ ] split into multiple lines ( string text ) { return text . replace ( str_ , str_ ) . split ( str_ ) ; }
public void remove channel ( you tube channel channel ) { remove channel ( channel . get id ( ) ) ; }
private void push ( string input , int pos , int limit , boolean add trailing slash , boolean already encoded ) { string segment = canonicalize ( input , pos , limit , pat h_ segmen t_ encod e_ set , already encoded , bool_ , bool_ ) ; if ( is dot ( segment ) ) { return ; } if ( is dot dot ( segment ) ) { pop ( ) ; return ; } if ( encoded path segments . get ( encoded path segments . size ( ) - num_ ) . is empty ( ) ) { encoded path segments . set ( encoded path segments . size ( ) - num_ , segment ) ; } else { encoded path segments . add ( segment ) ; } if ( add trailing slash ) { encoded path segments . add ( str_ ) ; } }
public notification chain basic set statement ( statement new statement , notification chain msgs ) { statement old statement = statement ; statement = new statement ; if ( e notification required ( ) ) { e notification impl notification = new e notification impl ( this , notification . set , n4 js package . labelle d_ statemen t _ _ statement , old statement , new statement ) ; if ( msgs == null ) msgs = notification ; else msgs . add ( notification ) ; } return msgs ; }
public static string encode to string ( byte [ ] input , int offset , int len , int flags ) { try { return new string ( encode ( input , offset , len , flags ) , str_ ) ; } catch ( unsupported encoding exception e ) { throw new assertion error ( e ) ; } }
public boolean defines scale grid ( ) { return defines scale grid ; }
private boolean is ascii digit ( char c ) { return ( c >= str_ && c <= str_ ) ; }
public playlist data source ( play music manager play music manager ) { super ( play music manager ) ; }
public sub resource collection is read only ( final boolean read only ) { is read only = read only ; return this ; }
int update by primary key ( teams record ) ;
private void add ( action action , presentation factory presentation factory ) { presentation presentation = presentation factory . get presentation ( action ) ; if ( action instanceof action group ) { action group group = ( action group ) action ; table . set text ( num_ , menu bar items . size ( ) , presentation . get text ( ) ) ; element element = table . get cell formatter ( ) . get element ( num_ , menu bar items . size ( ) ) ; menu bar item item = new menu bar item ( group , action manager , manager provider , presentation factory , element , this , key binding agent , resources . menu css ( ) ) ; item . on mouse out ( ) ; menu bar items . put ( element , item ) ; action 2bar item . put ( group , item ) ; } else if ( action instanceof custom component action ) { widget widget = ( ( custom component action ) action ) . create custom component ( presentation ) ; table . set widget ( num_ , menu bar items . size ( ) , widget ) ; element element = table . get cell formatter ( ) . get element ( num_ , menu bar items . size ( ) ) ; menu bar items . put ( element , null ) ; } }
protected void init ( string owner , method node m ) throws analyzer exception { }
public static float matrix zeros ( int rows , int columns ) { return new float matrix ( rows , columns ) ; }
public static < t > aggregate < map < string , concept > , map < concept , t > > group ( string var name , aggregate < ? super map < string , concept > , t > inner aggregate ) { return new group aggregate < > ( var name , inner aggregate ) ; }
public final void write boolean ( boolean val ) throws io exception { out . write ( val ? num_ : num_ ) ; written ++ ; }
public ns date ( byte [ ] bytes ) { this ( bytes , num_ , bytes . length ) ; }
public static remote display listen ( string iface , listener listener , handler handler ) { if ( iface == null ) { throw new illegal argument exception ( str_ ) ; } if ( listener == null ) { throw new illegal argument exception ( str_ ) ; } if ( handler == null ) { throw new illegal argument exception ( str_ ) ; } remote display display = new remote display ( listener , handler ) ; display . start listening ( iface ) ; return display ; }
void string conversion ( converter converter , string expected , object value ) { string value type = ( value == null ? str_ : value . get class ( ) . get name ( ) ) ; string msg = str_ + value type + str_ + value + str_ ; try { object result = converter . convert ( string . class , value ) ; class < ? > result type = ( result == null ? null : result . get class ( ) ) ; class < ? > expect type = ( expected == null ? null : expected . get class ( ) ) ; assert equals ( str_ + msg , expect type , result type ) ; assert equals ( str_ + msg , expected , result ) ; } catch ( exception ex ) { fail ( msg + str_ + ex . to string ( ) ) ; } }
public void run test ( ) throws throwable { document doc ; node list name list ; node child ; node last child ; string data ; int node type ; doc = ( document ) load ( str_ , bool_ ) ; name list = doc . get elements by tag name ( str_ ) ; child = name list . item ( num_ ) ; last child = child . get last child ( ) ; node type = ( int ) last child . get node type ( ) ; assert equals ( str_ , num_ , node type ) ; data = ( ( character data ) last child ) . get data ( ) ; assert equals ( str_ , str_ , data ) ; }
protected static string [ ] copy and sort ( string [ ] input ) { string [ ] result = new string [ input . length ] ; system . arraycopy ( input , num_ , result , num_ , input . length ) ; arrays . sort ( result ) ; return result ; }
public file operation ( file object file ) { this . object file = object file ; }
void on stop ( final file alteration observer observer ) ;
public refactoring status check new element name ( string new name ) throws core exception ;
public void add bin ( simple histogram bin bin ) { iterator iterator = this . bins . iterator ( ) ; while ( iterator . has next ( ) ) { simple histogram bin existing bin = ( simple histogram bin ) iterator . next ( ) ; if ( bin . overlaps with ( existing bin ) ) { throw new runtime exception ( str_ ) ; } } this . bins . add ( bin ) ; collections . sort ( this . bins ) ; }
private void initialize ( ) { this . set layout ( new border layout ( ) ) ; this . set size ( num_ , num_ ) ; this . add ( get j split pane ( ) , java . awt . border layout . center ) ; }
public final coords translated ( int dir ) { return translated ( dir , num_ ) ; }
public location uuid filter ( location tree tree ) { this ( tree , tree == null ? null : tree . get root ( ) ) ; }
public static final jip number create ( final int n ) { return new jip number ( expression . create number ( n ) ) ; }
public abstract boolean release ( dtm dtm , boolean should hard delete ) ;
public void step ( ) { step counter = num_ ; step size multiplier = num_ ; }
public chaining json writer pretty print ( boolean pretty print ) { this . pretty print = pretty print ; return this ; }
public static void add class loaded monitor ( class loaded monitor cb ) { synchronized ( class loaded lock ) { if ( trac e_ addmonitor || trac e_ classloaded ) { vm . sys write ( str_ ) ; vm . sys write ( get class ( cb ) ) ; vm . sys write ( str_ ) ; } class loaded callbacks = new callback list ( cb , class loaded callbacks ) ; } }
t process ( formula node node ) ;
public int buffer size ( ) { return buffer size ; }
public async result set publishing mode async ( request header request header , boolean publishing enabled , unsigned integer ... subscription ids ) { set publishing mode request req = new set publishing mode request ( request header , publishing enabled , subscription ids ) ; return channel . service request async ( req ) ; }
public static void main ( final string [ ] args ) { dom test case . do main ( elementhasattribute 0 3 . class , args ) ; }
public static script query builder script query ( script script ) { return new script query builder ( script ) ; }
protected abstract void execute lifecycle method after init ( t bean , string beanname ) throws exception ;
public string create node ( final string path , final boolean watch , final boolean ephimeral ) { string created node path = null ; try { final stat node stat = zoo keeper . exists ( path , watch ) ; if ( node stat == null ) { created node path = zoo keeper . create ( path , new byte [ num_ ] , ids . ope n_ ac l_ unsafe , ( ephimeral ? create mode . ephemera l_ sequential : create mode . persistent ) ) ; } else { created node path = path ; } } catch ( keeper exception | interrupted exception e ) { throw new illegal state exception ( e ) ; } return created node path ; }
public void enable debug logging ( boolean enable , string tag ) { check not disposed ( ) ; m debug log = enable ; m debug tag = tag ; }
public static final string trim front ( string str ) { int position = num_ ; while ( ( position < str . length ( ) ) && character . is whitespace ( str . char at ( position ) ) ) { position ++ ; } return str . substring ( position , str . length ( ) ) ; }
person group [ ] list person groups ( ) throws client exception , io exception ;
public void start ( ) { if ( m native precache launcher == num_ ) { m native precache launcher = native init ( ) ; } native start ( m native precache launcher ) ; }
public hypervolume fitness evaluator ( problem problem ) { super ( problem ) ; }
public cmu diphone voice ( ) { this ( null , null , null , null , null , null , null , null , null ) ; }
protected void draw tick marks vertical ( graphics 2 d g 2 , axis state state , rectangle 2 d data area , rectangle edge edge ) { }
public static byte [ ] to seed ( list < string > words , string passphrase ) { string pass = utils . join ( words ) ; string salt = str_ + passphrase ; final stopwatch watch = stopwatch . create started ( ) ; byte [ ] seed = pbkd f2 sh a 5 1 2 . derive ( pass , salt , pbkd f 2 _ rounds , num_ ) ; watch . stop ( ) ; log . info ( str_ , watch ) ; return seed ; }
void on cancellation ( ) ;
public j check box menu item create j check box menu item ( string name ) throws missing resource exception , resource format exception , missing listener exception { return create j check box menu item ( name , null ) ; }
public abstract void initialize texture size ( basic texture texture , int format , int type ) ;
public void remove header ( header header ) { if ( header == null ) { return ; } headers . remove ( header ) ; }
public static string [ ] split protocol ( string packet ) { string _partitioning packet [ ] = packet . split ( settings . s receiver split protocol token ) ; for ( int i = num_ ; i < _partitioning packet . length - num_ ; i ++ ) { _partitioning packet [ i ] = _partitioning packet [ i + num_ ] ; } _partitioning packet [ _partitioning packet . length - num_ ] = null ; return _partitioning packet ; }
public boolean offer last ( e e ) { add last ( e ) ; return bool_ ; }
static void self interrupt ( ) { thread . current thread ( ) . interrupt ( ) ; }
private void configure set copy destination menu item ( final menu item item ) { if ( m item . file != null ) { item . set visible ( bool_ ) ; } else { item . set visible ( bool_ ) ; item . set checked ( bool_ ) ; if ( get copy prefs ( ) . get string ( cop y_ destinatio n_ pre f_ key , null ) != null ) { item . set checked ( bool_ ) ; } } }
public str builder delete char at ( final int index ) { if ( index < num_ || index >= size ) { throw new string index out of bounds exception ( index ) ; } delete impl ( index , index + num_ , num_ ) ; return this ; }
boolean is successful ( ) { return success ; }
public object remove ( object old instance ) { expression exp = bindings . remove ( old instance ) ; return get value ( exp ) ; }
public update request add ( final solr input document doc , integer commit within ) { return add ( doc , commit within , null ) ; }
public parse exception ( final string message ) { this ( - num_ , - num_ , message ) ; }
protected void save selection detail ( ) { }
int pool size ( ) ;
static preference screen inflate from resource ( preference manager manager , activity activity , int res id , preference screen screen ) { try { method m = preference manager . class . get declared method ( str_ , context . class , int . class , preference screen . class ) ; m . set accessible ( bool_ ) ; preference screen pref screen = ( preference screen ) m . invoke ( manager , activity , res id , screen ) ; return pref screen ; } catch ( exception e ) { log . w ( tag , str_ , e ) ; } return null ; }
public void test serialize writable without id ( ) { serializer serializer = new serializer ( ) . register ( test catalyst serializable . class , num_ ) . register ( test pojo with serializer . class , test serializer . class ) ; test catalyst serializable writable = new test catalyst serializable ( ) ; writable . primitive = num_ ; test pojo with serializer pojo = new test pojo with serializer ( ) ; pojo . primitive = num_ ; pojo . object = null ; pojo . string = str_ ; writable . object = pojo ; writable . string = str_ ; buffer buffer = serializer . write object ( writable ) . flip ( ) ; test catalyst serializable result = serializer . read object ( buffer ) ; assert equals ( result . primitive , num_ ) ; assert equals ( ( ( test pojo with serializer ) result . object ) . primitive , num_ ) ; assert null ( ( ( test pojo with serializer ) result . object ) . object ) ; assert equals ( ( ( test pojo with serializer ) result . object ) . string , str_ ) ; assert equals ( result . string , str_ ) ; }
void to file ( file file ) ;
public boolean is empty ( ) { return ! iterator ( ) . has next ( ) ; }
public void check warnings ( ) { }
public void property change ( property change event evt ) { string prop = evt . get property name ( ) ; if ( str_ . equals ( prop ) || str_ . equals ( prop ) || str_ . equals ( prop ) ) { _modified = bool_ ; } }
public < t > boolean is provided for ( class < t > service ) { synchronized ( providers ) { return providers . contains key ( service ) ; } }
private string enhance message ( string message ) { stack trace element [ ] stack trace = new exception ( ) . get stack trace ( ) ; stack trace element elem = stack trace [ num_ ] ; string class name = elem . get class name ( ) ; string method name = elem . get method name ( ) ; string file name = elem . get file name ( ) ; int line number = elem . get line number ( ) ; string new message = class name + str_ + method name + str_ + file name + str_ + line number + str_ + message + str_ ; return new message ; }
public string to string ( ) { int array list the keys = keys ( ) ; string buffer buf = new string buffer ( ) ; buf . append ( str_ ) ; int max index = the keys . size ( ) - num_ ; for ( int i = num_ ; i <= max index ; i ++ ) { int key = the keys . get ( i ) ; buf . append ( string . value of ( key ) ) ; buf . append ( str_ ) ; buf . append ( string . value of ( get ( key ) ) ) ; if ( i < max index ) buf . append ( str_ ) ; } buf . append ( str_ ) ; return buf . to string ( ) ; }
public string global info ( ) { return str_ + str_ + str_ ; }
public pki message ( pki header header , pki body body , der bit string protection , cmp certificate [ ] extra certs ) { this . header = header ; this . body = body ; this . protection = protection ; if ( extra certs != null ) { as n1 encodable vector v = new as n1 encodable vector ( ) ; for ( int i = num_ ; i < extra certs . length ; i ++ ) { v . add ( extra certs [ i ] ) ; } this . extra certs = new der sequence ( v ) ; } }
public byte [ ] read byte array ( final int items ) throws io exception { return _read array ( items , null ) ; }
public native string column _string ( int col ) throws sq lite . exception ;
public void do get ( http servlet request request , http servlet response response ) throws servlet exception , io exception { request . get session ( ) . set attribute ( str_ , str_ ) ; response . send redirect ( str_ ) ; return ; }
public void add discover info to ( discover info response ) { response . add identities ( get identities ( ) ) ; synchronized ( features ) { for ( iterator < string > it = get features ( ) ; it . has next ( ) ; ) { response . add feature ( it . next ( ) ) ; } response . add extension ( extended info ) ; } }
void start guarded block checking ( ) ;
public void stage ( char [ ] buff , int offset , int length ) throws sax exception ;
public abstract string to string ( ) ;
void recompose decimal formats ( decimal format properties dfp ) { decimal format symbols old dfs = ( decimal format symbols ) m _decimal format symbols . get ( dfp . get name ( ) ) ; if ( null == old dfs ) { m _decimal format symbols . put ( dfp . get name ( ) , dfp . get decimal format symbols ( ) ) ; } else if ( ! dfp . get decimal format symbols ( ) . equals ( old dfs ) ) { string themsg ; if ( dfp . get name ( ) . equals ( new q name ( str_ ) ) ) { themsg = xsl messages . create warning ( xslt error resources . w g_ on e_ defaul t_ xsldecimalforma t_ allowed , new object [ num_ ] ) ; } else { themsg = xsl messages . create warning ( xslt error resources . w g_ xsldecimalforma t_ name s_ mus t_ b e_ unique , new object [ ] { dfp . get name ( ) } ) ; } error ( themsg ) ; } }
public void append to body ( string text ) { body . append ( text ) ; }
private void log usage ( final player player , final rp object object ) { string name = object . get ( str_ ) ; if ( object . has ( str_ ) ) { name = object . get ( str_ ) ; } string infostring = str_ ; if ( object . has ( str_ ) ) { infostring = object . get ( str_ ) ; } new game event ( player . get name ( ) , use , name , infostring ) . raise ( ) ; }
public users get followers query ( vk api client client ) { super ( client , str_ , get followers response . class ) ; }
public map < string , result > to map ( ) { return new hash map < > ( request results ) ; }
public static range < long > value of long ( string str ) { return range . value of ( str , null ) ; }
public static void convert to binary ( file in , file out ) throws io exception , parser configuration exception , parse exception , sax exception , property list format exception { ns object root = parse ( in ) ; save as binary ( root , out ) ; }
public static xml object writer new instance ( output stream out ) throws xml stream exception { xml object writer writer = new xml object writer ( ) ; writer . set output ( out ) ; return writer ; }
protected void check child type ( node n , boolean replace ) { switch ( n . get node type ( ) ) { case tex t_ node : case entit y_ referenc e_ node : case documen t_ fragmen t_ node : break ; default : throw create dom exception ( dom exception . hierarch y_ reques t_ err , str_ , new object [ ] { new integer ( get node type ( ) ) , get node name ( ) , new integer ( n . get node type ( ) ) , n . get node name ( ) } ) ; } }
public dl add element ( string hashcode , string element ) { add element to registry ( hashcode , element ) ; return ( this ) ; }
public fo response < fo auth token result > local register ( fo register request request ) ;
public static file convert to relative path ( file absolute ) throws exception { file result ; string file str ; result = null ; if ( file . separator . equals ( str_ ) ) { try { file str = absolute . get path ( ) ; file str = file str . substring ( num_ , num_ ) . to lower case ( ) + file str . substring ( num_ ) ; result = create relative path ( new file ( file str ) ) ; } catch ( exception e ) { result = create relative path ( absolute ) ; } } else { result = create relative path ( absolute ) ; } return result ; }
public void on refresh ( final pull to refresh base < v > refresh view ) ;
public string global info ( ) { return str_ + str_ + str_ ; }
public shape triangle _down ( float x , float y , float height ) { m _path . reset ( ) ; m _path . move to ( x , y ) ; m _path . line to ( x + height , y ) ; m _path . line to ( x + height / num_ , ( y + height ) ) ; m _path . close path ( ) ; return m _path ; }
public void draw ( shape s ) { shape shape = ( ( shape transformer ) transformer ) . transform ( s ) ; delegate . draw ( shape ) ; }
public static set delim string to set ( string str , string delimiter ) { set val set = new hash set ( ) ; string tokenizer st = new string tokenizer ( str , delimiter ) ; while ( st . has more tokens ( ) ) { val set . add ( st . next token ( ) . trim ( ) ) ; } return val set ; }
public delete response protocol op ( int result code , localizable message error message ) { this . result code = result code ; this . error message = error message ; }
public static final string remove query string ( final string path ) { return path . replace first ( str_ , string utils . empty ) ; }
public void add feedback ( string url , boolean sem ) throws uri syntax exception { uri uri = new uri ( url ) ; add feedback ( uri , sem ) ; }
private void append to end ( map < string , psi method > sorted methods ) { for ( psi method method : sorted methods . values ( ) ) { m psi class . add ( method ) ; } }
public data object query by tag ( uri openstack id , storage os user user , class < ? extends data object > block ) { uri vipr _tenant id = uri . create ( user . get tenant id ( ) ) ; uri query result list uris = new uri query result list ( ) ; _db client . query by constraint ( prefix constraint . factory . get tags prefix constraint ( block , openstack id . to string ( ) , vipr _tenant id ) , uris ) ; if ( uris != null ) { while ( uris . iterator ( ) . has next ( ) ) { uri block uri = uris . iterator ( ) . next ( ) ; data object block object = _db client . query object ( block , block uri ) ; if ( block object != null ) { return block object ; } } } return null ; }
public static int csns ( int nb fields ) { return csn . byt e_ encodin g_ length * nb fields ; }
public boolean can get float ( ) { return can get ( float . class ) ; }
public static boolean is invalid ( int c ) { return ! is valid ( c ) ; }
protected abstract t find related candidate ( transport address related address ) ;
public void on response ( t response ) ;
segment < k , v > segment for ( int hash ) { return segments [ ( hash > > > segment shift ) & segment mask ] ; }
public static boolean is x serializable ( class < ? > clazz ) { if ( x serializable . class . is assignable from ( clazz ) ) return bool_ ; for ( class < ? > explicitx : s _xserializable ) if ( explicitx . is assignable from ( clazz ) ) return bool_ ; return bool_ ; }
public void commit ( ) throws io exception { if ( has errors ) { complete edit ( this , bool_ ) ; remove ( entry . key ) ; } else { complete edit ( this , bool_ ) ; } }
public c usurf object ( ) { }
public static persistent search request control new control ( final boolean is critical , final boolean changes only , final boolean return e cs , final collection < persistent search change type > change types ) { reject . if null ( change types ) ; final set < persistent search change type > copy of change types = enum set . none of ( persistent search change type . class ) ; copy of change types . add all ( change types ) ; return new persistent search request control ( is critical , changes only , return e cs , collections . unmodifiable set ( copy of change types ) ) ; }
private void update database ( int from database version , sq lite database db ) throws sq lite exception { try { while ( from database version < databas e_ version ) { switch ( from database version ) { case num_ : update database from 6 ( db ) ; break ; } from database version ++ ; } log . d ( tag , str_ ) ; } catch ( sq lite exception exc ) { log . e ( tag , str_ ) ; throw exc ; } }
protected void write session ( session session ) throws io exception { if ( store == null || ! session . is valid ( ) ) { return ; } try { if ( security util . is package protection enabled ( ) ) { try { access controller . do privileged ( new privileged store save ( session ) ) ; } catch ( privileged action exception ex ) { exception exception = ex . get exception ( ) ; if ( exception instanceof io exception ) { throw ( io exception ) exception ; } log . error ( str_ + exception , exception ) ; } } else { store . save ( session ) ; } } catch ( io exception e ) { log . error ( sm . get string ( str_ , session . get id internal ( ) , e ) ) ; throw e ; } }
public void unregister ( v card property scribe < ? extends v card property > scribe ) { extended by name . remove ( scribe . get property name ( ) . to upper case ( ) ) ; extended by class . remove ( scribe . get property class ( ) ) ; extended by q name . remove ( scribe . get q name ( ) ) ; }
static void drop 4 ( file descriptor fd , int group , int interf , int source ) throws io exception { join or drop 4 ( bool_ , fd , group , interf , source ) ; }
public static location locate largest ( double [ ] [ ] a ) { return new location ( a ) ; }
public depth button ( string text ) { super ( text ) ; set content area filled ( bool_ ) ; }
public static migration rest rep map ( final migration from ) { if ( from == null ) { return null ; } migration rest rep to = new migration rest rep ( ) ; db object mapper . map data object fields ( from , to ) ; to . set volume ( db object mapper . to related resource ( resource type enum . volume , from . get volume ( ) ) ) ; to . set source ( db object mapper . to related resource ( resource type enum . volume , from . get source ( ) ) ) ; to . set target ( db object mapper . to related resource ( resource type enum . volume , from . get target ( ) ) ) ; to . set start time ( from . get start time ( ) ) ; to . set percentage done ( from . get percent done ( ) ) ; to . set status ( from . get migration status ( ) ) ; return to ; }
private char property char property node for ( string name ) { char property p = char property names . char property for ( name ) ; if ( p == null ) throw error ( str_ + name + str_ ) ; return p ; }
void delete ( mindmaps graph graph , concept concept ) throws illegal state exception ;
public void put ( int ii , int jj , z a ) { dirty = bool_ ; re [ ii - basex ] [ jj - basex ] = a . re ; im [ ii - basex ] [ jj - basex ] = a . im ; }
public tab showing action show ( final tab tab to show , final lml tabbed pane listener listener ) { this . tab to show = tab to show ; this . listener = listener ; shown = bool_ ; return this ; }
public object put ( object key , object value ) { entry t = root ; if ( t == null ) { increment size ( ) ; root = new entry ( key , value , null ) ; return null ; } while ( bool_ ) { int cmp = compare ( key , t . key ) ; if ( cmp == num_ ) { return t . set value ( value ) ; } else if ( cmp < num_ ) { if ( t . left != null ) { t = t . left ; } else { increment size ( ) ; t . left = new entry ( key , value , t ) ; fix after insertion ( t . left ) ; return null ; } } else { if ( t . right != null ) { t = t . right ; } else { increment size ( ) ; t . right = new entry ( key , value , t ) ; fix after insertion ( t . right ) ; return null ; } } } }
public event producer task ( event producer generator , thl thl ) { this . producer = generator ; this . thl = thl ; }
public url image parser ( context context , text view text view , string cookie , string referer ) { this . context = context ; this . text view = text view ; this . cookie = cookie ; this . referer = referer ; }
public void test poll ( ) { stored queue . clear ( ) ; assert true ( stored queue . is empty ( ) ) ; populated queue ( size , stored queue ) ; for ( int i = size - num_ ; i >= num_ ; i -- ) { system . out . println ( str_ + i ) ; assert equals ( i , integer . parse int ( stored queue . poll ( ) ) ) ; } assert null ( stored queue . poll ( ) ) ; }
public boolean is consistent ( datapath id old sw , of port old port , datapath id new sw , of port new port , boolean tunnel enabled ) ;
private void add default uri ( ) throws ignite spi exception { assert uri encoded list != null ; uri uri ; try { uri = u . resolve work directory ( dfl t_ deplo y_ dir , bool_ ) . to uri ( ) ; } catch ( ignite checked exception e ) { throw new ignite spi exception ( str_ , e ) ; } uri encoded list . add ( uri ) ; }
public ignite product version minimum node version ( affinity topology version top ver ) { ignite pair < ignite product version > vers = node vers . get ( top ver ) ; return vers == null ? cctx . local node ( ) . version ( ) : vers . get 1 ( ) ; }
public void reject document ( n gram document d doc ) { document n gram graph g graph = d doc . get document graph ( ) . intersect graph ( get document graph ( ) ) ; document n gram histogram h histogram = d doc . get document histogram ( ) . intersect histogram ( get document histogram ( ) ) ; get document graph ( ) . degrade ( g graph ) ; }
public boolean is remote ( ) { return ! is local ( ) ; }
public simple constant ( string name , string string value , string annotation , boolean invisible ) { this ( name , string value , annotation ) ; this . invisible = invisible ; }
public static byte [ ] custom message row key ( h base id mailbox uid , message uid value ) { return bytes . add ( mailbox uid . to bytes ( ) , bytes . to bytes ( value . as long ( ) ) ) ; }
public onvif device ( string host ip ) throws connect exception , soap exception { this ( host ip , null , null ) ; }
void delete data values ( organisation unit organisation unit ) ;
public void put important ( int i , boolean b ) { if ( b ) masks [ i ] |= importan t_ mask ; else masks [ i ] &= ~ importan t_ mask ; }
public static s m_ syste m_ message st r_ unio n_ can t_ invit e_ whe n_ h e_ i s_ aske d_ question ( string value 0 ) { return new s m_ syste m_ message ( num_ , value 0 ) ; }
public static int write ( sequence in , int type , file out ) throws io exception { list providers = get midi file writers ( ) ; int bytes written = - num_ ; for ( int i = num_ ; i < providers . size ( ) ; i ++ ) { midi file writer writer = ( midi file writer ) providers . get ( i ) ; if ( writer . is file type supported ( type , in ) ) { bytes written = writer . write ( in , type , out ) ; break ; } } if ( bytes written == - num_ ) { throw new illegal argument exception ( str_ ) ; } return bytes written ; }
boolean include ( final pojo class pojo class ) ;
public final void println ( boolean b ) throws io exception { println ( b ? str_ : str_ ) ; }
private void unlock focus ( ) { try { m preview request builder . set ( capture request . contro l_ a f_ trigger , camera metadata . contro l_ a f_ trigge r_ cancel ) ; set auto flash ( m preview request builder ) ; m capture session . capture ( m preview request builder . build ( ) , m capture callback , m background handler ) ; m state = stat e_ preview ; m capture session . set repeating request ( m preview request , m capture callback , m background handler ) ; } catch ( camera access exception e ) { e . print stack trace ( ) ; } }
public static void assert contents in order ( iterable < ? > actual , object ... expected ) { assert contents in order ( ( string ) null , actual , expected ) ; }
public static column from ord ( int i ) { if ( ( i < num_ ) || ( i >= column . values ( ) . length ) ) { throw new index out of bounds exception ( str_ ) ; } return column . values ( ) [ i ] ; }
public file status context ( i file file , i region region ) { assert . is not null ( file ) ; f file = file ; f source region = region ; }
public void add divider ( image view v ) { relative layout . layout params divider params = new relative layout . layout params ( layout params . fil l_ parent , layout params . wra p_ content ) ; if ( m image view != null ) { divider params . add rule ( relative layout . below , m image view . get id ( ) ) ; } else if ( m missing image != null ) { divider params . add rule ( relative layout . below , m missing image . get id ( ) ) ; } else if ( m video button != null ) { divider params . add rule ( relative layout . below , m video button . get id ( ) ) ; } else if ( m audio button != null ) { divider params . add rule ( relative layout . below , m audio button . get id ( ) ) ; } else if ( m view _ text != null ) { divider params . add rule ( relative layout . below , m view _ text . get id ( ) ) ; } else { log . e ( t , str_ ) ; return ; } add view ( v , divider params ) ; }
public library exception ( final throwable cause ) { super ( cause ) ; ql . error ( this ) ; }
public static boolean is compatible ( tree tree , set < set < string > > clades ) { return is compatible ( tree , tree . get root ( ) , null , clades ) ; }
public static byte [ ] read file ( file file ) throws io exception { int length = ( int ) file . length ( ) ; byte [ ] b = new byte [ length ] ; file input stream fis = null ; try { fis = new file input stream ( file ) ; while ( length > num_ ) { length -= fis . read ( b , b . length - length , length ) ; } return b ; } finally { fis . close ( ) ; } }
public boolean is closed ( ) { return journal writer == null ; }
public output device assigned ( string device name , locale locale ) { super ( device name , locale ) ; }
public void create router configuration ( string cluster name ) throws configuration exception { string router config file name = get module properties file name ( configuration constants . t r_ properties , get cluster home ( ) ) ; file router config file = new file ( router config file name ) ; if ( router config file . exists ( ) ) { logger . debug ( string . format ( str_ , router config file name ) ) ; return ; } router configuration config = new router configuration ( null ) ; config . set cluster home ( get cluster home ( ) ) ; config . set host ( configuration constants . t r_ rm i_ defaul t_ host ) ; array list < string > al = new array list < string > ( ) ; al . add ( str_ ) ; config . set manager list ( al ) ; tungsten properties config props = new tungsten properties ( ) ; config props . extract properties ( config , bool_ ) ; logger . debug ( str_ + router config file name + str_ ) ; logger . debug ( str_ + config props ) ; config . store ( config props , router config file name ) ; }
public static void compute _nullability ( ) throws internal _error { boolean change = bool_ ; non _terminal nt ; enumeration e ; production prod ; while ( change ) { change = bool_ ; for ( e = all ( ) ; e . has more elements ( ) ; ) { nt = ( non _terminal ) e . next element ( ) ; if ( ! nt . nullable ( ) ) { if ( nt . looks _nullable ( ) ) { nt . _nullable = bool_ ; change = bool_ ; } } } } for ( e = production . all ( ) ; e . has more elements ( ) ; ) { prod = ( production ) e . next element ( ) ; prod . set _nullable ( prod . check _nullable ( ) ) ; } }
public static void describe shape detail ( shape shape ) { describe shape detail ( shape , num_ ) ; }
public grid bag layout ( ) { comptable = new hashtable < component , grid bag constraints > ( ) ; default constraints = new grid bag constraints ( ) ; }
public static boolean validate ( subscription current , subscription next ) { objects . require non null ( next , str_ ) ; if ( current != null ) { next . cancel ( ) ; return bool_ ; } return bool_ ; }
public void cure players ( ) { for ( team t : team list ) { t . cure players ( ) ; } }
public void invert ( ) { for ( int i = num_ ; i < m _ selected . length ; i ++ ) { m _ selected [ i ] = ! m _ selected [ i ] ; } fire table rows updated ( num_ , m _ selected . length ) ; }
public zip error ( string s ) { super ( s ) ; }
public int count ( i template holder template , string [ ] sub classes ) throws sa exception { return num_ ; }
public void register message recipient ( int message type , message recipient < ? extends message > recipient ) { message recipients . put ( message type , recipient ) ; }
json object to json ( set < string > property keys ) throws json exception ;
private static long convert by weekyear ( final long instant , chronology from , chronology to ) { long new instant ; new instant = to . weekyear ( ) . set ( num_ , from . weekyear ( ) . get ( instant ) ) ; new instant = to . week of weekyear ( ) . set ( new instant , from . week of weekyear ( ) . get ( instant ) ) ; new instant = to . day of week ( ) . set ( new instant , from . day of week ( ) . get ( instant ) ) ; new instant = to . millis of day ( ) . set ( new instant , from . millis of day ( ) . get ( instant ) ) ; return new instant ; }
public string name ( ) { return name ; }
public void x mid y mid ( ) throws parse exception { align = svg preserve aspect ratio . sv g_ preserveaspectrati o_ xmidymid ; }
public void cancel ( ) { m canceled = bool_ ; if ( m dispatcher != null ) { m dispatcher . cancel ( this ) ; m dispatcher = null ; } }
public void write ( output stream stream , object o ) throws exception { to xml ( o ) . write ( stream ) ; }
public static double stddevp ( double [ ] a ) { return math . sqrt ( varp ( a ) ) ; }
public multi match query builder lenient ( boolean lenient ) { this . lenient = lenient ; return this ; }
public boolean has i pv 4 address ( ) { for ( link address address : m link addresses ) { if ( address . get address ( ) instanceof inet 4 address ) { return bool_ ; } } return bool_ ; }
public string render ( final map < string , pcj metadata > metadata ) throws exception { check not null ( metadata ) ; final string builder formatted = new string builder ( ) ; for ( final entry < string , pcj metadata > entry : metadata . entry set ( ) ) { final string formatted query = render ( entry . get key ( ) , entry . get value ( ) ) ; formatted . append ( formatted query ) . append ( str_ ) ; } return formatted . to string ( ) ; }
public static void add app complete monitor ( app complete monitor cb ) { synchronized ( app complete lock ) { if ( trac e_ addmonitor || trac e_ ap p_ complete ) { vm . sys write ( str_ ) ; vm . sys write ( get class ( cb ) ) ; vm . sys write ( str_ ) ; } app complete callbacks = new callback list ( cb , app complete callbacks ) ; } }
public static intent create intent for settings page ( context context , string fragment name ) { intent intent = new intent ( ) ; intent . set class ( context , preferences . class ) ; if ( ! ( context instanceof activity ) ) { intent . add flags ( intent . fla g_ activit y_ ne w_ task ) ; intent . add flags ( intent . fla g_ activit y_ clea r_ top ) ; } if ( fragment name != null ) { intent . put extra ( preferences . extr a_ sho w_ fragment , fragment name ) ; intent . put extra ( preferences . extr a_ displa y_ hom e_ a s_ up , bool_ ) ; } return intent ; }
public static boolean is mesh ( string data ) { return data . contains ( str_ ) ; }
void move methods into classes ( class member declaration declaration ) { node class members = declaration . class node . get last child ( ) ; string field name = declaration . member name ; declaration . expr root . detach from parent ( ) ; declaration . rhs . detach from parent ( ) ; node member func = ir . member function def ( field name , declaration . rhs ) ; member func . set static member ( declaration . is static ) ; member func . set js doc info ( declaration . js doc ) ; if ( declaration . class node . get token ( ) == token . interface ) { node body = declaration . rhs . get last child ( ) ; preconditions . check state ( body . is block ( ) ) ; if ( body . get child count ( ) != num_ ) { compiler . report ( js error . make ( declaration . rhs , gents error manager . gent s_ clas s_ pas s_ error , string . format ( str_ , declaration . member name ) ) ) ; } declaration . rhs . replace child ( body , new node ( token . empty ) ) ; } class members . add child to back ( member func ) ; node comments . move comment ( declaration . expr root , member func ) ; compiler . report code change ( ) ; }
public static < t extends number > function < t > add ( object ... args ) { return new math function < > ( math operator . plus , args ) ; }
public static field make field modifiable ( string field , class clazz ) throws no such field exception , illegal access exception { try { field field instance = get field ( field , clazz ) ; field instance . set accessible ( bool_ ) ; int modifiers = field instance . get modifiers ( ) ; field modifier field = field instance . get class ( ) . get declared field ( str_ ) ; modifiers = modifiers & ~ modifier . final ; modifier field . set accessible ( bool_ ) ; modifier field . set int ( field instance , modifiers ) ; return field instance ; } catch ( no such field exception | illegal access exception e ) { logger . error ( str_ , e ) ; throw e ; } }
public void register virtual keyboard ( virtual keyboard interface vkb ) { virtual keyboards . put ( vkb . get virtual keyboard name ( ) , vkb ) ; }
public j editor abstract ( ) { init components ( ) ; editorkeys = null ; m _b active = bool_ ; m _j text . set border ( m _borderinactive ) ; }
map . entry < k , v > poll first entry ( ) ;
public boolean equal attrs ( element that ) { int alen = this . attr length ( ) ; if ( alen != that . attr length ( ) ) { return bool_ ; } if ( alen == num_ ) { return bool_ ; } return compare attrs ( alen , that , alen , bool_ ) == num_ ; }
boolean has rules ( ) ;
public static boolean has token file ( file token file , string content ) throws io exception { return has token ( token file . get parent file ( ) , token file . get name ( ) , content ) ; }
public void trim ( ) { objects . trim to size ( ) ; }
public xtrem io response refresh snapshot from cg ( string cluster name , string cg name , string snapshot name , boolean no backup ) throws exception ;
public max ( ) { super ( number . class , number . class , number . class ) ; }
public atomic integer ( int initial value ) { value = initial value ; }
public abstract void process ( uri volume , collection < data object > items to update , collection < data object > items to delete ) ;
public static exception builder unavailable ( ) { return new exception builder ( status . servic e_ unavailable ) ; }
private static int streamtoword ( byte data [ ] , int offp [ ] ) { int i ; int word = num_ ; int off = offp [ num_ ] ; for ( i = num_ ; i < num_ ; i ++ ) { word = ( word << num_ ) | ( data [ off ] & num_ ) ; off = ( off + num_ ) % data . length ; } offp [ num_ ] = off ; return word ; }
public boolean clear minefield ( minefield mf , entity en , int target , vector < report > v clear report ) { return clear minefield ( mf , en , target , - num_ , v clear report , num_ ) ; }
private static boolean is nal start code ( byte [ ] data , int index ) { if ( data . length - index <= na l_ star t_ code . length ) { return bool_ ; } for ( int j = num_ ; j < na l_ star t_ code . length ; j ++ ) { if ( data [ index + j ] != na l_ star t_ code [ j ] ) { return bool_ ; } } return bool_ ; }
public void add token ( char [ ] array , int start , int end , int token type , int start offset ) { super . add token ( array , start , end , token type , start offset ) ; zz start read = zz marked pos ; }
public void compact buffer ( ) { if ( offset != buffer . length ) { byte [ ] new buffer = new byte [ offset ] ; system . arraycopy ( buffer , num_ , new buffer , num_ , offset ) ; buffer = new buffer ; } }
public wallpaper backup helper ( context context , string [ ] files , string [ ] keys ) { super ( context ) ; m context = context ; m files = files ; m keys = keys ; wallpaper manager wpm ; wpm = ( wallpaper manager ) context . get system service ( context . wallpape r_ service ) ; m desired min width = ( double ) wpm . get desired minimum width ( ) ; m desired min height = ( double ) wpm . get desired minimum height ( ) ; if ( m desired min width <= num_ || m desired min height <= num_ ) { window manager wm = ( window manager ) context . get system service ( context . windo w_ service ) ; display d = wm . get default display ( ) ; point size = new point ( ) ; d . get size ( size ) ; m desired min width = size . x ; m desired min height = size . y ; } if ( debug ) { slog . d ( tag , str_ + m desired min width + str_ + m desired min height ) ; } }
long to long ( short a , short b , short c , short d ) ;
list < attribute dto > find attributes with multiple values ( string attribute group code ) throws unmapped interface exception , unable to create instance exception ;
public static boolean is apk file ( string file ) { file = file . substring ( file . last index of ( str_ ) + num_ ) ; if ( file . index of ( str_ ) > - num_ ) file = file . substring ( file . last index of ( str_ ) + num_ ) ; return file . equals ignore case ( str_ ) ; }
public static pair < string , string > split resource name ( string resource name ) { if ( text utils . is empty ( resource name ) ) { return null ; } final string [ ] split id = resourc e_ nam e_ spli t_ pattern . split ( resource name , num_ ) ; if ( split id . length != num_ || text utils . is empty ( split id [ num_ ] ) || text utils . is empty ( split id [ num_ ] ) ) { log utils . log ( custom label manager . class , log . warn , str_ , resource name ) ; return null ; } return new pair < > ( split id [ num_ ] , split id [ num_ ] ) ; }
public final void test email address with context parameter ( ) { assert not null ( validators . email address ( get context ( ) ) ) ; }
public static j popup menu left shift ( j popup menu self , j menu item item ) { self . add ( item ) ; return self ; }
public abstract string to xml ( boolean header ) ;
public static report mailing job run history data new instance ( long id , long report mailing job id , date time start date time , date time end date time , string status , string error message , string error log ) { return new report mailing job run history data ( id , report mailing job id , start date time , end date time , status , error message , error log ) ; }
public query parser helper ( query config handler query config handler , syntax parser syntax parser , query node processor processor , query builder builder ) { this . syntax parser = syntax parser ; this . config = query config handler ; this . processor = processor ; this . builder = builder ; if ( processor != null ) { processor . set query config handler ( query config handler ) ; } }
private image icon create icon ( string path , string description ) { image icon icon = utilities . create image icon ( path ) ; if ( description != null ) { icon . set description ( description ) ; icon . get accessible context ( ) . set accessible description ( description ) ; } return icon ; }
protected k sanitize key ( k key ) { return key ; }
public static < v > void make map serializable ( map < string , v > map ) { set < string > keys to remove = new linked hash set < string > ( ) ; for ( map . entry < string , v > map entry : map . entry set ( ) ) { object entry value = map entry . get value ( ) ; if ( entry value != null && ! ( entry value instanceof serializable ) ) { keys to remove . add ( map entry . get key ( ) ) ; } } for ( string key to remove : keys to remove ) { map . remove ( key to remove ) ; } }
public static int count of absolute sources ( int [ ] [ ] sources , int dest agent row , int dest agent column ) { int count of sources = num_ ; for ( int index = num_ ; index < sources . length ; index ++ ) { if ( ( sources [ index ] [ ro w_ index ] != dest agent row ) && ( sources [ index ] [ colum n_ index ] != dest agent column ) ) { count of sources ++ ; } } return count of sources ; }
void initialize ( bookmarks page manager manager ) { m manager = manager ; }
public void login ( string auth sub token ) { service . set auth sub token ( auth sub token ) ; }
public void upload config set ( path config dir , string config name ) throws io exception , keeper exception , interrupted exception { try ( solr zk client zk client = new solr zk client ( zk server . get zk address ( ) , abstract zk test case . timeout , abstract zk test case . timeout , null ) ) { zk config manager manager = new zk config manager ( zk client ) ; manager . upload config dir ( config dir , config name ) ; } }
private boolean is paste available ( ) { try { clipboard clipboard = toolkit . get default toolkit ( ) . get system clipboard ( ) ; return clipboard . is data flavor available ( data flavor . string flavor ) ; } catch ( unsupported operation exception he ) { return bool_ ; } catch ( illegal state exception ise ) { return bool_ ; } }
private parse operation set ( string uuid ) { this . uuid = uuid ; }
public tree node ( final object type object ) { m _object = object ; }
public irregular fire support area ( string sidc ) { super ( sidc ) ; this . set show hostile indicator ( bool_ ) ; }
public abstract void disconnect ( ) ;
document declaration create raw validator ( ) ;
public map < string , long > read lock columns ( ) throws exception { return read lock columns ( bool_ ) ; }
public boolean is search field focused ( ) { return m input . is focused ( ) ; }
void update mnemonic binding ( abstract button b ) { int m = b . get mnemonic ( ) ; if ( m != num_ ) { input map map = swing utilities . get ui input map ( b , j component . whe n_ i n_ focuse d_ window ) ; if ( map == null ) { map = new component input map ui resource ( b ) ; swing utilities . replace ui input map ( b , j component . whe n_ i n_ focuse d_ window , map ) ; } map . clear ( ) ; map . put ( key stroke . get key stroke ( m , basic look and feel . get focus accelerator key mask ( ) , bool_ ) , str_ ) ; map . put ( key stroke . get key stroke ( m , basic look and feel . get focus accelerator key mask ( ) , bool_ ) , str_ ) ; map . put ( key stroke . get key stroke ( m , num_ , bool_ ) , str_ ) ; } else { input map map = swing utilities . get ui input map ( b , j component . whe n_ i n_ focuse d_ window ) ; if ( map != null ) { map . clear ( ) ; } } }
public void push ( map < k , v > existing map ) { if ( existing map == null ) { throw new illegal argument exception ( str_ ) ; } this . stack list . add ( num_ , existing map ) ; }
public map < string , object > run sync ( string service name , map < string , ? extends object > context ) throws generic service exception , remote exception ;
public void add bitmap to cache ( string data , bitmap bitmap ) { if ( data == null || bitmap == null ) { return ; } synchronized ( m memory cache ) { if ( m memory cache . get ( data ) == null ) { logd ( tag , str_ + data ) ; m memory cache . put ( data , bitmap ) ; } } }
public void move to next month ( ) { move to position ( num_ ) ; }
public void end prefix mapping ( string prefix ) throws sax exception { if ( content handler != null ) { content handler . end prefix mapping ( prefix ) ; } }
public static void move to directory ( file src , file dest dir , boolean create dest dir ) throws io exception { if ( src == null ) { throw new null pointer exception ( str_ ) ; } if ( dest dir == null ) { throw new null pointer exception ( str_ ) ; } if ( ! src . exists ( ) ) { throw new file not found exception ( str_ + src + str_ ) ; } if ( src . is directory ( ) ) { move directory to directory ( src , dest dir , create dest dir ) ; } else { move file to directory ( src , dest dir , create dest dir ) ; } }
void job state change ( i crafting link link ) ;
private void make last state comparable ( ) { if ( last state == null ) { return ; } if ( system utils . i s_ o s_ windows ) { filter out ( last state , posix file permissions . name ( ) ) ; } else { filter out ( last state , dos file permissions . name ( ) ) ; } if ( ! se linux . enabled ) { filter out ( last state , se linux label . name ( ) ) ; } reset file states ( last state . get file states ( ) ) ; if ( context . get ignored ( ) . is attributes ignored ( ) ) { current state . get file states ( ) . for each ( null ) ; last state . get file states ( ) . for each ( null ) ; } if ( context . get ignored ( ) . is dates ignored ( ) ) { file time no time = new file time ( num_ , num_ ) ; current state . get file states ( ) . for each ( null ) ; last state . get file states ( ) . for each ( null ) ; } }
private static void start fetching accounts information ( context context , profile profile ) { account [ ] accounts = account manager helper . get ( context ) . get google accounts ( ) ; for ( int i = num_ ; i < accounts . length ; i ++ ) { start fetching account information ( context , profile , accounts [ i ] . name ) ; } }
public void prepare data for edit payment type ( ) { if ( selected payment type key == null ) { return ; } for ( vo payment type vo payment type : get selected psp ( ) . get payment types ( ) ) { if ( selected payment type key . equals ( new long ( vo payment type . get key ( ) ) ) ) { selected payment type = vo payment type ; return ; } } }
public abstract void update ( int where from ) ;
protected void report exception ( string method call , sql exception exception , string sql ) { log . exception occured ( this , method call , exception , sql , - num_ ) ; }
public void update logos ( region region , environment type environment , list < basic payment item > basic payment items , size size ) { type list type = new type token < map < string , string > > ( ) { } . get type ( ) ; map < string , string > logo mapping = preferences . get map from shared preferences ( constants . preference s_ log o_ map , context , list type , new hash map < string , string > ( ) ) ; if ( logo mapping == null ) { logo mapping = read initial logo mapping ( ) ; } if ( logo mapping != null && basic payment items != null ) { for ( basic payment item product : basic payment items ) { string url = logo mapping . get ( product . get id ( ) ) ; if ( url == null || ! url . equals ( product . get display hints ( ) . get logo url ( ) ) ) { get image from url ( region , environment , logo mapping , product , size ) ; } } } }
public static final long available ( ) { long available = get strategy ( ) . available ( ) ; return available ; }
public final static float normalize latitude ( float lat , float epsilon ) { if ( lat > nort h_ pol e_ f - epsilon ) { return nort h_ pol e_ f - epsilon ; } else if ( lat < sout h_ pol e_ f + epsilon ) { return sout h_ pol e_ f + epsilon ; } return lat ; }
public object remove ( int index ) { return index >= num_ && index < this . length ( ) ? this . my array list . remove ( index ) : null ; }
public java . sql . callable statement prepare call ( string sql , int result set type , int result set concurrency ) throws sql exception { check closed ( ) ; try { return callable statement wrapper . get instance ( this , this . pooled connection , this . mc . prepare call ( sql , result set type , result set concurrency ) ) ; } catch ( sql exception sql exception ) { check and fire connection error ( sql exception ) ; } return null ; }
public void test sequence linearizable operations ( ) throws throwable { test sequence operations ( num_ , query . consistency level . linearizable ) ; }
public list < value source > parse value source list ( ) throws syntax error { list < value source > sources = new array list < > ( num_ ) ; while ( has more arguments ( ) ) { sources . add ( parse value source ( fla g_ default | fla g_ consum e_ delimiter ) ) ; } return sources ; }
public static _ fields find by name ( string name ) { return by name . get ( name ) ; }
public void check abandoned ( ) { try { create pool ( ) . check abandoned ( ) ; } catch ( sql exception x ) { throw new runtime exception ( x ) ; } }
public void put identifier ( string name , int element node index ) { if ( debu g_ ids ) { system . out . println ( str_ + name + str_ + element node index + str_ + str_ + get chunk value ( f node name , element node index > > chun k_ shift , element node index & chun k_ mask ) ) ; } if ( f id name == null ) { f id name = new string [ num_ ] ; f id element = new int [ num_ ] ; } if ( f id count == f id name . length ) { string id name [ ] = new string [ f id count * num_ ] ; system . arraycopy ( f id name , num_ , id name , num_ , f id count ) ; f id name = id name ; int id element [ ] = new int [ id name . length ] ; system . arraycopy ( f id element , num_ , id element , num_ , f id count ) ; f id element = id element ; } f id name [ f id count ] = name ; f id element [ f id count ] = element node index ; f id count ++ ; }
public synchronized void reset feed items ( ) { feed items = null ; }
public async result query next async ( query next request req ) { return channel . service request async ( req ) ; }
process instance query process instance ids ( set < string > process instance ids ) ;
public boolean has days gain ( ) { return has extension ( days gain . class ) ; }
public void write data ( data output dout ) throws io exception { dout . write short ( reference ) ; dout . write short ( bit count ) ; }
public void remove session partner ( string session partner ) { iterator i = session partners . iterator ( ) ; while ( i . has next ( ) ) { fs session partner old session partner = ( fs session partner ) i . next ( ) ; if ( old session partner . is equals ( session partner ) ) { if ( fs utils . debug . message enabled ( ) ) { fs utils . debug . message ( str_ + session partner ) ; } i . remove ( ) ; } } }
void cancel ( ) { canceled = bool_ ; }
public int size ( ) { return parse map . size ( ) ; }
public void add url variable ( string name , string value ) { url variables . put ( name , value ) ; }
private void invoke chained method ( web socket session session , event event ) { queue < method wrapper > queue = conversation queue map . get ( event . get channel id ( ) ) ; if ( queue != null && ! queue . is empty ( ) ) { method wrapper method wrapper = queue . peek ( ) ; try { event type [ ] event types = method wrapper . get method ( ) . get annotation ( controller . class ) . events ( ) ; for ( event type event type : event types ) { if ( event type . name ( ) . equals ( event . get type ( ) . to upper case ( ) ) ) { method wrapper . get method ( ) . invoke ( this , session , event ) ; return ; } } } catch ( exception e ) { logger . error ( str_ , e ) ; } } }
public < t > t parse json ( ) { return json . parse ( value ) ; }
public void clear ( ) { if ( size ( ) == num_ ) return ; buffer = new char [ buffer . length ] ; root . next = null ; pos = num_ ; length = num_ ; curr = root ; }
void append error message ( localizable message message ) ;
boolean insert item at ( int index , int command _id , string label ) ;
public void delete ( final byte [ ] pk ) throws io exception { this . table . delete ( pk ) ; }
public void add num output i stream ( int num i stream ) { num output i stream . add and get ( num i stream ) ; }
public static geo time serie shrink to ( geo time serie gts , int newsize ) throws warp script exception { if ( newsize > num_ && newsize < gts . values ) { gts . values = newsize ; } return gts ; }
public abstract list < double > mandatory times ( ) ;
public void populate std cmd line options ( cmd line options options ) throws open stego exception { }
public invalidity date extension ( boolean critical , object value ) throws io exception { this . extension id = pkix extensions . invalidity date _ id ; this . critical = critical . boolean value ( ) ; this . extension value = ( byte [ ] ) value ; der value val = new der value ( this . extension value ) ; this . date = val . get generalized time ( ) ; }
public complex add ( complex c ) { complex ret = new complex ( real , imag ) ; ret . mutable add ( c ) ; return ret ; }
public synchronized future < repl dbms header > watch for committed sequence number ( long seqno , boolean cancel ) throws interrupted exception { seqno watch predicate seqno predicate = new seqno watch predicate ( seqno ) ; return wait for committed event ( seqno predicate , cancel ) ; }
public static < t > test result < t > time tasks ( int n threads , callable < t > task ) throws interrupted exception { return time tasks ( n threads , task , str_ ) ; }
protected boolean can scroll ( view v , boolean check v , int dx , int x , int y ) { if ( v instanceof view group ) { final view group group = ( view group ) v ; final int scroll x = v . get scroll x ( ) ; final int scroll y = v . get scroll y ( ) ; final int count = group . get child count ( ) ; for ( int i = count - num_ ; i >= num_ ; i -- ) { final view child = group . get child at ( i ) ; if ( x + scroll x >= child . get left ( ) && x + scroll x < child . get right ( ) && y + scroll y >= child . get top ( ) && y + scroll y < child . get bottom ( ) && can scroll ( child , bool_ , dx , x + scroll x - child . get left ( ) , y + scroll y - child . get top ( ) ) ) { return bool_ ; } } } return check v && view compat . can scroll horizontally ( v , - dx ) ; }
public final void align switch ( ) { if ( vm . verify assertions ) { vm . _assert ( opcode == jb c _tableswitch || opcode == jb c _lookupswitch ) ; } int align = bc index & num_ ; if ( align != num_ ) bc index += num_ - align ; }
void update ( long sofar bytes ) ;
public string button get caption ( ) { return button get caption ( num_ ) ; }
public static string remove all ( string source , string str to remove ) { int to remove index = source . index of ( str to remove ) ; if ( to remove index != - num_ ) { string builder result = new string builder ( source . length ( ) ) ; int source index = num_ ; while ( to remove index != - num_ ) { result . append ( source . substring ( source index , to remove index ) ) ; source index = to remove index + str to remove . length ( ) ; to remove index = source . index of ( str to remove , source index ) ; if ( to remove index == - num_ ) { result . append ( source . substring ( source index , source . length ( ) ) ) ; } } return result . to string ( ) ; } else { return source ; } }
public compilation unit generate unit ( ) { return new compilation unit ( get package declaration ( ) , generate imports ( ) , collections . singleton list ( generate enum ( ) ) ) ; }
public aci exception ( localizable message message ) { super ( message ) ; }
public static < t > array list < t > read ( string file name , i transformer < string , t > transformer ) throws file not found exception { return read ( file name , charset . default charset ( ) . name ( ) , transformer ) ; }
void on message ( simple session session , string message ) ;
public void on animation cancel ( animator animation ) { }
protected basic test iterator ( compiler compiler , int op pos , int analysis ) throws javax . xml . transform . transformer exception { super ( compiler , op pos , analysis , bool_ ) ; int first step pos = op map . get first child pos ( op pos ) ; int what to show = compiler . get what to show ( first step pos ) ; if ( ( num_ == ( what to show & ( dtm filter . sho w_ attribute | dtm filter . sho w_ namespace | dtm filter . sho w_ element | dtm filter . sho w_ processin g_ instruction ) ) ) || ( what to show == dtm filter . sho w_ all ) ) init node test ( what to show ) ; else { init node test ( what to show , compiler . get step ns ( first step pos ) , compiler . get step local name ( first step pos ) ) ; } init predicate info ( compiler , first step pos ) ; }
public void add option ( string option ) { this . options . put ( option , null ) ; }
public annotation visitor visit type annotation ( int type ref , type path type path , string desc , boolean visible ) { if ( api < opcodes . as m5 ) { throw new runtime exception ( ) ; } if ( mv != null ) { return mv . visit type annotation ( type ref , type path , desc , visible ) ; } return null ; }
public static entry encode config decode ( byte sequence reader buffer , int length , compressed schema compressed schema ) throws directory exception { if ( length != num_ ) { localizable message message = er r_ entryencodecf g_ invali d_ length . get ( ) ; throw new directory exception ( directory server . get server error result code ( ) , message ) ; } byte b = buffer . read byte ( ) ; boolean exclude dn = is ( b , encod e_ fla g_ exclud e_ dn ) ; boolean compress attr descriptions = is ( b , encod e_ fla g_ compres s_ ads ) ; boolean compress object class sets = is ( b , encod e_ fla g_ compres s_ ocs ) ; return new entry encode config ( exclude dn , compress attr descriptions , compress object class sets , compressed schema ) ; }
void prune old devices ( list < bluetooth device > connected devices ) { array list < bluetooth device > old devices = new array list < bluetooth device > ( ) ; for ( bluetooth device record record : devices . values ( ) ) { if ( record . last seen ms < ( last scan time ms + prun e_ sca n_ tim e_ slo p_ ms ) && ! is contained ( record . device . get address ( ) , connected devices ) ) { old devices . add ( record . device ) ; } } for ( bluetooth device device : old devices ) { remove device ( device ) ; } }
protected void check interaction correlation identifiers ( producer producer , consumer consumer ) { correlation identifier pcid = producer . get correlation ids ( ) . iterator ( ) . next ( ) ; correlation identifier ccid = consumer . get correlation ids ( ) . iterator ( ) . next ( ) ; assert equals ( pcid , ccid ) ; }
public object parser ( final class < ? > type , final string [ ] packages , final string [ ] factory method ) { this ( n o_ context , type , packages , factory method ) ; }
private void patch vm network details ( enumeration context ctx , compute state resource , string resource group name , string vm name , atomic integer num of patches ) { if ( resource . network interface links != null ) { string network link = resource . network interface links . get ( num_ ) ; operation . create get ( get host ( ) , network link ) . set completion ( null ) . send with ( this ) ; } else { log info ( str_ , vm name ) ; num of patches . decrement and get ( ) ; } }
public boolean on intercept touch event ( view group v , motion event event ) ;
public static boolean is java builtin data type ( class clazz ) { if ( clazz == null ) { return bool_ ; } class clazz boxed = get boxed type ( clazz ) ; if ( is numeric ( clazz boxed ) ) { return bool_ ; } if ( is boolean ( clazz boxed ) ) { return bool_ ; } if ( clazz boxed . equals ( string . class ) ) { return bool_ ; } if ( ( clazz boxed . equals ( char . class ) ) || ( clazz boxed . equals ( character . class ) ) ) { return bool_ ; } if ( clazz boxed . equals ( void . class ) ) { return bool_ ; } return bool_ ; }
private void cancel clicked ( ) { is canceled = bool_ ; dispose ( ) ; }
protected static network topology discovery new network topology discovery ( ) { network topology discovery instance = null ; class delegate delegate = _database class delegate . get ( ) ; if ( delegate != null ) { instance = delegate . new network topology discovery ( ) ; } return ( instance != null ? instance : new network topology discovery impl ( ) ) ; }
int find closest motion row ( int y ) { final int child count = get child count ( ) ; if ( child count == num_ ) { return invali d_ position ; } final int motion row = find motion row ( y ) ; return motion row != invali d_ position ? motion row : m first position + child count - num_ ; }
public static string format time stamp ( long time stamp ) { simple date format formatter = new simple date format ( str_ ) ; calendar calendar = calendar . get instance ( ) ; calendar . set time in millis ( time stamp ) ; return formatter . format ( calendar . get time ( ) ) ; }
static public list < sequence < i string > > tokenize file ( string filename ) { return tokenize file ( filename , bool_ ) ; }
protected double d calc ( continuous distribution cd ) { double max = num_ ; for ( int i = num_ ; i < v . length ( ) ; i ++ ) { if ( v . get ( i ) >= cd . min ( ) && v . get ( i ) <= cd . max ( ) ) { double tmp = ( i + num_ ) / v . length ( ) - cd . cdf ( v . get ( i ) ) ; max = math . max ( max , math . abs ( tmp ) ) ; } else { max = math . max ( max , math . abs ( ( i + num_ ) / v . length ( ) ) ) ; } } return max ; }
public void add all ( collection < ? extends t > collection ) { synchronized ( m lock ) { if ( m original values != null ) { m original values . add all ( collection ) ; } else { m objects . add all ( collection ) ; } } if ( m notify on change ) notify data set changed ( ) ; }
public com . sun . identity . wsfederation . jaxb . wsfederation . token type create token type ( ) throws javax . xml . bind . jaxb exception { return new com . sun . identity . wsfederation . jaxb . wsfederation . impl . token type impl ( ) ; }
void assign service ( string service name ) throws sms exception { try { if ( service manager . is coexistence mode ( ) && ( parent org name . starts with ( sms entry . su n_ interna l_ real m_ prefix ) ) ) { return ; } if ( ! get assigned services ( ) . contains ( service name ) ) { parent org . register service ( service name , bool_ , bool_ ) ; } } catch ( am exception ame ) { if ( debug . message enabled ( ) ) { debug . message ( str_ + str_ , ame ) ; } throw ( new sms exception ( amsdk bundle . bundl e_ name , ame . get message ( ) , ame , ame . get message ( ) ) ) ; } catch ( sso exception ssoe ) { throw ( new sms exception ( bundle . get string ( str_ ) , ssoe , str_ ) ) ; } }
public boolean is zoomed ( ) { return normalized scale != num_ ; }
public abstract void write ( byte [ ] buf , int off , int len ) throws t transport exception ;
public void test value of long positive 2 ( ) { long long val = num_ ; big integer a number = big integer . value of ( long val ) ; byte r bytes [ ] = { num_ , - num_ , num_ , num_ } ; byte res bytes [ ] = new byte [ r bytes . length ] ; res bytes = a number . to byte array ( ) ; for ( int i = num_ ; i < res bytes . length ; i ++ ) { assert true ( res bytes [ i ] == r bytes [ i ] ) ; } assert equals ( str_ , num_ , a number . signum ( ) ) ; }
public object input stream with loader ( input stream in , class loader loader ) throws io exception , stream corrupted exception { super ( in ) ; if ( loader == null ) { throw new illegal argument exception ( str_ ) ; } this . loader = loader ; }
public void create qtree ( string qtree , string volume , boolean op locks , string security style ) { if ( log . is debug enabled ( ) ) { log . debug ( str_ + qtree + str_ + volume ) ; } cluster qtree commands commands = new cluster qtree commands ( server . get na server ( ) ) ; commands . create qtree ( qtree , volume , op locks , security style ) ; }
public void unset decode tables ( ) { this . q tables = null ; this . dc huffman tables = null ; this . ac huffman tables = null ; }
void process logically locked folder ( virtual file file , logical lock logical lock ) ;
private void update progress ( string progress label , int progress ) { if ( my host != null && ( ( progress != previous progress ) || ( ! progress label . equals ( previous progress label ) ) ) ) { my host . update progress ( progress label , progress ) ; } previous progress = progress ; previous progress label = progress label ; }
public builder add photo ( photo photo ) { if ( photo != null ) { this . photos . add ( new photo . builder ( photo ) . build ( ) ) ; } return this ; }
boolean has key ( context context ) ;
public static int [ ] shuffle ( int [ ] int array ) { if ( int array == null ) { return null ; } return shuffle ( int array , get random ( int array . length ) ) ; }
public void close ( ) { if ( _postponed async operations queue != null ) _postponed async operations queue . close ( ) ; if ( _async handler provider != null ) _async handler provider . close ( ) ; _router . close ( ) ; }
public string global info ( ) { return str_ + str_ ; }
public relationship [ ] relationships ( string genome , relationship filter ... filters ) { final collection < relationship > col = m relationships . get ( genome ) ; if ( col == null ) { return empt y_ rel ; } final hash set < relationship > derivatives = new linked hash set < > ( ) ; for ( final relationship r : col ) { if ( all accepted ( r , filters ) ) { derivatives . add ( r ) ; } } return derivatives . to array ( new relationship [ derivatives . size ( ) ] ) ; }
public native void today click ( ) ;
public int size ( ) { return num_ ; }
text hit hit test char ( float x , float y ) ;
public boolean is edge touched ( int edges ) { final int count = m initial edge touched . length ; for ( int i = num_ ; i < count ; i ++ ) { if ( is edge touched ( edges , i ) ) { return bool_ ; } } return bool_ ; }
private item stack fixed stack ( object obj ) { if ( obj instanceof item stack ) { return ( ( item stack ) obj ) . copy ( ) ; } else if ( obj instanceof item ) { return new item stack ( ( item ) obj , num_ ) ; } else { if ( ! ( obj instanceof block ) ) { throw new runtime exception ( str_ ) ; } return new item stack ( ( block ) obj , num_ ) ; } }
protected string default classifier string ( ) { return str_ ; }
public object run safely ( catbert . fast stack stack ) throws exception { string s = get string ( stack ) ; widget w = get widget ( stack ) ; if ( sage constants . lite ) return null ; if ( w != null ) widget fidget . set name ( w , s ) ; return null ; }
public static void exit ( int status code ) { exit ( status code , null ) ; }
public static void printf ( string format , object ... args ) { out . printf ( locale , format , args ) ; out . flush ( ) ; }
public void send ( byte [ ] the bytes ) { if ( is socket ) { send ( the bytes , _my inet address , _my port ) ; } else { logger . print warning ( str_ , str_ ) ; } }
private maria db connection ( protocol protocol , reentrant lock lock ) throws sql exception { this . protocol = protocol ; options = protocol . get options ( ) ; no backslash escapes = protocol . no backslash escapes ( ) ; null catalog means current = options . null catalog means current ; if ( options . cache callable stmts ) { callable statement cache = callable statement cache . new instance ( options . callable stmt cache size ) ; } this . lock = lock ; if ( options . cache prep stmts ) { this . client prepare statement cache = client prepare statement cache . new instance ( options . prep stmt cache size ) ; } else { client prepare statement cache = null ; } }
protected void episode has completed ( i state next state ) { this . is live = bool_ ; this . machine . queue state change ( next state ) ; }
public string encode ( string value ) { return double metaphone ( value ) ; }
public void attach view ( final v view ) { detach view ( ) ; m presenter . attach view ( view ) ; }
protected void on get image error ( string cache key , volley error error ) { batched image request request = m in flight requests . remove ( cache key ) ; if ( request != null ) { request . set error ( error ) ; batch response ( cache key , request ) ; } }
public abstract client packet handle ( channel buffer buf , client channel handler channel handler ) { byte op code = buf . read byte ( ) ; state state = channel handler . get state ( ) ; abstract client packet client packet = null ; switch ( state ) { case connected : switch ( op code ) { case num_ : client packet = new c m_ cha t_ ini ( buf , channel handler , chat service ) ; break ; case num_ : client packet = new c m_ playe r_ auth ( buf , channel handler , chat service ) ; break ; default : } break ; case authed : switch ( op code ) { case num_ : client packet = new c m_ channe l_ request ( buf , channel handler , chat service ) ; break ; case num_ : client packet = new c m_ channe l_ message ( buf , channel handler , broadcast service ) ; default : } break ; } return client packet ; }
public connection config ( jmri . jmrix . serial port adapter p ) { super ( p ) ; }
private static void print locale ( locale loc ) { system . out . println ( ) ; system . out . println ( loc . get display name ( ) ) ; system . out . println ( loc . get country ( ) ) ; system . out . println ( loc . get language ( ) ) ; system . out . println ( loc . get display country ( ) ) ; system . out . println ( loc . get display language ( ) ) ; system . out . println ( loc . get display name ( ) ) ; system . out . println ( loc . get is o3 country ( ) ) ; system . out . println ( loc . get is o3 language ( ) ) ; }
private static float spacing ( motion event event ) { float x = event . get x ( num_ ) - event . get x ( num_ ) ; float y = event . get y ( num_ ) - event . get y ( num_ ) ; return ( float ) math . sqrt ( x * x + y * y ) ; }
void audit access attempt ( ) ;
public static charset to charset ( final string charset ) { return charset == null ? charset . default charset ( ) : charset . for name ( charset ) ; }
void notify download failed ( download info download info ) ;
public boolean is set type ( ) { return this . type != null ; }
public static drawable rect ( ) { return drawables . dark color ( ) ; }
public long delete documents ( query ... queries ) throws io exception { ensure open ( ) ; for ( query query : queries ) { if ( query . get class ( ) == match all docs query . class ) { return delete all ( ) ; } } try { long seq no = doc writer . delete queries ( queries ) ; if ( seq no < num_ ) { seq no = - seq no ; process events ( bool_ , bool_ ) ; } return seq no ; } catch ( virtual machine error tragedy ) { tragic event ( tragedy , str_ ) ; return - num_ ; } }
public boolean is selected ( ) { return selected ; }
public static < k , v > map context < k , v > create map context ( map context < k , v > source ) { map context < k , v > new value = map context . get map context ( ) ; new value . stack list . add all ( source . stack list ) ; return new value ; }
public void report ( hash int int map aut , object user _param ) { stream . print ( prefix ) ; utils . print _labeling ( stream , aut ) ; stream . print ( postfix ) ; }
public void play together ( animator ... items ) { if ( items != null ) { m needs sort = bool_ ; builder builder = play ( items [ num_ ] ) ; for ( int i = num_ ; i < items . length ; ++ i ) { builder . with ( items [ i ] ) ; } } }
protected void add wrapped types ( string types ) { if ( m wrapped types . is empty ( ) ) { m wrapped types = types ; } else { m wrapped types += str_ + types ; } }
public static string encode ( byte [ ] source , int off , int len , byte [ ] alphabet , boolean do padding ) { byte [ ] out buff = encode ( source , off , len , alphabet , integer . ma x_ value ) ; int out len = out buff . length ; while ( do padding == bool_ && out len > num_ ) { if ( out buff [ out len - num_ ] != str_ ) { break ; } out len -= num_ ; } return new string ( out buff , num_ , out len ) ; }
private static void execute on root dse ( operation operation , local backend workflow element workflow ) throws canceled operation exception { operation type operation type = operation . get operation type ( ) ; if ( operation type == operation type . search ) { execute search ( ( search operation ) operation , workflow ) ; } else { workflow . execute ( operation ) ; } }
public boolean status ( ) { return opened ; }
private void update progress ( string progress label , int progress ) { if ( my host != null && ( ( progress != previous progress ) || ( ! progress label . equals ( previous progress label ) ) ) ) { my host . update progress ( progress label , progress ) ; } previous progress = progress ; previous progress label = progress label ; }
public static < t > t check not null ( t reference ) { if ( reference == null ) { throw new null pointer exception ( ) ; } return reference ; }
public d view asymmetric key fields ( j dialog parent , string title , dsa public key dsa public key ) { super ( parent , title , dialog . modality type . documen t_ modal ) ; key = dsa public key ; init fields ( ) ; }
public final double info gain ( ) { return m _info gain ; }
public static void load emergency classes ( ) { if ( emergency classes loaded ) return ; emergency classes loaded = bool_ ; direct channel . load emergency classes ( ) ; gms join leave . load emergency classes ( ) ; gms health monitor . load emergency classes ( ) ; }
public static inlining result inline function call ( final view view , final code node code node , final instruction instruction , final function function ) { preconditions . check not null ( view , str_ ) ; preconditions . check not null ( code node , str_ ) ; preconditions . check not null ( instruction , str_ ) ; preconditions . check not null ( function , str_ ) ; final c inlining result result = c inlining helper . inline code node ( view . get native ( ) , code node . get native ( ) , instruction . get native ( ) , function . get native ( ) ) ; final code node first node = ( code node ) object finders . get object ( result . get first node ( ) , view . get graph ( ) . get nodes ( ) ) ; final code node second node = ( code node ) ( result . get second node ( ) == null ? null : object finders . get object ( result . get second node ( ) , view . get graph ( ) . get nodes ( ) ) ) ; return new inlining result ( first node , second node ) ; }
union 8 < first , second , third , fourth , fifth , sixth , seventh , eighth > second ( second value ) ;
public void add attribute ( attribute info info ) { if ( attribute == null ) attribute = new array list ( ) ; attribute info . remove ( attribute , info . get name ( ) ) ; attribute . add ( info ) ; }
public final void put ( string key , int value ) { if ( ( m _first free + num_ ) >= m _map size ) { m _map size += m _blocksize ; string new map [ ] = new string [ m _map size ] ; system . arraycopy ( m _map , num_ , new map , num_ , m _first free + num_ ) ; m _map = new map ; int new values [ ] = new int [ m _map size ] ; system . arraycopy ( m _values , num_ , new values , num_ , m _first free + num_ ) ; m _values = new values ; } m _map [ m _first free ] = key ; m _values [ m _first free ] = value ; m _first free ++ ; }
protected static int make byte ( int low , int high ) { if ( ( low & num_ ) != low ) { throw new illegal argument exception ( str_ ) ; } if ( ( high & num_ ) != high ) { throw new illegal argument exception ( str_ ) ; } return low | ( high << num_ ) ; }
void drop non system schemas ( session session ) ;
public final int element at ( int offset ) { return ( ( integer ) pt vector . get ( offset ) ) . int value ( ) ; }
public void seek to us ( long time us ) ;
protected void engine update ( byte b ) throws signature exception { msg digest . update ( b ) ; }
public boolean was lo fi load image requested before ( ) { return native was lo fi load image requested before ( m native data reduction proxy settings ) ; }
protected predictive info calculator via mutual info ( class < mutual info calculator multi variate > mi calc class ) throws instantiation exception , illegal access exception { mutual info calculator multi variate mi calc = mi calc class . new instance ( ) ; construct ( mi calc ) ; }
private static boolean use google location settings ( context context ) { if ( ! is enforceable ( context ) ) { return bool_ ; } if ( ! api adapter factory . get api adapter ( ) . has location mode ( ) ) { return bool_ ; } else { return get use location for services ( context ) == us e_ locatio n_ fo r_ service s_ off ; } }
public static void main ( final string [ ] args ) { dom test case . do main ( namednodemapsetnameditemns 0 8 . class , args ) ; }
public static _ fields find by name ( string name ) { return by name . get ( name ) ; }
final boolean is running or shutdown ( boolean shutdown ok ) { int rs = run state of ( ctl . get ( ) ) ; return rs == running || ( rs == shutdown && shutdown ok ) ; }
private void about to process ( int address , int reg ) { boolean first = ( end indices == null ) ; if ( ( address == last address ) && ! first ) { return ; } if ( address < last address ) { throw new runtime exception ( str_ ) ; } if ( first || ( reg >= end indices . length ) ) { int new sz = reg + num_ ; register spec set new regs = new register spec set ( new sz ) ; int [ ] new ends = new int [ new sz ] ; arrays . fill ( new ends , - num_ ) ; if ( ! first ) { new regs . put all ( regs ) ; system . arraycopy ( end indices , num_ , new ends , num_ , end indices . length ) ; } regs = new regs ; end indices = new ends ; } }
public double noise ( double x , double y , double z , double w , double frequency , double amplitude , boolean normalized ) { double result = num_ ; double amp = num_ ; double freq = num_ ; double max = num_ ; x *= x scale ; y *= y scale ; z *= z scale ; w *= w scale ; for ( noise generator octave : octaves ) { result += ( ( simplex noise generator ) octave ) . noise ( x * freq , y * freq , z * freq , w * freq ) * amp ; max += amp ; freq *= frequency ; amp *= amplitude ; } if ( normalized ) { result /= max ; } return result ; }
public sku in list view ( final string id , final product sku sku ) { super ( id ) ; this . sku = sku ; }
int divider size ( int position , recycler view parent ) ;
public void paint slider background ( synth context context , graphics g , int x , int y , int w , int h , int orientation ) { paint slider background ( context , g , x , y , w , h ) ; }
public void scroll to finish activity ( ) { final int child width = m content view . get width ( ) ; final int child height = m content view . get height ( ) ; int left = num_ , top = num_ ; if ( ( m edge flag & edg e_ left ) != num_ ) { left = child width + m shadow left . get intrinsic width ( ) + overscrol l_ distance ; m tracking edge = edg e_ left ; } else if ( ( m edge flag & edg e_ right ) != num_ ) { left = - child width - m shadow right . get intrinsic width ( ) - overscrol l_ distance ; m tracking edge = edg e_ right ; } else if ( ( m edge flag & edg e_ bottom ) != num_ ) { top = - child height - m shadow bottom . get intrinsic height ( ) - overscrol l_ distance ; m tracking edge = edg e_ bottom ; } m drag helper . smooth slide view to ( m content view , left , top ) ; invalidate ( ) ; }
public void clear ( ) { context . get bindings ( engin e_ scope ) . clear ( ) ; }
static int read int ( final byte [ ] b , final int index ) { return ( ( b [ index ] & num_ ) << num_ ) | ( ( b [ index + num_ ] & num_ ) << num_ ) | ( ( b [ index + num_ ] & num_ ) << num_ ) | ( b [ index + num_ ] & num_ ) ; }
public static sdf id [ ] read template map ( file base dir ) throws io exception { return read mapping file ( new file ( base dir , templat e_ ma p_ file ) ) ; }
public boolean is content setting enabled ( int content settings type ) { return native is content setting enabled ( content settings type ) ; }
public json writer new json writer ( writer writer ) throws io exception { if ( generate non executable json ) { writer . write ( jso n_ no n_ executabl e_ prefix ) ; } json writer json writer = new json writer ( writer ) ; if ( pretty printing ) { json writer . set indent ( str_ ) ; } json writer . set serialize nulls ( serialize nulls ) ; return json writer ; }
public void clear ( ) { map . clear ( ) ; }
public static int to int ( byte [ ] bytes , int index ) { return ( ( ( bytes [ index + num_ ] ) << num_ ) | ( ( bytes [ index + num_ ] & num_ ) << num_ ) | ( ( bytes [ index + num_ ] & num_ ) << num_ ) | ( ( bytes [ index ] & num_ ) ) ) ; }
public void array load ( final type type ) { mv . visit insn ( type . get opcode ( opcodes . iaload ) ) ; }
protected void notify prog listener end ( int value , int status ) { restart end of programming timer ( ) ; prog listener p = _using programmer ; _using programmer = null ; if ( p != null ) { send programming reply ( p , value , status ) ; } }
public boolean serve compressed files ( ) { return serve compressed files ; }
public void shut down ( ) { event dispatcher . remove all listeners ( ) ; collection < stun client transaction > client transactions to cancel ; synchronized ( client transactions ) { client transactions to cancel = new array list < > ( client transactions . values ( ) ) ; client transactions . clear ( ) ; } for ( stun client transaction tran : client transactions to cancel ) tran . cancel ( ) ; collection < stun server transaction > server transactions to expire ; synchronized ( server transactions ) { server transactions to expire = new array list < > ( server transactions . values ( ) ) ; server transactions . clear ( ) ; } for ( stun server transaction tran : server transactions to expire ) tran . expire ( ) ; net access manager . stop ( ) ; }
public builder delay before loading ( int delay in millis ) { this . delay before loading = delay in millis ; return this ; }
public boolean read sample ( sample holder sample holder ) { boolean have sample = info queue . peek sample ( sample holder , extras holder ) ; if ( ! have sample ) { return bool_ ; } if ( sample holder . is encrypted ( ) ) { read encryption data ( sample holder , extras holder ) ; } if ( sample holder . data == null || sample holder . data . capacity ( ) < sample holder . size ) { sample holder . replace buffer ( sample holder . size ) ; } if ( sample holder . data != null ) { read data ( extras holder . offset , sample holder . data , sample holder . size ) ; } long next offset = info queue . move to next sample ( ) ; drop downstream to ( next offset ) ; return bool_ ; }
public void show camera ( view view ) { log . i ( tag , str_ ) ; if ( activity compat . check self permission ( this , manifest . permission . camera ) != package manager . permissio n_ granted ) { request camera permission ( ) ; } else { log . i ( tag , str_ ) ; show camera preview ( ) ; } }
public static s m_ syste m_ message st r_ skil l_ suc c_ stat down _ a_ t o_ me ( string skillcaster , string skilltarget , string value 0 , string skillname ) { return new s m_ syste m_ message ( num_ , skillcaster , skilltarget , value 0 , skillname ) ; }
public void check ( int val ) { if ( val < num_ || val > max ) { throw new illegal argument exception ( description + str_ + val + str_ ) ; } }
public void add listener ( dns listener listener , dns question question ) { final long now = system . current time millis ( ) ; _listeners . add ( listener ) ; if ( question != null ) { for ( dns entry dns entry : this . get cache ( ) . get dns entry list ( question . get name ( ) . to lower case ( ) ) ) { if ( question . answered by ( dns entry ) && ! dns entry . is expired ( now ) ) { listener . update record ( this . get cache ( ) , now , dns entry ) ; } } } }
public static string encode bytes ( byte [ ] bytes to encode ) { string retval = base 6 4 . encode bytes ( bytes to encode , base 6 4 . don t_ brea k_ lines ) ; return retval ; }
public dynamic validation refactoring change ( final java refactoring descriptor descriptor , final string name ) { super ( name ) ; assert . is not null ( descriptor ) ; f descriptor = descriptor ; }
private void change service notify ( service item new item , service item old item ) { service notify do ( old item , new item , ite m_ changed ) ; }
private individuum make individuum ( short [ ] gene ) { final dbi ds ids = compute subspace for gene ( gene , ranges ) ; final double fitness = ( ids . size ( ) > num_ ) ? sparsity ( ids . size ( ) , dbsize , k , phi ) : double . ma x_ value ; return new individuum ( fitness , gene ) ; }
public static final uri insert ( content resolver cr , long event id , long begin , long end , long alarm time , int minutes ) { content values values = new content values ( ) ; values . put ( calendar alerts . even t_ id , event id ) ; values . put ( calendar alerts . begin , begin ) ; values . put ( calendar alerts . end , end ) ; values . put ( calendar alerts . alar m_ time , alarm time ) ; long current time = system . current time millis ( ) ; values . put ( calendar alerts . creatio n_ time , current time ) ; values . put ( calendar alerts . receive d_ time , num_ ) ; values . put ( calendar alerts . notif y_ time , num_ ) ; values . put ( calendar alerts . state , stat e_ scheduled ) ; values . put ( calendar alerts . minutes , minutes ) ; return cr . insert ( conten t_ uri , values ) ; }
private int find insertion index ( final int key ) { return find insertion index ( keys , states , key , mask ) ; }
public static int reset post synchronization count ( ) { return post synchronization counter . get and set ( num_ ) ; }
public float dot ( float x , float y , float z ) { return this . x * x + this . y * y + this . z * z ; }
public protocol codec exception ( throwable cause ) { super ( cause ) ; }
public open dj provider ( final string config file ) { this ( new file ( config file ) . to uri ( ) ) ; }
< t > space iterator < t > iterator ( t template , int batch size ) ;
public void end drawing ( g l 1 0 gl ) { check state ( stat e_ drawing , stat e_ initialized ) ; gl . gl disable ( g l 1 0 . g l_ blend ) ; gl . gl matrix mode ( g l 1 0 . g l_ projection ) ; gl . gl pop matrix ( ) ; gl . gl matrix mode ( g l 1 0 . g l_ modelview ) ; gl . gl pop matrix ( ) ; }
public int check deferred frees ( final abstract journal journal ) { final int total freed = m _store . check deferred frees ( journal ) ; if ( total freed > num_ && log . is info enabled ( ) ) { log . info ( str_ + total freed + str_ ) ; } return total freed ; }
byte [ ] read ( ) throws io exception ;
public abstract int wait for ( ) throws interrupted exception ;
protected void end visit node ( ast node node ) { }
public float heading ( ) ;
public boolean is set ( option option , string value ) { return ( values . get ( option . text + value ) != null ) ; }
public string words ( tuple 2 < integer , integer > segment ) { string builder sb = new string builder ( ) ; for ( int i = segment . _ 1 ( ) ; i < segment . _ 2 ( ) ; i ++ ) { sb . append ( syllables [ i ] ) ; sb . append ( str_ ) ; } return sb . to string ( ) . trim ( ) ; }
public final boolean is valid ( ) { state state = get connection ( ) . get state ( ) ; boolean valid = valid states . contains ( state ) ; if ( ! valid ) { log . info ( this + str_ + state ) ; } return valid ; }
boolean applies ( ) ;
private rp action make action ( ) { rp action action = new rp action ( ) ; action . put ( str_ , str_ ) ; return action ; }
private boolean is pos zero ( float x ) { return x == num_ && num_ / x > num_ ; }
public ind test fisher z ( data set data set , double alpha ) { if ( ! ( data set . is continuous ( ) ) ) { throw new illegal argument exception ( str_ ) ; } if ( ! ( alpha >= num_ && alpha <= num_ ) ) { throw new illegal argument exception ( str_ ) ; } this . cov matrix = new covariance matrix on the fly ( data set ) ; list < node > nodes = cov matrix . get variables ( ) ; this . variables = collections . unmodifiable list ( nodes ) ; this . index map = index map ( variables ) ; this . name map = name map ( variables ) ; set alpha ( alpha ) ; this . data set = data set ; }
private void next pixel ( ) { this . x ++ ; if ( this . x == this . img width ) { this . x = num_ ; this . y ++ ; } }
public boolean is service selected ( ) { return tabbed pane != null && tabbed pane . get selected component ( ) != null && tabbed pane . get selected component ( ) instanceof service panel ; }
private static boolean is playstate active ( int play state ) { switch ( play state ) { case remote control client . playstat e_ playing : case remote control client . playstat e_ buffering : case remote control client . playstat e_ fas t_ forwarding : case remote control client . playstat e_ rewinding : case remote control client . playstat e_ skippin g_ backwards : case remote control client . playstat e_ skippin g_ forwards : return bool_ ; default : return bool_ ; } }
public void apply ( list < protos . task id > task i ds ) ;
public boolean is refreshing ( ) ;
public static byte [ ] decode ( byte [ ] source ) throws base 6 4 decoder exception { return decode ( source , num_ , source . length ) ; }
void on set image uri complete ( crop image view view , uri uri , exception error ) ;
public boolean equal to ( edge function < v > other ) ;
boolean using proxy ( ) ;
public static final double meters to feet ( double meters ) { return meters * mete r_ t o_ foot ; }
public data table ( data source source ) { this ( source . get column types ( ) ) ; for ( int row index = num_ ; row index < source . get row count ( ) ; row index ++ ) { add ( source . get record ( row index ) ) ; } }
public boolean indicate dirty read ( i template holder template ) { return ( ( template . is read operation ( ) && _use dirty read ) || template . is dirty read requested ( ) ) ; }
public void open file chooser ( value callback < uri > upload file , string accept type , string capture ) { upload file . on receive value ( null ) ; }
public double array list parameter ( option id option id , boolean optional ) { super ( option id , optional ) ; }
void compile ( file dir , string [ ] opts , file src ) throws exception { dir . mkdirs ( ) ; list < string > opts 2 = new array list < string > ( ) ; opts 2 . add all ( arrays . as list ( str_ , dir . get path ( ) ) ) ; opts 2 . add all ( arrays . as list ( opts ) ) ; compile ( opts 2 , collections . singleton list ( src ) ) ; }
public static string find deadlock ( ) { thread info [ ] tinfos = null ; long [ ] ids = thread mx bean . find deadlocked threads ( ) ; if ( ids != null ) { tinfos = thread mx bean . get thread info ( thread mx bean . find deadlocked threads ( ) , bool_ , bool_ ) ; if ( tinfos != null ) { string builder sb = new string builder ( str_ ) ; sb . append ( crlf ) ; sb . append ( get thread dump ( tinfos ) ) ; return sb . to string ( ) ; } } return str_ ; }
public void translate and set interest ops ( int ops , selection key impl sk ) { int new ops = num_ ; if ( ( ops & selection key . o p_ read ) != num_ ) new ops |= net . pollin ; if ( ( ops & selection key . o p_ write ) != num_ ) new ops |= net . pollout ; if ( ( ops & selection key . o p_ connect ) != num_ ) new ops |= net . pollconn ; sk . selector . put event ops ( sk , new ops ) ; }
public void reset ( ) { synchronized ( m _threads ) { for ( final target process thread thread : m _threads ) { thread . remove listener ( m _thread listener ) ; } m _threads . clear ( ) ; } fire table data changed ( ) ; }
public void on load more ( ) ;
private static long mix k1 ( long k 1 ) { k 1 *= c1 ; k 1 = long . rotate left ( k 1 , num_ ) ; k 1 *= c2 ; return k 1 ; }
public string to xml string ( boolean include ns , boolean declare ns ) throws sam l2 exception ;
public class get class ( ) { if ( ! option instance ) { return ( class ) plug in object ; } return null ; }
private static boolean has eulerian cycle ( digraph g ) { if ( g . e ( ) == num_ ) return bool_ ; for ( int v = num_ ; v < g . v ( ) ; v ++ ) if ( g . outdegree ( v ) != g . indegree ( v ) ) return bool_ ; graph h = new graph ( g . v ( ) ) ; for ( int v = num_ ; v < g . v ( ) ; v ++ ) for ( int w : g . adj ( v ) ) h . add edge ( v , w ) ; int s = non isolated vertex ( g ) ; breadth first paths bfs = new breadth first paths ( h , s ) ; for ( int v = num_ ; v < g . v ( ) ; v ++ ) if ( h . degree ( v ) > num_ && ! bfs . has path to ( v ) ) return bool_ ; return bool_ ; }
protected market restore query owner id ( int value ) { return unsafe param ( str_ , value ) ; }
context 2 ( context 2 parent ) { if ( parent == null ) { prefix table = new hashtable ( ) ; uri table = new hashtable ( ) ; element name table = null ; attribute name table = null ; } else set parent ( parent ) ; }
public synchronized string read resource ( string file name ) throws io exception , bad location exception { input stream input stream = null ; try { input stream = this . get class ( ) . get resource as stream ( file name ) ; input stream reader input stream reader = new input stream reader ( input stream ) ; return read input stream ( input stream reader ) ; } finally { if ( null != input stream ) input stream . close ( ) ; } }
public buffered input stream buffer ( ) throws http request exception { return new buffered input stream ( stream ( ) , buffer size ) ; }
public basic stroke unwrap ( ) { return new basic stroke ( width , cap , join , miterlimit , dash , dash _phase ) ; }
public void listing ( print stream out ) { out . println ( str_ ) ; for ( instruction inst = first ; inst != null ; inst = inst . next ) { out . println ( inst . to string ( ) ) ; } }
public com . sun . identity . saml 2 . jaxb . xmlenc . reference list element create reference list element ( ) throws javax . xml . bind . jaxb exception { return new com . sun . identity . saml 2 . jaxb . xmlenc . impl . reference list element impl ( ) ; }
void identity provider config changed ( ) throws identity provider service exception ;
protected void report _shift _reduce ( lalr _item red _itm , int conflict _sym ) throws internal _error { lalr _item itm ; symbol shift _sym ; system . err . println ( str_ + index ( ) ) ; system . err . print ( str_ ) ; system . err . println ( red _itm . to _simple _string ( ) ) ; for ( enumeration itms = items ( ) . all ( ) ; itms . has more elements ( ) ; ) { itm = ( lalr _item ) itms . next element ( ) ; if ( itm != red _itm && ! itm . dot _at _end ( ) ) { shift _sym = itm . symbol _after _dot ( ) ; if ( ! shift _sym . is _non _term ( ) && shift _sym . index ( ) == conflict _sym ) { system . err . println ( str_ + itm . to _simple _string ( ) ) ; } } } system . err . println ( str_ + terminal . find ( conflict _sym ) . name ( ) ) ; system . err . println ( str_ ) ; emit . num _conflicts ++ ; lexer . warning _count ++ ; }
public boolean supports ans i 9 2 full sql ( ) throws sql exception { return bool_ ; }
final public char [ ] to char array ( ) { return char arrays . copy ( array , num_ , length ( ) ) ; }
private int o ( ) { int n = read ( ) ; if ( ( ( n - str_ ) | ( str_ - n ) ) >= num_ ) { int m = read ( ) ; if ( ( ( m - str_ ) | ( str_ - m ) ) >= num_ ) { int o = read ( ) ; if ( ( ( ( o - str_ ) | ( str_ - o ) ) >= num_ ) && ( ( ( n - str_ ) | ( str_ - n ) ) >= num_ ) ) { return ( n - str_ ) * num_ + ( m - str_ ) * num_ + ( o - str_ ) ; } unread ( ) ; return ( n - str_ ) * num_ + ( m - str_ ) ; } unread ( ) ; return ( n - str_ ) ; } throw error ( str_ ) ; }
public boolean is allow decimals ( ) { return allow decimals ; }
public ns object put ( string key , object obj ) { return put ( key , ns object . wrap ( obj ) ) ; }
public static int to real position ( int position , int count ) { position = position - num_ ; if ( position < num_ ) { position += count ; } else { position = position % count ; } return position ; }
public static string lookup tag ( list < language range > priority list , collection < string > tags ) { return locale matcher . lookup tag ( priority list , tags ) ; }
public j browser driver ( ) { this ( settings . builder ( ) . build ( ) ) ; }
public void root to leaf paths ( binary node < e > node , e [ ] path list , int path length ) { if ( node == null ) return ; path list [ path length ] = node . value ; path length ++ ; if ( node . left == null && node . right == null ) { int i ; for ( i = num_ ; i < path length - num_ ; i ++ ) { out . print ( path list [ i ] + str_ ) ; } out . println ( path list [ i ] ) ; } else { root to leaf paths ( node . left , path list , path length ) ; root to leaf paths ( node . right , path list , path length ) ; } }
public void start ( object ... arguments ) { this . args = arguments ; this . start ( ) ; }
private static void insertion sort ( double [ ] keys , int [ ] vals , final int start , final int end ) { for ( int i = start + num_ ; i < end ; i ++ ) { for ( int j = i ; j > start ; j -- ) { if ( keys [ j ] >= keys [ j - num_ ] ) { break ; } swap ( keys , vals , j , j - num_ ) ; } } }
public terminal seq ( collection < terminal > terminals ) { this . terminals = new linked list < terminal > ( terminals ) ; }
protected void positioned ( ) { synchronized ( this ) { if ( is seeking ) { is seeking = bool_ ; seeking send time = - num_ ; if ( next seek != - num_ ) { do seek ( next seek ) ; } } } }
public final void remove point ( double x ) { data points -- ; if ( data points <= num_ ) { initialize ( ) ; } else { sum x -= x ; sum x sq -= x * x ; } }
public void disconnect ( ) { try { m ctx . unbind service ( api connection ) ; } catch ( illegal argument exception e ) { } }
public void item key pressed ( visual item item , key event e ) ;
private string next unquoted value ( ) { int i = position ; find non literal character : for ( ; i < limit ; i ++ ) { switch ( in . char at ( i ) ) { case str_ : case str_ : case str_ : case str_ : case str_ : check lenient ( ) ; case str_ : case str_ : case str_ : case str_ : case str_ : case str_ : case str_ : case str_ : case str_ : case str_ : case str_ : break find non literal character ; } } string result = in . sub sequence ( position , i ) . to string ( ) ; position = i ; return result ; }
string on id ( identifiable object owner , string value ) throws sax exception ;
item new method item ( final string owner , final string name , final string desc , final boolean itf ) { int type = itf ? imeth : meth ; key 3 . set ( type , owner , name , desc ) ; item result = get ( key 3 ) ; if ( result == null ) { put 1 2 2 ( type , new class ( owner ) , new name type ( name , desc ) ) ; result = new item ( index ++ , key 3 ) ; put ( result ) ; } return result ; }
protected void did adjust tree ( ) { }
public boolean accept ( final i binding set bs ) { xsd boolean iv left , right ; try { left = get ( num_ ) . get ( bs ) ; } catch ( sparql type error exception ex ) { left = null ; } try { right = get ( num_ ) . get ( bs ) ; } catch ( sparql type error exception ex ) { right = null ; } if ( left == null || right == null ) { if ( left != null && left . boolean value ( ) ) return bool_ ; if ( right != null && right . boolean value ( ) ) return bool_ ; throw new sparql type error exception ( ) ; } return left . boolean value ( ) || right . boolean value ( ) ; }
public string to string header ( ) { return new result matrix plain text ( this ) . to string header ( ) ; }
public static void join ( ) throws interrupted exception { if ( default client != null ) { default client . join ( ) ; } }
public void start type resolver ( ) ;
public void success ( json object message ) { send plugin result ( new plugin result ( plugin result . status . ok , message ) ) ; }
protected void configure text view ( text view view ) { view . set text color ( text color ) ; view . set gravity ( gravity . center ) ; view . set text size ( text size ) ; view . set lines ( num_ ) ; view . set typeface ( typeface . san s_ serif , typeface . bold ) ; }
public void add group ( group group ) { if ( group != null && group . get items ( ) != null ) { m items . add all ( group . get items ( ) ) ; } }
public kim ( byte [ ] bytes , int from , int thru ) { int sum = num_ ; int value ; this . hashcode = num_ ; this . length = thru - from ; if ( this . length > num_ ) { this . bytes = new byte [ this . length ] ; for ( int at = num_ ; at < this . length ; at += num_ ) { value = ( int ) bytes [ at + from ] & num_ ; sum += value ; this . hashcode += sum ; this . bytes [ at ] = ( byte ) value ; } this . hashcode += sum << num_ ; } }
public distributed leader action ( action < s , e > action , state machine ensemble < s , e > ensemble ) { assert . not null ( action , str_ ) ; assert . not null ( ensemble , str_ ) ; this . action = action ; this . ensemble = ensemble ; }
protected abstract method do get listener method ( ) ;
private void do validation ( ) { integer error = m adapter . is time valid for stage ( m stage , m duration . get millis ( ) ) ; if ( error == null ) { m button . set enabled ( bool_ ) ; m error layout . collapse ( ) ; } else { m button . set enabled ( bool_ ) ; m error text . set text ( item view . get resources ( ) . get string ( error ) ) ; m error layout . expand ( ) ; } }
public float classify point ( readonly vec 2 d p ) { vec 2 d normal = b . sub ( a ) . perpendicular ( ) ; float d = p . sub ( a ) . dot ( normal ) ; return math . signum ( d ) ; }
public reil block ( final com . google . security . zynamics . reil . reil block block ) { m _instructions = create instructions ( block ) ; }
public static list x < integer > range ( final int start , final int end ) { return reactive seq . range ( start , end ) . to list x ( ) ; }
public service compatibility exception ( string message , object [ ] params , reason reason ) { super ( message , params ) ; set message key ( get message key ( ) + str_ + reason . to string ( ) ) ; bean . set reason ( reason ) ; }
private static of action set nw tos decode _set _tos _bits ( string action to decode , of version version , logger log ) { matcher n = pattern . compile ( str_ ) . matcher ( action to decode ) ; if ( n . matches ( ) ) { if ( n . group ( num_ ) != null ) { try { byte tosbits = get _byte ( n . group ( num_ ) ) ; of action set nw tos . builder ab = of factories . get factory ( version ) . actions ( ) . build set nw tos ( ) ; ab . set nw tos ( tosbits ) ; log . debug ( str_ , ab . build ( ) ) ; return ab . build ( ) ; } catch ( number format exception e ) { log . debug ( str_ , action to decode ) ; return null ; } } } else { log . debug ( str_ , action to decode ) ; return null ; } return null ; }
public void put attribute ( object key , object value ) ;
public boolean is batch conflation enabled ( ) ;
public void on stop ( ) { m on start pending = bool_ ; if ( ! m initialization complete ) return ; m activity delegate . on stop with native ( ) ; }
public synchronized void do handshake ( final next filter next filter ) { logger . debug ( str_ ) ; write request ( next filter , request , ( ( integer ) get session ( ) . get attribute ( handshak e_ step ) ) . int value ( ) ) ; }
public boolean put blob ( byte [ ] value , int row , int column ) { acquire reference ( ) ; try { return native put blob ( m window ptr , value , row - m start pos , column ) ; } finally { release reference ( ) ; } }
public static raster symbolizer create default raster symbolizer ( ) { raster symbolizer raster symbolizer = style factory . create raster symbolizer ( ) ; return raster symbolizer ; }
public static object deserialize ( string str ) throws io exception , class not found exception , coder exception { byte array input stream bais = new byte array input stream ( base 6 4 coder . decode ( str ) ) ; return deserialize ( bais ) ; }
public void on configuration changed ( ) { int cur first = pager . get current screen ( ) * pag e_ size ; cal page size ( ) ; int new page = cur first / pag e_ size ; remove view at ( num_ ) ; after platform list got ( ) ; pager . set current screen ( new page ) ; }
public static void debug line contents ( element line ) { document doc = line . get document ( ) ; system . out . print ( str_ ) ; for ( int i = num_ ; i < line . get element count ( ) ; i ++ ) { element l = line . get element ( i ) ; try { system . out . print ( str_ + doc . get text ( l . get start offset ( ) , l . get end offset ( ) - l . get start offset ( ) ) + str_ ) ; } catch ( bad location exception ex ) { system . out . println ( str_ ) ; } } system . out . println ( str_ ) ; }
public int iterator edge rows ( int node ) { return edge rows ( node , undirected ) ; }
public final string identifier ( ) { return identifier ; }
public static string to json ( calendar cal ) { return defaul t_ generator . to json ( cal ) ; }
public static workflow . method expand volumes method ( uri storage , uri pool , uri volume , long size ) { return new workflow . method ( str_ , storage , pool , volume , size ) ; }
public static void save description ( final window parent , final i navi address space address space , final string description ) { try { address space . get configuration ( ) . set description ( description ) ; } catch ( final couldnt save data exception e ) { c utility functions . log exception ( e ) ; final string inner message = str_ + str_ ; final string inner description = c utility functions . create description ( string . format ( str_ , address space . get configuration ( ) . get name ( ) ) , new string [ ] { str_ } , new string [ ] { str_ } ) ; navi error dialog . show ( parent , inner message , inner description , e ) ; } }
public boolean has explicit name ( ) { return m name != null ; }
private void update progress ( int progress ) { if ( my host != null && progress != previous progress ) { my host . update progress ( progress ) ; } previous progress = progress ; }
public static native boolean isj query loaded ( ) ;
public void test min shingle size and token separator ( ) throws exception { reader reader = new string reader ( str_ ) ; token stream stream = whitespace mock tokenizer ( reader ) ; stream = token filter factory ( str_ , str_ , str_ , str_ , str_ , str_ , str_ ) . create ( stream ) ; assert token stream contents ( stream , new string [ ] { str_ , str_ , str_ , str_ , str_ , str_ , str_ } ) ; }
private void write operations array ( indenting writer p ) throws io exception { p . pln i ( str_ + id operation + str_ ) ; for ( int i = num_ ; i < remote methods . length ; i ++ ) { if ( i > num_ ) p . pln ( str_ ) ; p . p ( str_ + id operation + str_ + remote methods [ i ] . get operation string ( ) + str_ ) ; } p . pln ( ) ; p . p oln ( str_ ) ; }
public void add table ( int idx , table table ) { if ( table != null ) { tables . add ( idx , table ) ; } }
private void add hyperlink token ( int start , int end , int token type ) { int so = start + offset shift ; add token ( zz buffer , start , end , token type , so , bool_ ) ; }
public void pause ( ) { m paused = bool_ ; }
public int compare to ( float buffer other buffer ) { int compare remaining = ( remaining ( ) < other buffer . remaining ( ) ) ? remaining ( ) : other buffer . remaining ( ) ; int this pos = position ; int other pos = other buffer . position ; float this float , other float ; while ( compare remaining > num_ ) { this float = get ( this pos ) ; other float = other buffer . get ( other pos ) ; if ( ( this float != other float ) && ( ( this float == this float ) || ( other float == other float ) ) ) { return this float < other float ? - num_ : num_ ; } this pos ++ ; other pos ++ ; compare remaining -- ; } return remaining ( ) - other buffer . remaining ( ) ; }
public final boolean has type arguments ( ) { return ( this . flags & ha s_ typ e_ arguments ) != num_ ; }
private void initialize default ( ) { mc eliece cc a2 key generation parameters mc cc a2 params = new mc eliece cc a2 key generation parameters ( new secure random ( ) , new mc eliece cc a2 parameters ( ) ) ; init ( mc cc a2 params ) ; }
public static local file filter from ( snapshot directory directory , boolean to check last modified timestamp , boolean is combined ) { return new local file filter ( directory , to check last modified timestamp , is combined ) ; }
protected void validate access token ( string access token ) throws services exception { if ( ! mapbox utils . is access token valid ( access token ) ) { throw new services exception ( str_ ) ; } }
public static string random string ( string source , int length ) { return string utils . is empty ( source ) ? null : random string ( source . to char array ( ) , length ) ; }
private static void get long array region ( jni environment env , int array jref , int start index , int length , address buf address ) { if ( trace jni ) vm . sys write ( str_ ) ; runtime entrypoints . check jni count down to gc ( ) ; try { long [ ] source array = ( long [ ] ) env . get jni ref ( array jref ) ; if ( ( start index < num_ ) || ( start index + length > source array . length ) ) { env . record exception ( new array index out of bounds exception ( ) ) ; return ; } memory . memcopy ( buf address , magic . object as address ( source array ) . plus ( start index << lo g_ byte s_ i n_ long ) , length << lo g_ byte s_ i n_ long ) ; } catch ( throwable unexpected ) { if ( trace jni ) unexpected . print stack trace ( system . err ) ; env . record exception ( unexpected ) ; } }
public static void subtract ( int [ ] n 1 , int [ ] n 2 , int [ ] result , int [ ] sign ) { int b = n 1 . length - num_ ; int carry = num_ ; boolean smaller = ( compare to ( n 2 , n 1 ) < num_ ) ; while ( b >= num_ ) { int s = n 1 [ b ] - n 2 [ b ] ; if ( ! smaller ) { s = - s ; } s += carry ; if ( s >= num_ ) { result [ b ] = s ; carry = num_ ; } else { carry = - num_ ; result [ b ] = s + num_ ; } b -- ; } if ( ! smaller ) { sign [ num_ ] = - num_ ; } else { sign [ num_ ] = carry + num_ ; } }
public string builder encode body ( string builder retval ) { return date . encode ( retval ) ; }
final public void pan s ( ) { pan ( num_ ) ; }
principal id authenticate ( x 5 0 9 certificate [ ] t ls cert chain ) ;
public abstract file operation copy for child ( file child ) ;
public dtm iterator clone with reset ( ) throws clone not supported exception { descendant iterator clone = ( descendant iterator ) super . clone with reset ( ) ; clone . m _traverser = m _traverser ; clone . reset proximity positions ( ) ; return clone ; }
protected boolean is in migration ( ) { boolean result = bool_ ; for ( vm vm : get vm list ( ) ) { if ( vm . is in migration ( ) ) { result = bool_ ; break ; } } return result ; }
public void add implicit resolver ( tag tag , pattern regexp , string first ) { resolver . add implicit resolver ( tag , regexp , first ) ; }
final void advance ( ) { if ( next == null ) throw new no such element exception ( ) ; last returned = next ; for ( ; ; ) { next = next . next ; if ( next == null ) break ; object x = next . value ; if ( x != null && x != next ) { next value = ( v ) x ; break ; } } }
public signature visitor visit interface ( ) { return this ; }
public acela turnout ( string system name , string user name , acela system connection memo memo ) { super ( system name , user name ) ; _memo = memo ; prefix = _memo . get system prefix ( ) + str_ ; initialize turnout ( system name ) ; }
public boolean same as ( region version vector < t > other ) { map < t , region version holder < t > > my member to version = get member to version ( ) ; map < t , region version holder < t > > other member to version = other . get member to version ( ) ; if ( ! my member to version . key set ( ) . equals ( other member to version . key set ( ) ) ) { return bool_ ; } for ( iterator < t > it = my member to version . key set ( ) . iterator ( ) ; it . has next ( ) ; ) { t key = it . next ( ) ; if ( ! my member to version . get ( key ) . same as ( other member to version . get ( key ) ) ) { return bool_ ; } } map < t , long > my gc version = get member to gc version ( ) ; map < t , long > other gc version = other . get member to gc version ( ) ; if ( ! my gc version . equals ( other gc version ) ) { return bool_ ; } return bool_ ; }
final void update head ( node < e > h , node < e > p ) { if ( h != p && cas head ( h , p ) ) h . lazy set next ( h ) ; }
public scale and index index ( int index ) { return new scale and index ( scale , index ) ; }
public static attribute meta data generate attribute meta data ( example set example set , string name , expression type expression type ) { attribute meta data new attribute = null ; attribute existing att = example set . get attributes ( ) . get ( name ) ; int ontology = expression type . get attribute type ( ) ; if ( ontology == ontology . binominal ) { new attribute = new attribute meta data ( name , ontology . binominal ) ; hash set < string > values = new hash set < > ( ) ; values . add ( str_ ) ; values . add ( str_ ) ; new attribute . set value set ( values , set relation . equal ) ; } else { new attribute = new attribute meta data ( name , ontology ) ; } if ( existing att != null ) { new attribute . set role ( example set . get attributes ( ) . get role ( existing att ) . get special name ( ) ) ; } return new attribute ; }
public static boolean is jelly bean ( ) { return build . version . sd k_ int >= build . versio n_ codes . jell y_ bean ; }
public void test compare to zero neg ( ) { byte b bytes [ ] = { num_ , num_ , num_ , - num_ , - num_ , num_ , num_ , num_ , num_ , - num_ , num_ , num_ , num_ , num_ } ; int b sign = - num_ ; big integer a number = big integer . zero ; big integer b number = new big integer ( b sign , b bytes ) ; assert equals ( num_ , a number . compare to ( b number ) ) ; }
public boolean is enabled ( ) { return settings . get boolean ( str_ ) ; }
protected void update ( ) { string val = element . get attribute ns ( namespace uri , local name ) ; if ( val . length ( ) == num_ ) { base val = default value ; } else { base val = get enumeration number ( val ) ; } valid = bool_ ; }
protected void configure text view ( text view view ) { view . set text color ( text color ) ; view . set gravity ( gravity . center ) ; view . set text size ( text size ) ; view . set ellipsize ( text utils . truncate at . end ) ; view . set lines ( num_ ) ; }
void on transition to bridge busy ( ) ;
public server object ( node node ) { element elm = ( element ) node ; name = elm . get attribute ( ds config mgr . name ) ; host = elm . get attribute ( ds config mgr . host ) ; port = elm . get attribute ( ds config mgr . port ) ; type = elm . get attribute ( ds config mgr . aut h_ type ) ; }
protected void handle io exception ( io exception e ) throws io exception { throw e ; }
public void execute ( transformer impl transformer ) throws transformer exception { try { string data = transformer . transform to string ( this ) ; transformer . get result tree handler ( ) . comment ( data ) ; } catch ( org . xml . sax . sax exception se ) { throw new transformer exception ( se ) ; } }
public boolean is voice calls enabled ( ) { return voice calls enabled ; }
public void increase frequency ( ) ;
private activity facility find activity location ( string act type , coord coord start , coord coord end ) { coord coord = coord utils . create coord ( ( coord start . get x ( ) + coord end . get x ( ) ) / num_ , ( coord start . get y ( ) + coord end . get y ( ) ) / num_ ) ; if ( act type . equals ( str_ ) ) return ( activity facility ) leisure facility quad tree . get closest ( coord . get x ( ) , coord . get y ( ) ) ; else if ( act type . equals ( str_ ) ) return ( activity facility ) shop facility quad tree . get closest ( coord . get x ( ) , coord . get y ( ) ) ; else throw new null pointer exception ( str_ + act type + str_ ) ; }
public static < i0 , i1 , o > function < tuple 2 < i0 , i1 > , o > function ( class < ? > the class , string method name , class < ? > parameter type 0 , class < ? > parameter type 1 ) { return function utils . function ( the class , method name , parameter type 0 , parameter type 1 ) ; }
public void delete transport zone ( string id , future callback < void > response callback ) throws io exception { delete async ( transpor t_ zone s_ bas e_ path + str_ + id , http status . s c_ ok , response callback ) ; }
boolean visit leave ( node visited ) throws throwable type ;
public node ( k key , v value , node < k , v > sentinel , lock lock ) { this . sentinel = sentinel ; this . next = unlinked ; this . prev = unlinked ; this . value = value ; this . lock = lock ; this . key = key ; }
public void test read 1 ( ) throws exception { byte [ ] data = new byte [ ] { - num_ , - num_ , - num_ , - num_ , - num_ , num_ , num_ , num_ , num_ , num_ } ; test input stream tis = new test input stream ( data ) ; cipher input stream cis = new cipher input stream ( tis , new null cipher ( ) ) ; byte res ; for ( int i = num_ ; i < data . length ; i ++ ) { if ( ( res = ( byte ) cis . read ( ) ) != data [ i ] ) { fail ( str_ + str_ + data [ i ] + str_ + res + str_ ) ; } } if ( cis . read ( ) != - num_ ) { fail ( str_ ) ; } }
public boolean on message received ( session message message , peer recipient ) ;
protected void draw status bar ( final graphics 2 d g 2d , final int x , final int y , final int width ) { if ( show title ) { draw title ( g 2d , x , y , width ) ; } if ( show hp ) { draw h pbar ( g 2d , x , y , width ) ; } }
public static sql template create ( string template ) { return new sql template ( template , immutable map . < string , string > of ( ) ) ; }
protected void configure file input ( class < ? extends mapper < fact , null writable , ? , ? > > file mapper , final boolean filter ) throws io exception { configure file input ( file mapper , null , filter ) ; }
public static _ fields find by thrift id or throw ( int field id ) { _ fields fields = find by thrift id ( field id ) ; if ( fields == null ) throw new illegal argument exception ( str_ + field id + str_ ) ; return fields ; }
public void test _ inser t_ n quads _by _ url ( ) throws exception { if ( test mode . quads != get test mode ( ) ) return ; { final string query str = str_ ; final boolean query query = cxn . prepare boolean query ( query language . sparql , query str ) ; assert equals ( bool_ , query . evaluate ( ) ) ; } final long expected statement count = num_ ; { final url url = new url ( str_ ) ; cxn . add ( url , str_ , rdf format . nquads ) ; assert equals ( num_ , get exact size ( ) ) ; } { final string query str = str_ ; final tuple query query = cxn . prepare tuple query ( query language . sparql , query str ) ; assert equals ( expected statement count , count results ( query . evaluate ( ) ) ) ; } }
builder new builder for type ( ) ;
public abstract tlc state dequeue ( ) ;
public final boolean skip ( char c , char sequence csq ) { if ( this . at ( c , csq ) ) { index ++ ; return bool_ ; } else { return bool_ ; } }
private void is valid outstanding amount ( object out standing amount , object expected amount ) { assert . assert equals ( ( float ) out standing amount , expected amount ) ; }
public ganglia listener ( final inet address group , final int port , final i ganglia message decoder decoder , final i ganglia message handler handler ) { if ( group == null ) throw new illegal argument exception ( ) ; if ( port <= num_ ) throw new illegal argument exception ( ) ; if ( handler == null ) throw new illegal argument exception ( ) ; if ( decoder == null ) throw new illegal argument exception ( ) ; this . group = group ; this . port = port ; this . decoder = decoder ; this . handler = handler ; }
int do final ( byte [ ] input , int input offset , int input len , byte [ ] output , int output offset ) throws short buffer exception , illegal block size exception , bad padding exception ;
public void render payment input fields ( payment item payment item , account on file account on file , input data persister input data persister , payment context payment context ) { if ( payment item == null ) { throw new invalid parameter exception ( str_ ) ; } render input registry registry = new render input registry ( custom renderers ) ; for ( payment product field field : payment item . get payment product fields ( ) ) { render input field interface renderer = registry . get render input field for field type ( field . get display hints ( ) . get form element ( ) . get type ( ) ) ; if ( renderer != null ) { render field . render field ( renderer , field , payment item , account on file , input data persister , payment context ) ; } } }
public int length ( ) { return this . my hash map . size ( ) ; }
public abstract boolean intersects ( vector 3f point ) ;
protected svgomfe func a element ( ) { }
public object run safely ( catbert . fast stack stack ) throws exception { long q = ( ( number ) stack . pop ( ) ) . long value ( ) ; agent a = ( agent ) stack . pop ( ) ; if ( permissions . has permission ( permissions . permissio n_ recordingschedule , stack . get ui mgr ( ) ) ) carny . get instance ( ) . set stop padding ( a , q ) ; return null ; }
public byte array buffer ( final int initial capacity ) { this ( num_ , num_ , new byte [ assert non negative ( str_ , initial capacity ) ] ) ; }
public c perspective model ( final i graph model model ) { m _models . put ( perspective type . debug perspective , new c debug perspective model ( model ) ) ; }
public void hook before open ( ) { }
public native boolean is seekable ( ) ;
void on workspace selected ( workspace dto workspace ) ;
public final string to string ( ) { string out = null ; try { byte array output stream baos = new byte array output stream ( ) ; buffered output stream bos = new buffered output stream ( baos ) ; output ( bos ) ; bos . flush ( ) ; if ( get code set ( ) != null ) { out = baos . to string ( get code set ( ) ) ; } else { out = baos . to string ( ) ; } bos . close ( ) ; baos . close ( ) ; } catch ( io exception ioe ) { } return ( out ) ; }
public static hadoop file system counter writer delegate counter writer delegate ( class loader ldr , ignite hadoop file system counter writer proxy ) { return new instance ( counte r_ write r_ delegat e_ cls , ldr , proxy ) ; }
i queryable < t > unique ( ) ;
public static string encode from file ( string filename ) { string encoded data = null ; base 6 4 . input stream bis = null ; try { java . io . file file = new java . io . file ( filename ) ; byte [ ] buffer = new byte [ math . max ( ( int ) ( file . length ( ) * num_ ) , num_ ) ] ; int length = num_ ; int num bytes = num_ ; bis = new base 6 4 . input stream ( new java . io . buffered input stream ( new java . io . file input stream ( file ) ) , base 6 4 . encode ) ; while ( ( num bytes = bis . read ( buffer , length , num_ ) ) >= num_ ) length += num bytes ; encoded data = new string ( buffer , num_ , length , base 6 4 . preferre d_ encoding ) ; } catch ( java . io . io exception e ) { system . err . println ( str_ + filename ) ; } finally { try { bis . close ( ) ; } catch ( exception e ) { } } return encoded data ; }
protected void do default arrangement ( graph result graph ) { graph source graph = get algorithm runner ( ) . get source graph ( ) ; boolean arranged all = graph utils . arrange by source graph ( result graph , source graph ) ; if ( ! arranged all ) { graph utils . circle layout ( result graph , num_ , num_ , num_ ) ; } }
synchronized public void create empty db ( ) { m open helper . create empty db ( m open helper . get writable database ( ) ) ; }
public annotatable element item provider ( adapter factory adapter factory ) { super ( adapter factory ) ; }
public static void v ( string tag , string msg ) { if ( s level > leve l_ verbose ) { return ; } log . v ( tag , msg ) ; }
public simple date format ( ) { super ( ) ; }
public boolean allow start tls ( ) { return current config . is allow start tls ( ) && ! current config . is use ssl ( ) ; }
private runtime ( ) { }
public print event ( object source ) { super ( source ) ; }
boolean is bound ( ) ;
public unsupported encoding exception ( string s ) { super ( s ) ; }
private void write q name ( javax . xml . namespace . q name qname , javax . xml . stream . xml stream writer xml writer ) throws javax . xml . stream . xml stream exception { java . lang . string namespace uri = qname . get namespace uri ( ) ; if ( namespace uri != null ) { java . lang . string prefix = xml writer . get prefix ( namespace uri ) ; if ( prefix == null ) { prefix = generate prefix ( namespace uri ) ; xml writer . write namespace ( prefix , namespace uri ) ; xml writer . set prefix ( prefix , namespace uri ) ; } if ( prefix . trim ( ) . length ( ) > num_ ) { xml writer . write characters ( prefix + str_ + org . apache . axis 2 . databinding . utils . converter util . convert to string ( qname ) ) ; } else { xml writer . write characters ( org . apache . axis 2 . databinding . utils . converter util . convert to string ( qname ) ) ; } } else { xml writer . write characters ( org . apache . axis 2 . databinding . utils . converter util . convert to string ( qname ) ) ; } }
public boolean is state active ( state state ) { switch ( state ) { case main _region _ b : return state vector [ num_ ] == state . main _region _ b ; case main _region _ c : return state vector [ num_ ] == state . main _region _ c ; case main _region _ d : return state vector [ num_ ] == state . main _region _ d ; case main _region _ a : return state vector [ num_ ] == state . main _region _ a ; default : return bool_ ; } }
public builder with message dispatcher concurrency ( int concurrency ) { config . set message dispatcher concurrency ( concurrency ) ; return this ; }
public void on window focus changed ( boolean has window focus ) { m html api handler . on window focus changed ( has window focus ) ; }
boolean add historic visits to usage reports buffer ( ) ;
protected void on tab switcher transition finished ( ) { }
public order update task ( sq lite database database , sparse int array position map , db update listener listener ) { this . database = database ; this . position map = position map ; this . listener = listener ; }
protected void sequence _ module filter ( i serialization context context , module filter semantic object ) { generic sequencer . create sequence ( context , semantic object ) ; }
private void write q name attribute ( java . lang . string namespace , java . lang . string att name , javax . xml . namespace . q name qname , javax . xml . stream . xml stream writer xml writer ) throws javax . xml . stream . xml stream exception { java . lang . string attribute namespace = qname . get namespace uri ( ) ; java . lang . string attribute prefix = xml writer . get prefix ( attribute namespace ) ; if ( attribute prefix == null ) { attribute prefix = register prefix ( xml writer , attribute namespace ) ; } java . lang . string attribute value ; if ( attribute prefix . trim ( ) . length ( ) > num_ ) { attribute value = attribute prefix + str_ + qname . get local part ( ) ; } else { attribute value = qname . get local part ( ) ; } if ( namespace . equals ( str_ ) ) { xml writer . write attribute ( att name , attribute value ) ; } else { register prefix ( xml writer , namespace ) ; xml writer . write attribute ( namespace , att name , attribute value ) ; } }
public notification chain basic set annotation list ( expression annotation list new annotation list , notification chain msgs ) { expression annotation list old annotation list = annotation list ; annotation list = new annotation list ; if ( e notification required ( ) ) { e notification impl notification = new e notification impl ( this , notification . set , n4 js package . annotabl e_ expressio n _ _ annotatio n_ list , old annotation list , new annotation list ) ; if ( msgs == null ) msgs = notification ; else msgs . add ( notification ) ; } return msgs ; }
public double rate ( double time , double max time , double initial ) ;
public static < t extends object & java . lang . comparable < ? super t > > t max ( collection < ? extends t > collection ) { iterator < ? extends t > it = collection . iterator ( ) ; t max = it . next ( ) ; if ( number comparator . is number ( max ) ) { return ( t ) max ( collection , number comparator . create comparator ( max . get class ( ) ) ) ; } while ( it . has next ( ) ) { t next = it . next ( ) ; if ( max . compare to ( next ) < num_ ) { max = next ; } } return max ; }
public i cal reader ( file file ) throws file not found exception { this ( file , i cal version . v 2 _ 0 ) ; }
private void return data ( object ret ) { if ( my host != null ) { my host . return data ( ret ) ; } }
