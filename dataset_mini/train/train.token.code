protected void decrypt ( byte [ ] b , int off , int len , long fp ) { for ( int i = off ; i < off + len ; i ++ ) { b [ i ] = ( byte ) decrypt ( b [ i ] , fp ++ ) ; } }
public int num generated sequences ( ) { return gral components . size ( ) ; }
public gamma distr ( random seed , int shape , double scale ) { this ( shape , scale ) ; num gen . reseed random generator ( seed . next long ( ) ) ; }
public zipfian generator ( long min , long max , double _zipfianconstant , double _zetan ) { items = max - min + num_ ; base = min ; zipfianconstant = _zipfianconstant ; theta = zipfianconstant ; zeta 2theta = zeta ( num_ , theta ) ; alpha = num_ / ( num_ - theta ) ; zetan = _zetan ; countforzeta = items ; eta = ( num_ - math . pow ( num_ / items , num_ - theta ) ) / ( num_ - zeta 2theta / zetan ) ; next int ( ) ; }
protected remote object ( remote ref newref ) { ref = newref ; }
void on data changed ( picker fragment < ? > fragment ) ;
public void cancel all ( request filter filter ) { synchronized ( m current requests ) { for ( request < ? > request : m current requests ) { if ( filter . apply ( request ) ) { request . cancel ( ) ; } } } }
public list < marker group > markers ( ) { return markers ; }
void adjust selection ( j editor pane pane , html document doc , int start offset , int old length ) { int new length = doc . get length ( ) ; if ( new length != old length && start offset < new length ) { if ( start offset > num_ ) { string text ; try { text = doc . get text ( start offset - num_ , num_ ) ; } catch ( bad location exception ble ) { text = null ; } if ( text != null && text . length ( ) > num_ && text . char at ( num_ ) == str_ ) { pane . select ( start offset , start offset ) ; } else { pane . select ( start offset + num_ , start offset + num_ ) ; } } else { pane . select ( num_ , num_ ) ; } } }
decision table query decision table resource name like ( string resource name like ) ;
public boolean should color output ( ) { boolean should color output = cli argument parser . should color output ( ) ; if ( should color output && yaml configuration . is present ( ) && ! yaml configuration . get ( ) . get color ( ) . is empty ( ) ) { string option = yaml configuration . get ( ) . get color ( ) ; validate color option ( option ) ; if ( option . equals ( messages . disable ) ) { should color output = bool_ ; } } return should color output ; }
public string [ ] segments ( ) { string [ ] segment copy = new string [ segments . length ] ; system . arraycopy ( segments , num_ , segment copy , num_ , segments . length ) ; return segment copy ; }
protected void click on view ( int id ) { solo . sleep ( num_ ) ; solo . click on view ( get view ( id ) ) ; }
public b middle or else ( b default value ) { return maybe middle ( ) . get or else ( default value ) ; }
public void open bindings ( ) ;
public void test float sort missing first ( ) throws exception { check sort missing first ( str_ , str_ , str_ ) ; }
public data format exception ( ) { super ( ) ; }
public params ( ) { initial = defaul t_ initia l_ millis ; multiplier = defaul t_ multiplier ; maximum = defaul t_ maximu m_ millis ; }
public void copy activations ( neuron group to copy ) { int i = num_ ; for ( neuron neuron : to copy . get neuron list ( ) ) { if ( i < neuron list . size ( ) ) { neuron list . get ( i ) . set activation ( neuron . get input value ( ) + neuron . get activation ( ) ) ; neuron list . get ( i ++ ) . set spike ( neuron . is spike ( ) ) ; } } }
public void refresh ( ) { board . routing board routing _board = board _handling . get _routing _board ( ) ; combo box model < rule via info list > new _model = new default combo box model < rule via info list > ( routing _board . brd _rules . via _rules ) ; via _rule _combo _box . set model ( new _model ) ; freert . rules . clearance matrix clearance _matrix = board _handling . get _routing _board ( ) . brd _rules . clearance _matrix ; if ( this . clearance _combo _box . get _class _count ( ) != routing _board . brd _rules . clearance _matrix . get _class _count ( ) ) { this . clearance _combo _box . adjust ( clearance _matrix ) ; } this . clearance _combo _box . set selected index ( board _handling . itera _settings . get _manual _trace _clearance _class ( ) ) ; int via _rule _index = board _handling . itera _settings . get _manual _via _rule _index ( ) ; if ( via _rule _index < this . via _rule _combo _box . get item count ( ) ) { this . via _rule _combo _box . set selected index ( board _handling . itera _settings . get _manual _via _rule _index ( ) ) ; } this . set _selected _layer ( this . layer _combo _box . get _selected _layer ( ) ) ; this . repaint ( ) ; }
public property property ( ) { return property ; }
public boolean is list _ 1 ( ) { return list _ 1 ; }
void check required children ( locator locator ) throws sax parse exception { array list < element > required children = this . required childen ; if ( required children != null ) { for ( int i = required children . size ( ) - num_ ; i >= num_ ; i -- ) { element child = required children . get ( i ) ; if ( ! child . visited ) { throw new bad xml exception ( str_ + this + str_ + str_ + child + str_ , locator ) ; } } } }
public object run safely ( catbert . fast stack stack ) throws exception { return new integer ( stack . get ui mgr safe ( ) . get int ( event router . hid e_ wai t_ time , num_ ) ) ; }
void initialize global comment ( array list < i comment > comments ) throws couldnt save data exception ;
public int hash code ( ) { return hash value ; }
private org . carbondata . format . encoding from wrapper to external encoding ( encoding encoder ) { if ( null == encoder ) { return null ; } switch ( encoder ) { case dictionary : return org . carbondata . format . encoding . dictionary ; case delta : return org . carbondata . format . encoding . delta ; case rle : return org . carbondata . format . encoding . rle ; case inverte d_ index : return org . carbondata . format . encoding . inverte d_ index ; case bi t_ packed : return org . carbondata . format . encoding . bi t_ packed ; case direc t_ dictionary : return org . carbondata . format . encoding . direc t_ dictionary ; default : return org . carbondata . format . encoding . dictionary ; } }
protected void sequence _ intersection type expression ol d_ type ref with modifiers ( i serialization context context , intersection type expression semantic object ) { generic sequencer . create sequence ( context , semantic object ) ; }
public static string gensalt ( int log _rounds , secure random random ) { if ( log _rounds < num_ || log _rounds > num_ ) { throw new illegal argument exception ( str_ ) ; } string builder rs = new string builder ( ) ; byte rnd [ ] = new byte [ bcryp t_ sal t_ len ] ; random . next bytes ( rnd ) ; rs . append ( str_ ) ; if ( log _rounds < num_ ) { rs . append ( str_ ) ; } rs . append ( log _rounds ) ; rs . append ( str_ ) ; encode _base 6 4 ( rnd , rnd . length , rs ) ; return rs . to string ( ) ; }
public void renew ( long duration ) throws unknown lease exception , lease denied exception , remote exception { long exp = do renew ( duration ) + system time . time millis ( ) ; if ( exp < num_ ) exp = long . ma x_ value ; synchronized ( this ) { expiration = exp ; } }
public select same action ( drawing editor editor ) { super ( editor ) ; resource bundle util labels = resource bundle util . get bundle ( str_ ) ; labels . configure action ( this , id ) ; update enabled state ( ) ; }
public void put ( final resources res , final string key , final recycling bitmap drawable bmp ) { put ( res , key , bmp , bool_ ) ; }
public static void main ( final string [ ] args ) { dom test case . do main ( hc _nodegetlastchildnull . class , args ) ; }
void write ( environment env , data output stream out , constant pool tab ) throws io exception { out . write byte ( constan t_ class ) ; out . write short ( tab . index ( name ) ) ; }
boolean is entrance transition enabled ( ) { return m entrance transition enabled ; }
public static int extract opcode from unit ( int opcode unit ) { int low byte = opcode unit & num_ ; return ( ( low byte == num_ ) || ( low byte == num_ ) ) ? opcode unit : low byte ; }
public static int count all ( ) { return get persistence ( ) . count all ( ) ; }
public void test _do as privileged _ 0 1 ( ) { subject subj = new subject ( ) ; privileged action < object > pa = new my privileged action ( ) ; privileged action < object > pa null = null ; access control context acc = access controller . get context ( ) ; try { object obj = subject . do as privileged ( null , pa , acc ) ; } catch ( exception e ) { fail ( str_ + e ) ; } try { object obj = subject . do as privileged ( subj , pa , acc ) ; } catch ( exception e ) { fail ( str_ + e ) ; } try { object obj = subject . do as privileged ( subj , pa null , acc ) ; fail ( str_ ) ; } catch ( null pointer exception npe ) { } }
public static file to file ( string parent , string path ) { return new file ( parent . replace ( fil e_ ant i_ seperator , fil e_ seperator ) , path . replace ( fil e_ ant i_ seperator , fil e_ seperator ) ) ; }
protected file object unwrap ( file object file object ) { return file object ; }
private void on ready ( media info media info , boolean should start playback , int start point , json object custom data ) { m selected media = media info ; update closed caption state ( ) ; try { m cast controller . set stream type ( m selected media . get stream type ( ) ) ; if ( should start playback ) { m playback state = media status . playe r_ stat e_ buffering ; m cast controller . set playback status ( m playback state ) ; m cast manager . load media ( m selected media , bool_ , start point , custom data ) ; } else { if ( m cast manager . is remote media playing ( ) ) { m playback state = media status . playe r_ stat e_ playing ; } else { m playback state = media status . playe r_ stat e_ paused ; } m cast controller . set playback status ( m playback state ) ; } } catch ( exception e ) { loge ( tag , str_ , e ) ; m cast controller . close activity ( ) ; } media queue media queue = m cast manager . get media queue ( ) ; int size = num_ ; int position = num_ ; if ( media queue != null ) { size = media queue . get count ( ) ; position = media queue . get current item position ( ) ; } m cast controller . on queue items updated ( size , position ) ; update metadata ( ) ; restart trickplay timer ( ) ; }
public sorted set doc values field ( string name , bytes ref bytes ) { super ( name , type ) ; fields data = bytes ; }
public static int bin _of _logrpu ( double logrpu , histogram bins hbins ) { for ( int i = num_ ; i < hbins . get _ lo g_ bi n_ centers ( ) . length ; ++ i ) { if ( hbins . get _ lo g_ bi n_ centers ( ) [ i ] >= logrpu ) { return i ; } } return hbins . get _ nbins ( ) - num_ ; }
private void update textured ( ) { paint textured = ( root . get client property ( unifie d_ toolba r_ look ) == boolean . true ) ; if ( paint textured && platform utils . is mac ( ) ) { if ( root . is valid ( ) ) { throw new illegal argument exception ( str_ ) ; } root . put client property ( str_ , boolean . true ) ; look and feel . install property ( ( j component ) root . get content pane ( ) , str_ , boolean . false ) ; } else { root . put client property ( str_ , null ) ; } }
public static void move file to directory ( file src file , file dest dir , boolean create dest dir ) throws io exception { if ( src file == null ) { throw new null pointer exception ( str_ ) ; } if ( dest dir == null ) { throw new null pointer exception ( str_ ) ; } if ( ! dest dir . exists ( ) && create dest dir ) { dest dir . mkdirs ( ) ; } if ( ! dest dir . exists ( ) ) { throw new file not found exception ( str_ + dest dir + str_ + create dest dir + str_ ) ; } if ( ! dest dir . is directory ( ) ) { throw new io exception ( str_ + dest dir + str_ ) ; } move file ( src file , new file ( dest dir , src file . get name ( ) ) ) ; }
void menu drag mouse released ( menu drag mouse event e ) ;
public counter set b tree tuple serializer ( final i key builder factory key builder factory ) { super ( key builder factory ) ; }
public string own tokenizer ( string text , string nontoken delims , string token delims ) { this ( text , nontoken delims , token delims , bool_ ) ; }
private list < error information > validate ( final password data password , final password data old password , final user info bean ui bean ) throws pwm unrecoverable exception { final list < error information > internal results = internal pwm policy validator ( password , old password , ui bean ) ; if ( pwm application != null ) { final list < error information > external results = invoke external rule methods ( pwm application . get config ( ) , policy , password , ui bean ) ; internal results . add all ( external results ) ; } return internal results ; }
public document word histogram ( ) { min size = num_ ; max size = num_ ; }
public mapping factory impl ( ) { super ( ) ; }
public static operation create patch operation ( stateless service service , resource state state , string existing state link ) { uri existing state uri = uri utils . build uri ( service . get host ( ) , existing state link ) ; return operation . create patch ( existing state uri ) . set body ( state ) . set referer ( service . get uri ( ) ) ; }
public synchronized void dont use gui ( ) { if ( ok to use gui ) { ok to use gui = bool_ ; synchronized ( children ) { for ( iterator i = children . key set ( ) . iterator ( ) ; i . has next ( ) ; ) { visibility v = get child visibility ( i . next ( ) ) ; if ( v != null ) v . dont use gui ( ) ; } } } }
client producer create producer ( ) throws active mq exception ;
public static byte [ ] to bytes ( short x , byte [ ] bytes , int byte pos ) { bytes [ byte pos ++ ] = ( byte ) ( x ) ; bytes [ byte pos ] = ( byte ) ( x > > num_ ) ; return bytes ; }
private void update progress ( string progress label , int progress ) { if ( my host != null ) { my host . update progress ( progress label , progress ) ; } else { system . out . println ( progress label + str_ + progress + str_ ) ; } }
public auth restore query ( vk api client client , string phone ) { super ( client , str_ , restore response . class ) ; phone ( phone ) ; }
public long resolve content id ( final string content ) { final long content id = number utils . to long ( content , num_ ) ; if ( content id > num_ ) { bookmark service . save bookmark for content ( content ) ; return content id ; } final string content id str = bookmark service . get content for uri ( content ) ; return number utils . to long ( content id str , num_ ) ; }
void add op ( op < op result > operation ) ;
public boolean is pinch zoom enabled ( ) { return m pinch zoom enabled ; }
private static char [ ] zz unpack c map ( string packed ) { char [ ] map = new char [ num_ ] ; int i = num_ ; int j = num_ ; while ( i < num_ ) { int count = packed . char at ( i ++ ) ; char value = packed . char at ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > num_ ) ; } return map ; }
protected elem variable create pseudo var decl ( elem template element psuedo var recipient , loc path iterator lpi , boolean is global ) throws org . w 3c . dom . dom exception { q name unique pseudo var name = new q name ( psuedovarnamespace , str_ + get pseudo var id ( ) ) ; if ( is global ) { return create global pseudo var decl ( unique pseudo var name , ( stylesheet root ) psuedo var recipient , lpi ) ; } else return create local pseudo var decl ( unique pseudo var name , psuedo var recipient , lpi ) ; }
public javax . naming . binding next element ( ) { try { return next ( ) ; } catch ( naming exception ne ) { throw new no such element exception ( ) ; } }
public java rdd < point > re partition ( integer partitions ) { return this . raw point rdd . repartition ( partitions ) ; }
public static geometry overlay op ( geometry geom 0 , geometry geom 1 , int op code ) { overlay op gov = new overlay op ( geom 0 , geom 1 ) ; geometry geom ov = gov . get result geometry ( op code ) ; return geom ov ; }
generic value make value ( string entity name , object ... fields ) ;
void on selection changed ( rt edit text editor , int start , int end ) ;
public as n1 object identifier branch ( string branch id ) { return new as n1 object identifier ( this , branch id ) ; }
public vector loader ( schema schema , field vector root ) { super ( ) ; this . fields = schema . get fields ( ) ; root . initialize children from fields ( fields ) ; this . field vectors = root . get children from fields ( ) ; if ( this . field vectors . size ( ) != fields . size ( ) ) { throw new illegal argument exception ( str_ + field vectors . size ( ) + str_ + fields . size ( ) ) ; } }
public cuda exception ( string message , throwable cause ) { super ( message , cause ) ; }
private static void attempt retry on exception ( string log prefix , request < ? > request , volley error exception ) throws volley error { retry policy retry policy = request . get retry policy ( ) ; int old timeout = request . get timeout ms ( ) ; try { retry policy . retry ( exception ) ; } catch ( volley error e ) { request . add marker ( string . format ( str_ , log prefix , old timeout ) ) ; throw e ; } request . add marker ( string . format ( str_ , log prefix , old timeout ) ) ; }
public static void main ( final string [ ] args ) { dom test case . do main ( prefix 1 0 . class , args ) ; }
protected http url connection create delete ( string uri ) throws io exception { return create connection ( uri , metho d_ delete ) ; }
public boolean verbose ( ) { return soot . phase options . get boolean ( options , str_ ) ; }
public static decoding exception create decoding exception ( final error keys error id ) { return new decoding exception ( error id . to string ( ) ) ; }
public static host scsi topology lun find lun ( host scsi topology target target , host scsi disk disk ) { if ( ( target != null ) && ( target . get lun ( ) != null ) ) { for ( host scsi topology lun lun : target . get lun ( ) ) { if ( string utils . equals ( disk . get key ( ) , lun . get scsi lun ( ) ) ) { return lun ; } } } return null ; }
private void start workspace search bar animation ( final workspace . state to workspace state , int duration , animator set animation ) { final search drop target bar . state to search bar state = to workspace state . search drop target bar state ; m launcher . get search drop target bar ( ) . animate to state ( to search bar state , duration , animation ) ; }
public void start ( final string db name , final int port ) { hsql properties props = new hsql properties ( ) ; props . set property ( str_ , port ) ; props . set property ( str_ , str_ + db name ) ; props . set property ( str_ , db name ) ; do start ( props ) ; }
public void generate diffs ( file dir , int width , int height ) throws exception { file [ ] files = dir . list files ( ) ; for ( int i = num_ ; i < files . length ; i ++ ) { if ( files [ i ] . is directory ( ) ) { generate diffs ( files [ i ] , width , height ) ; continue ; } if ( files [ i ] . get name ( ) . ends with ( str_ ) ) { string testfile = files [ i ] . get absolute path ( ) ; string difffile = testfile . substring ( num_ , testfile . length ( ) - num_ ) + str_ ; generate test file ( testfile , difffile , width , height ) ; uu . p ( str_ + difffile ) ; } } }
private void update progress ( int progress ) { if ( my host != null && progress != previous progress ) { my host . update progress ( progress ) ; } previous progress = progress ; }
public void add row ( expression [ ] expr ) { list . add ( expr ) ; }
protected string encode body ( ) { return method ; }
private synchronized void user has left ( ) { list < string > rooms = joined rooms . get ( connection ) ; if ( rooms == null ) { return ; } rooms . remove ( room ) ; cleanup ( ) ; }
public server info ( string host ) { this ( host , num_ ) ; }
static void validate instance ( ) { check not null ( default session configuration , str_ ) ; }
private boolean is function call ( int from , int to ) { if ( ! is identifier ( token array [ from ] ) && ! is token ( str_ , from + num_ ) ) { return bool_ ; } return find closing index ( from + num_ , to ) > from + num_ ; }
public void clear attributes ( ) ;
protected double [ ] [ ] add components ( matrix a ) { int n = this . rows ( ) ; int m = this . columns ( ) ; double [ ] [ ] new components = new double [ n ] [ m ] ; for ( int i = num_ ; i < n ; i ++ ) { for ( int j = num_ ; j < n ; j ++ ) new components [ i ] [ j ] = components [ i ] [ j ] + a . components [ i ] [ j ] ; } return new components ; }
public void jjt add child ( node n , int i ) ;
public boolean is null ( int index ) { return json object . null . equals ( this . opt ( index ) ) ; }
private void validate emr cluster definition ( integer expected emr cluster definition id , string expected namespace , string expected emr cluster definition name , emr cluster definition expected emr cluster configuration , emr cluster definition information actual emr cluster definition ) { assert not null ( actual emr cluster definition ) ; if ( expected emr cluster definition id != null ) { assert equals ( expected emr cluster definition id , integer . value of ( actual emr cluster definition . get id ( ) ) ) ; } assert equals ( expected namespace , actual emr cluster definition . get emr cluster definition key ( ) . get namespace ( ) ) ; assert equals ( expected emr cluster definition name , actual emr cluster definition . get emr cluster definition key ( ) . get emr cluster definition name ( ) ) ; assert equals ( expected emr cluster configuration , actual emr cluster definition . get emr cluster definition ( ) ) ; }
public friends add query follow ( boolean value ) { return unsafe param ( str_ , value ) ; }
private void notify ui refresh complete ( boolean ignore hook ) { if ( m ptr indicator . has left start position ( ) && ! ignore hook && m refresh complete hook != null ) { if ( debug ) { ptr c log . d ( lo g_ tag , str_ ) ; } m refresh complete hook . take over ( ) ; return ; } if ( m ptr ui handler holder . has handler ( ) ) { if ( debug ) { ptr c log . i ( lo g_ tag , str_ ) ; } m ptr ui handler holder . on ui refresh complete ( this ) ; } m ptr indicator . on ui refresh complete ( ) ; try scroll back to top after complete ( ) ; try to notify reset ( ) ; }
void on add data tag ( final i source data tag source data tag , final change report change report ) ;
public boolean is final ( ) { return bool_ ; }
private static void clear network ( string ssid ) { list < wifi configuration > configs = m manager . get configured networks ( ) ; for ( wifi configuration c : configs ) { if ( c . ssid . contains ( ssid ) ) { m manager . remove network ( c . network id ) ; } } }
void warn missing names ( file file ) { string result = check missing names ( file ) ; if ( result . equals ( str_ ) ) { j option pane . show message dialog ( _who , str_ ) ; } else { j option pane . show message dialog ( _who , result ) ; } }
dmn deployment query decision table key like ( string key like ) ;
public node find tag ( string tag , string value , node node ) { set < string > tags = new hash set < string > ( num_ ) ; tags . add ( tag ) ; return find tag ( tags , value , node ) ; }
protected st ( ) { if ( st group . track creation events ) { if ( debug state == null ) debug state = new st . debug state ( ) ; debug state . new st event = new construction event ( ) ; } }
public file program directory ( ) { return program directory ; }
public xml string default ( string str ) { m _str = str ; }
private rect calc bounds ( int index , paint paint ) { rect bounds = new rect ( ) ; char sequence title = get title ( index ) ; bounds . right = ( int ) paint . measure text ( title , num_ , title . length ( ) ) ; bounds . bottom = ( int ) ( paint . descent ( ) - paint . ascent ( ) ) ; return bounds ; }
public static < w extends bounded window > state tag < object , watermark hold state < w > > watermark state internal ( string id , output time fn < ? super w > output time fn ) { return new simple state tag < > ( new structured id ( id ) , state specs . watermark state internal ( output time fn ) ) ; }
void on pattern cell added ( list < cell > pattern ) ;
public static string hashave ( final int quantity ) { if ( quantity == num_ ) { return str_ ; } else { return str_ ; } }
boolean post ( string message ) ;
public void remove cache filter ( string cache name ) { cache predicate p = registered caches . remove ( cache name ) ; assert p != null : cache name ; }
public boolean is session terminated by remote ( ) { return m session terminated by remote ; }
void scroll bottom ( ) ;
public seconds plus ( int seconds ) { if ( seconds == num_ ) { return this ; } return seconds . seconds ( field utils . safe add ( get value ( ) , seconds ) ) ; }
public static double quantile ( double y , double lambda ) { return - ( num_ / lambda ) * math . log ( num_ - y ) ; }
private void upgrade privilege ( privilege manager privilege manager , privilege privilege , string resource type uuid ) throws upgrade exception { try { upgrade progress . report start ( audi t_ modifie d_ polic y_ uui d_ start , privilege . get name ( ) ) ; if ( privilege != null ) { privilege . set resource type uuid ( resource type uuid ) ; privilege manager . modify ( privilege ) ; } upgrade progress . report end ( audi t_ upgrad e_ success ) ; } catch ( entitlement exception ee ) { upgrade progress . report end ( audi t_ upgrad e_ fail ) ; throw new upgrade exception ( str_ + privilege . get name ( ) , ee ) ; } }
public static void paint checkered background ( graphics g , shape clip ) { paint checkered background ( g , color . ligh t_ gray , color . gray , clip , backgroun d_ cel l_ size ) ; }
public void enqueue ( mock response response ) { mock web server . enqueue ( response ) ; }
protected void validate successful read response ( json value relationship field , resource response resource response ) throws bad request exception { string reverse property name = get relationship provider ( ) . get schema field ( ) . get reverse property name ( ) ; json value reverse property = resource response . get content ( ) . get ( reverse property name ) ; if ( reverse property . is not null ( ) && ! reverse property . is collection ( ) ) { string ref = relationship field . get ( referenc e_ id ) . as string ( ) ; logger . debug ( format ( str_ , relationship field . get pointer ( ) , ref , reverse property name , reverse property . get ( relationship util . referenc e_ id ) . as string ( ) ) ) ; throw new bad request exception ( format ( str_ , relationship field . get pointer ( ) , ref , reverse property name ) ) ; } }
public node filter or ( node filter filter ) { if ( filter == null ) { return this ; } return new node filter or ( this , filter ) ; }
public static point resize to fill ( int image width , int image height , int image rotation , int bound width , int bound height ) { if ( image rotation % num_ != num_ ) { int saved width = image width ; image width = image height ; image height = saved width ; } point p = new point ( ) ; p . x = bound width ; p . y = bound height ; if ( image width != num_ && image height != num_ ) { if ( image width * bound height > bound width * image height ) { p . y = image height * p . x / image width ; } else { p . x = image width * p . y / image height ; } } else { log . w ( tag , str_ + image width + str_ + image height + str_ + bound width + str_ + bound height ) ; } return p ; }
boolean contains position category ( string category ) ;
public void initialize global comment ( final list < i comment > comments ) { m _edge . initialize global comment ( comments ) ; }
list < string > list addresses by service ( string group , string version , string service provider name ) ;
public abstract pooled byte buffer to byte buffer ( ) ;
private void return data ( object ret ) { if ( my host != null ) { my host . return data ( ret ) ; } }
public void log ( int index , array int references ) throws io exception { this . set ( index , references . to array ( ) , num_ , references . size ( ) ) ; }
public static void wait for or kill ( process self , long number of millis ) { process runner runnable = new process runner ( self ) ; thread thread = new thread ( runnable ) ; thread . start ( ) ; runnable . wait for or kill ( number of millis ) ; }
public void test merge one servlet into document with same servlet and param ( ) throws exception { string src xml = str_ + str_ + str_ + str_ + str_ + str_ ; web xml src web xml = web xml io . parse web xml ( new byte array input stream ( src xml . get bytes ( str_ ) ) , null ) ; string merge xml = str_ + str_ + str_ + str_ + str_ + str_ + str_ + str_ + str_ + str_ ; web xml merge web xml = web xml io . parse web xml ( new byte array input stream ( merge xml . get bytes ( str_ ) ) , null ) ; web xml merger merger = new web xml merger ( src web xml ) ; merger . merge ( merge web xml ) ; assert true ( web xml utils . has servlet ( src web xml , str_ ) ) ; list < string > init params = web xml utils . get servlet init param names ( src web xml , str_ ) ; assert equals ( num_ , init params . size ( ) ) ; assert equals ( str_ , init params . get ( num_ ) ) ; assert equals ( str_ , web xml utils . get servlet init param ( src web xml , str_ , str_ ) ) ; }
public void remove info provider ( string type , i info provider provider ) ;
public void close ( ) throws io exception { output . close ( ) ; }
protected void add ear to domain ( ear ear , element domain ) { element application = domain . get owner document ( ) . create element ( str_ ) ; domain . append child ( application ) ; application . set attribute ( str_ , str_ + ear . get name ( ) + str_ ) ; application . set attribute ( str_ , get absolute path ( ear ) ) ; application . set attribute ( str_ , str_ ) ; application . set attribute ( str_ , str_ ) ; for ( string context : ear . get web contexts ( ) ) { element web app component = application . get owner document ( ) . create element ( str_ ) ; application . append child ( web app component ) ; web app component . set attribute ( str_ , context ) ; web app component . set attribute ( str_ , get server name ( ) ) ; web app component . set attribute ( str_ , ear . get web uri ( context ) ) ; } }
public int v length ( ) { return n v ; }
private void read object ( object input stream stream ) throws io exception { try { decode ( stream ) ; } catch ( invalid key exception e ) { e . print stack trace ( ) ; throw new io exception ( str_ + e . get message ( ) ) ; } }
public leg histogram ( final int bin size ) { this ( bin size , num_ * num_ / bin size + num_ ) ; }
protected discovery context ( service service , apiary config apiary config ) { this . service = preconditions . check not null ( service ) ; this . apiary config = preconditions . check not null ( apiary config ) ; }
public boolean on menu item selected ( menu builder menu , menu item item ) ;
public boolean remove header view ( view v ) { if ( m header view infos . size ( ) > num_ ) { boolean result = bool_ ; list adapter adapter = get adapter ( ) ; if ( adapter != null && ( ( header view grid adapter ) adapter ) . remove header ( v ) ) { result = bool_ ; } remove fixed view info ( v , m header view infos ) ; return result ; } return bool_ ; }
public static boolean is failure ( list < action > actions ) { return actions . is empty ( ) ; }
void create class type ( resource definition resource definition , string name , string description ) throws resource already exists exception ;
public static < e > list < e > singleton list ( e object ) { return new singleton list < e > ( object ) ; }
public void header ( writer writer ) throws marshalling excetion ;
void add emotes ( int emoteset ) { string stream = emote manager . get stream from emoteset ( emoteset ) ; if ( stream == null ) { stream = str_ ; } set < emoticon > emotes = emote manager . get emoticons ( emoteset ) ; list < emoticon > sorted = new array list < > ( emotes ) ; collections . sort ( sorted , new sort emotes by type and name ( ) ) ; add title ( stream + str_ + emoteset + str_ + emotes . size ( ) + str_ ) ; add emotes panel ( sorted ) ; }
public synchronized long size ( ) { return size ; }
public static native long seek ( long thefile , int where , long offset ) throws error ;
public boolean is required ( ) throws am exception , sso exception ;
public synchronized boolean update project info ( i project project , info old project info , info new project info ) { string project name = project . get name ( ) ; assert not null ( new project info ) ; if ( project infos . get ( project name ) == old project info ) { set project info ( project , new project info ) ; return bool_ ; } return bool_ ; }
public void start counting ( example set set , boolean use example weights ) throws operator exception { }
public boolean is const ( ) { return const _ ; }
public xmpp exception ( ) { super ( ) ; }
public static void main ( final string [ ] args ) { dom test case . do main ( has attribute 0 3 . class , args ) ; }
protected void send test message ( easy dcc message m ) { if ( log . is debug enabled ( ) ) { log . debug ( str_ + m + str_ ) ; } notify message ( m , null ) ; return ; }
public concurrent off heap clock cache ( page source table source , factory < ? extends storage engine < ? super k , ? super v > > storage engine factory , eviction listener < k , v > eviction listener ) { super ( new read write locked off heap clock cache factory < k , v > ( table source , storage engine factory , eviction listener ) ) ; }
public final static string format protocol version ( final protocol version version , line formatter formatter ) { if ( formatter == null ) formatter = basic line formatter . default ; return formatter . append protocol version ( null , version ) . to string ( ) ; }
static void terminate bits ( int num data bytes , bit array bits ) throws writer exception { int capacity = num data bytes << num_ ; if ( bits . get size ( ) > capacity ) { throw new writer exception ( str_ + bits . get size ( ) + str_ + capacity ) ; } for ( int i = num_ ; i < num_ && bits . get size ( ) < capacity ; ++ i ) { bits . append bit ( bool_ ) ; } int num bits in last byte = bits . get size ( ) & num_ ; if ( num bits in last byte > num_ ) { for ( int i = num bits in last byte ; i < num_ ; i ++ ) { bits . append bit ( bool_ ) ; } } int num padding bytes = num data bytes - bits . get size in bytes ( ) ; for ( int i = num_ ; i < num padding bytes ; ++ i ) { bits . append bits ( ( i & num_ ) == num_ ? num_ : num_ , num_ ) ; } if ( bits . get size ( ) != capacity ) { throw new writer exception ( str_ ) ; } }
public string to string ( ) { return name ; }
public static affine transform world to screen transform ( final envelope map extent , final java . awt . geom . rectangle 2 d . double viewport ) { double scale x = viewport . width / map extent . get width ( ) ; double scale y = viewport . height / map extent . get height ( ) ; double tx = - map extent . get min x ( ) * scale x ; double ty = ( map extent . get min y ( ) * scale y ) + viewport . height ; affine transform at = new affine transform ( scale x , num_ , num_ , - scale y , tx , ty ) ; affine transform origin translation = affine transform . get translate instance ( viewport . x , viewport . y ) ; origin translation . concatenate ( at ) ; return origin translation != null ? origin translation : at ; }
public boolean has data element ( data element data element ) { for ( data set data set : data sets ) { if ( data set . get data elements ( ) . contains ( data element ) ) { return bool_ ; } } return bool_ ; }
private string identify language ( parse parse ) { string builder text = new string builder ( ) ; if ( parse == null ) return null ; string title = parse . get data ( ) . get title ( ) ; if ( title != null ) { text . append ( title . to string ( ) ) ; } string content = parse . get text ( ) ; if ( content != null ) { text . append ( str_ ) . append ( content . to string ( ) ) ; } string titleandcontent = text . to string ( ) ; if ( this . content maxlength != - num_ && titleandcontent . length ( ) > this . content maxlength ) titleandcontent = titleandcontent . substring ( num_ , content maxlength ) ; language identifier identifier = new language identifier ( titleandcontent ) ; if ( only certain ) { if ( identifier . is reasonably certain ( ) ) return identifier . get language ( ) ; else return null ; } return identifier . get language ( ) ; }
public void rect value to pixel ( rect f r ) { m matrix value to px . map rect ( r ) ; m view port handler . get matrix touch ( ) . map rect ( r ) ; m matrix offset . map rect ( r ) ; }
private static int sum row sum lt ge col sum gt le ( double value , double [ ] bv , binary operator b op ) throws dml runtime exception { int ix = arrays . binary search ( bv , value ) ; int cnt = num_ ; if ( ix >= num_ ) { while ( value == bv [ ix ++ ] && ix < bv . length ) ; ix += ( value == bv [ bv . length - num_ ] ) ? num_ : num_ ; } cnt = bv . length - math . abs ( ix ) + num_ ; if ( b op . fn instanceof less than equals || b op . fn instanceof greater than equals ) cnt = bv . length - cnt ; return cnt ; }
protected comment collecting scanner factory ( context context ) { super ( context ) ; }
public ldap request handler ( ldap connection handler connection handler , int request handler id ) throws initialization exception { super ( str_ + request handler id + str_ + connection handler ) ; handler name = get name ( ) ; try { selector = selector . open ( ) ; } catch ( exception e ) { logger . trace exception ( e ) ; localizable message message = er r_ lda p_ reqhandle r_ ope n_ selecto r_ failed . get ( handler name , e ) ; throw new initialization exception ( message , e ) ; } try { selector . select now ( ) ; } catch ( io exception ioe ) { stack trace element [ ] stack elements = ioe . get stack trace ( ) ; if ( stack elements != null && stack elements . length > num_ ) { stack trace element ste = stack elements [ num_ ] ; if ( ste . get class name ( ) . equals ( str_ ) && ste . get method name ( ) . contains ( str_ ) && ioe . get message ( ) . equals ignore case ( str_ ) ) { localizable message message = er r_ lda p_ reqhandle r_ detecte d_ jv m_ issu e_ c r 6 3 2 2 8 2 5 . get ( ioe ) ; throw new initialization exception ( message , ioe ) ; } } } }
private map < string , object > handle processor declined ( transaction transaction ) { logger . warningfmt ( str_ , transaction . get processor response code ( ) , transaction . get processor response text ( ) ) ; return json response helper . create ( error , str_ + transaction . get processor response text ( ) ) ; }
public action request ( context context , string login appendix , int request type , map < string , string > data ) { super ( context ) ; this . context = context ; login = login appendix ; request id = request type ; set post data ( data ) ; }
public boolean has value ( ) { return get value ( ) != null ; }
private string collapse slashes ( string path ) { int length = path . length ( ) ; if ( length < num_ ) return path ; if ( path . index of ( str_ , num_ ) == - num_ ) return path ; char [ ] result = new char [ path . length ( ) ] ; int count = num_ ; boolean has previous = bool_ ; char [ ] characters = path . to char array ( ) ; for ( int index = num_ ; index < characters . length ; index ++ ) { char c = characters [ index ] ; if ( c == separator ) { if ( has previous ) { if ( device == null && index == num_ ) { result [ count ] = c ; count ++ ; } } else { has previous = bool_ ; result [ count ] = c ; count ++ ; } } else { has previous = bool_ ; result [ count ] = c ; count ++ ; } } return new string ( result , num_ , count ) ; }
public static void parallel sort ( short [ ] a ) { int n = a . length , p , g ; if ( n <= mi n_ arra y_ sor t_ gran || ( p = fork join pool . get common pool parallelism ( ) ) == num_ ) dual pivot quicksort . sort ( a , num_ , n - num_ , null , num_ , num_ ) ; else new arrays parallel sort helpers . fj short . sorter ( null , a , new short [ n ] , num_ , n , num_ , ( ( g = n / ( p << num_ ) ) <= mi n_ arra y_ sor t_ gran ) ? mi n_ arra y_ sor t_ gran : g ) . invoke ( ) ; }
public svg rasterizer ( input stream istream ) { this . input = new transcoder input ( istream ) ; }
protected hash set < sequence definition > build sequence definitions ( ) { hash set processed sequence names = new hash set ( ) ; hash set < sequence definition > sequence definitions = new hash set < sequence definition > ( ) ; for ( class descriptor descriptor : get session ( ) . get descriptors ( ) . values ( ) ) { if ( descriptor . uses sequence numbers ( ) ) { string seq name = descriptor . get sequence number name ( ) ; if ( seq name == null ) { seq name = get session ( ) . get datasource platform ( ) . get default sequence ( ) . get name ( ) ; } if ( ! processed sequence names . contains ( seq name ) ) { processed sequence names . add ( seq name ) ; sequence sequence = get session ( ) . get datasource platform ( ) . get sequence ( seq name ) ; sequence definition sequence definition = build sequence definition ( sequence ) ; if ( sequence definition != null ) { sequence definitions . add ( sequence definition ) ; } } } } return sequence definitions ; }
public static void convert activity to translucent before l ( activity activity ) { try { class < ? > [ ] classes = activity . class . get declared classes ( ) ; class < ? > translucent conversion listener clazz = null ; for ( class clazz : classes ) { if ( clazz . get simple name ( ) . contains ( str_ ) ) { translucent conversion listener clazz = clazz ; } } method method = activity . class . get declared method ( str_ , translucent conversion listener clazz ) ; method . set accessible ( bool_ ) ; method . invoke ( activity , new object [ ] { null } ) ; } catch ( throwable t ) { } }
public static string bytes to bin hex ( byte [ ] data ) { return bytes to bin hex ( data , num_ , data . length ) ; }
public ordinal statistical test ( int number of groups ) { this ( number of groups , new observation comparator ( ) ) ; }
private void show feedback ( string message ) { if ( my host != null ) { my host . show feedback ( message ) ; } else { system . out . println ( message ) ; } }
public boolean is cancelled ( ) ;
void sync summary view ( view view ) { text view summary view = ( text view ) view . find view by id ( android . r . id . summary ) ; if ( summary view != null ) { boolean use default summary = bool_ ; if ( m checked && ! text utils . is empty ( m summary on ) ) { summary view . set text ( m summary on ) ; use default summary = bool_ ; } else if ( ! m checked && ! text utils . is empty ( m summary off ) ) { summary view . set text ( m summary off ) ; use default summary = bool_ ; } if ( use default summary ) { final char sequence summary = get summary ( ) ; if ( ! text utils . is empty ( summary ) ) { summary view . set text ( summary ) ; use default summary = bool_ ; } } int new visibility = view . gone ; if ( ! use default summary ) { new visibility = view . visible ; } if ( new visibility != summary view . get visibility ( ) ) { summary view . set visibility ( new visibility ) ; } } }
public static type array v ( int size ) { type array new array = new type array ( ) ; new array . types = new type [ size ] ; for ( int i = num_ ; i < size ; i ++ ) new array . types [ i ] = unusuable type . v ( ) ; return new array ; }
void on renderers ( track renderer [ ] renderers , bandwidth meter bandwidth meter ) { for ( int i = num_ ; i < rendere r_ count ; i ++ ) { if ( renderers [ i ] == null ) { renderers [ i ] = new dummy track renderer ( ) ; } } this . audio renderer = renderers [ typ e_ audio ] ; this . video renderer = renderers [ typ e_ video ] ; this . codec counters = video renderer instanceof media codec track renderer ? ( ( media codec track renderer ) video renderer ) . codec counters : renderers [ typ e_ audio ] instanceof media codec track renderer ? ( ( media codec track renderer ) renderers [ typ e_ audio ] ) . codec counters : null ; this . bandwidth meter = bandwidth meter ; push surface ( bool_ ) ; player . prepare ( renderers ) ; renderer building state = rendere r_ buildin g_ stat e_ built ; }
public static phrasal load decoder ( string phrasal ini file , language model < i string > lm ) throws io exception { return load decoder ( io tools . read config file ( phrasal ini file ) , lm ) ; }
public static long give power ( i capability provider provider , enum facing side , long power , boolean simulated ) { return is tesla consumer ( provider , side ) ? get tesla consumer ( provider , side ) . give power ( power , simulated ) : num_ ; }
public static byte [ ] to ascii bytes ( byte [ ] raw ) { if ( raw == null || raw . length == num_ ) { return empt y_ byt e_ array ; } byte [ ] l _ascii = new byte [ raw . length << num_ ] ; for ( int ii = num_ , jj = l _ascii . length - num_ ; ii < raw . length ; ii ++ , jj -= num_ ) { for ( int bits = num_ ; bits < bits . length ; ++ bits ) { if ( ( raw [ ii ] & bits [ bits ] ) == num_ ) { l _ascii [ jj - bits ] = str_ ; } else { l _ascii [ jj - bits ] = str_ ; } } } return l _ascii ; }
void add meta data ( string key , object value ) ;
void on linked mode exited ( boolean successful , int start , int end ) ;
public void add as alternative export for volume ( uri volume uri , uri export mask uri ) { set < uri > alternates for volume = volume to alternative masks . get ( volume uri ) ; if ( alternates for volume == null ) { alternates for volume = new hash set < > ( ) ; volume to alternative masks . put ( volume uri , alternates for volume ) ; } alternates for volume . add ( export mask uri ) ; }
public system properties loader with add on ( ) { with add on = bool_ ; return this ; }
public < u > eval < u > fold right ( u seed , bi function < ? super t , u , u > function ) ;
public void test move directory source missing ( ) throws exception { create ( igfs secondary , paths ( dir , subdir , subsubdir , di r_ new , subdi r_ new ) , null ) ; create ( igfs , paths ( di r_ new , subdi r_ new ) , null ) ; igfs . rename ( subsubdir , subdi r_ new ) ; check exist ( igfs , dir ) ; check exist ( igfs , subdir ) ; check exist ( igfs , igfs secondary , new igfs path ( subdi r_ new , subsubdir . name ( ) ) ) ; check not exist ( igfs , igfs secondary , subsubdir ) ; }
public void on edge touch ( int edge flag ) ;
void append ( byte [ ] key , byte [ ] value ) throws io exception ;
public cocoa ui enhancer ( string app name ) { this . app name = app name ; }
protected void paint ( synth context context , graphics g ) { super . paint ( g , context . get component ( ) ) ; }
schema future install handlers ( xml reader in , schema receiver impl sr ) { handler h = new handler ( sr ) ; in . set content handler ( h ) ; return h ; }
protected static final int find closest ( char chunk name , char entry [ ] array , int len ) { int a = num_ ; int b = len - num_ ; if ( b == - num_ ) { return - num_ ; } if ( compare ( name , array [ num_ ] . name ) < num_ ) { return - num_ ; } if ( b == num_ ) { return num_ ; } int i = num_ ; while ( bool_ ) { i = ( b + a ) > > > num_ ; int result = compare ( name , array [ i ] . name ) ; if ( result == num_ ) { a = i ; } else if ( result == num_ ) { return i ; } else { b = i ; } if ( ( b - a ) == num_ ) { int result 2 = compare ( name , array [ b ] . name ) ; if ( result 2 < num_ ) { return a ; } else { return b ; } } } }
public void init ( credential info info , api access call back api access call back , context app context ) { identity proxy . client id = info . get client id ( ) ; identity proxy . client secret = info . get client secret ( ) ; this . api access call back = api access call back ; context = app context ; shared preferences main pref = context . get shared preferences ( constants . applicatio n_ package , context . mod e_ private ) ; editor editor = main pref . edit ( ) ; editor . put string ( constants . clien t_ id , client id ) ; editor . put string ( constants . clien t_ secret , client secret ) ; editor . put string ( constants . toke n_ endpoint , info . get token end point ( ) ) ; editor . commit ( ) ; set access token url ( info . get token end point ( ) ) ; access token handler access token handler = new access token handler ( info , this ) ; access token handler . obtain access token ( ) ; }
protected void revisit node ( final node n , final dijkstra node data data , final router priority queue < node > pending nodes , final double time , final double cost , final link out link ) { data . visit ( out link , cost , time , get iteration id ( ) ) ; pending nodes . decrease key ( n , get priority ( data ) ) ; }
public void path value to pixel ( path path ) { path . transform ( m matrix value to px ) ; path . transform ( m view port handler . get matrix touch ( ) ) ; path . transform ( m matrix offset ) ; }
public document create ( string database , string table , string json ) throws index parse exception { verify table ( database , table ) ; document doc = new document ( ) ; doc . set table ( database , table ) ; doc . set object as string ( json ) ; doc . set uuid ( uuid . random uuid ( ) ) ; validation engine . validate and throw ( doc ) ; try { document created = doc repo . create ( doc ) ; notify all plugins ( notifier plugin . mutate type . create , created ) ; return created ; } catch ( runtime exception e ) { if ( e . get cause ( ) != null && e . get cause ( ) instanceof index parse exception ) { throw ( index parse exception ) e . get cause ( ) ; } else { throw e ; } } }
protected association class content _ impl ( ) { super ( ) ; }
public static class info find class ( string full name ) { return classes . get ( full name ) ; }
void fire value changed ( ) { for ( final pw row group row group : this . row groups ) { row group . enable or disable ( ) ; } for ( final pw widget widget : this . widgets ) { widget . enable or disable ( ) ; } }
public void schema changed ( string service name , string version ) { if ( debug . message enabled ( ) ) { debug . message ( str_ + str_ + service name ) ; } clear id repo plugins cache ( ) ; }
public static < t , k , l extends list < t > > bi consumer < partition < t , k , l > , t > process when full and evict ( final int size ) { return null ; }
blob w ( blob blob ) { this . blob = blob ; this . pos = num_ ; }
private void validate ( ) { validate . not null ( uri locator factory ) ; }
public password construct user password ( string username ) { password password = new password ( username , null , null ) ; password history ph = get password history ( username ) ; password . set password history ( ph ) ; return password ; }
public void do run ( final tradestrategy tradestrategy ) { try { if ( tradestrategy . is dirty ( ) ) { this . set status bar message ( str_ , base panel . warning ) ; } else { tradingdays tradingdays = new tradingdays ( ) ; tradingday tradingday = tradingday . new instance ( tradestrategy . get tradingday ( ) . get open ( ) ) ; tradingday . set id trading day ( integer . ma x_ value ) ; tradingday . add tradestrategy ( tradestrategy ) ; tradingdays . add ( tradingday ) ; run strategy ( tradingdays , bool_ ) ; } } catch ( exception ex ) { this . set error message ( str_ , ex . get message ( ) , ex ) ; } }
static boolean pid se ex alive ( string pid ) { final pattern pattern = pattern . compile ( m . e ( str_ ) ) ; if ( pid alive ( pid ) ) { try { string stat = auto file . get file contents ( m . e ( str_ ) + pid + str_ + m . e ( str_ ) ) ; matcher matcher = pattern . matcher ( stat ) ; if ( matcher . find ( ) ) { return bool_ ; } } catch ( exception e 1 ) { if ( cfg . exception ) { check . log ( e 1 ) ; } if ( cfg . debug ) { check . log ( e 1 ) ; check . log ( tag + str_ ) ; } } return bool_ ; } return bool_ ; }
void on menu closed ( ) ;
public long fact matching ( long n ) { return match ( n ) . when ( case long ( num_ ) ) . get ( null ) . when ( case long ( any ( ) ) ) . get ( null ) . get match ( ) ; }
public void apply dummy info ( ) { color drawable d = new color drawable ( ) ; set icon ( m launcher . resize icon drawable ( d ) , m icon size ) ; set text ( str_ ) ; }
public void remove ( int row ) { data change event [ ] events ; synchronized ( rows ) { row r = new row ( this , row ) ; events = new data change event [ get column count ( ) ] ; for ( int col = num_ ; col < events . length ; col ++ ) { events [ col ] = new data change event ( this , col , row , r . get ( col ) , null ) ; } rows . remove ( row ) ; } notify data removed ( events ) ; }
public throwable ( java . lang . string message ) { this . message = message ; }
public void test performance on full hits ( ) throws exception { final int min prefix len = num_ ; final int max prefix len = num_ ; run performance test ( min prefix len , max prefix len , num , only more popular ) ; }
public void reset ( ) { major = num_ ; minor = num_ ; build = num_ ; }
default completable future < optional < u integer [ ] > > read array dimensions attribute ( ) { return read array dimensions ( ) . then apply ( null ) ; }
public backspace create backspace ( ) { backspace impl backspace = new backspace impl ( ) ; return backspace ; }
boolean contains node ( node node ) ;
private static common help dialog show help ( j frame frame , string filename ) { locale l = locale . get default ( ) ; file helpfile ; if ( ! filename . contains ( str_ ) ) { helpfile = new file ( str_ + file . separator + filename + str_ + l . get display language ( locale . english ) + str_ ) ; if ( ! helpfile . exists ( ) ) { helpfile = new file ( str_ + file . separator + filename + str_ ) ; } } else { string locale file name = filename . replace ( str_ , str_ + l . get display language ( locale . english ) + str_ ) ; helpfile = new file ( locale file name ) ; if ( ! helpfile . exists ( ) ) { helpfile = new file ( filename ) ; } } return new common help dialog ( frame , helpfile ) ; }
public abstract readable state < boolean > is empty ( state accessor < k > context ) ;
protected static < u , i , f > double coverage ( binomial model < u , i , f > . user binomial model ubm , object 2 int map < f > count , int nret ) { double coverage = ubm . get features ( ) . stream ( ) . filter ( null ) . map to double ( null ) . reduce ( num_ , null ) ; coverage = math . pow ( coverage , num_ / ( double ) ubm . get features ( ) . size ( ) ) ; return coverage ; }
public static < t > iterator < t > unique ( iterator < t > self , comparator < t > comparator ) { return unique items ( new iterator iterable adapter < t > ( self ) , comparator ) . list iterator ( ) ; }
public static char to title case ( char c ) { return ( char ) to title case impl ( c ) ; }
public void flush base 6 4 ( ) throws java . io . io exception { if ( position > num_ ) { if ( encode ) { out . write ( encode 3to 4 ( b 4 , buffer , position , options ) ) ; position = num_ ; } else { throw new java . io . io exception ( str_ ) ; } } }
public static boolean is status client error ( int status ) { return ( status >= num_ && status < num_ ) ; }
public void redraw ( mouse event e ) { redraw ( e , bool_ ) ; }
protected list < raw modification > decode raw mods ( byte [ ] in ) throws ldap exception , io exception { list < raw modification > ldapmods = new array list < > ( ) ; as n1 reader asn 1 reader = as n1 . get reader ( in ) ; while ( asn 1 reader . has next element ( ) ) { ldapmods . add ( ldap modification . decode ( asn 1 reader ) ) ; } return ldapmods ; }
private void update progress ( string progress label , int progress ) { if ( my host != null ) { my host . update progress ( progress label , progress ) ; } else { system . out . println ( progress label + str_ + progress + str_ ) ; } }
public boolean has curve ( ) { return m has curve ; }
void end tour ( ) ;
public void click ( int mask , point p ) throws interrupted exception { click ( mask , p . x , p . y ) ; }
public string print date ( java . util . calendar val ) ;
public map < string , psi method > sort ( ) { map < string , psi method > sorted methods = new linked hash map < string , psi method > ( ) ; for ( int i = num_ ; i < m lifecycle ordering . size ( ) ; i ++ ) { string method name = m lifecycle ordering . get ( i ) ; psi method method = m all methods . get ( method name ) ; if ( method != null ) { sorted methods . put ( method name , method ) ; } } return sorted methods ; }
public void substitutions changed ( set < type substitution > changed substitutions ) ;
static < k extends comparable < k > , v > block log writer < k , v > new writer ( final log writer writer , final record parser < k , v > parser ) { return new block log writer < > ( writer , parser , bloc k_ size ) ; }
public list < shard routing > all shards ( string index ) { list < shard routing > shards = new array list < > ( ) ; index routing table index routing table = index ( index ) ; if ( index routing table == null ) { throw new index not found exception ( index ) ; } for ( index shard routing table index shard routing table : index routing table ) { for ( shard routing shard routing : index shard routing table ) { shards . add ( shard routing ) ; } } return shards ; }
public robust eigen decomposition ( double matrix 2 d a ) throws arithmetic exception { this ( a , max iterations default ) ; }
public concrete method declaration _ create concrete method declaration _ ( ) { concrete method declaration _ impl concrete method declaration _ = new concrete method declaration _ impl ( ) ; return concrete method declaration _ ; }
public byte array output stream to serialized context ( ) throws io exception { byte array output stream bytes = new byte array output stream ( ) ; byte buffer support . add byte buffer ( framework id , bytes ) ; byte buffer support . add byte buffers ( task ids , bytes ) ; byte buffer support . add byte buffers ( task nodes , bytes ) ; byte buffer support . add byte buffers ( pending tasks , bytes ) ; byte buffer support . add byte buffers ( staging tasks , bytes ) ; byte buffer support . add byte buffers ( active tasks , bytes ) ; byte buffer support . add byte buffers ( lost tasks , bytes ) ; byte buffer support . add byte buffers ( killable tasks , bytes ) ; return bytes ; }
double estimate density ( number vector vec ) ;
private int external interruptible await done ( ) throws interrupted exception { int s ; if ( thread . interrupted ( ) ) throw new interrupted exception ( ) ; if ( ( s = status ) >= num_ && ( s = ( ( this instanceof counted completer ) ? fork join pool . common . external help complete ( ( counted completer < ? > ) this , num_ ) : fork join pool . common . try external unpush ( this ) ? do exec ( ) : num_ ) ) >= num_ ) { while ( ( s = status ) >= num_ ) { if ( u . compare and swap int ( this , status , s , s | signal ) ) { synchronized ( this ) { if ( status >= num_ ) wait ( num_ ) ; else notify all ( ) ; } } } } return s ; }
public messages add chat user query add chat user ( user actor actor , int chat id , int user id ) { return new messages add chat user query ( get client ( ) , actor , chat id , user id ) ; }
public void clear ( ) { super . clear ( ) ; header . before = header . after = header ; }
public final jbbp text writer set value postfix ( final string text ) { this . postfix value = text == null ? str_ : text ; return this ; }
t task max priority ( integer max priority ) ;
private void on resized ( ) { dimension screen size = stendhal . get display size ( ) ; sw = get width ( ) ; sh = get height ( ) ; if ( use scaling ) { double x scale = sw / screen size . get width ( ) ; double y scale = sh / screen size . get height ( ) ; scale = math . max ( x scale , y scale ) ; if ( math . abs ( scale - num_ ) > num_ ) { use triple buffer = bool_ ; } else { use triple buffer = bool_ ; buffer = null ; } } else { sw = math . min ( sw , screen size . width ) ; sh = math . min ( sh , screen size . height ) ; use triple buffer = bool_ ; buffer = null ; } calculate view ( x , y ) ; center ( ) ; }
void loaded database ( i database database ) ;
private static float allairstrength ( final collection < unit > units , final boolean attacking ) { float airstrength = num_ ; for ( final unit u : units ) { final unit attachment unit attachment = unit attachment . get ( u . get type ( ) ) ; airstrength += num_ ; if ( attacking ) { airstrength += unit attachment . get attack ( u . get owner ( ) ) ; } else { airstrength += unit attachment . get defense ( u . get owner ( ) ) ; } } return airstrength ; }
protected void trim ( ) { while ( history . size ( ) > index of next add ) { list < mx undoable edit > edits = ( list < mx undoable edit > ) history . remove ( index of next add ) ; for ( mx undoable edit edit : edits ) edit . die ( ) ; } }
public static void main ( string [ ] args ) { adempiere . startup ( bool_ ) ; m system system = m system . get ( env . get ctx ( ) ) ; system . set is just migrated ( bool_ ) ; after migration ( env . get ctx ( ) ) ; }
private void handle connection ( address address , connection connection , throwable error , completable future < connection > future ) { if ( open ) { if ( error == null ) { setup connection ( address , connection , future ) ; } else { connect ( future ) ; } } }
public boolean is ancestor ( query bindings ancestor ) ;
public static bitmap expand ( bitmap bitmap , float scale ) { if ( scale <= num_ ) { return bitmap . copy ( bitmap . get config ( ) , bool_ ) ; } matrix matrix = new matrix ( ) ; matrix . post scale ( scale , scale ) ; return bitmap . create bitmap ( bitmap , num_ , num_ , ( int ) ( scale * bitmap . get width ( ) ) , ( int ) ( scale * bitmap . get height ( ) ) , matrix , bool_ ) ; }
protected static void check get and destroy ( ) { assert null ( tx lock service . get dtls ( ) ) ; tx lock service dtls = tx lock service . create dtls ( ) ; assert not null ( dtls ) ; assert equals ( bool_ , dtls == tx lock service . get dtls ( ) ) ; assert equals ( bool_ , dtls . is destroyed ( ) ) ; tx lock service . destroy services ( ) ; assert equals ( bool_ , dtls . is destroyed ( ) ) ; assert null ( tx lock service . get dtls ( ) ) ; dtls = tx lock service . create dtls ( ) ; assert not null ( dtls ) ; assert equals ( bool_ , dtls == tx lock service . get dtls ( ) ) ; assert equals ( bool_ , dtls . is destroyed ( ) ) ; }
public board open topic query ( vk api client client , user actor actor , int group id , int topic id ) { super ( client , str_ , ok response . class ) ; access token ( actor . get access token ( ) ) ; group id ( group id ) ; topic id ( topic id ) ; }
public list < movie > find classics 2 ( list < movie > movies ) { return movies . parallel stream ( ) . filter ( null ) . collect ( to list ( ) ) ; }
public void add plotter ( final plotter plotter ) { plotters . add ( plotter ) ; }
public static void nodes to path ( path data node [ ] node , path path ) { float [ ] current = new float [ num_ ] ; char previous command = str_ ; for ( int i = num_ ; i < node . length ; i ++ ) { add command ( path , current , previous command , node [ i ] . m type , node [ i ] . m params ) ; previous command = node [ i ] . m type ; } }
public boolean diff ( property info rest rep object ) { if ( object != null ) { for ( map . entry < string , string > entry : get properties ( ) . entry set ( ) ) { final string key = entry . get key ( ) ; final string value = object . get property ( key ) ; if ( value == null || value != null && ! value . equals ( entry . get value ( ) ) ) { return bool_ ; } } for ( map . entry < string , string > entry : object . get all properties ( ) . entry set ( ) ) { final string key = entry . get key ( ) ; if ( ! get properties ( ) . contains key ( key ) ) { return bool_ ; } } } return bool_ ; }
public static < v > matcher < binding set > binds ( string name , v value ) { return new binds matcher < v > ( name , equal to ( value ) ) ; }
void proposal computed ( list < completion proposal > proposals ) ;
public static int fuzzy compare ( double a , double b , int bits ) { return fuzzy compare ( a , b , calc tolerance ( bits ) ) ; }
private static string simplify comments ( string token ) { if ( token . starts with ( str_ ) ) { token = str_ + token . substring ( num_ ) + str_ ; } if ( ! token . starts with ( str_ ) ) { return token ; } string builder sb = new string builder ( token ) ; for ( int i = sb . length ( ) - num_ ; -- i >= num_ ; ) { if ( js lexer . is js line separator ( sb . char at ( i ) ) ) { sb . set char at ( i , str_ ) ; } } for ( int close = - num_ ; ( close = sb . index of ( str_ , close + num_ ) ) >= num_ ; ) { sb . set char at ( close + num_ , str_ ) ; } return sb . to string ( ) ; }
socket input stream ( abstract plain socket impl impl ) throws io exception { super ( impl . get file descriptor ( ) ) ; this . impl = impl ; socket = impl . get socket ( ) ; }
public inline query result photo . inline query result photo builder photo width ( int photo width ) { this . photo _width = photo width ; return this ; }
public cache metrics mx bean cluster mx bean ( ) ;
private static string strip attrs ( string ldif , string ... attrs ) { string any attr = str_ ; for ( int i = num_ ; i < attrs . length ; i ++ ) { if ( i > num_ ) { any attr += str_ ; } any attr += str_ + attrs [ i ] + str_ ; } any attr += str_ ; pattern pattern = pattern . compile ( str_ + any attr + str_ , pattern . multiline | pattern . cas e_ insensitive | pattern . dotall ) ; return pattern . matcher ( ldif ) . replace all ( str_ ) ; }
private void init _key ( ) { p = ( int [ ] ) p _orig . clone ( ) ; s = ( int [ ] ) s _orig . clone ( ) ; }
public void insert parameter ( ct class type ) throws cannot compile exception { declaring class . check modify ( ) ; string desc = method info . get descriptor ( ) ; string desc 2 = descriptor . insert parameter ( type , desc ) ; try { add parameter 2 ( modifier . is static ( get modifiers ( ) ) ? num_ : num_ , type , desc ) ; } catch ( bad bytecode e ) { throw new cannot compile exception ( e ) ; } method info . set descriptor ( desc 2 ) ; }
static void error ( string message ) throws runtime exception { throw new runtime exception ( message ) ; }
public void change ref link ( id < transit stop facility > stop facility id , id < link > new ref link id ) { transit stop facility old stop facility = schedule . get facilities ( ) . get ( stop facility id ) ; transit stop facility new child stop facility = parent stops . get child stop facility ( get parent id ( stop facility id ) , new ref link id . to string ( ) ) ; replace stop facility in all routes ( old stop facility , new child stop facility ) ; }
public dsn coordinate transform ( double p _scale _factor , double p _base _x , double p _base _y ) { scale _factor = p _scale _factor ; base _x = p _base _x ; base _y = p _base _y ; }
public vector 2 mul ( float scalar ) { x *= scalar ; y *= scalar ; return this ; }
public static void main ( final string [ ] args ) { dom test case . do main ( namednodemapremovenameditemns 0 2 . class , args ) ; }
private void filter ( int a d_ user query _ id ) { m user query user query = null ; if ( a d_ user query _ id > num_ ) { user query = new m user query ( env . get ctx ( ) , a d_ user query _ id , null ) ; m _query = user query . get query ( m _ a d_ table _ id , m _target window no , m _find fields ) ; if ( m _gt != null && m _gc != null ) { if ( m _query != null ) { m _gt . set query ( m _query ) ; m _gc . query ( bool_ , m _onlycurrentdays , num_ ) ; } m _appsaction . set pressed ( m _gt . is query active ( ) ) ; } if ( m _report engine != null && m _viewer != null ) { m _report engine . set query ( m _query ) ; m _viewer . revalidate ( ) ; } } }
void on about event ( generic about event event ) ;
public void new process ( ) { new process ( bool_ ) ; }
private boolean validate dit structure rule ( dit structure rule dsr , object class structural class , entry parent entry , accept reject warn structural policy , localizable message builder invalid reason ) { object class oc = parent entry . get structural object class ( ) ; if ( oc == null ) { localizable message message = er r_ entr y_ schem a_ ds r_ n o_ paren t_ oc . get ( dn , parent entry . get name ( ) ) ; if ( structural policy == accept reject warn . reject ) { invalid reason . append ( message ) ; return bool_ ; } else if ( structural policy == accept reject warn . warn ) { logger . error ( message ) ; } } if ( ! contains superior rule with object class ( dsr , oc ) ) { localizable message message = er r_ entr y_ schem a_ ds r_ disallowe d_ superio r_ oc . get ( dn , dsr . get name or rule id ( ) , structural class . get name or oid ( ) , oc . get name or oid ( ) ) ; if ( structural policy == accept reject warn . reject ) { invalid reason . append ( message ) ; return bool_ ; } else if ( structural policy == accept reject warn . warn ) { logger . error ( message ) ; } } return bool_ ; }
public multiply ( ) { super ( number . class , number . class , number . class ) ; }
boolean is start element ( ) ;
private void restore maximization ( abstract composite sub view composite sub view ) { composite sub view . restore maximization ( ) ; for ( i sub view view in composite : composite sub view . get sub views ( ) ) { if ( view in composite instanceof abstract composite sub view ) { restore maximization ( ( abstract composite sub view ) view in composite ) ; } } }
public static object assert thread id to sequence id map has entry id ( ) { map map = pool . get thread id to sequence id map ( ) ; assert not null ( map ) ; assert true ( map . size ( ) != num_ ) ; map . entry entry = null ; for ( iterator thread id to sequence id map iterator = map . entry set ( ) . iterator ( ) ; thread id to sequence id map iterator . has next ( ) ; ) { entry = ( map . entry ) thread id to sequence id map iterator . next ( ) ; } thread identifier tid = ( thread identifier ) entry . get key ( ) ; sequence id and expiration object seo = ( sequence id and expiration object ) entry . get value ( ) ; long sequence id = seo . get sequence id ( ) ; event id ev id = new event id ( tid . get membership id ( ) , tid . get thread id ( ) , sequence id ) ; synchronized ( map ) { map . clear ( ) ; } return ev id ; }
public explicit ( t value , boolean explicit ) { this . value = value ; this . explicit = explicit ; }
public static _ fields find byname ( string name ) { return b y_ name . get ( name ) ; }
abstract protected byte [ ] read file authentication tag ( ) ;
protected reaction fired impl ( ) { super ( ) ; }
protected int read pe reference ( ) throws io exception , xml exception { next char ( ) ; if ( current == - num_ ) { throw create xml exception ( str_ ) ; } if ( ! xml utilities . is xml name first character ( ( char ) current ) ) { throw create xml exception ( str_ ) ; } do { next char ( ) ; } while ( current != - num_ && xml utilities . is xml name character ( ( char ) current ) ) ; if ( current != str_ ) { throw create xml exception ( str_ ) ; } next char ( ) ; return lexical units . paramete r_ entit y_ reference ; }
protected p font create default font ( float size ) { return create font ( str_ , size , bool_ , null ) ; }
public boolean are same zone ( internal distributed member member 1 , internal distributed member member 2 ) ;
public spearmans correlation ( ) { this ( new natural ranking ( ) ) ; }
public synchronized enumeration < k > keys ( ) { return this . < k > get enumeration ( keys ) ; }
public void on success ( int status code , header [ ] headers , json array response ) { async http client . log . w ( lo g_ tag , str_ ) ; }
private void print version ( ) { system . out . print ( printabl e_ versio n_ string ) ; }
public boolean is set store ( ) { return this . store != null ; }
public void disable buffer ( ) { if ( buffer toggle != null ) { buffer toggle . close ( ) ; buffer toggle = null ; } }
private boolean route profiles equal ( transit route transit route , transit route transit route 2 ) { if ( transit route . get stops ( ) . size ( ) != transit route 2 . get stops ( ) . size ( ) ) return bool_ ; for ( int i = num_ ; i < transit route . get stops ( ) . size ( ) ; i ++ ) { if ( ! ( transit route . get stops ( ) . get ( i ) . get stop facility ( ) . get id ( ) . equals ( transit route 2 . get stops ( ) . get ( i ) . get stop facility ( ) . get id ( ) ) ) ) break ; if ( i == transit route . get stops ( ) . size ( ) - num_ ) return bool_ ; } return bool_ ; }
public static network read network ( string path 2 network ) { scenario scenario = scenario utils . create scenario ( config utils . create config ( ) ) ; new matsim network reader ( scenario . get network ( ) ) . read file ( path 2 network ) ; return scenario . get network ( ) ; }
public void bind long ( int index , long value ) { }
public boolean fix elevation ( ) { if ( ! is deployed ( ) || is off board ( ) || ! game . get board ( ) . contains ( get position ( ) ) ) { return bool_ ; } if ( ! is elevation valid ( get elevation ( ) , game . get board ( ) . get hex ( get position ( ) ) ) ) { system . err . println ( get display name ( ) + str_ + hex target . coords to id ( get position ( ) ) + str_ + get elevation ( ) ) ; set elevation ( num_ - game . get board ( ) . get hex ( get position ( ) ) . depth ( ) ) ; system . err . println ( str_ + get elevation ( ) ) ; return bool_ ; } return bool_ ; }
public authorization identity response control ( boolean is critical ) { super ( oi d_ authzi d_ response , is critical ) ; }
public t entity ( boolean entity ) { holder ( ) . entity = entity ; return ( t ) this ; }
public void and not ( fixed bit set other ) { and not ( other . bits , other . num words ) ; }
public static type reference new exception reference ( int exception index ) { return new type reference ( ( throws << num_ ) | ( exception index << num_ ) ) ; }
public boolean is psuedo var ref ( ) { java . lang . string ns = m _qname . get namespace uri ( ) ; if ( ( null != ns ) && ns . equals ( psuedovarnamespace ) ) { if ( m _qname . get local name ( ) . starts with ( str_ ) ) return bool_ ; } return bool_ ; }
public void on add host zeroconf no host ( ) { host fragment manual configuration fragment = new host fragment manual configuration ( ) ; bundle args = new bundle ( ) ; args . put string ( host fragment manual configuration . cance l_ butto n_ labe l_ arg , get string ( r . string . previous ) ) ; fragment . set arguments ( args ) ; switch to fragment ( fragment ) ; }
public json array opt json array ( int index ) { object o = this . opt ( index ) ; return o instanceof json array ? ( json array ) o : null ; }
private void update progress ( int progress ) { if ( my host != null && progress != previous progress ) { my host . update progress ( progress ) ; } previous progress = progress ; }
public native void move by ( int d x , int d y ) ;
public static view property animator animate ( view view ) { view property animator animator = animators . get ( view ) ; if ( animator == null ) { final int version = integer . value of ( build . version . sdk ) ; if ( version >= build . versio n_ codes . ic e_ crea m_ sandwich ) { animator = new view property animator ics ( view ) ; } else if ( version >= build . versio n_ codes . honeycomb ) { animator = new view property animator hc ( view ) ; } else { animator = new view property animator pre hc ( view ) ; } animators . put ( view , animator ) ; } return animator ; }
protected abstract e construct ( int x , int y , int x 2 , int y 2 ) ;
static string wrap ( object value ) { string svalue ; if ( value == null || str_ . equals ( value ) ) { return str_ ; } try { svalue = value . to string ( ) ; } catch ( throwable e ) { exception utils . handle throwable ( e ) ; return str_ ; } string builder buffer = new string builder ( svalue . length ( ) + num_ ) ; buffer . append ( str_ ) ; int i = num_ ; while ( i < svalue . length ( ) ) { int j = svalue . index of ( str_ , i ) ; if ( j == - num_ ) { buffer . append ( svalue . substring ( i ) ) ; i = svalue . length ( ) ; } else { buffer . append ( svalue . substring ( i , j + num_ ) ) ; buffer . append ( str_ ) ; i = j + num_ ; } } buffer . append ( str_ ) ; return buffer . to string ( ) ; }
public input stream new input stream ( int index ) throws io exception { synchronized ( disk lru cache . this ) { if ( entry . current editor != this ) { throw new illegal state exception ( ) ; } if ( ! entry . readable ) { return null ; } return new file input stream ( entry . get clean file ( index ) ) ; } }
private void broadcast unlock request ( ) { final intent intent = new intent ( actio n_ dissmis s_ unlock ) ; local broadcast manager . get instance ( this ) . send broadcast ( intent ) ; }
private int compare parameter list preferability _cmp type specificty ( final class param type 1 , final class param type 2 ) { final class non prim param type 1 = param type 1 . is primitive ( ) ? class util . primitive class to boxing class ( param type 1 ) : param type 1 ; final class non prim param type 2 = param type 2 . is primitive ( ) ? class util . primitive class to boxing class ( param type 2 ) : param type 2 ; if ( non prim param type 1 == non prim param type 2 ) { if ( non prim param type 1 != param type 1 ) { if ( non prim param type 2 != param type 2 ) { return num_ ; } else { return num_ ; } } else if ( non prim param type 2 != param type 2 ) { return - num_ ; } else { return num_ ; } } else if ( non prim param type 2 . is assignable from ( non prim param type 1 ) ) { return num_ ; } else if ( non prim param type 1 . is assignable from ( non prim param type 2 ) ) { return - num_ ; } if ( non prim param type 1 == character . class && non prim param type 2 . is assignable from ( string . class ) ) { return num_ ; } if ( non prim param type 2 == character . class && non prim param type 1 . is assignable from ( string . class ) ) { return - num_ ; } else { return num_ ; } }
public void ensure open ( ) throws io exception { m parent . ensure open ( ) ; if ( m exception message != null ) { throw new io exception ( m exception message ) ; } if ( ! m input open ) { throw new io exception ( str_ ) ; } }
long adjust price model start time to free period ( long price model start , long price model end , long free period end ) { if ( free period end >= price model end ) { return price model end ; } else { return math . max ( price model start , free period end ) ; } }
public long add room with moderation questions audio type and hide options ( string sid , string name , long roomtypes _id , string comment , long number of partizipants , boolean ispublic , boolean appointment , boolean is demo room , integer demo time , boolean is moderated room , boolean allow user questions , boolean is audio only , boolean hide top bar , boolean hide chat , boolean hide activities and actions , boolean hide files explorer , boolean hide actions menu , boolean hide screen sharing , boolean hide whiteboard ) throws axis fault { try { long users _id = session management . check session ( sid ) ; long user _level = user management . get user level by id ( users _id ) ; return roommanagement . add room ( user _level , name , roomtypes _id , comment , number of partizipants , ispublic , null , appointment , is demo room , demo time , is moderated room , null , allow user questions , is audio only , bool_ , str_ , str_ , str_ , null , null , null , hide top bar , hide chat , hide activities and actions , hide files explorer , hide actions menu , hide screen sharing , hide whiteboard , bool_ ) ; } catch ( exception err ) { log . error ( str_ , err ) ; throw new axis fault ( err . get message ( ) ) ; } }
public boolean is super type ( type t , type s ) { switch ( t . get tag ( ) ) { case error : case unknown : return bool_ ; case undetvar : { undet var undet = ( undet var ) t ; if ( t == s || undet . qtype == s || s . has tag ( error ) || s . has tag ( bot ) ) { return bool_ ; } undet . add bound ( inference bound . lower , s , this ) ; return bool_ ; } default : return is subtype ( s , t ) ; } }
public int increment and get ( t obj ) { for ( ; ; ) { int current = get ( obj ) ; int next = current + num_ ; if ( compare and set ( obj , current , next ) ) return next ; } }
public static synchronized gui mediator instance ( ) { if ( _instance == null ) _instance = new gui mediator ( ) ; return _instance ; }
public void measure ( ) { int size = num_ ; test ( size / num_ ) ; int s ; long time = system . current time millis ( ) ; s = test ( size ) ; time = system . current time millis ( ) - time ; system . out . println ( ( double ) s / size + str_ + time + str_ ) ; }
public static byte [ ] encode ( byte [ ] input , int offset , int len , int flags ) { encoder encoder = new encoder ( flags , null ) ; int output _len = len / num_ * num_ ; if ( encoder . do _padding ) { if ( len % num_ > num_ ) { output _len += num_ ; } } else { switch ( len % num_ ) { case num_ : break ; case num_ : output _len += num_ ; break ; case num_ : output _len += num_ ; break ; } } if ( encoder . do _newline && len > num_ ) { output _len += ( ( ( len - num_ ) / ( num_ * encoder . lin e_ groups ) ) + num_ ) * ( encoder . do _cr ? num_ : num_ ) ; } encoder . output = new byte [ output _len ] ; encoder . process ( input , offset , len , bool_ ) ; assert encoder . op == output _len ; return encoder . output ; }
public void unlock item offer ( ) { boolean my res = unlock item offer internally ( partner name ) ; boolean other res = bool_ ; player partner = singleton repository . get rule processor ( ) . get player ( partner name ) ; if ( partner != null ) { other res = partner . unlock trade item offer internally ( player . get name ( ) ) ; } if ( my res || other res ) { tell clients ( ) ; } }
protected ct member . cache has member cache ( ) { if ( member cache != null ) return ( ct member . cache ) member cache . get ( ) ; else return null ; }
public string global info ( ) { return str_ + str_ + str_ + str_ + str_ + str_ + str_ + str_ + str_ + str_ + str_ + str_ + str_ + get technical information ( ) . to string ( ) ; }
public string to string ( ) { if ( version == null || version . is empty ( ) ) { return name ; } return name + str_ + version ; }
public drill sideways result search ( score doc after , drill down query query , int top n ) throws io exception { int limit = searcher . get index reader ( ) . max doc ( ) ; if ( limit == num_ ) { limit = num_ ; } top n = math . min ( top n , limit ) ; top score doc collector hit collector = top score doc collector . create ( top n , after ) ; drill sideways result r = search ( query , hit collector ) ; return new drill sideways result ( r . facets , hit collector . top docs ( ) ) ; }
public void simulate method ( soot method method , reference variable this var , reference variable return var , reference variable params [ ] ) { string sub signature = method . get sub signature ( ) ; if ( sub signature . equals ( str_ ) ) { java _lang _ string _intern ( method , this var , return var , params ) ; return ; } else { default method ( method , this var , return var , params ) ; return ; } }
public boolean is auto logon ( ) { return auto logon ; }
protected double zero yield impl ( final double t ) { if ( t == num_ ) { return forward impl ( num_ ) ; } double sum = num_ * forward impl ( num_ ) ; final int n = num_ ; final double dt = t / n ; for ( double i = dt ; i < t ; i += dt ) { sum += forward impl ( i ) ; } sum += num_ * forward impl ( t ) ; return sum * dt / t ; }
private void remove listeners ( final i navi view view ) { view . remove listener ( m _view listener ) ; for ( final i navi view node node : view . get graph ( ) . get nodes ( ) ) { if ( node instanceof i navi group node ) { ( ( i navi group node ) node ) . remove group listener ( m _group node listener ) ; } } }
public node set dtm ( node set dtm nodelist ) { super ( ) ; m _manager = nodelist . get dtm manager ( ) ; m _root = nodelist . get root ( ) ; add nodes ( ( dtm iterator ) nodelist ) ; }
public abstract void custom run ( ) ;
public stun exception ( int id ) { set id ( id ) ; }
public void add ( predicate p , stroke action f ) { super . add ( p , f ) ; }
public void insert _typecode ( org . omg . corba . type code value ) throws org . omg . dynamic any . dyn any package . type mismatch , org . omg . dynamic any . dyn any package . invalid value { org . omg . corba . portable . servant object $so = _servant _preinvoke ( str_ , _ops class ) ; dyn array operations $self = ( dyn array operations ) $so . servant ; try { $self . insert _typecode ( value ) ; } finally { _servant _postinvoke ( $so ) ; } }
private void register debug events ( ) throws floodlight module exception { if ( debug event service == null ) { debug event service = new mock debug event service ( ) ; } ev switch = debug event service . build event ( switch event . class ) . set module name ( this . counters . get prefix ( ) ) . set event name ( str_ ) . set event description ( str_ ) . set event type ( event type . alway s_ log ) . set buffer capacity ( num_ ) . register ( ) ; }
public state interactive extent _to _whole _connected _sets ( ) { set < brd item > new _selected _items = new tree set < brd item > ( ) ; for ( brd item curr _item : items _list ) { if ( curr _item instanceof brd connectable ) { new _selected _items . add all ( curr _item . get _connected _set ( - num_ ) ) ; } } if ( new _selected _items . is empty ( ) ) return return _state ; items _list = new _selected _items ; actlog _start _scope ( logfile scope . exten d_ t o_ whol e_ connecte d_ sets ) ; filter ( ) ; i _brd . repaint ( ) ; return this ; }
public auto deskew transform ( final double ... lambdas ) { this ( bool_ , double list . view ( lambdas , lambdas . length ) ) ; }
private static remote export object ( remote obj , activatable server ref sref ) throws remote exception { if ( obj instanceof activatable ) { ( ( activatable ) obj ) . ref = sref ; } return sref . export object ( obj , null , bool_ ) ; }
script run script ( final string script location ) ;
public static boolean check pattern ( list < lock pattern view . cell > pattern , byte [ ] bytes ) { if ( pattern == null || bytes == null ) { return bool_ ; } else { byte [ ] bytes 2 = pattern to hash ( pattern ) ; return arrays . equals ( bytes , bytes 2 ) ; } }
protected abstract void load ( ) ;
protected void sequence _ skill fake definition ( i serialization context context , skill fake definition semantic object ) { if ( error acceptor != null ) { if ( transient values . is value transient ( semantic object , gaml package . literals . gam l_ definitio n _ _ name ) == value transient . yes ) error acceptor . accept ( diagnostic provider . create feature value missing ( semantic object , gaml package . literals . gam l_ definitio n _ _ name ) ) ; } sequence feeder feeder = create sequencer feeder ( context , semantic object ) ; feeder . accept ( grammar access . get skill fake definition access ( ) . get name id terminal rule call _ 1 _ 0 ( ) , semantic object . get name ( ) ) ; feeder . finish ( ) ; }
public synchronized void delete local instruction comment ( final i navi instruction instruction , final i navi code node node , final i comment comment ) throws couldnt delete exception { preconditions . check not null ( instruction , str_ ) ; delete comment ( new instruction commenting strategy ( instruction , node , comment scope . local ) , comment ) ; }
public put index template request ( string name ) { this . name = name ; }
public boolean user can delete dept ( int connected user id , int dept id , string entidad ) throws exception ;
public static list < integer > create colors ( resources r , int [ ] colors ) { list < integer > result = new array list < integer > ( ) ; for ( int i : colors ) { result . add ( r . get color ( i ) ) ; } return result ; }
public static s m_ syste m_ message st r_ cha t_ channe l_ leve l_ changed ( string value 0 ) { return new s m_ syste m_ message ( num_ , value 0 ) ; }
public abstract r match ( file element file element ) ;
protected void initialize ( ) throws exception { }
public void add remote subscription ( remote gena subscription subscription ) ;
public receive worker ( final client reader input stream , final linked blocking queue < debugger reply > event queue ) { worker input stream = preconditions . check not null ( input stream , str_ ) ; this . event queue = preconditions . check not null ( event queue , str_ ) ; parser factory = new parser factory ( input stream ) ; }
private void return data ( object ret ) { if ( my host != null ) { my host . return data ( ret ) ; } }
public short read short ( ) throws io exception { return bin . read short ( ) ; }
public void test constructor sign bytes positive 3 ( ) { byte a bytes [ ] = { - num_ , num_ , num_ } ; int a sign = num_ ; byte r bytes [ ] = { num_ , - num_ , num_ , num_ } ; big integer a number = new big integer ( a sign , a bytes ) ; byte res bytes [ ] = new byte [ r bytes . length ] ; res bytes = a number . to byte array ( ) ; for ( int i = num_ ; i < res bytes . length ; i ++ ) { assert true ( res bytes [ i ] == r bytes [ i ] ) ; } assert equals ( str_ , num_ , a number . signum ( ) ) ; }
private boolean has idle invokers ( ) { for ( async event listener invoker invoker : this . scheduled invokers ) { if ( invoker . is idle ( ) ) { return bool_ ; } } return bool_ ; }
public void flush ( ) throws io exception ;
public synchronized void dispose ( ) { closeable reference . close safely ( m preview bitmap ) ; m preview bitmap = null ; closeable reference . close safely ( m decoded frames ) ; m decoded frames = null ; }
public void send file info ( one to one file transfer impl file transfer , string file transfer id , string file info , boolean displayed report enabled , boolean delivered report enabled ) throws network exception { string network content ; long timestamp = system . current time millis ( ) ; long timestamp sent = timestamp ; m messaging log . set file transfer timestamps ( file transfer id , timestamp , timestamp sent ) ; if ( displayed report enabled ) { network content = chat utils . build cpim message with imdn ( chat utils . anonymou s_ uri , chat utils . anonymou s_ uri , file transfer id , file info , file transfer http info document . mim e_ type , timestamp sent ) ; } else if ( delivered report enabled ) { network content = chat utils . build cpim message without displayed imdn ( chat utils . anonymou s_ uri , chat utils . anonymou s_ uri , file transfer id , file info , file transfer http info document . mim e_ type , timestamp sent ) ; } else { network content = chat utils . build cpim message ( chat utils . anonymou s_ uri , chat utils . anonymou s_ uri , file info , file transfer http info document . mim e_ type , timestamp sent ) ; } send data chunks ( id generator . generate message id ( ) , network content , cpim message . mim e_ type , msrp session . type msrp chunk . http file sharing ) ; file transfer . on file info dequeued ( get remote contact ( ) ) ; }
public < r > r execute remotely ( final int idx , final test ignite idx callable < r > job ) { ignite ex ignite = grid ( idx ) ; if ( ! is multi jvm object ( ignite ) ) throw new illegal argument exception ( str_ ) ; ignite process proxy proxy = ( ignite process proxy ) ignite ; return proxy . remote compute ( ) . call ( new execute remotely task < > ( job , idx ) ) ; }
public static int add ( int p , int q ) { return p ^ q ; }
public void run test ( ) throws throwable { document doc ; node list element list ; node employee node ; node list employee list ; node child ; string child name ; doc = ( document ) load ( str_ , bool_ ) ; element list = doc . get elements by tag name ( str_ ) ; employee node = element list . item ( num_ ) ; employee list = employee node . get child nodes ( ) ; child = employee list . item ( num_ ) ; child name = child . get node name ( ) ; if ( ! equals ( str_ , child name ) ) { assert equals ( str_ , str_ , child name ) ; } }
public void visit unary production ( nonterminal a , unary production p ) { nonterminal arg = p . get nonterminal ( ) ; if ( is recursive ( arg ) ) { throw new runtime exception ( str_ ) ; } re re 1 = get re ( p . get nonterminal ( ) ) ; re cur = re . mk un op ( p . get operation ( ) , re 1 ) ; try { add term ( cur ) ; } catch ( interrupted exception e ) { throw new runtime exception ( ) ; } }
private void create quad program ( ) throws io exception { int program = gl create program ( ) ; int vshader = demo utils . create shader ( str_ , g l_ verte x_ shader , str_ ) ; int fshader = demo utils . create shader ( str_ , g l_ fragmen t_ shader , str_ ) ; gl attach shader ( program , vshader ) ; gl attach shader ( program , fshader ) ; gl bind attrib location ( program , num_ , str_ ) ; gl bind frag data location ( program , num_ , str_ ) ; gl link program ( program ) ; int linked = gl get programi ( program , g l_ lin k_ status ) ; string program log = gl get program info log ( program ) ; if ( program log . trim ( ) . length ( ) > num_ ) { system . err . println ( program log ) ; } if ( linked == num_ ) { throw new assertion error ( str_ ) ; } this . quad program = program ; }
public void remove mouse handler ( mouse handler fx handler ) { this . available mouse handlers . remove ( handler ) ; }
public bulk request add ( iterable < action request > requests ) { for ( action request request : requests ) { add ( request ) ; } return this ; }
public string read line ( ) throws io exception { string builder buf = new string builder ( ) ; byte b = ( byte ) read ( ) ; while ( b != str_ ) { buf . append ( ( char ) b ) ; b = ( byte ) in . read ( ) ; if ( get position ( ) >= length ( ) ) break ; } return buf . to string ( ) ; }
public string to string ( ) { string builder sb = new string builder ( ) ; sb . append ( str_ ) ; sb . append ( str_ ) ; sb . append ( string . format ( str_ , this . key [ num_ ] , this . key [ num_ ] , this . key [ num_ ] , this . key [ num_ ] , this . key [ num_ ] , this . key [ num_ ] , this . key [ num_ ] , this . key [ num_ ] , this . key [ num_ ] , this . key [ num_ ] , this . key [ num_ ] , this . key [ num_ ] , this . key [ num_ ] , this . key [ num_ ] , this . key [ num_ ] , this . key [ num_ ] ) ) ; sb . append ( string . format ( str_ , this . length ) ) ; return sb . to string ( ) ; }
void recompose imports ( ) { m _import number = get stylesheet root ( ) . get import number ( this ) ; stylesheet root root = get stylesheet root ( ) ; int global import count = root . get global import count ( ) ; m _import count composed = ( global import count - m _import number ) - num_ ; int count = get import count ( ) ; if ( count > num_ ) { m _end import count composed += count ; while ( count > num_ ) m _end import count composed += this . get import ( -- count ) . get end import count composed ( ) ; } count = get include count composed ( ) ; while ( count > num_ ) { int imports = get include composed ( -- count ) . get import count ( ) ; m _end import count composed += imports ; while ( imports > num_ ) m _end import count composed += get include composed ( count ) . get import ( -- imports ) . get end import count composed ( ) ; } }
public void ensure started and update registered types ( ) { m started = bool_ ; ensure gcm is initialized ( ) ; m enable session invalidations timer . resume ( ) ; hash set < integer > types to register = new hash set < integer > ( ) ; types to register . add all ( profile sync service . get ( ) . get preferred data types ( ) ) ; if ( ! m session invalidations enabled ) { types to register . remove ( model type . sessions ) ; types to register . remove ( model type . favico n_ tracking ) ; types to register . remove ( model type . favico n_ images ) ; } intent register intent = invalidation intent protocol . create register intent ( chrome signin controller . get ( m context ) . get signed in user ( ) , types to register ) ; register intent . set class ( m context , invalidation client service . class ) ; m context . start service ( register intent ) ; }
public static void fill ( char [ ] array , char value ) { for ( int i = num_ ; i < array . length ; i ++ ) { array [ i ] = value ; } }
public void read ( buffered reader reader ) throws exception { string line ; clear ( ) ; while ( ( line = reader . read line ( ) ) != null ) { line = line . trim ( ) ; if ( line . starts with ( str_ ) ) { continue ; } add ( line ) ; } reader . close ( ) ; }
public abstract void engine set key entry ( string alias , key key , char [ ] password , certificate [ ] chain ) throws key store exception ;
protected final void finalize ( ) { }
private int read content ( input stream is ) { int nread = num_ ; log ( str_ ) ; string length string = headers . get ( request headers [ re q_ conten t_ length ] ) ; int length = new integer ( length string ) . int value ( ) ; length = read data ( is , length ) ; return length ; }
tls cipher create cipher ( tls context context , int encryption algorithm , int mac algorithm ) throws io exception ;
public boolean is touch dismissible ( ) { return this . m style . touch to dismiss ; }
public blade plugin ( class < ? extends plugin > plugin ) { assert . not null ( plugin ) ; plugins . add ( plugin ) ; return this ; }
public forgotten username builder ( ) { subject translations = new hash map < > ( ) ; message translations = new hash map < > ( ) ; valid query attributes = new hash set < > ( ) ; }
public static synchronized boolean execute atomic transaction ( atomic transaction at ) { boolean transaction ok = bool_ ; logger . trace ( str_ ) ; final connection c = get connection ( ) ; if ( c == null ) { logger . error ( str_ ) ; return bool_ ; } try { start transaction ( c ) ; transaction ok = at . begin atomic transaction ( c ) ; } catch ( throwable t ) { surface throwable ( str_ , t ) ; } finally { try { end transaction ( c , transaction ok ) ; } catch ( throwable t ) { logger . error ( str_ , t ) ; } cleanup ( c ) ; } logger . trace ( str_ + transaction ok ) ; return transaction ok ; }
public boolean add narrative explanation ( explanation explanation ) { return narrative . add ( explanation ) ; }
public static void assert equals exact order ( string [ ] [ ] expected , string [ ] [ ] actual ) { if ( compare array size ( expected , actual ) ) { return ; } for ( int i = num_ ; i < expected . length ; i ++ ) { scope test helper . assert true ( arrays . equals ( actual [ i ] , expected [ i ] ) ) ; } }
public boolean is time to reload conf ( ) { if ( ! conf loaded from file ) return bool_ ; long now = system . current time millis ( ) ; return conf reload check enabled && ! conf reload in progress && ( now - conf reload check interval ) > conf reload last check ; }
private void seek to offset ( long offset ) throws io exception { if ( random access file . get file pointer ( ) != offset ) { random access file . seek ( offset ) ; } }
public limit limit ( string limit ) { return new limit ( this , limit ) ; }
private final object _deserialize ( json parser jp , deserialization context ctxt ) throws io exception , json processing exception { boolean had start array = jp . is expected start array token ( ) ; json deserializer < object > deser = _find deserializer ( ctxt , _locate type id ( jp , ctxt ) ) ; object value = deser . deserialize ( jp , ctxt ) ; if ( had start array && jp . next token ( ) != json token . en d_ array ) { throw ctxt . wrong token exception ( jp , json token . en d_ array , str_ ) ; } return value ; }
public item adapter < item > clear ( ) { if ( m original items != null ) { int count = m original items . size ( ) ; m original items . clear ( ) ; perform filtering ( m constraint ) ; return item adapter . this ; } else { return item adapter . this . clear ( ) ; } }
public boolean is loaded ( ) { return m _address space . is loaded ( ) ; }
public boolean can handle ( string request ) ;
protected svgom polyline element ( ) { }
public static album impl create local ( context context , string name ) { return new album impl ( new screenshot directories ( context ) , name , null ) ; }
public boolean is critical ( ) { return bool_ ; }
public void test value of integer max ( ) { long long val = integer . ma x_ value ; big integer a number = big integer . value of ( long val ) ; byte r bytes [ ] = { num_ , - num_ , - num_ , - num_ } ; byte res bytes [ ] = new byte [ r bytes . length ] ; res bytes = a number . to byte array ( ) ; for ( int i = num_ ; i < res bytes . length ; i ++ ) { assert true ( res bytes [ i ] == r bytes [ i ] ) ; } assert equals ( str_ , num_ , a number . signum ( ) ) ; }
static long to u data ( int [ ] shorts ) { if ( shorts == null ) { return num_ ; } long res = xlib wrapper . unsafe . allocate memory ( shorts . length * get short size ( ) ) ; for ( int i = num_ ; i < shorts . length ; i ++ ) { put u short ( res , i , shorts [ i ] ) ; } return res ; }
public static string full version ( ) { return version ( str_ ) ; }
public memory section ( final i address start , final i address end ) { memory section start address = preconditions . check not null ( start , str_ ) ; memory section end address = preconditions . check not null ( end , str_ ) ; preconditions . check argument ( end . to big integer ( ) . compare to ( start . to big integer ( ) ) != - num_ , str_ ) ; }
public static void main ( final string [ ] args ) { dom test case . do main ( hc _attreffectivevalue . class , args ) ; }
public abstract symbol do _action ( int act _num , lr _parser parser , stack stack , int top ) throws java . lang . exception ;
public void update position ( ) { for ( element selection : m selected widgets ) { selection . update position ( ) ; } }
public abstract q gte ( string field name , object value ) ;
public void replace token ( token token , string replacement ) { try { replace ( token . start , token . length , replacement , null ) ; } catch ( bad location exception ex ) { log . log ( level . warning , str_ + token , ex ) ; } }
public validator mixin ( w input widget , error handler error handler ) { this . input widget = input widget ; this . error handler = error handler ; event bus = new simple event bus ( ) ; setup value change validation ( ) ; }
public pooling byte array output stream ( byte array pool pool ) { this ( pool , defaul t_ size ) ; }
boolean contains naming context ( dn dn ) { return private naming contexts . contains key ( dn ) || public naming contexts . contains key ( dn ) ; }
public object id ( byte [ ] b ) { if ( b . length != num_ ) throw new illegal argument exception ( str_ ) ; byte buffer bb = byte buffer . wrap ( b ) ; _time = bb . get int ( ) ; _machine = bb . get int ( ) ; _inc = bb . get int ( ) ; _new = bool_ ; }
private java . lang . string register prefix ( javax . xml . stream . xml stream writer xml writer , java . lang . string namespace ) throws javax . xml . stream . xml stream exception { java . lang . string prefix = xml writer . get prefix ( namespace ) ; if ( prefix == null ) { prefix = generate prefix ( namespace ) ; while ( xml writer . get namespace context ( ) . get namespace uri ( prefix ) != null ) { prefix = org . apache . axis 2 . databinding . utils . bean util . get unique prefix ( ) ; } xml writer . write namespace ( prefix , namespace ) ; xml writer . set prefix ( prefix , namespace ) ; } return prefix ; }
public basic header iterator ( header [ ] headers , string name ) { if ( headers == null ) { throw new illegal argument exception ( str_ ) ; } this . all headers = headers ; this . header name = name ; this . current index = find next ( - num_ ) ; }
private animation util ( ) { throw new error ( str_ ) ; }
private void show feedback ( string message ) { if ( my host != null ) { my host . show feedback ( message ) ; } else { system . out . println ( message ) ; } }
public string post ( context context , string url , http entity entity , string content type ) throws http exception { return send request ( http client , http context , add entity to request base ( new http post ( url ) , entity ) , content type , context ) ; }
void failsafe run ( circuit breaker breaker , checked runnable runnable ) throws execution exception , interrupted exception { scheduled executor service executor = get executor ( ) ; if ( executor == null ) failsafe . with ( breaker ) . run ( runnable ) ; else failsafe . with ( breaker ) . with ( executor ) . run ( runnable ) ; }
public boolean equals ( object t 1 ) { try { matrix 4f m 2 = ( matrix 4f ) t 1 ; return ( this . m 0 0 == m 2 . m 0 0 && this . m 0 1 == m 2 . m 0 1 && this . m 0 2 == m 2 . m 0 2 && this . m 0 3 == m 2 . m 0 3 && this . m 1 0 == m 2 . m 1 0 && this . m 1 1 == m 2 . m 1 1 && this . m 1 2 == m 2 . m 1 2 && this . m 1 3 == m 2 . m 1 3 && this . m 2 0 == m 2 . m 2 0 && this . m 2 1 == m 2 . m 2 1 && this . m 2 2 == m 2 . m 2 2 && this . m 2 3 == m 2 . m 2 3 && this . m 3 0 == m 2 . m 3 0 && this . m 3 1 == m 2 . m 3 1 && this . m 3 2 == m 2 . m 3 2 && this . m 3 3 == m 2 . m 3 3 ) ; } catch ( class cast exception e 1 ) { return bool_ ; } catch ( null pointer exception e 2 ) { return bool_ ; } }
void add scrap view ( view scrap , int position , int view type ) { if ( view type count == num_ ) { current scrap views . put ( position , scrap ) ; } else { scrap views [ view type ] . put ( position , scrap ) ; } if ( build . version . sd k_ int >= build . versio n_ codes . ic e_ crea m_ sandwich ) { scrap . set accessibility delegate ( null ) ; } }
public jenkins server ( uri server uri ) { this ( new jenkins http client ( server uri ) ) ; }
boolean is item ( string clazz ) ;
public boolean install version ( java . lang . string version ) throws android . os . remote exception ;
public boolean is send e mail ( ) ;
private void show feedback ( string message ) { if ( my host != null ) { my host . show feedback ( message ) ; } else { system . out . println ( message ) ; } }
protected void single ensemble ( final double [ ] ensemble , final number vector vec ) { double [ ] buf = new double [ num_ ] ; for ( int i = num_ ; i < ensemble . length ; i ++ ) { buf [ num_ ] = vec . double value ( i ) ; ensemble [ i ] = voting . combine ( buf , num_ ) ; if ( double . is na n ( ensemble [ i ] ) ) { log . warning ( str_ + format util . format ( buf ) + str_ + voting . to string ( ) ) ; } } apply scaling ( ensemble , scaling ) ; }
public void create loop ( vector 2 [ ] vertices ) { vec 2 [ ] v = new vec 2 [ vertices . length ] ; for ( int i = num_ ; i < vertices . length ; i ++ ) { v [ i ] = new vec 2 ( vertices [ i ] . x , vertices [ i ] . y ) ; } shape . create loop ( v , v . length ) ; is looped = bool_ ; }
public static boolean is memory db ( string db url ) throws invalid exception { if ( db url == null ) { throw new invalid exception ( str_ ) ; } return db url . starts with ( str_ ) ; }
private int assign complex ordinal ( carbon dimension parent dimension , int complex dimension ordianl ) { for ( int i = num_ ; i < parent dimension . get number of child ( ) ; i ++ ) { carbon dimension dimension = parent dimension . get list of child dimensions ( ) . get ( i ) ; if ( dimension . get number of child ( ) > num_ ) { dimension . set complex type oridnal ( ++ complex dimension ordianl ) ; complex dimension ordianl = assign complex ordinal ( dimension , complex dimension ordianl ) ; } else { parent dimension . get list of child dimensions ( ) . get ( i ) . set complex type oridnal ( ++ complex dimension ordianl ) ; } } return complex dimension ordianl ; }
public string nearest neighbour search algorithm tip text ( ) { return str_ ; }
protected void notify history changed listeners ( ) { iterator < history changed listener > iter ; history changed listener l ; iter = m _ history changed listeners . iterator ( ) ; while ( iter . has next ( ) ) { l = iter . next ( ) ; l . history changed ( new history changed event ( this , histor y_ name , get history ( ) ) ) ; } }
public boolean has substituted return type ( ) { if ( this . inferred return type ) return this . original method . has substituted return type ( ) ; return super . has substituted return type ( ) ; }
public static void drop all tables ( sq lite database db , boolean if exists ) { book dao . drop table ( db , if exists ) ; }
public int current framebuffer ( ) { return this . framebuffer id ; }
public static alert dialog build alert ( context context , char sequence title , char sequence msg , char sequence ok , char sequence cancel , dialog interface . on click listener l ok , dialog interface . on click listener l cancel ) { alert dialog . builder builder = new alert dialog . builder ( context ) ; if ( title != null ) builder . set title ( title ) ; if ( msg != null ) builder . set message ( msg ) ; if ( ok != null ) builder . set positive button ( ok , l ok ) ; if ( cancel != null ) builder . set negative button ( cancel , l cancel ) ; return builder . create ( ) ; }
public void parent removed ( session event event ) { }
public static image exception convert to api ( org . oscm . internal . types . exception . image exception old ex ) { org . oscm . internal . types . exception . beans . image exception bean bean = ( org . oscm . internal . types . exception . beans . image exception bean ) get fault info ( old ex ) ; image exception bean v 1 3 bean = convert bean to api ( bean , image exception bean . class ) ; if ( bean != null ) { image exception . reason v 1 3 reason = enum converter . convert ( bean . get reason ( ) , image exception . reason . class ) ; v 1 3 bean . set reason ( v 1 3 reason ) ; } return new api exception ( image exception . class , get exception message ( old ex ) , v 1 3 bean , old ex . get stack trace ( ) ) ; }
public static int remove transit routes without link sequences ( transit schedule schedule ) { log . info ( str_ ) ; int removed = num_ ; for ( transit line transit line : schedule . get transit lines ( ) . values ( ) ) { for ( transit route transit route : new hash set < > ( transit line . get routes ( ) . values ( ) ) ) { boolean remove route = bool_ ; network route network route = transit route . get route ( ) ; if ( network route == null ) { remove route = bool_ ; } list < id < link > > link ids = schedule tools . get transit route link ids ( transit route ) ; if ( link ids . size ( ) == num_ ) { remove route = bool_ ; } else { for ( id < link > link id : link ids ) { if ( link id == null ) { remove route = bool_ ; } } } if ( remove route ) { transit line . remove route ( transit route ) ; removed ++ ; } } } log . info ( str_ + removed + str_ ) ; return removed ; }
int median init time micros ( ) { if ( mit != - num_ ) { return mit ; } return mit = calculate median ( initializations ) ; }
public < e extends layout , ae extends array 1 d < e > > gen array 1 d ( class < e > element interface class , class < ae > user defined array class ) { element interface class name = impl helper . get interface class name ( element interface class ) ; element impl class name = impl helper . get impl class name ( element interface class ) ; if ( null == user defined array class ) { array impl class name = impl helper . get array 1 d class impl name ( element interface class ) ; array interface class name = str_ ; array interface class sig = str_ + array interface class name + str_ + element interface class name + str_ ; } else { array impl class name = impl helper . get impl class name ( user defined array class ) ; array interface class name = user defined array class . get name ( ) . replace ( str_ , str_ ) ; array interface class sig = null ; } dbg print names ( ) ; }
public string to string ( input stream is , charset charset ) throws io exception ;
public rpf file search ( string starting dir ) { handle entry ( starting dir ) ; }
public method exit method exit ( ) { return new method exit impl ( ) ; }
private boolean is drag ok ( final java . io . print stream out , final java . awt . dnd . drop target drag event evt ) { boolean ok = bool_ ; java . awt . datatransfer . data flavor [ ] flavors = evt . get current data flavors ( ) ; int i = num_ ; while ( ! ok && i < flavors . length ) { final data flavor cur flavor = flavors [ i ] ; if ( cur flavor . equals ( java . awt . datatransfer . data flavor . java file list flavor ) || cur flavor . is representation class reader ( ) ) { ok = bool_ ; } i ++ ; } if ( out != null ) { if ( flavors . length == num_ ) { log ( out , str_ ) ; } for ( i = num_ ; i < flavors . length ; i ++ ) { log ( out , flavors [ i ] . to string ( ) ) ; } } return ok ; }
protected ball node make ball tree nodes ( temp node node , int startidx , int endidx , int depth ) { ball node ball = null ; if ( node . left != null && node . right != null ) { ball = new ball node ( startidx , endidx , m _ num nodes , node . anchor , node . radius ) ; m _ num nodes += num_ ; ball . m _ left = make ball tree nodes ( node . left , startidx , startidx + node . left . points . length ( ) - num_ , depth + num_ ) ; ball . m _ right = make ball tree nodes ( node . right , startidx + node . left . points . length ( ) , endidx , depth + num_ ) ; m _ max depth ++ ; } else { ball = new ball node ( startidx , endidx , m _ num nodes , node . anchor , node . radius ) ; m _ num nodes += num_ ; m _ num leaves += num_ ; } return ball ; }
public static double color distance ( double r 1 , double g 1 , double b 1 , double r 2 , double g 2 , double b 2 ) { double a = ( r 2 - r 1 ) + num_ ; double b = ( g 2 - g 1 ) + num_ ; double c = ( b 2 - b 1 ) + num_ ; return math . sqrt ( a * a + b * b + c * c ) ; }
void sleep ( readable duration duration ) throws interrupted exception ;
public boolean matches ( node spec from , entity spec to ) { if ( ! objects . equals ( this . from node , from ) ) { return bool_ ; } if ( ! objects . equals ( this . from node . get relation spec ( ) . get entity spec ( ) , to ) ) { return bool_ ; } return bool_ ; }
public abstract running query eval ( final b op op , final i binding set [ ] bsets , final map < object , object > attribs ) throws exception { final uuid query id = get query uuid ( op ) ; return eval ( query id , ( pipeline op ) op , attribs , new local chunk message ( query id , op , bsets ) ) ; }
byte proceed ( ) throws exception ;
public void put ( stream state stream state ) { streams . put ( stream state . partition ( ) , stream state ) ; }
protected void shift gap ( int new gap start ) { if ( new gap start == g 0 ) { return ; } int old gap start = g 0 ; int dg = new gap start - old gap start ; int old gap end = g 1 ; int new gap end = old gap end + dg ; int gap size = old gap end - old gap start ; g 0 = new gap start ; g 1 = new gap end ; if ( dg > num_ ) { system . arraycopy ( array , old gap end , array , old gap start , dg ) ; } else if ( dg < num_ ) { system . arraycopy ( array , new gap start , array , new gap end , - dg ) ; } }
public void test byte array implementation ( ) { diagnostic . set log stream ( ) ; do test ( range , nu m_ elements ) ; }
public double max value after ( int i , final double [ ] data ) ;
void create part control ( composite parent , form toolkit toolkit ) ;
private void connect bt device ( string address , boolean secure ) { bluetooth device device = m bluetooth adapter . get remote device ( address ) ; m comm service = new bt comm service ( this , m handler ) ; m comm service . connect ( device , secure ) ; }
public static int read fully ( reader in , char [ ] buffer , int max ) throws io exception { try { int result = num_ , len = math . min ( max , buffer . length ) ; while ( len > num_ ) { int l = in . read ( buffer , result , len ) ; if ( l < num_ ) { break ; } result += l ; len -= l ; } return result ; } catch ( exception e ) { throw db exception . convert to io exception ( e ) ; } }
private destination table ( builder b ) { table = b . table . clone ( ) ; type = b . type ; write disposition = b . write disposition ; }
public void handle button 1 request ( request invocation event event ) throws model control exception { submit cycle = bool_ ; delegation model model = ( delegation model ) get model ( ) ; string uid = ( string ) get page session attribute ( curren t_ identity ) ; am property sheet ps = ( am property sheet ) get child ( delegatio n_ properties ) ; string realm = ( string ) get page session attribute ( am admin constants . curren t_ realm ) ; try { privilege xml builder builder = privilege xml builder . get instance ( ) ; set privileges = builder . get all privileges ( realm , model ) ; map values = ps . get attribute values ( privileges ) ; model . set privileges ( realm , uid , values ) ; set inline alert message ( cc alert . typ e_ info , str_ , str_ ) ; } catch ( am console exception e ) { set inline alert message ( cc alert . typ e_ error , str_ , e . get message ( ) ) ; } forward to ( ) ; }
public uri build request uri ( int track , int chunk index ) { assertions . check state ( tracks != null ) ; assertions . check state ( chunk start times != null ) ; assertions . check state ( chunk index < chunk start times . size ( ) ) ; string chunk url = chunk template . replace ( ur l_ placeholde r_ bitrate , integer . to string ( tracks [ track ] . bitrate ) ) . replace ( ur l_ placeholde r_ star t_ time , chunk start times . get ( chunk index ) . to string ( ) ) ; return util . get merged uri ( base uri , chunk url ) ; }
public void clear pages ( class loader cl ) { synchronized ( page sources ) { iterator < page source > it = this . page sources . values ( ) . iterator ( ) ; page source impl entry ; while ( it . has next ( ) ) { entry = ( page source impl ) it . next ( ) ; if ( cl != null ) entry . clear ( cl ) ; else entry . clear ( ) ; } } }
public fast multi byte array input stream ( final byte [ ] array ) { if ( array . length == num_ ) this . array = new byte [ num_ ] [ ] ; else { this . array = new byte [ num_ ] [ ] ; this . array [ num_ ] = array ; this . length = array . length ; this . current = array ; } }
void add one to one failed delivery message ( chat message msg ) ;
private void update progress ( int progress ) { if ( my host != null && progress != previous progress ) { my host . update progress ( progress ) ; } else { system . out . println ( string . value of ( progress ) + str_ ) ; } previous progress = progress ; }
public static void check method signature ( final string signature ) { int pos = num_ ; if ( get char ( signature , num_ ) == str_ ) { pos = check formal type parameters ( signature , pos ) ; } pos = check char ( str_ , signature , pos ) ; while ( str_ . index of ( get char ( signature , pos ) ) != - num_ ) { pos = check type signature ( signature , pos ) ; } pos = check char ( str_ , signature , pos ) ; if ( get char ( signature , pos ) == str_ ) { ++ pos ; } else { pos = check type signature ( signature , pos ) ; } while ( get char ( signature , pos ) == str_ ) { ++ pos ; if ( get char ( signature , pos ) == str_ ) { pos = check class type signature ( signature , pos ) ; } else { pos = check type variable signature ( signature , pos ) ; } } if ( pos != signature . length ( ) ) { throw new illegal argument exception ( signature + str_ + pos ) ; } }
public double property oscillations property ( ) { return oscillations ; }
boolean is maximized ( ) { if ( window instanceof frame ) { return ( ( frame ) window ) . get extended state ( ) == frame . maximize d_ both ; } return bool_ ; }
public put repository request source ( string repository definition ) { try ( x content parser parser = x content factory . x content ( repository definition ) . create parser ( repository definition ) ) { return source ( parser . map ordered ( ) ) ; } catch ( io exception e ) { throw new illegal argument exception ( str_ + repository definition + str_ , e ) ; } }
int position ( ) ;
public static http request post ( final char sequence base url , final boolean encode , final object ... params ) { string url = append ( base url , params ) ; return post ( encode ? encode ( url ) : url ) ; }
public json array ( collection c ) { super ( c ) ; }
public boolean remove time ( when time ) { return super . remove element ( time ) ; }
void start game ( i game game , set < i game player > players , boolean headless ) throws exception ;
public final cell record load cell by id ( final int id ) { cell record cell = null ; final cursor cursor = content resolver . query ( content uris . with appended id ( content provider . conten t_ ur i_ cell , id ) , null , null , null , null ) ; if ( cursor . move to next ( ) ) { cell = cursor to cell ( cursor ) ; } cursor . close ( ) ; return cell ; }
public host parse host ( string host ) throws parse exception { lexer lexer = new lexer ( str_ , host ) ; return new host name parser ( lexer ) . host ( ) ; }
public void print ( int i ) { return ; }
public static byte [ ] to array ( byte buffer buffer ) { byte [ ] bytes = new byte [ buffer . remaining ( ) ] ; buffer . duplicate ( ) . get ( bytes ) ; return bytes ; }
public static s m_ syste m_ message st r_ skil l_ suc c_ delayed skill _ m e_ t o_ b ( string skilltarget , string skillname ) { return new s m_ syste m_ message ( num_ , skilltarget , skillname ) ; }
historic process instance query variable value equals ignore case ( string name , string value ) ;
public final boolean is inside doc comment ( ) { return this . inside doc comment ; }
static boolean is package access ( final int modifiers ) { return ( modifiers & member utils . acces s_ test ) == num_ ; }
public static native void memcpy ( long memory destination , int destination , long memory source , int source , int length ) ;
protected void format file position ( file position pos , appendable out ) throws io exception { pos . source ( ) . format ( mc , out ) ; out . append ( str_ ) ; out . append ( string . value of ( pos . start line no ( ) ) ) ; }
public static void assert equals allow array ( string message , object expected , object actual ) { if ( ( expected != null ) && ( expected . get class ( ) . is array ( ) ) && ( actual != null ) && ( actual . get class ( ) . is array ( ) ) ) { object [ ] value array = to object array ( expected ) ; object [ ] event prop array = to object array ( actual ) ; assert equals exact order ( message , value array , event prop array ) ; return ; } scope test helper . assert equals ( message , expected , actual ) ; }
public boolean is show grid x ( ) { return m show grid x ; }
iterator < e > iterator ( ) ;
final long fn ( long v , long x ) { return v + x ; }
public static _ fields find by thrift id or throw ( int field id ) { _ fields fields = find by thrift id ( field id ) ; if ( fields == null ) throw new illegal argument exception ( str_ + field id + str_ ) ; return fields ; }
void deleted view ( i navi project project , i navi view view ) ;
public int send ( output stream out ) throws io exception { file input stream fis ; int read bytes ; byte [ ] buff = new byte [ num_ * num_ ] ; fis = new file input stream ( this . local _filename ) ; try { while ( ( read bytes = fis . read ( buff ) ) >= num_ ) { if ( read bytes == num_ ) { continue ; } out . write ( buff , num_ , read bytes ) ; } } finally { fis . close ( ) ; } return num_ ; }
public boolean is clean session ( ) { return options . is clean session ( ) ; }
public final test subscriber < t > assert contain values ( set < ? extends t > expected values ) { if ( ! values storage ) { throw new illegal state exception ( str_ ) ; } if ( expected values . size ( ) > values . size ( ) ) { throw new assertion error ( str_ + values , null ) ; } iterator < ? extends t > expected = expected values . iterator ( ) ; for ( ; ; ) { boolean n 2 = expected . has next ( ) ; if ( n 2 ) { t t 2 = expected . next ( ) ; if ( ! values . contains ( t 2 ) ) { throw new assertion error ( str_ + str_ + str_ + value and class ( t 2 ) + str_ + values , null ) ; } } else { break ; } } return this ; }
public void on view position changed ( view changed view , int left , int top , int dx , int dy ) { }
private int measure long ( int measure spec ) { int result ; int spec mode = measure spec . get mode ( measure spec ) ; int spec size = measure spec . get size ( measure spec ) ; if ( ( spec mode == measure spec . exactly ) || ( m view pager == null ) ) { result = spec size ; } else { final int count = infinite view pager . fake position helper . get adapter size ( m view pager ) ; ; result = ( int ) ( get padding left ( ) + get padding right ( ) + ( count * num_ * m radius ) + ( count - num_ ) * m radius + num_ ) ; if ( spec mode == measure spec . a t_ most ) { result = math . min ( result , spec size ) ; } } return result ; }
public static object read static field ( final field field , final boolean force access ) throws illegal access exception { if ( field == null ) { throw new illegal argument exception ( str_ ) ; } if ( ! modifier . is static ( field . get modifiers ( ) ) ) { throw new illegal argument exception ( str_ + field . get name ( ) + str_ ) ; } return field utils . read field ( field , ( object ) null , force access ) ; }
archived desktop component add desktop component ( final org . simbrain . workspace . gui . gui component < ? > dc ) { return desktop component = new archived desktop component ( this , dc ) ; }
public vertex apply greater ( list < relationship > arguments , map < vertex , vertex > variables , network network ) { vertex left = arguments . get ( num_ ) . get target ( ) . apply quotient ( variables , network ) ; vertex right = arguments . get ( num_ ) . get target ( ) . apply quotient ( variables , network ) ; if ( ! ( left . get data ( ) instanceof number ) || ! ( right . get data ( ) instanceof number ) ) { return network . create vertex ( primitive . false ) ; } if ( ( ( number ) left . get data ( ) ) . double value ( ) > ( ( number ) right . get data ( ) ) . double value ( ) ) { return network . create vertex ( primitive . true ) ; } else { return network . create vertex ( primitive . false ) ; } }
public we triangle mesh point towards ( readonly vec 3 d dir ) { return transform ( quaternion . get alignment quat ( dir , vec 3 d . z_ axis ) . to matrix 4x 4 ( matrix ) , bool_ ) ; }
public void characters ( char ch [ ] , int start , int length ) throws sax exception { try { complete element ( ) ; out . write ( normalize ( ch , start , length ) ) ; } catch ( io exception ioe ) { throw new sax exception ( ioe ) ; } }
public string local name ( ) { return the type . local name ( ) ; }
public img remove element ( string hashcode ) { remove element from registry ( hashcode ) ; return ( this ) ; }
public static void assert vector 4f equals ( vector 4f expected , vector 4f actual , float delta ) { assert . assert equals ( expected . x , actual . x , delta ) ; assert . assert equals ( expected . y , actual . y , delta ) ; assert . assert equals ( expected . z , actual . z , delta ) ; assert . assert equals ( expected . w , actual . w , delta ) ; }
public invalid configuration exception ( string msg ) { super ( msg ) ; }
public static void main ( final string [ ] args ) { dom test case . do main ( hc _namednodemapsetnameditemwithnewvalue . class , args ) ; }
public boolean is auto start ( ) { return auto start ; }
public void print html ( print writer out , double limit , int type , boolean clickable ) { print html ( out , null , new double [ ] { limit , limit , limit , limit } , type , clickable ) ; }
public result set execute query ( string sql ) throws generic data source exception , generic entity exception { prepare statement ( sql ) ; return execute query ( ) ; }
public boolean has ut f 1 6 le bom ( ) { if ( buffer . length >= num_ ) return ( buffer [ num_ ] == - num_ && buffer [ num_ ] == - num_ ) ; else return bool_ ; }
private boolean check os build architecture ( compute image os ) { return os . get os build ( ) != null && os . get os architecture ( ) != null && os . get os architecture ( ) . equals ( str_ ) ; }
public static < t extends date > t first of day ( t ts ) { check not null ( ts ) ; t cloned = ( t ) ts . clone ( ) ; cloned . set time ( new date time ( ts . get time ( ) ) . with time ( num_ , num_ , num_ , num_ ) . get millis ( ) ) ; return cloned ; }
public byte array transferable ( int offset , byte [ ] bytes ) { this . offset = offset ; if ( bytes != null ) { this . bytes = ( byte [ ] ) bytes . clone ( ) ; } else { this . bytes = new byte [ num_ ] ; } }
public string to string ( ) { return ( this . is user node ( ) ? str_ : str_ ) + str_ + this . absolute path ( ) ; }
long size to end ( object start ) ;
protected string indent ( string content , int count , string indent str ) { string result ; string tokenizer tok ; int i ; tok = new string tokenizer ( content , str_ , bool_ ) ; result = str_ ; while ( tok . has more tokens ( ) ) { if ( result . ends with ( str_ ) || ( result . length ( ) == num_ ) ) { for ( i = num_ ; i < count ; i ++ ) { result += indent str ; } } result += tok . next token ( ) ; } return result ; }
protected void build shape ( bridge context ctx , element e , shape node shape node ) { svgom polyline element pe = ( svgom polyline element ) e ; try { svgom animated points _points = pe . get svgom animated points ( ) ; _points . check ( ) ; svg point list pl = _points . get animated points ( ) ; int size = pl . get number of items ( ) ; if ( size == num_ ) { shape node . set shape ( defaul t_ shape ) ; } else { awt polyline producer app = new awt polyline producer ( ) ; app . set winding rule ( css utilities . convert fill rule ( e ) ) ; app . start points ( ) ; for ( int i = num_ ; i < size ; i ++ ) { svg point p = pl . get item ( i ) ; app . point ( p . get x ( ) , p . get y ( ) ) ; } app . end points ( ) ; shape node . set shape ( app . get shape ( ) ) ; } } catch ( live attribute exception ex ) { throw new bridge exception ( ctx , ex ) ; } }
public index info ( string index name , string region path ) { this . index name = index name ; this . region path = region path ; }
boolean intersects ( area target area ) ;
public boolean on query ( cef browser browser , long query _id , string request , boolean persistent , cef query callback callback ) ;
public void cleanup player ( context context , boolean notify , boolean stop service ) { music preferance . save last song ( context , get playing song detail ( ) ) ; music preferance . save last song list type ( context , type ) ; music preferance . save last alb id ( context , id ) ; music preferance . save last position ( context , current playlist num ) ; music preferance . save last path ( context , path ) ; cleanup player ( notify , stop service ) ; }
public static < e > sorted set < e > synchronized sorted set ( sorted set < e > set ) { if ( set == null ) { throw new null pointer exception ( str_ ) ; } return new synchronized sorted set < e > ( set ) ; }
void add value ( class < ? > component type , object value ) { preconditions . check argument ( component type == this . component type ) ; values . add ( value ) ; }
private static boolean has ties ( double [ ] x , double [ ] y ) throws exception { method method = kolmogorov smirnov test . class . get declared method ( str_ , double [ ] . class , double [ ] . class ) ; method . set accessible ( bool_ ) ; return ( boolean ) method . invoke ( kolmogorov smirnov test . class , x , y ) ; }
public static file validate settings directory ( file dir ) throws io exception { dir = dir . get absolute file ( ) ; if ( ! dir . is directory ( ) ) { dir . delete ( ) ; if ( ! dir . mkdirs ( ) ) throw new io exception ( str_ + dir ) ; } if ( ! dir . can write ( ) ) throw new io exception ( str_ + dir ) ; if ( ! dir . can read ( ) ) throw new io exception ( str_ + dir ) ; file file = file . create temp file ( str_ , str_ , dir ) ; if ( ! file . exists ( ) ) throw new io exception ( str_ + dir ) ; file . delete ( ) ; return dir ; }
public static boolean is i pv 6 reference ( string address ) { return address . char at ( num_ ) == str_ && address . char at ( address . length ( ) - num_ ) == str_ ; }
void add scrap view ( view scrap , int position , int view type ) { if ( view type count == num_ ) { current scrap views . put ( position , scrap ) ; } else { scrap views [ view type ] . put ( position , scrap ) ; } if ( build . version . sd k_ int >= build . versio n_ codes . ic e_ crea m_ sandwich ) { scrap . set accessibility delegate ( null ) ; } }
protected void write padded string ( string s , int length ) { int pad = length - s . length ( ) ; printer . print ( s ) ; while ( pad > num_ ) { printer . print ( str_ ) ; pad -- ; } }
public string to string ( ) { annotation [ ] [ ] aa = get annotations ( ) ; string builder sbuf = new string builder ( ) ; int k = num_ ; while ( k < aa . length ) { annotation [ ] a = aa [ k ++ ] ; int i = num_ ; while ( i < a . length ) { sbuf . append ( a [ i ++ ] . to string ( ) ) ; if ( i != a . length ) sbuf . append ( str_ ) ; } if ( k != aa . length ) sbuf . append ( str_ ) ; } return sbuf . to string ( ) ; }
protected abstract t on event native ( int event type , long arg 1 , float arg 2 ) ;
protected string generate identity key ( ) { if ( m request . get image reuse info ( ) == null ) { return get identity url ( ) ; } else { return join size tag to key ( get identity url ( ) , m request . get image reuse info ( ) . get identity size ( ) ) ; } }
public min max normalization model ( example set example set , double min , double max , hash map < string , tupel < double , double > > attribute ranges ) { super ( example set ) ; this . min = min ; this . max = max ; this . attribute ranges = attribute ranges ; attribute names = new hash set < string > ( ) ; for ( attribute attribute : example set . get attributes ( ) ) { if ( attribute . is numerical ( ) ) { attribute names . add ( attribute . get name ( ) ) ; } } }
public boolean is keyword ( name name ) { return keywords . contains ( name ) ; }
int check if sargable and remove escape chars ( execution context context , string buffer buffer ) { int len = buffer . length ( ) ; int wildcard position = - num_ ; for ( int i = num_ ; i < len ; ++ i ) { char ch = buffer . char at ( i ) ; if ( ch == underscore ) { context . cache put ( wildcard type key , wildcar d_ underscore ) ; wildcard position = i ; break ; } else if ( ch == percent ) { context . cache put ( wildcard type key , wildcar d_ percent ) ; wildcard position = i ; break ; } else if ( ch == backslash ) { if ( i + num_ < len ) { if ( buffer . char at ( i + num_ ) == percent || buffer . char at ( i + num_ ) == underscore ) { wildcard position = - num_ ; } buffer . delete char at ( i ) ; len -- ; } } } return wildcard position ; }
public static component ui create ui ( j component c ) { return new basic spinner ui ( ) ; }
public json value to json ( ) { json value ret = json ( object ( field ( str_ , get file path ( ) ) , field ( str_ , get file state ( ) ) , field ( str_ , get action taken ( ) ) ) ) ; if ( get backup file ( ) != null ) { ret . put ( str_ , get backup file ( ) ) ; } if ( get stock file ( ) != null ) { ret . put ( str_ , get stock file ( ) ) ; } return ret ; }
private static native long length ( long fd ) throws io exception ;
protected int cluster for feature ( double [ ] f , cluster [ ] clusters array ) { double distance , min = clusters array [ num_ ] . get distance ( f ) ; int result = num_ ; for ( int i = num_ ; i < clusters array . length ; i ++ ) { distance = clusters array [ i ] . get distance ( f ) ; if ( distance < min ) { min = distance ; result = i ; } } return result ; }
public abstract int hash code ( ) ;
public static boolean put string ( content resolver resolver , string name , string value ) { return put string for user ( resolver , name , value , user handle . my user id ( ) ) ; }
private static final int table size for ( int c ) { int n = c - num_ ; n |= n > > > num_ ; n |= n > > > num_ ; n |= n > > > num_ ; n |= n > > > num_ ; n |= n > > > num_ ; return ( n < num_ ) ? num_ : ( n >= maximu m_ capacity ) ? maximu m_ capacity : n + num_ ; }
private void read object ( java . io . object input stream in ) throws io exception , class not found exception { in . default read object ( ) ; set role names = ( set ) in . read object ( ) ; set roles = new hash set ( role names . size ( ) ) ; for ( iterator iter = role names . iterator ( ) ; iter . has next ( ) ; ) { string name = ( string ) iter . next ( ) ; roles . add ( internal role . get role ( name ) ) ; } this . failed roles = roles ; }
public boolean configure splice to ( default track output next queue ) { if ( splice out time us != long . mi n_ value ) { return bool_ ; } long first possible splice time ; if ( rolling buffer . peek sample ( sample info holder ) ) { first possible splice time = sample info holder . time us ; } else { first possible splice time = last read time us + num_ ; } rolling sample buffer next rolling buffer = next queue . rolling buffer ; while ( next rolling buffer . peek sample ( sample info holder ) && ( sample info holder . time us < first possible splice time || ! sample info holder . is sync frame ( ) ) ) { next rolling buffer . skip sample ( ) ; } if ( next rolling buffer . peek sample ( sample info holder ) ) { splice out time us = sample info holder . time us ; return bool_ ; } return bool_ ; }
protected state impl ( ) { super ( ) ; }
public void build tank _player ( entity player player , enum facing inside ) { if ( get world ( ) . is remote ) return ; build player = player ; build tank ( inside ) ; }
protected abstract void override identifier data ( ema api identifier type identifier ) throws ema exception ;
public static < t , c extends collection < t > > c require non null elements ( c collection ) { require non null ( collection , str_ ) ; collection . for each ( null ) ; return collection ; }
protected provider ( string name , double version , string info ) { this . name = name ; this . version = version ; this . info = info ; put id ( ) ; initialized = bool_ ; }
protected void config kappa ( parameterization config ) { double parameter kappa p = new double parameter ( kapp a_ id ) . add constraint ( common constraints . greate r_ tha n_ on e_ double ) . set default value ( kapp a_ default ) ; if ( config . grab ( kappa p ) ) { settings . kappa = kappa p . double value ( ) ; } }
private void register m beans ( ) throws jm exception { string base object name = str_ + name ; register mailets ( base object name , processor . get mailets ( ) . iterator ( ) ) ; register matchers ( base object name , processor . get matchers ( ) . iterator ( ) , num_ ) ; }
public boolean save tab state ( int tab id , boolean encrypted , tab state state ) { if ( state == null ) return bool_ ; file output stream stream = null ; try { stream = new file output stream ( get tab state file ( tab id , encrypted ) ) ; tab state . save state ( stream , state , encrypted ) ; return bool_ ; } catch ( file not found exception exception ) { log . w ( tag , str_ ) ; } catch ( io exception exception ) { log . w ( tag , str_ ) ; } catch ( out of memory error e ) { log . w ( tag , str_ ) ; delete tab state ( tab id , encrypted ) ; } finally { stream util . close quietly ( stream ) ; } return bool_ ; }
integer insert and return key ( string query , object ... params ) ;
public void test compare canonical versions ( ) { assert true ( version . compare canonical versions ( str_ , str_ ) == num_ ) ; assert true ( version . compare canonical versions ( str_ , str_ ) < num_ ) ; assert true ( version . compare canonical versions ( str_ , str_ ) > num_ ) ; assert true ( version . compare canonical versions ( str_ , str_ ) == num_ ) ; assert true ( version . compare canonical versions ( str_ , str_ ) < num_ ) ; }
public void remove child ( string name ) throws m bean exception { if ( name != null ) { try { container container = ( container ) get managed resource ( ) ; container contained = container . find child ( name ) ; container . remove child ( contained ) ; } catch ( instance not found exception e ) { throw new m bean exception ( e ) ; } catch ( runtime operations exception e ) { throw new m bean exception ( e ) ; } catch ( invalid target object type exception e ) { throw new m bean exception ( e ) ; } } }
public final void remove from clusters ( string var ) { clusters . remove ( var ) ; }
public boolean is actual min gt total ( ) { return m _actual min . compare to ( get total qty ( ) ) > num_ ; }
protected void subscribe unsubscribe ( string name value ) throws throwable { uri observer uri = uri . create ( observer service uri for unsubscribe ) ; wait for subscription to appear ( observer uri , example s_ subscriptions ) ; verify notification ( name value , observer uri ) ; js executor . execute synchronously ( null ) ; wait for subscription to disappear ( observer uri , example s_ subscriptions ) ; }
public boolean is edge touched ( int edges ) { final int count = m initial edge touched . length ; for ( int i = num_ ; i < count ; i ++ ) { if ( is edge touched ( edges , i ) ) { return bool_ ; } } return bool_ ; }
private void append initial entries ( ) { final long term = context . get term ( ) ; try ( initialize entry entry = context . get log ( ) . create ( initialize entry . class ) ) { entry . set term ( term ) . set timestamp ( appender . time ( ) ) ; assert context . get log ( ) . append ( entry ) == appender . index ( ) ; logger . debug ( str_ , context . get cluster ( ) . member ( ) . address ( ) , entry ) ; } configure ( context . get cluster ( ) . members ( ) ) ; }
public static pgp public key read public key ( input stream instr ) throws pgp exception { pgp public key ring collection pgp pub ; try { instr = org . bouncycastle . openpgp . pgp util . get decoder stream ( instr ) ; pgp pub = new pgp public key ring collection ( instr , new jca key fingerprint calculator ( ) ) ; } catch ( io exception | pgp exception ex ) { throw new pgp exception ( str_ , ex ) ; } iterator key ring iter = pgp pub . get key rings ( ) ; while ( key ring iter . has next ( ) ) { pgp public key ring key ring = ( pgp public key ring ) key ring iter . next ( ) ; iterator key iter = key ring . get public keys ( ) ; while ( key iter . has next ( ) ) { pgp public key key = ( pgp public key ) key iter . next ( ) ; if ( key . is encryption key ( ) ) { return key ; } } } throw new illegal argument exception ( str_ ) ; }
public boolean is set ( _ fields field ) { if ( field == null ) { throw new illegal argument exception ( ) ; } switch ( field ) { case not e_ id : return is set note id ( ) ; case paragrap h_ id : return is set paragraph id ( ) ; case resourc e_ name : return is set resource name ( ) ; } throw new illegal state exception ( ) ; }
t write byte ( int b ) ;
public boolean multiple instances ( ) { return bool_ ; }
public int size ( ) { return size ; }
void hide part ( part presenter part ) ;
public string [ ] read next ( ) throws io exception { string [ ] result = null ; do { string next line = get next line ( ) ; if ( ! has next ) { return validate result ( result ) ; } string [ ] r = parser . parse line multi ( next line ) ; if ( r . length > num_ ) { if ( result == null ) { result = r ; } else { result = combine results from multiple reads ( result , r ) ; } } } while ( parser . is pending ( ) ) ; return validate result ( result ) ; }
protected void draw ellipse ( point 2 d point , double o radius , graphics 2 d g 2 ) { ellipse 2 d . double dot = new ellipse 2 d . double ( point . get x ( ) + o radius / num_ , point . get y ( ) , o radius , o radius ) ; g 2 . draw ( dot ) ; }
public boolean is cached validated ( ) { if ( logger . is trace enabled ( ) ) logger . trace ( str_ + is flags ( fla g_ cache d_ value s_ checked ) + str_ + get absolute path ( ) ) ; return is flags ( fla g_ cache d_ value s_ checked ) ; }
public abstract collection < ? extends certificate > engine generate certificates ( input stream in stream ) throws certificate exception ;
public int size ( ) { return callbacks . size ( ) ; }
public ignite internal future < igfs message > send ( igfs message msg ) throws ignite checked exception ;
public static list < command > parse ( final string [ ] args ) { validate . define boolean ( ( args != null ) && ( args . length > num_ ) && ( args . length <= cmd line . ma x_ length ) ) . test true ( ) . throw exception on failed validation ( ) . validate ( ) ; final list < string > tokens = cmd line . tokenize cmd line args ( args ) ; cmd line . process cmd line tokens ( tokens ) ; final list < command > commands = new array list < command > ( cmd line . defaul t_ comman d_ list ) ; return ( commands ) ; }
public void add view ( string view string , string attribute name ) { if ( ! ( view string . trim ( ) . length ( ) == num_ ) ) { cfg buffer . append ( comment ) . append ( str_ ) . append ( cr ) ; string id = model writer . get valid identifier ( vie w_ scheme ) ; cfg buffer . append ( str_ ) . append ( cr ) . append ( id ) . append ( cr ) ; tla buffer . append ( comment ) . append ( str_ ) . append ( attribute ) . append ( attribute name ) . append ( cr ) ; tla buffer . append ( id ) . append ( defines ) . append ( cr ) . append ( view string ) . append ( cr ) ; tla buffer . append ( sep ) . append ( cr ) . append ( cr ) ; } }
public string check write protected ( int res id action , final file ... files to be modified ) { if ( files to be modified != null ) { for ( file file : files to be modified ) { if ( ( file != null ) && ( file . exists ( ) ) && ( ! file . can write ( ) ) ) { string action = ( res id action == num_ ) ? str_ : m context . get string ( res id action ) ; return m context . get string ( r . string . file _err _writeprotected , file . get absolute path ( ) , action ) ; } } } return null ; }
public signer signing key ( string key id ) { if ( key id == null ) { throw new illegal argument exception ( str_ ) ; } this . key id = key id ; }
public void container destroy all ( ) { container deallocate all ( ) ; for ( container container : get container list ( ) ) { container . set vm ( null ) ; set size ( get size ( ) + container . get size ( ) ) ; } get container list ( ) . clear ( ) ; }
abstract public void write ( char cbuf [ ] , int off , int len ) throws io exception ;
void stop ( ) ;
protected message ( ) { }
public void move to ( int x , int y ) { invalidate self ( ) ; pos . x = x ; pos . y = y ; recalculate bounds ( ) ; invalidate self ( ) ; }
public cc quad 3 tile ( cc grid size pos ) { int idx = ( grid size _ . y * pos . x + pos . y ) * num_ * num_ ; float [ ] vert array = new float [ cc quad 3 . size ] ; for ( int i = num_ ; i < cc quad 3 . size ; i ++ ) { vert array [ i ] = vertices . get ( idx + i ) ; } return new cc quad 3 ( vert array ) ; }
private figure layer comparator ( ) { }
public static void lua main ( lua value main chunk , string [ ] args ) { globals g = standard globals ( ) ; int n = args . length ; lua value [ ] vargs = new lua value [ args . length ] ; for ( int i = num_ ; i < n ; ++ i ) vargs [ i ] = lua value . value of ( args [ i ] ) ; lua value arg = lua value . list of ( vargs ) ; arg . set ( str_ , n ) ; g . set ( str_ , arg ) ; main chunk . initupvalue 1 ( g ) ; main chunk . invoke ( lua value . varargs of ( vargs ) ) ; }
private boolean is katakana iteration mark ( char c ) { if ( normalize kana ) { return c == katakan a_ iteratio n_ mark || c == katakan a_ voice d_ iteratio n_ mark ; } else { return bool_ ; } }
public boolean is trigger contains inline code ( string vendor name ) { return m _interfaces . get ( get db vendor id ( vendor name ) ) . is trigger contains inline code ( ) ; }
protected void update handle visibility ( boolean to visible ) { if ( requested handle visibility != null && requested handle visibility == to visible ) { return ; } requested handle visibility = to visible ; handle . clear animation ( ) ; log . d ( tag , str_ + to visible ) ; handle . start animation ( get handle animation ( handle , to visible ) ) ; }
public css style declaration create css style declaration ( ) { throw new unsupported operation exception ( str_ ) ; }
protected void hide notify ( ) { display . get instance ( ) . hide notify ( ) ; }
public static void parameters to attributes ( http servlet request request ) { java . util . enumeration < string > e = util generics . cast ( request . get parameter names ( ) ) ; while ( e . has more elements ( ) ) { string name = e . next element ( ) ; request . set attribute ( name , request . get parameter ( name ) ) ; } }
public directory server shutdown hook ( ) { super ( str_ ) ; }
public boolean to boolean ( ) { return boolean . value of ( boolean value ( ) ) ; }
public path impl lookup native ( string name , map < string , object > attributes ) { return get wrapped path ( ) . lookup native ( name , attributes ) ; }
public static iterable < element > children ( element parent ) { return null ; }
public static j editor pane make html pane ( localizable message text , font font ) { return make html pane ( text , null , font ) ; }
static media type create text type ( string subtype ) { return create ( tex t_ type , subtype ) ; }
public void test hot deploy ear ( ) { java . io . file ear file = new java . io . file ( str_ ) ; ear ear = ( ear ) factory . create deployable ( str_ , ear file . get absolute path ( ) , deployable type . ear ) ; ear . set name ( str_ ) ; setup admin hot deployment ( ) ; deployer . deploy ( ear ) ; assert false ( file handler . exists ( deployer . get deployable dir ( ear ) + str_ ) ) ; assert true ( file handler . exists ( deployer . get deployable dir ( ear ) + str_ ) ) ; }
public static int handle ( item stack stack ) { if ( stack == null ) return num_ ; fuel event event = new fuel event ( stack ) ; open mod loader . get event bus ( ) . post ( event ) ; return event . duration ; }
public catalog entry removed exception ( string message , application exception bean bean ) { super ( message , bean ) ; }
public boolean is stopped ( ) ;
public line tag flag definition ( string title ) { set titles ( title ) ; }
void subscribe outlet in use ( homekit characteristic change callback callback ) ;
public boolean declares field ( string subsignature ) { check level ( signatures ) ; for ( soot field field : fields ) if ( field . get sub signature ( ) . equals ( subsignature ) ) return bool_ ; return bool_ ; }
protected abstract object replace hooked method ( method hook param param ) throws throwable ;
public int lew ( byte [ ] arr , int off ) { return arr [ off + num_ ] << num_ & num_ | arr [ off + num_ ] << num_ & num_ | arr [ off + num_ ] << num_ & num_ | arr [ off ] & num_ ; }
protected void fire state changed ( ) { object [ ] listeners = listener list . get listener list ( ) ; for ( int i = listeners . length - num_ ; i >= num_ ; i -= num_ ) { if ( listeners [ i ] == change listener . class ) { if ( change event == null ) change event = new change event ( this ) ; ( ( change listener ) listeners [ i + num_ ] ) . state changed ( change event ) ; } } }
public de li clu node ( int capacity , boolean is leaf ) { super ( capacity , is leaf , de li clu entry . class ) ; }
public void test authentication by property ( ) throws exception { url url = new url ( str_ + system . get property ( str_ ) + str_ ) ; final string expected = str_ ; map < string , string > request properties = new hash map < string , string > ( ) ; request properties . put ( str_ , str_ + new string ( base 6 4 . encode base 6 4 ( str_ . get bytes ( ) ) ) ) ; ping utils . assert ping true ( str_ , expected , url , request properties , logger ) ; }
public int look ahead ( ) { return kind ; }
public static boolean is normalized ( final string text ) { boolean ret ; if ( text == null ) { ret = bool_ ; } else { final prefix extractor extractor = new prefix extractor ( text ) ; if ( extractor . extract noun singular ( ) || extractor . extract noun plural ( ) ) { ret = bool_ ; } else { ret = bool_ ; } } return ret ; }
public csv reader ( reader reader , char separator , char quotechar ) { this ( reader , separator , quotechar , csv parser . defaul t_ escap e_ character , defaul t_ ski p_ lines , csv parser . defaul t_ stric t_ quotes ) ; }
public boolean is signed ( ) { return signed ; }
public class path resource ( string resource name ) { if ( resource name == null ) throw new illegal state exception ( str_ ) ; this . resource name = resource name ; }
void save all ( collection < cookie > cookies ) ;
public void add ( item item ) { string type name = item . type name ( ) ; data data = data map . get ( type name ) ; if ( data == null ) { data map . put ( type name , new data ( item , type name ) ) ; } else { data . add ( item ) ; } }
public static void main ( string [ ] argv ) { try { evaluation . run experiment ( new wv aram ( ) , argv ) ; } catch ( exception e ) { e . print stack trace ( ) ; system . err . println ( e . get message ( ) ) ; } system . out . println ( str_ ) ; }
boolean descends from ( class file cf ) { return descends from ( cf . to string ( ) ) ; }
public final mono < t > ignore element ( ) { return ignore elements ( this ) ; }
public void add viewer ( human entity viewer ) { viewers . add ( viewer ) ; }
void init input frame ( final class writer cw , final int access , final type [ ] args , final int max locals ) { input locals = new int [ max locals ] ; input stack = new int [ num_ ] ; int i = num_ ; if ( ( access & opcodes . ac c_ static ) == num_ ) { if ( ( access & method writer . ac c_ constructor ) == num_ ) { input locals [ i ++ ] = object | cw . add type ( cw . this name ) ; } else { input locals [ i ++ ] = uninitialize d_ this ; } } for ( int j = num_ ; j < args . length ; ++ j ) { int t = type ( cw , args [ j ] . get descriptor ( ) ) ; input locals [ i ++ ] = t ; if ( t == long || t == double ) { input locals [ i ++ ] = top ; } } while ( i < max locals ) { input locals [ i ++ ] = top ; } }
public static void save array list ( string key , array list list , bundle data store ) { if ( list == null ) { return ; } object [ ] list array = list . to array ( ) ; if ( list array instanceof string [ ] ) { data store . put string array list ( key , list ) ; } else if ( list array instanceof integer [ ] ) { data store . put integer array list ( key , list ) ; } else if ( list array instanceof parcelable [ ] ) { data store . put parcelable array list ( key , list ) ; } else if ( list array instanceof char sequence [ ] ) { if ( build . version . sd k_ int >= build . versio n_ codes . froyo ) { data store . put char sequence array list ( key , list ) ; } } else { throw new null pointer exception ( str_ ) ; } }
public void add disallowed string ( final string string ) { disallowed strings . add ( string . to lower case ( ) ) ; }
public abstract void write ( int one byte ) throws io exception ;
public void add edge ( dependency dependency ) { if ( ! edges . contains ( dependency ) ) { edges . add ( dependency ) ; set < dependency > outbound edges = vertices . get ( dependency . get depender ( ) ) ; if ( outbound edges == null ) { outbound edges = new hash set ( ) ; vertices . put ( dependency . get depender ( ) , outbound edges ) ; } outbound edges . add ( dependency ) ; if ( vertices . get ( dependency . get depends on ( ) ) == null ) { vertices . put ( dependency . get depends on ( ) , new hash set ( ) ) ; } } }
public static < e extends comparable < e > > boolean is children sum ( binary node < e > node ) { if ( node == null || node . left == null && node . right == null ) return bool_ ; e left child value = ( e ) ( node . left == null ? num_ : node . left . value ) ; e right child value = ( e ) ( node . right == null ? num_ : node . right . value ) ; if ( ! node . value . to string ( ) . equals ( string . value of ( integer . parse int ( left child value . to string ( ) ) + integer . parse int ( right child value . to string ( ) ) ) ) ) { return bool_ ; } return is children sum ( node . left ) && is children sum ( node . right ) ; }
public void clear ( ) { lock . lock ( ) ; try { cache . clear ( ) ; most recently used queries . clear ( ) ; on clear ( ) ; } finally { lock . unlock ( ) ; } }
public void remove ( int pos ) { if ( pos < num_ ) { throw new illegal argument exception ( str_ ) ; } if ( pos > get item count ( ) ) { throw new illegal argument exception ( str_ ) ; } if ( popup menu != null ) popup menu . remove ( pos ) ; }
public void insert _val ( java . io . serializable value ) throws org . omg . dynamic any . dyn any package . type mismatch , org . omg . dynamic any . dyn any package . invalid value { org . omg . corba . portable . servant object $so = _servant _preinvoke ( str_ , _ops class ) ; dyn struct operations $self = ( dyn struct operations ) $so . servant ; try { $self . insert _val ( value ) ; } finally { _servant _postinvoke ( $so ) ; } }
public void find ( int x , int y ) { for ( int i = num_ ; i < m object count ; i ++ ) { int p = i * num_ ; int x 1 = m rect [ p ++ ] ; int y 1 = m rect [ p ++ ] ; int x 2 = m rect [ p ++ ] ; int y 2 = m rect [ p ] ; if ( in rect ( x , y , x 1 , y 1 , x 2 , y 2 ) ) { selection engine selector = my engines [ m types [ i ] ] ; if ( selector . in range ( i , x , y ) ) { m hit element listener . over ( m objects [ i ] , selector . distance ( ) ) ; } } } }
public static double normalize lon ( double lon _deg ) { if ( lon _deg >= - num_ && lon _deg <= num_ ) { return lon _deg ; } double off = ( lon _deg + num_ ) % num_ ; if ( off < num_ ) { return num_ + off ; } else if ( off == num_ && lon _deg > num_ ) { return num_ ; } else { return - num_ + off ; } }
public abstract void fill round rect ( double x , double y , double width , double height , double arc width , double arc height ) ;
public protocol version ( string protocol , int major , int minor ) { if ( protocol == null ) { throw new illegal argument exception ( str_ ) ; } if ( major < num_ ) { throw new illegal argument exception ( str_ ) ; } if ( minor < num_ ) { throw new illegal argument exception ( str_ ) ; } this . protocol = protocol ; this . major = major ; this . minor = minor ; }
public void add command ( job handler command command ) { if ( stop . get ( ) ) { logger . error ( str_ , command ) ; } this . commands . add ( command ) ; }
public services still published exception ( string message , reason reason , object [ ] organization ids ) { super ( message , organization ids ) ; set message key ( get message key ( ) + str_ + reason . to string ( ) ) ; }
public static void update columns ( set get model [ ] models , string [ ] column names , string sql , object [ ] params , string trx name ) { prepared statement pstmt = null ; result set rs = null ; try { pstmt = db . prepare statement ( sql , trx name ) ; db . set parameters ( pstmt , params ) ; rs = pstmt . execute query ( ) ; update columns ( models , column names , rs ) ; } catch ( sql exception e ) { throw new db exception ( e , sql ) ; } finally { db . close ( rs , pstmt ) ; rs = null ; pstmt = null ; } }
public static void create table ( sq lite database db , boolean if not exists ) { string constraint = if not exists ? str_ : str_ ; db . exec sql ( str_ + constraint + str_ + str_ + str_ + str_ ) ; }
public boolean is traversable ( file f ) { return boolean . value of ( f . is directory ( ) ) ; }
public string find tip text ( ) { return str_ ; }
public static void remove mapping ( transit schedule schedule ) { log . info ( str_ ) ; for ( transit stop facility stop facility : schedule . get facilities ( ) . values ( ) ) { stop facility . set link id ( null ) ; } for ( transit line line : schedule . get transit lines ( ) . values ( ) ) { for ( transit route route : line . get routes ( ) . values ( ) ) { route . set route ( null ) ; } } }
public boolean is empty ( ) { return size ( ) == num_ ; }
protected void fill kernel ordinates ( complex array ordinates , double band width ) { final int length = ordinates . length ; final double a = num_ / ( math . sqrt ( num_ * math . pi ) * band width ) ; final double precision = - num_ / ( band width * band width ) ; for ( int i = num_ ; i < length ; i ++ ) { final double x = ordinates . real [ i ] ; ordinates . real [ i ] = a * math . exp ( x * x * precision ) ; } }
public long insert ( long rule id , long event attribute id , long external attribute id , long data filter id , long parent rule filter id , string rule filter data ) { if ( rule id == null || event attribute id == null || external attribute id == null || data filter id == null || parent rule filter id == null || rule filter data == null ) { throw new illegal argument exception ( str_ ) ; } content values initial values = new content values ( ) ; initial values . put ( ke y_ ruleid , rule id ) ; initial values . put ( ke y_ eventattributeid , event attribute id ) ; initial values . put ( ke y_ externalattributeid , external attribute id ) ; initial values . put ( ke y_ datafilterid , data filter id ) ; initial values . put ( ke y_ parentrulefilterid , parent rule filter id ) ; initial values . put ( ke y_ rulefilterdata , rule filter data ) ; return database . insert ( databas e_ table , null , initial values ) ; }
public static _ fields find by thrift id ( int field id ) { switch ( field id ) { case num_ : return header ; default : return null ; } }
public static int require encrypt and decrypt ( string password ) { if ( requirement . decrypt . is fulfilled and assert prior requirements ( ) ) return requir e_ decryp t_ ok ; if ( gps trailer crypt . prefs . is no password || password != null ) { if ( ! gps trailer crypt . initialize ( gps trailer crypt . prefs . is no password ? null : password ) ) { return requir e_ decryp t_ ba d_ password ; } gtg . user location cache = new user location cache ( ) ; gtg . gps loc db accessor = new db datastore accessor < gps location row > ( gps location row . tabl e_ info ) ; gtg . gps loc cache = new gps location cache ( gtg . gps loc db accessor , num_ ) ; gtg . tzt set = new time zone time set ( ) ; tzt set . load set ( ) ; } else return requir e_ decryp t_ nee d_ password ; requirement . decrypt . fulfill ( ) ; requirement . encrypt . fulfill ( ) ; requirement . passwor d_ entered . fulfill ( ) ; return requir e_ decryp t_ ok ; }
public static boolean date is valid ( string date ) { return date is valid ( date , null ) ; }
public static void main ( string [ ] arg ) throws exception { simple command line parser parser = new simple command line parser ( arg ) ; string username = parser . get value ( str_ ) ; string password = parser . get value ( str_ ) ; string domain = parser . get value ( str_ ) ; string destination user = parser . get value ( str_ ) ; string email file name = parser . get value ( str_ ) ; boolean help = parser . contains key ( str_ ) ; if ( help || ( username == null ) || ( password == null ) || ( domain == null ) ) { usage ( ) ; system . exit ( num_ ) ; } if ( email file name != null ) { logger . log ( level . info , str_ ) ; rfc txt = read file ( email file name ) ; logger . log ( level . info , str_ ) ; } new apps for your domain migration client ( username , password , domain , destination user ) ; }
public boolean equals ignore case ( str builder other ) { if ( this == other ) { return bool_ ; } if ( this . size != other . size ) { return bool_ ; } char this buf [ ] = this . buffer ; char other buf [ ] = other . buffer ; for ( int i = size - num_ ; i >= num_ ; i -- ) { char c 1 = this buf [ i ] ; char c 2 = other buf [ i ] ; if ( c 1 != c 2 && character . to upper case ( c 1 ) != character . to upper case ( c 2 ) ) { return bool_ ; } } return bool_ ; }
public string significance level tip text ( ) { return str_ ; }
public transaction input duplicate detached ( ) { return new transaction input ( params , null , bitcoin serialize ( ) , num_ ) ; }
private void init panel ( ) { final j panel main panel = new j panel ( new border layout ( ) ) ; main panel . set border ( new titled border ( str_ ) ) ; final j panel combo panel = new j panel ( new border layout ( ) ) ; combo panel . set border ( new empty border ( num_ , num_ , num_ , num_ ) ) ; selection state box . add item ( selection state . selected ) ; selection state box . add item ( selection state . unselected ) ; combo panel . add ( selection state box , border layout . center ) ; main panel . add ( combo panel , border layout . north ) ; add ( main panel , border layout . center ) ; }
public static native byte [ ] to ascii bytes ( char [ ] chars , int offset , int length ) ;
protected void initialize world ( ) { simulation body floor = new simulation body ( ) ; floor . add fixture ( geometry . create rectangle ( num_ , num_ ) ) ; floor . set mass ( mass type . infinite ) ; this . world . add body ( floor ) ; simulation body bowling ball = new simulation body ( ) ; body fixture fixture = new body fixture ( geometry . create circle ( num_ ) ) ; fixture . set density ( num_ ) ; fixture . set restitution ( num_ ) ; bowling ball . add fixture ( fixture ) ; bowling ball . set mass ( mass type . normal ) ; bowling ball . set linear velocity ( new vector 2 ( num_ , num_ ) ) ; bowling ball . translate ( - num_ , num_ ) ; this . world . add body ( bowling ball ) ; }
public boolean on custom event ( discovery custom message msg , affinity topology version top ver ) { if ( msg instanceof cache affinity change message ) return shared ctx . affinity ( ) . on custom event ( ( ( cache affinity change message ) msg ) ) ; return msg instanceof dynamic cache change batch && on cache change requested ( ( dynamic cache change batch ) msg , top ver ) ; }
public void rearrange children ( int item count ) { array list < view > views = get items in reading order ( ) ; m content . arrange children ( views , math . max ( item count , views . size ( ) ) ) ; m items invalidated = bool_ ; }
public void move to ( int x , int y ) { rectangle r = get bounds ( ) ; translate ( x - r . x , y - r . y ) ; }
public static preview fragment new instance ( string serialized ) { preview fragment fragment = new preview fragment ( ) ; bundle args = new bundle ( ) ; args . put string ( serialized , serialized ) ; fragment . set arguments ( args ) ; return fragment ; }
protected void clear list ( ) { int list size = get item count ( ) ; this . list . clear ( ) ; notify item range removed ( num_ , list size ) ; }
public final point f view to source coord ( float vx , float vy , point f s target ) { if ( v translate == null ) { return null ; } s target . set ( view to source x ( vx ) , view to source y ( vy ) ) ; return s target ; }
public clear modifiers add ( clear modifiers modifiers ) { return create if needed ( super . add ( modifiers ) ) ; }
public inline keyboard button . inline keyboard button builder url ( string url ) { this . url = url ; this . callback _data = null ; this . switch _inline _query = null ; return this ; }
void notify observer ( notification notification ) ;
boolean rename ( file file , string new name ) ;
void clear notification ( notification context notification context ) ;
protected abstract trap ( soot class exception , unit box begin unit box , unit box end unit box , unit box handler unit box ) { this . exception = exception ; this . begin unit box = begin unit box ; this . end unit box = end unit box ; this . handler unit box = handler unit box ; unit boxes = new array list ( ) ; unit boxes . add ( begin unit box ) ; unit boxes . add ( end unit box ) ; unit boxes . add ( handler unit box ) ; unit boxes = collections . unmodifiable list ( unit boxes ) ; }
private void increment source offset ( http source offset source offset , int increment ) { if ( conf . pagination . mode == pagination mode . b y_ page ) { source offset . increment start at ( num_ ) ; } else if ( conf . pagination . mode == pagination mode . b y_ offset ) { source offset . increment start at ( increment ) ; } }
public void create plugins data ( final element root element ) throws connector exception { element element = creator . get document ( ) . create element ( str_ ) ; root element . append child ( element ) ; init command event args args = new init command event args ( ) ; args . set xml ( this . creator ) ; args . set root element ( root element ) ; if ( configuration . get events ( ) != null ) { configuration . get events ( ) . run ( event types . init command , args , configuration ) ; } }
public builder penalty log ( ) { return enable ( penalt y_ log ) ; }
public void prepare ( ) { }
public c window closer ( final j graph tab graph pane ) { preconditions . check not null ( graph pane , str_ ) ; m _tabbed pane = graph pane ; }
public void focus gained ( focus event e ) { ( ( focus listener ) a ) . focus gained ( e ) ; ( ( focus listener ) b ) . focus gained ( e ) ; }
public image tile ( double ullat , double ullon , double lrlat , double lrlon , image reader image decoder , cache handler cache ) { super ( ) ; set render type ( om graphic . rendertyp e_ latlon ) ; set color model ( colormode l_ imageicon ) ; lat = ullat ; lon = ullon ; lat 2 = lrlat ; lon 2 = lrlon ; this . image decoder = image decoder ; this . cache = cache ; }
public void bind ( string address , service ref amp link service ) { _link service map . put ( address , link service ) ; _service close list . add ( link service ) ; }
protected void update node ( node ref node ) { if ( coun t_ tota l_ operations ) total rate update single count ++ ; tree traversal delegate . update node ( node ) ; likelihood known = bool_ ; }
public class < ? > load class ( string name ) throws class not found exception { if ( best candidate != null ) { try { return best candidate . load class ( name ) ; } catch ( throwable t ) { best candidate = null ; } } throwable throwable = null ; class < ? > clazz = null ; class load helper load helper = null ; iterator < class load helper > iter = load helpers . iterator ( ) ; while ( iter . has next ( ) ) { load helper = iter . next ( ) ; try { clazz = load helper . load class ( name ) ; break ; } catch ( throwable t ) { throwable = t ; } } if ( clazz == null ) { if ( throwable instanceof class not found exception ) { throw ( class not found exception ) throwable ; } else { throw new class not found exception ( string . format ( str_ , name ) , throwable ) ; } } best candidate = load helper ; return clazz ; }
public void spawn ( runnable task ) { executor . execute ( task ) ; }
public static < t extends comparable < t > > pair < integer , t > min ( collection < t > list ) { t min = null ; int arg min = - num_ ; if ( list . size ( ) > num_ ) { min = list . iterator ( ) . next ( ) ; arg min = num_ ; } int id = num_ ; for ( t d : list ) { if ( d . compare to ( min ) < num_ ) { min = d ; arg min = id ; } id ++ ; } return new pair < > ( arg min , min ) ; }
void place ( node r ) ;
public void pause ( boolean to pause ) { paused = to pause ; for ( module module : modules ) { module . pause ( to pause ) ; } if ( ! to pause && ! cur state . get new variables ( ) . is empty ( ) ) { synchronized ( cur state ) { update ( ) ; } } }
public clustered score map ( boolean sorted keys ) { this . map = sorted keys ? new tree map < e , long > ( ) : new linked hash map < e , long > ( ) ; this . pam = new tree map < long , e > ( ) ; this . gcount = num_ ; this . encnt = num_ ; }
protected boolean flush buffer ( boolean block ) throws io exception { return socket wrapper . flush ( block ) ; }
public void add button action performed ( ) { jmri . util . jmri j frame add frame = new add node frame ( itc ) ; try { add frame . init components ( ) ; } catch ( exception ex ) { log . error ( str_ , ex . to string ( ) ) ; return ; } add frame . set visible ( bool_ ) ; }
public boolean is section header position ( int position ) { if ( is header == null ) { setup indices ( ) ; } return is header [ position ] ; }
public section fragment ( ) { }
public static void trace ( string str ) { if ( time stamp ) system . err . print ( new date ( ) ) ; if ( time stamp ms || time stamp ms rel ) { if ( time stamp ms rel && ( t 0 == num_ ) ) t 0 = system . current time millis ( ) ; system . err . print ( ( system . current time millis ( ) - t 0 ) + str_ ) ; } if ( caller ) system . err . print ( exception util . get call at ( new throwable ( ) , num_ ) + str_ ) ; system . err . println ( str ) ; if ( stack lines > num_ ) system . err . println ( exception util . get stack trace lines ( new throwable ( ) , stack lines ) ) ; else if ( stack prefix != null ) system . err . println ( exception util . get stack trace up to ( new throwable ( ) , stack prefix ) ) ; }
public intent builder skip orientation normalization ( ) { result . put extra ( extr a_ ski p_ orientatio n_ normalization , bool_ ) ; return ( this ) ; }
public candle period ( zoned date time start of period , zoned date time end of period ) { if ( start of period == null ) { throw new illegal argument exception ( str_ ) ; } if ( end of period == null ) { throw new illegal argument exception ( str_ ) ; } this . start of period = start of period ; this . end of period = end of period ; this . seconds length = ( int ) trading calendar . get duration in seconds ( start of period , end of period ) ; }
public boolean equals ( object obj ) { if ( this == obj ) return bool_ ; if ( ! ( obj instanceof digit list ) ) return bool_ ; digit list other = ( digit list ) obj ; if ( count != other . count || decimal at != other . decimal at ) return bool_ ; for ( int i = num_ ; i < count ; i ++ ) if ( digits [ i ] != other . digits [ i ] ) return bool_ ; return bool_ ; }
public purify params editor ( ) { }
protected object convert array ( object arr ) { final int size = array . get length ( arr ) ; array list list = new array list ( size ) ; for ( int i = num_ ; i < size ; i ++ ) { list . add ( array . get ( arr , i ) ) ; } return list ; }
private void draw triangle ( canvas canvas , paint paint , float [ ] path , float x , float y ) { path [ num_ ] = x ; path [ num_ ] = y - size - size / num_ ; path [ num_ ] = x - size ; path [ num_ ] = y + size ; path [ num_ ] = x + size ; path [ num_ ] = path [ num_ ] ; draw path ( canvas , path , paint , bool_ ) ; }
public void remove edge ( edge type e ) ;
private static string key for payload ( string name ) { return str_ + name ; }
private void write attribute ( java . lang . string namespace , java . lang . string att name , java . lang . string att value , javax . xml . stream . xml stream writer xml writer ) throws javax . xml . stream . xml stream exception { if ( namespace . equals ( str_ ) ) { xml writer . write attribute ( att name , att value ) ; } else { register prefix ( xml writer , namespace ) ; xml writer . write attribute ( namespace , att name , att value ) ; } }
public void update ascii stream ( string column name , input stream x , int length ) throws sql exception ;
public void start upload ( string key , file file , boolean will be public ) throws amazon client exception , amazon service exception { super . start upload ( aws s3 bucket name , key , file , will be public ) ; }
private void append time zone ( string buffer buffer , int count , boolean general time zone ) { if ( general time zone ) { time zone tz = calendar . get time zone ( ) ; boolean daylight = ( calendar . get ( calendar . ds t_ offset ) != num_ ) ; int style = count < num_ ? time zone . short : time zone . long ; if ( ! format data . custom zone strings ) { buffer . append ( tz . get display name ( daylight , style , format data . locale ) ) ; return ; } string custom = time zone names . get display name ( format data . zone strings , tz . get id ( ) , daylight , style ) ; if ( custom != null ) { buffer . append ( custom ) ; return ; } } append numeric time zone ( buffer , count , general time zone ) ; }
private string apply rules to string ( final calendar c ) { return apply rules ( c , new string buffer ( m max length estimate ) ) . to string ( ) ; }
public static s m_ syste m_ message st r_ skil l_ suc c_ paralyze _ a_ t o_ b ( string skilltarget , string skillcaster , string skillname ) { return new s m_ syste m_ message ( num_ , skilltarget , skillcaster , skillname ) ; }
public synchronized void add ( date x , double y ) { super . add ( x . get time ( ) , y ) ; }
void on action menu item selected ( menu item item ) ;
public void add result ( int n , boolean is relevant , long doc name extract time ) { if ( math . abs ( num points + num_ - n ) > num_ ) { throw new illegal argument exception ( str_ + n + str_ + num points + str_ ) ; } if ( is relevant ) { num good points += num_ ; recall points . add ( new recall point ( n , num good points ) ) ; if ( recall points . size ( ) == num_ && n <= num_ ) { mrr = num_ / n ; } } num points = n ; double p = num good points / num points ; if ( is relevant ) { p relevent sum += p ; } if ( n < p at . length ) { p at [ n ] = p ; } recall = max good points <= num_ ? p : num good points / max good points ; doc names extract time += doc name extract time ; }
public http request referer ( final string referer ) { return header ( heade r_ referer , referer ) ; }
public sequence type type ( ) { return m type ; }
public void close ( ) throws xml stream exception ;
private void unsubscribe ( ) { if ( mqtt client != null ) { try { string [ ] topic array = { subscribe topic } ; mqtt client . unsubscribe ( topic array ) ; out ( get date ( ) + messages . mqtt client view _ 4 2 ) ; out ( messages . mqtt client view _ 4 3 + subscribe topic + str_ ) ; } catch ( mqtt persistence exception e ) { e . print stack trace ( ) ; } catch ( null pointer exception e ) { e . print stack trace ( ) ; } catch ( mqtt exception e ) { e . print stack trace ( ) ; } } }
public void init ( ) throws servlet exception { }
public nano httpd ( int port ) { this ( null , port ) ; }
public static < t > t new instance ( class < t > clazz , boolean constructor called ) { if ( constructor called ) { try { return clazz . new instance ( ) ; } catch ( exception e ) { j unsafe . throw exception ( e ) ; } } else { return objenesis . new instance ( clazz ) ; } return null ; }
public abstract block chain ( network parameters params , list < block chain listener > listeners , block store block store ) throws block store exception { this . block store = block store ; chain head = block store . get chain head ( ) ; log . info ( str_ , chain head . get height ( ) , chain head . get header ( ) ) ; this . params = params ; this . listeners = new copy on write array list < listener registration < block chain listener > > ( ) ; for ( block chain listener l : listeners ) add listener ( l , threading . sam e_ thread ) ; }
public static boolean cs _usolve ( scs u , float [ ] x ) { int p , j , n , up [ ] , ui [ ] ; float ux [ ] ; if ( ! scs _util . c s_ csc ( u ) || x == null ) return ( bool_ ) ; n = u . n ; up = u . p ; ui = u . i ; ux = u . x ; for ( j = n - num_ ; j >= num_ ; j -- ) { x [ j ] /= ux [ up [ j + num_ ] - num_ ] ; for ( p = up [ j ] ; p < up [ j + num_ ] - num_ ; p ++ ) { x [ ui [ p ] ] -= ux [ p ] * x [ j ] ; } } return ( bool_ ) ; }
public void tick ( ) { iterator < satellite base > iterator = ticking satallites . iterator ( ) ; while ( iterator . has next ( ) ) { satellite base satallite = iterator . next ( ) ; satallite . tick entity ( ) ; } }
public void run test ( ) throws throwable { document doc ; named node map notations ; document type doc type ; node retval ; element elem ; doc = ( document ) load ( str_ , bool_ ) ; doc type = doc . get doctype ( ) ; if ( ! ( ( str_ . equals ( get content type ( ) ) ) ) ) { assert not null ( str_ , doc type ) ; notations = doc type . get notations ( ) ; assert not null ( str_ , notations ) ; elem = doc . create element ns ( str_ , str_ ) ; try { retval = notations . set named item ns ( elem ) ; fail ( str_ ) ; } catch ( dom exception ex ) { switch ( ex . code ) { case num_ : break ; case num_ : break ; default : throw ex ; } } } }
public void on request finished ( request < t > request ) ;
public customer info ( string id ) { this . id = id ; this . searchkey = null ; this . taxid = null ; this . name = null ; this . postal = null ; this . phone = null ; this . email = null ; }
protected void dispatch keyboard event ( string event type , graphics node key event evt ) { focus manager fmgr = context . get focus manager ( ) ; if ( fmgr == null ) { return ; } element target element = ( element ) fmgr . get current event target ( ) ; if ( target element == null ) { target element = context . get document ( ) . get document element ( ) ; } document event d = ( document event ) target element . get owner document ( ) ; dom keyboard event key evt = ( dom keyboard event ) d . create event ( str_ ) ; string modifiers = dom utilities . get modifiers list ( evt . get lock state ( ) , evt . get modifiers ( ) ) ; key evt . init keyboard event ns ( xml constants . xm l_ event s_ namespac e_ uri , event type , bool_ , bool_ , null , map key code to identifier ( evt . get key code ( ) ) , map key location ( evt . get key location ( ) ) , modifiers ) ; try { ( ( event target ) target element ) . dispatch event ( key evt ) ; } catch ( runtime exception e ) { ua . display error ( e ) ; } }
private watch event . kind < ? > mask to event kind ( int mask ) { if ( ( mask & i n_ modify ) > num_ ) return standard watch event kinds . entr y_ modify ; if ( ( mask & i n_ attrib ) > num_ ) return standard watch event kinds . entr y_ modify ; if ( ( mask & i n_ create ) > num_ ) return standard watch event kinds . entr y_ create ; if ( ( mask & i n_ move d_ to ) > num_ ) return standard watch event kinds . entr y_ create ; if ( ( mask & i n_ delete ) > num_ ) return standard watch event kinds . entr y_ delete ; if ( ( mask & i n_ move d_ from ) > num_ ) return standard watch event kinds . entr y_ delete ; return null ; }
private void fire property change event ( property change event event ) { object [ ] listeners = f client listeners . get listeners ( ) ; for ( int i = num_ ; i < listeners . length ; i ++ ) ( ( i property change listener ) listeners [ i ] ) . property change ( event ) ; }
public static boolean is http status code ( throwable throwable , int status code ) { return throwable instanceof http exception && ( ( http exception ) throwable ) . code ( ) == status code ; }
private char sequence find constraint violation ( ) { if ( build . version . sd k_ int < m min sdk version ) { return m context . get string ( r . string . requires _android _api _level , m min sdk version ) ; } if ( m custom constraint summary != null ) { return m custom constraint summary ; } if ( ! is enabled for admin ( get current admin ( ) ) ) { return get admin constraint summary ( ) ; } if ( ! is enabled for user ( get current user ( ) ) ) { return get user constraint summary ( ) ; } return null ; }
void simple child ( string name , boolean val , string ... attrs ) throws exception ;
public static imdn document parse delivery report ( string xml ) throws sax exception , parser configuration exception , parse failure exception { input source input = new input source ( new byte array input stream ( xml . get bytes ( ) ) ) ; imdn parser parser = new imdn parser ( input ) . parse ( ) ; return parser . get imdn document ( ) ; }
private void accept ( int ch , string s ) { int test char = temp [ cursor ++ ] ; if ( has ( comments ) ) test char = parse past whitespace ( test char ) ; if ( ch != test char ) { throw error ( s ) ; } }
public boolean is running ( ) { return m thread != null && m thread . is alive ( ) ; }
public script thread ( final script engine engine , final file selected file , final list < pair < string , object > > bindings ) { m _engine = engine ; m _selected file = selected file ; m _pair list = bindings ; }
public boolean mark supported ( ) { return bool_ ; }
private base watch me fragment open fragment without adding back stack ( fragment manager manager , base watch me fragment fragment , bundle args , string name ) { if ( args != null ) { fragment . set arguments ( args ) ; } manager . begin transaction ( ) . replace ( r . id . container , fragment , name ) . set transition ( fragment transaction . transi t_ fragmen t_ open ) . commit ( ) ; return fragment ; }
public boolean is finished switching state ( ) { return ! m is switching state || ( m transition progress > num_ ) ; }
public void add listener ( final i memory listener listener ) { m _listeners . add ( listener ) ; }
public final node peep tail sub 1 ( ) { return m _map [ m _first free - num_ ] ; }
public boolean is valid ( ) { return is valid ; }
public void remove wrapper ( string host name , string context path , string version , string path ) { host name = rename wildcard host ( host name ) ; context version context version = find context version ( host name , context path , version , bool_ ) ; if ( context version == null || context version . is paused ( ) ) { return ; } remove wrapper ( context version , path ) ; }
public point 2 d . double locate ( figure owner ) ;
public void init $ children ( ) { }
protected void update function group 2 ( int fns ) { this . f 5 = ( ( fns & cbus constants . cbu s_ f5 ) == cbus constants . cbu s_ f5 ) ; this . f 6 = ( ( fns & cbus constants . cbu s_ f6 ) == cbus constants . cbu s_ f6 ) ; this . f 7 = ( ( fns & cbus constants . cbu s_ f7 ) == cbus constants . cbu s_ f7 ) ; this . f 8 = ( ( fns & cbus constants . cbu s_ f8 ) == cbus constants . cbu s_ f8 ) ; }
public boolean animate state ( state new state ) { state prev state = m state ; if ( m state != new state ) { m state = new state ; m property animator = cancel animator ( m property animator ) ; m property animator = new animator set ( ) ; m property animator . play together ( object animator . of float ( this , str_ , new state . desaturation ) , object animator . of float ( this , str_ , new state . brightness ) ) ; m property animator . set interpolator ( new state . interpolator ) ; m property animator . set duration ( get duration for state change ( prev state , new state ) ) ; m property animator . set start delay ( get start delay for state change ( prev state , new state ) ) ; m property animator . start ( ) ; return bool_ ; } return bool_ ; }
public arrow buf replace ( arrow buf old , int new size ) ;
private boolean is ignore locally existing files ( ) { return ignore locally existing files ; }
public streaming partition operation ( internal distributed system sys , int region id ) { super ( sys ) ; this . region id = region id ; }
public static tailer create ( file file , tailer listener listener , long delay millis , boolean end ) { return create ( file , listener , delay millis , end , defaul t_ bufsize ) ; }
void do stop mirror link ( storage system system , file share target , task completer completer ) ;
public void proceed test using int buffer ( cipher output stream ci output ) throws io exception { int buffer = get ci input ( ) . read ( ) ; while ( buffer != - num_ ) { ci output . write ( buffer ) ; buffer = get ci input ( ) . read ( ) ; } }
public static void main ( string [ ] args ) { test doc error reporter tester = new test doc error reporter ( ) ; int actual exit code = run ( tester , args , test , negate d_ test ) ; tester . check exit code ( expecte d_ exi t_ code , actual exit code ) ; tester . print summary ( ) ; }
public void start ( ) { if ( targets . is empty ( ) || started ) { return ; } started = bool_ ; show next ( ) ; }
public static byte [ ] random bytes ( char len ) { byte [ ] data = new byte [ len ] ; for ( int i = num_ ; i < len ; i ++ ) { data [ i ] = random byte ( ) ; } return data ; }
public string to string ( ) { return state . to string ( ) ; }
public static void main ( string [ ] args ) { run cli application ( convert to bundle application . class , args ) ; }
public boolean is persistent ( meta property meta property ) { objects . require non null ( meta property , str_ ) ; return boolean . true . equals ( meta property . get annotations ( ) . get ( str_ ) ) ; }
private void validate probe essentials ( identity provider dto identity provider ) { validate . not null ( identity provider , sm . get string ( str_ , str_ ) ) ; validate . not empty ( identity provider . get username ( ) , sm . get string ( str_ , str_ ) ) ; validate . not null ( identity provider . get password ( ) , sm . get string ( str_ , str_ ) ) ; validate . not empty ( identity provider . get connection strings ( ) , sm . get string ( str_ , str_ ) ) ; }
public roster entry combo box ( string roster group ) { this ( roster . get default ( ) , roster group , null , null , null , null , null , null , null ) ; }
public static void remove local bundle ( string name , version version , boolean remove physical , boolean double tap ) throws bundle exception { name = name . trim ( ) ; cfml engine engine = cfml engine factory . get instance ( ) ; cfml engine factory factory = engine . get cfml engine factory ( ) ; bundle file bf = _get bundle file ( factory , name , version , null ) ; if ( bf != null ) { bundle definition bd = bf . to bundle definition ( ) ; if ( bd != null ) { bundle b = bd . get local bundle ( ) ; if ( b != null ) { stop if necessary ( b ) ; b . uninstall ( ) ; } } } if ( ! remove physical ) return ; if ( bf != null ) { if ( ! bf . get file ( ) . delete ( ) && double tap ) bf . get file ( ) . delete on exit ( ) ; } }
buffered image generate map image ( map view map view ) ;
public void write field ( final string name , final char value ) throws java . io . io exception { write field ( name , character . to string ( value ) ) ; }
protected int _slice offset ( int abs rank ) { return slice offsets [ abs rank ] ; }
protected void write complex attribute ( mx codec enc , object obj , string attr , object value , node node ) { node child = enc . encode ( value ) ; if ( child != null ) { if ( attr != null ) { mx codec . set attribute ( child , str_ , attr ) ; } node . append child ( child ) ; } else { system . err . println ( str_ + mx codec registry . get name ( obj ) + str_ + attr + str_ + value ) ; } }
protected static void re organize type ( query column impl column ) { if ( ( column . type == types . other ) && ! column . type checked ) { column . type checked = bool_ ; if ( column . size ( ) > num_ ) { check other ( column , column . data [ num_ ] ) ; for ( int i = num_ ; i < column . size ( ) ; i ++ ) { switch ( column . type ) { case types . null : check other ( column , column . data [ i ] ) ; break ; case types . timestamp : check date ( column , column . data [ i ] ) ; break ; case types . boolean : check boolean ( column , column . data [ i ] ) ; break ; case types . double : check double ( column , column . data [ i ] ) ; break ; case types . varchar : check basic ( column , column . data [ i ] ) ; break ; default : break ; } } } } }
protected boolean is playing ( ) { if ( current item is type ( base playlist manager . audio ) ) { return audio player != null && audio player . is playing ( ) ; } else if ( current item is type ( base playlist manager . video ) ) { return get playlist manager ( ) . get video player ( ) != null && get playlist manager ( ) . get video player ( ) . is playing ( ) ; } return bool_ ; }
public boolean is is scorable ( ) { if ( is scorable == null ) { return bool_ ; } else { return is scorable ; } }
public boolean visit number literal ( expression owner owner , x number num ) { return bool_ ; }
protected void register receiver ( ) { if ( m bluetooth listener == null || m context == null ) { return ; } intent filter filter = new intent filter ( ) ; filter . add action ( bluetooth adapter . actio n_ stat e_ changed ) ; filter . add action ( bluetooth adapter . actio n_ discover y_ started ) ; filter . add action ( bluetooth adapter . actio n_ discover y_ finished ) ; filter . add action ( bluetooth device . actio n_ found ) ; filter . add action ( bluetooth adapter . actio n_ sca n_ mod e_ changed ) ; m receiver = new blue tooth receiver ( m bluetooth listener ) ; m context . register receiver ( m receiver , filter ) ; }
public static boolean is valid space ( int c ) { return c <= num_ && ( masks [ c ] & spac e_ character ) != num_ ; }
public static double p_ hamming ( int y [ ] [ ] , int ypred [ ] [ ] ) { return num_ - l_ hamming ( y , ypred ) ; }
protected int [ ] color sub sample from yuv image ( image proxy img , int subsample , boolean enable square inscribe ) { rect default crop = new rect ( num_ , num_ , img . get width ( ) , img . get height ( ) ) ; return color sub sample from yuv image ( img , default crop , subsample , enable square inscribe ) ; }
void clear selection ( ) ;
public boolean is valid context ( soot method sm ) { return pts provider . is valid method ( sm ) ; }
public configured data source properties ( ) { }
private boolean select by mouse in legend panel ( legend panel legend panel , point point , chart selection chart selection ) { selection graphics < string [ ] > selection graphics = new selection graphics < > ( get graphics ( ) ) ; selection graphics . set mouse location ( point ) ; legend panel . paint ( selection graphics ) ; set < string > series to select = new hash set < > ( ) ; set < string > classes to select = new hash set < > ( ) ; for ( string [ ] pair : selection graphics . get selected items ( ) ) { if ( pair [ num_ ] != null ) { series to select . add ( pair [ num_ ] ) ; } if ( pair [ num_ ] != null ) { classes to select . add ( pair [ num_ ] ) ; } } if ( series to select . size ( ) > num_ ) chart selection . set selected series ( series to select , bool_ ) ; if ( classes to select . size ( ) > num_ ) chart selection . set selected class ( classes to select , bool_ ) ; return series to select . size ( ) > num_ || classes to select . size ( ) > num_ ; }
void delete ( string id ) ;
boolean is disabled ( ) ;
public static s m_ syste m_ message st r_ skil l_ resiste d_ magi c_ othe r_ hostile ( string skilltarget , string skillcaster ) { return new s m_ syste m_ message ( num_ , skilltarget , skillcaster ) ; }
public static s m_ syste m_ message st r_ skil l_ suc c_ heal castor on attacked _ interva l_ a_ t o_ me ( int num 0 , string skillcaster , string skillname ) { return new s m_ syste m_ message ( num_ , num 0 , skillcaster , skillname ) ; }
public boolean stop at ( object context , string key ) { return bool_ ; }
protected entity property source impl ( ) { super ( ) ; }
public string to string ( ) { return name ; }
private void update progress ( string progress label , int progress ) { if ( my host != null && ( ( progress != previous progress ) || ( ! progress label . equals ( previous progress label ) ) ) ) { my host . update progress ( progress label , progress ) ; } previous progress = progress ; previous progress label = progress label ; }
public void print dashed line ( ) { start new line if needed ( ) ; for ( int i = num_ ; i < line length ; i ++ ) { stream . print ( str_ ) ; } stream . println ( ) ; }
public static boolean is decimal quantity order allowed ( delegator delegator , string product id , string product store id ) throws generic entity exception { if ( util validate . is empty ( product store id ) ) { return boolean . true ; } string allow decimal store = entity query . use ( delegator ) . from ( str_ ) . where ( str_ , product store id ) . cache ( bool_ ) . query one ( ) . get string ( str_ ) ; string allow decimal product = entity query . use ( delegator ) . from ( str_ ) . where ( str_ , product id ) . cache ( bool_ ) . query one ( ) . get string ( str_ ) ; if ( str_ . equals ( allow decimal product ) || ( util validate . is empty ( allow decimal product ) && str_ . equals ( allow decimal store ) ) ) { return boolean . false ; } return boolean . true ; }
public void stop ( ) throws io exception { if ( socket != null ) { socket . close ( ) ; } }
public int refresh ( ) { return num_ ; }
public base connection ( ) { log . debug ( str_ ) ; this . type = persistent ; }
private map < string , set < call location model > > compute filtered taint sources map ( i marker marker ) { set < call location model > sources = taint marker . get sources ( marker ) ; return compute filtered taint sources map ( sources ) ; }
public void begin drawing ( g l 1 0 gl , float view width , float view height ) { check state ( stat e_ initialized , stat e_ drawing ) ; gl . gl bind texture ( g l 1 0 . g l_ textur e _ 2 d , m texture id ) ; gl . gl shade model ( g l 1 0 . g l_ flat ) ; gl . gl enable ( g l 1 0 . g l_ blend ) ; gl . gl blend func ( g l 1 0 . g l_ sr c_ alpha , g l 1 0 . g l_ on e_ minu s_ sr c_ alpha ) ; gl . gl color 4x ( num_ , num_ , num_ , num_ ) ; gl . gl matrix mode ( g l 1 0 . g l_ projection ) ; gl . gl push matrix ( ) ; gl . gl load identity ( ) ; gl . gl orthof ( num_ , view width , num_ , view height , num_ , num_ ) ; gl . gl matrix mode ( g l 1 0 . g l_ modelview ) ; gl . gl push matrix ( ) ; gl . gl load identity ( ) ; gl . gl translatef ( num_ , num_ , num_ ) ; }
protected boolean is white spaces only ( int start , int end ) { assert end <= get buffer end ( ) ; assert start >= num_ ; char sequence buffer = get buffer ( ) ; while ( start < end ) { if ( ! character . is whitespace ( buffer . char at ( start ) ) ) { return bool_ ; } start ++ ; } return bool_ ; }
public open sslpbe parameters generator ( ) { }
int partner ( int token index ) { int bracket index = bracket index for token ( token index ) ; if ( bracket index < num_ ) { return - num_ ; } return brackets [ ( bracket index << num_ ) + num_ ] ; }
public base 6 4 output stream ( output stream out , int flags , boolean encode ) { super ( out ) ; this . flags = flags ; if ( encode ) { coder = new base 6 4 . encoder ( flags , null ) ; } else { coder = new base 6 4 . decoder ( flags , null ) ; } }
public static secret keys keys ( string keys str ) throws invalid key exception { string [ ] keys arr = keys str . split ( str_ ) ; if ( keys arr . length != num_ ) { throw new illegal argument exception ( str_ ) ; } else { byte [ ] confidentiality key = base 6 4 . decode ( keys arr [ num_ ] , bas e 6 4 _ flags ) ; if ( confidentiality key . length != ae s_ ke y_ lengt h_ bits / num_ ) { throw new invalid key exception ( str_ + ae s_ ke y_ lengt h_ bits + str_ ) ; } byte [ ] integrity key = base 6 4 . decode ( keys arr [ num_ ] , bas e 6 4 _ flags ) ; if ( integrity key . length != hma c_ ke y_ lengt h_ bits / num_ ) { throw new invalid key exception ( str_ + hma c_ ke y_ lengt h_ bits + str_ ) ; } return new secret keys ( new secret key spec ( confidentiality key , num_ , confidentiality key . length , cipher ) , new secret key spec ( integrity key , hma c_ algorithm ) ) ; } }
public static void main ( string [ ] args ) throws io exception { if ( args . length == num_ ) { run ( args [ num_ ] , args [ num_ ] , args [ num_ ] , args [ num_ ] , args [ num_ ] ) ; } else if ( args . length == num_ ) { run ( args [ num_ ] , args [ num_ ] , args [ num_ ] , args [ num_ ] , args [ num_ ] ) ; } else { throw new illegal argument exception ( str_ ) ; } }
public synchronized boolean any jobs active ( ) { for ( job job : jobs ) { if ( ! job . is complete ( ) ) return bool_ ; } return bool_ ; }
void unsubscribe switch state ( ) ;
math component process ( math component math component ) ;
public buffer occupancy report ( ) { super ( ) ; settings settings = get settings ( ) ; if ( settings . contains ( buffe r_ repor t_ interval ) ) { interval = settings . get int ( buffe r_ repor t_ interval ) ; } else { interval = - num_ ; } if ( interval < num_ ) { interval = defaul t_ buffe r_ repor t_ interval ; } }
public client health status [ ] show all client stats ( ) throws exception ;
public void add warning ( warning w ) { warnings . add ( w ) ; }
public polynomial minus ( double c ) { return plus ( - c ) ; }
public layer title cache ( context context ) { resources res = context . get resources ( ) ; final int fade width px = res . get dimension pixel offset ( r . dimen . border _texture _title _fade ) ; final int favicon start padding px = res . get dimension pixel size ( r . dimen . tab _title _favicon _start _padding ) ; final int favicon end padding px = res . get dimension pixel size ( r . dimen . tab _title _favicon _end _padding ) ; m native layer title cache = native init ( fade width px , favicon start padding px , favicon end padding px , r . drawable . spinner , r . drawable . spinner _white ) ; }
public boolean contains key ( object key ) { return map . contains key ( key ) ; }
private void return data ( object ret ) { if ( my host != null ) { my host . return data ( ret ) ; } }
private static string descriptor from proto array ( string [ ] protos , string return type ) { string builder builder = new string builder ( ) ; builder . append ( str_ ) ; for ( int i = num_ ; i < protos . length ; i ++ ) { builder . append ( protos [ i ] ) ; } builder . append ( str_ ) ; builder . append ( return type ) ; return builder . to string ( ) ; }
boolean closed start ( token t ) { return t . kind == identifier || ( t . kind >= op _ 5 7 && t . kind <= op _ 1 1 9 ) || t . kind == numbe r_ literal || t . kind == lbr || t . kind == lsb || t . kind == lab || t . kind == lbc || t . kind == lwb || t . kind == strin g_ literal || t . kind == wf || t . kind == sf ; }
synchronized void drop observables ( uuid host ) { map < cache key , observable > map = m cache . snapshot ( ) ; for ( cache key cache key : map . key set ( ) ) { if ( cache key . uuid == host ) { m cache . remove ( cache key ) ; } } }
public void add business filter to owned routes ( viewer filter filter ) ;
public static int blend colors ( int color 1 , int color 2 , float ratio ) { final float inverse ratio = num_ - ratio ; float a = ( color . alpha ( color 1 ) * inverse ratio ) + ( color . alpha ( color 2 ) * ratio ) ; float r = ( color . red ( color 1 ) * inverse ratio ) + ( color . red ( color 2 ) * ratio ) ; float g = ( color . green ( color 1 ) * inverse ratio ) + ( color . green ( color 2 ) * ratio ) ; float b = ( color . blue ( color 1 ) * inverse ratio ) + ( color . blue ( color 2 ) * ratio ) ; return color . argb ( ( int ) a , ( int ) r , ( int ) g , ( int ) b ) ; }
public type reference ( int type ref ) { this . value = type ref ; }
private string find facet name for component ( ui component component ) { set < entry < string , ui component > > entry set = component . get parent ( ) . get facets ( ) . entry set ( ) ; iterator < entry < string , ui component > > entries = entry set . iterator ( ) ; while ( entries . has next ( ) ) { entry < string , ui component > candidate = entries . next ( ) ; if ( component == candidate . get value ( ) ) { return candidate . get key ( ) ; } } return null ; }
public static synchronized void register identity handler ( final identity handler identity handler ) { if ( identity handler == null ) throw new illegal argument exception ( str_ ) ; linked list < identity handler > new list = duplicate identity handlers ( ) ; new list . remove ( identity handler ) ; new list . add first ( identity handler ) ; identity handlers = new list ; }
void on mouse over ( com . smartgwt . client . widgets . events . mouse over event event ) ;
public plugin result . pre parse do pre parse ( pre parse search operation search operation ) throws canceled operation exception { throw new unsupported operation exception ( er r_ plugi n_ typ e_ no t_ supported . get ( plugin dn , plugin type . pr e_ pars e_ search . get name ( ) ) . to string ( ) ) ; }
private void remove all callbacks ( ) { if ( m change current by one from long press command != null ) { remove callbacks ( m change current by one from long press command ) ; } if ( m set selection command != null ) { remove callbacks ( m set selection command ) ; } if ( m begin soft input on long press command != null ) { remove callbacks ( m begin soft input on long press command ) ; } m pressed state helper . cancel ( ) ; }
public boolean is call ok when visible ( ) { return call ok when visible ; }
public sql feature not supported exception ( string reason , throwable cause ) { super ( reason , cause ) ; }
public query builder < t > distinct ( ) ;
public boolean is empty ( ) { if ( root == null ) return bool_ ; return bool_ ; }
public void visit ( int version , int access , string name , string signature , string super name , string [ ] interfaces ) { if ( cv != null ) { cv . visit ( version , access , name , signature , super name , interfaces ) ; } }
public feed ( ) { this ( key ) ; }
public boolean is regarding ( output socket socket ) { return socket . equals ( this . socket ) ; }
public abstract boolean parameter must be non null ( x method m , int param ) ;
public target create target ( ) { target impl target = new target impl ( ) ; return target ; }
public static void deactivate token ( string token id ) throws exception { password store . store password ( token id , null ) ; log . trace ( str_ , token id ) ; execute ( new activate token ( token id , bool_ ) ) ; }
private static void save diagram ( string source , bean < ? extends configuration > configuration , output stream stream , string encoding ) throws io exception , xml exception { if ( configuration != null ) { document document = doc util . new document ( ) ; element root = document . create element ( str_ ) ; document . append child ( root ) ; bean converter converter = new bean converter ( configuration , document ) ; element source elem = document . create element ( str_ ) ; cdata section source node = document . create cdata section ( source ) ; source elem . append child ( source node ) ; root . append child ( source elem ) ; element configuration node = converter . create element ( str_ ) ; root . append child ( configuration node ) ; doc util . write document ( document , encoding , stream ) ; } else { output stream writer osw = new output stream writer ( stream , encoding ) ; print writer pw = new print writer ( osw ) ; pw . print ( source ) ; pw . flush ( ) ; } }
public static string unify line separators ( string s ) { return unify line separators ( s , system . get property ( str_ ) ) ; }
public static boolean is available ( ) { return proxy != null ; }
public builder to ( final text position to ) { this . to = to ; return this ; }
public void show ( final class < ? > controller , final runnable action on show ) { this . action on show = action on show ; show ( controller ) ; }
public boolean is overflow ( ) { return this . type == typ e_ overflow ; }
private void update progress ( string progress label , int progress ) { if ( my host != null && ( ( progress != previous progress ) || ( ! progress label . equals ( previous progress label ) ) ) ) { my host . update progress ( progress label , progress ) ; } previous progress = progress ; previous progress label = progress label ; }
public http url connection wrapper http url connection wrapper ( url url ) throws io exception { return new http url connection wrapper impl ( url ) ; }
int size ( ) ;
public bool data type ( boolean b ) { this . bool = b ; }
public void start _scope ( logfile scope p _logfile _scope ) { if ( ! write _enabled ) return ; try { file _writer . write ( p _logfile _scope . name ) ; file _writer . write ( str_ ) ; } catch ( io exception e 2 ) { system . out . println ( str_ ) ; } }
private static boolean references different slots ( context asc context , object value referencing type info , q name q name , object value referenced type info ) { boolean result = bool_ ; int kind = tokens . ge t_ token ; string local part = q name . get local part ( ) . intern ( ) ; object value namespace = asc context . get namespace ( q name . get namespace ( ) . intern ( ) ) ; if ( referencing type info . has name ( asc context , kind , local part , namespace ) && referenced type info . has name ( asc context , kind , local part , namespace ) ) { int referencing index = referencing type info . get slot index ( asc context , kind , local part , namespace ) ; int referenced index = referenced type info . get slot index ( asc context , kind , local part , namespace ) ; if ( referencing index != referenced index ) { slot referencing slot = referencing type info . get slot ( asc context , referencing index ) ; slot referenced slot = referenced type info . get slot ( asc context , referenced index ) ; if ( ( referencing slot instanceof variable slot ) && ( referenced slot instanceof variable slot ) && ( referencing slot . get value ( ) != referenced slot . get value ( ) ) ) { result = bool_ ; } } } return result ; }
protected abstract void on cancellation impl ( ) ;
private void initialize column map ( schema schema ) { set column names ( schema . get fields ( ) ) ; key method map = new array list < getter > ( ) ; for ( int i = num_ ; i < get column names ( ) . size ( ) ; i ++ ) { try { key method map . add ( generate getters for field ( cls , get column names ( ) . get ( i ) . name ( ) ) ) ; } catch ( no such field exception | security exception e ) { throw new runtime exception ( str_ , e ) ; } } }
public void add message transfer ( dtn host from , dtn host to ) { auto clear ( ) ; this . overlay graphics . add ( new message graphic ( from , to ) ) ; }
int insert rule ( string rule , int index ) throws dom exception ;
public static void dump counts ( ) { dump counts ( baseline compiler . options . profil e_ edg e_ counte r_ file ) ; }
public receiver accept ( string from , string recipient ) ;
public static int buffer create int buffer ( int buffer buf , int size ) { if ( buf != null && buf . limit ( ) == size ) { buf . rewind ( ) ; return buf ; } buf = create int buffer ( size ) ; return buf ; }
public void zoom out ( ) { m _view . set zoom ( m _view . get zoom ( ) * standar d_ zoo m_ factor ) ; zoom helpers . keep zoom valid ( m _view ) ; m _graph . update views ( ) ; }
public static boolean is double ( char sequence self ) { try { double . value of ( self . to string ( ) . trim ( ) ) ; return bool_ ; } catch ( number format exception nfe ) { return bool_ ; } }
public void add attribute ( string uri , string local name , string raw name , string type , string value , boolean xsl attribute ) throws sax exception { if ( m _first tag not emitted ) { flush ( ) ; } m _handler . add attribute ( uri , local name , raw name , type , value , xsl attribute ) ; }
public void merge right ( final expression other , final boolean merge normalized ) { original = original + str_ + other . get original ( ) ; if ( merge normalized ) { normalized = normalized + str_ + other . get normalized ( ) ; } merge type ( other . get type ( ) ) ; set amount ( merge amount ( amount , other . amount ) ) ; break flag = other . get break flag ( ) ; }
private void push opp ( opp node node ) { if ( node == null ) { opp stack . add ( num_ , node ) ; return ; } while ( bool_ ) { if ( opp stack . size ( ) == num_ ) break ; opp node top = opp stack . get ( num_ ) ; if ( top == null ) break ; if ( top . get precedence ( ) < node . get precedence ( ) ) break ; opp stack . remove ( num_ ) ; top . pop values ( node stack ) ; node stack . add ( num_ , top ) ; } opp stack . add ( num_ , node ) ; }
protected abstract void finish ( ) throws io exception ;
void add field to class members ( node class members , node field ) { for ( node n : class members . children ( ) ) { if ( n . is member function def ( ) ) { class members . add child before ( field , n ) ; return ; } } class members . add child to back ( field ) ; }
public if item provider ( adapter factory adapter factory ) { super ( adapter factory ) ; }
protected string reload ( context name cn , string manager sm client ) { string writer string writer = new string writer ( ) ; print writer print writer = new print writer ( string writer ) ; super . reload ( print writer , cn , sm client ) ; return string writer . to string ( ) ; }
public long create _time _to _sample _atom ( m p4 data stream bitstream ) throws io exception { log . trace ( str_ ) ; create _full _atom ( bitstream ) ; time to samples records = new vector < time sample record > ( ) ; entry count = ( int ) bitstream . read bytes ( num_ ) ; log . trace ( str_ , entry count ) ; readed += num_ ; for ( int i = num_ ; i < entry count ; i ++ ) { int sample count = ( int ) bitstream . read bytes ( num_ ) ; int sample duration = ( int ) bitstream . read bytes ( num_ ) ; time to samples records . add element ( new time sample record ( sample count , sample duration ) ) ; readed += num_ ; } return readed ; }
public boolean is protocol status dirty ( org . apache . nutch . storage . protocol status value ) { return is dirty ( num_ ) ; }
public int emit jump ( int opcode ) { if ( fatcode ) { if ( opcode == goto _ || opcode == jsr ) { emitop 4 ( opcode + goto _w - goto _ , num_ ) ; } else { emitop 2 ( negate ( opcode ) , num_ ) ; emitop 4 ( goto _w , num_ ) ; alive = bool_ ; pending stack map = need stack map ; } return cp - num_ ; } else { emitop 2 ( opcode , num_ ) ; return cp - num_ ; } }
public webapp data storage create ( final context context , final string webapp id ) { return new webapp data storage ( context , webapp id ) ; }
public maybe < a > apply ( integer index ) { list < a > current = this ; while ( ! current . is empty ( ) && index > num_ ) { current = current . tail ( ) ; index -- ; } return ( index < num_ || current . is empty ( ) ) ? maybe . < a > nothing ( ) : maybe . just ( current . head ( ) ) ; }
public com . sun . identity . wsfederation . jaxb . xmlsig . x 5 0 9 data type . x 5 0 9 certificate create x 5 0 9 data type x 5 0 9 certificate ( byte [ ] value ) throws javax . xml . bind . jaxb exception { return new com . sun . identity . wsfederation . jaxb . xmlsig . impl . x 5 0 9 data type impl . x 5 0 9 certificate impl ( value ) ; }
public void action performed ( action event e ) { j text component target = get text component ( e ) ; if ( target != null ) { component orientation last = target . get component orientation ( ) ; component orientation next ; if ( last == component orientation . righ t_ t o_ left ) next = component orientation . lef t_ t o_ right ; else next = component orientation . righ t_ t o_ left ; target . set component orientation ( next ) ; target . repaint ( ) ; } }
public static void change back ground ( final component component , final color background ) { final color old back ground = component . get background ( ) ; if ( background == null || ! background . equals ( old back ground ) ) { component . set background ( background ) ; } }
public json array to json array ( json array names ) throws json exception { if ( names == null || names . length ( ) == num_ ) { return null ; } json array ja = new json array ( ) ; for ( int i = num_ ; i < names . length ( ) ; i += num_ ) { ja . put ( this . opt ( names . get string ( i ) ) ) ; } return ja ; }
public immutable stack < t > pop ( ) { return tail ; }
private void show feedback ( string message ) { if ( my host != null ) { my host . show feedback ( message ) ; } else { system . out . println ( message ) ; } }
public boolean on load error ( hls chunk chunk , io exception e ) { if ( ( chunk instanceof media playlist chunk ) && ( e instanceof invalid response code exception ) ) { invalid response code exception response code exception = ( invalid response code exception ) e ; int response code = response code exception . response code ; if ( response code == num_ || response code == num_ ) { media playlist chunk playlist chunk = ( media playlist chunk ) chunk ; media playlist blacklist flags [ playlist chunk . variant index ] = bool_ ; if ( ! all playlists blacklisted ( ) ) { log . w ( tag , str_ + response code + str_ + playlist chunk . data spec . uri ) ; return bool_ ; } else { log . w ( tag , str_ + response code + str_ + playlist chunk . data spec . uri ) ; media playlist blacklist flags [ playlist chunk . variant index ] = bool_ ; return bool_ ; } } } return bool_ ; }
protected void update cursor for drag ( int piece ) { if ( get preferences ( ) . get boolean ( preference keys . boar d_ i s_ usin g_ crosshair s_ cursor ) ) { get shell ( ) . set cursor ( raptor . get instance ( ) . get display ( ) . get system cursor ( swt . curso r_ cross ) ) ; } else if ( piece != empty ) { int image side = get image size ( ) ; get shell ( ) . set cursor ( chess board utils . get cursor for piece ( piece , image side ) ) ; } else if ( piece == empty ) { int image side = get image size ( ) ; get shell ( ) . set cursor ( chess board utils . get cursor for piece ( chess board utils . piece jail square to piece ( get id ( ) ) , image side ) ) ; } }
void on permissions refused ( string [ ] permissions ) ;
public static int lookup character index ( final string glyph , final int idx ) { final object value = glyph to char [ idx ] . get ( glyph ) ; if ( value == null ) { return num_ ; } else { return ( integer ) value ; } }
public void rolld ( ) throws warp script exception ;
public file calls file ( ) { return m calls file ; }
public void warning ( string id msg id , object [ ] params , throwable ex ) ;
void assign param to local ( int right , local left ) { purity node node = cache node ( new purity param node ( right ) ) ; locals remove ( left ) ; locals put ( left , node ) ; nodes . add ( node ) ; param nodes . add ( node ) ; if ( do check ) sanity check ( ) ; }
public double member value ( double d , const pool cp ) { super ( str_ , cp ) ; set value ( d ) ; }
public synchronized invoker < v > invoke ( ) throws uncompleted invoke exception { if ( future != null && ! future . is done ( ) ) { throw new uncompleted invoke exception ( this ) ; } future = executor . submit ( this ) ; return this ; }
public static type var unique ( string prefix ) { return new type var ( prefix + str_ + integer . to hex string ( tv offset ++ ) , bool_ ) ; }
boolean is auto install ( ) ;
private sequence < i string > to class representation ( sequence < i string > target sequence ) { if ( target sequence . size ( ) == num_ ) return target sequence ; i string [ ] array = new i string [ target sequence . size ( ) ] ; for ( int i = num_ ; i < array . length ; ++ i ) { if ( wrap boundary && ( target sequence . get ( i ) . equals ( this . start token ) || target sequence . get ( i ) . equals ( this . end token ) ) ) array [ i ] = target sequence . get ( i ) ; else array [ i ] = target class map . get ( target sequence . get ( i ) ) ; } return new array sequence < i string > ( bool_ , array ) ; }
protected reader ( ) { lock = this ; }
boolean is active cot ( string cot status ) { return ( cot status != null && cot status . equals ignore case ( cot constants . active ) ) ; }
public dns sd txt record ( ) { m data = new byte [ num_ ] ; }
protected void parse create ( marker marker ) { consume statement ( ) ; }
public static final g code flavor taste flavor ( buffered input stream buffer ) throws io exception { int rl = num_ ; final byte [ ] read ahead = new byte [ rl ] ; buffer . mark ( read ahead . length ) ; int i = num_ ; while ( buffer . available ( ) > num_ && i < rl ) { read ahead [ i ] = ( byte ) buffer . read ( ) ; i ++ ; } buffer . reset ( ) ; final string read ahead string = new string ( read ahead ) . to lower case ( locale . us ) ; if ( read ahead string . contains ( str_ ) ) { return g code flavor . sli c3 r ; } else if ( read ahead string . contains ( str_ ) ) { return g code flavor . skeinforge ; } return g code flavor . unknown ; }
public void remove ignored view ( view v ) { m ignored views . remove ( v ) ; }
public abstract base encoding upper case ( ) ;
public void add ( dbid ref id , double reach , dbid ref pre ) { ids . add ( id ) ; reachability . put double ( id , reach ) ; if ( pre == null || pre instanceof dbid var && ! ( ( dbid var ) pre ) . is set ( ) ) { return ; } predecessor . put dbid ( id , pre ) ; }
public abstract boolean is covered ( test chromosome test ) ;
stream < type mapper < ? , ? > > map from ( class < ? > database type ) ;
public style sheet parse style sheet ( input source is , parsed url uri , string media ) throws dom exception { style sheet ss = new style sheet ( ) ; try { ss . set media ( parser . parse media ( media ) ) ; parse style sheet ( ss , is , uri ) ; } catch ( exception e ) { string m = e . get message ( ) ; if ( m == null ) m = str_ ; string u = ( ( document uri == null ) ? str_ : document uri . to string ( ) ) ; string s = messages . format message ( str_ , new object [ ] { u , m } ) ; dom exception de = new dom exception ( dom exception . synta x_ err , s ) ; if ( user agent == null ) throw de ; user agent . display error ( de ) ; } return ss ; }
public static string to number ( double number ) { string str = ( is float precision ) ? float . to string ( ( float ) number ) : double . to string ( number ) ; if ( str . ends with ( str_ ) ) { str = str . substring ( num_ , str . length ( ) - num_ ) ; } return str ; }
private double sinus product ( int start , int end , double [ ] alpha ) { double result = num_ ; for ( int j = start ; j < end ; j ++ ) { result *= math . sin ( alpha [ j ] ) ; } return result ; }
protected final void refresh loading views size ( ) { final int maximum pull scroll = ( int ) ( get maximum pull scroll ( ) * num_ ) ; int p left = get padding left ( ) ; int p top = get padding top ( ) ; int p right = get padding right ( ) ; int p bottom = get padding bottom ( ) ; switch ( get pull to refresh scroll direction ( ) ) { case horizontal : if ( m mode . show header loading layout ( ) ) { m header layout . set width ( maximum pull scroll ) ; p left = - maximum pull scroll ; } else { p left = num_ ; } if ( m mode . show footer loading layout ( ) ) { m footer layout . set width ( maximum pull scroll ) ; p right = - maximum pull scroll ; } else { p right = num_ ; } break ; case vertical : if ( m mode . show header loading layout ( ) ) { m header layout . set height ( maximum pull scroll ) ; p top = - maximum pull scroll ; } else { p top = num_ ; } if ( m mode . show footer loading layout ( ) ) { m footer layout . set height ( maximum pull scroll ) ; p bottom = - maximum pull scroll ; } else { p bottom = num_ ; } break ; } set padding ( p left , p top , p right , p bottom ) ; }
private void add ( node node , stack node stack ) { node . set visited ( bool_ ) ; nodes . add ( node ) ; for ( iterator i = ( ( directed edge star ) node . get edges ( ) ) . iterator ( ) ; i . has next ( ) ; ) { directed edge de = ( directed edge ) i . next ( ) ; dir edge list . add ( de ) ; directed edge sym = de . get sym ( ) ; node sym node = sym . get node ( ) ; if ( ! sym node . is visited ( ) ) node stack . push ( sym node ) ; } }
private void apply kit kat translucency ( ) { if ( build . version . sd k_ int >= build . versio n_ codes . kitkat ) { set translucent status ( bool_ ) ; system bar tint manager m tint manager = new system bar tint manager ( this ) ; m tint manager . set status bar tint enabled ( bool_ ) ; m tint manager . set navigation bar tint enabled ( bool_ ) ; m tint manager . set tint drawable ( ui elements helper . get general action bar background ( this ) ) ; get action bar ( ) . set background drawable ( ui elements helper . get general action bar background ( this ) ) ; } }
public void clear header ( ) { m _ header keys = new vector < string > ( ) ; m _ header values = new vector < string > ( ) ; }
public void on pause ( boolean multitasking ) { for ( cordova plugin plugin : this . plugin map . values ( ) ) { if ( plugin != null ) { plugin . on pause ( multitasking ) ; } } }
public boolean is open ( ) { return is open ; }
public final static int write security buffer and update pointer ( byte array output stream baos , short len , int pointer ) throws io exception { baos . write ( write security buffer ( len , pointer ) ) ; return pointer + len ; }
public void assert write called ( string name , write mode ... modes ) { m _outputs . get ( name ) . assert write called ( modes ) ; }
private void update download progress ( download info download info , download status status ) { assert download info . has download id ( ) ; int download id = download info . get download id ( ) ; download progress progress = m download progress map . get ( download id ) ; if ( progress == null ) { progress = new download progress ( system . current time millis ( ) , download info , status ) ; if ( status == download status . i n_ progress ) { add download id to shared prefs ( download id ) ; } m download progress map . put if absent ( download id , progress ) ; } else { progress . m download status = status ; progress . m download info = download info ; } }
public static boolean is error loggable ( level level ) { sso token auth sso token = ( sso token ) access controller . do privileged ( admin token action . get instance ( ) ) ; if ( ( auth sso token == null ) || ! log active ) { return bool_ ; } return error logger . is loggable ( level ) ; }
public void recompose ( stylesheet root root ) throws transformer exception { }
public static _ fields find by thrift id ( int field id ) { switch ( field id ) { case num_ : return strings ; case num_ : return hello ; default : return null ; } }
public static void add class factory ( utils . class factory class factory ) { get user class factories ( ) . add ( class factory ) ; }
public lens handle ( lens < t inventory , t stack > lens , inventory property < ? , ? > ... properties ) { this . lens = lens ; if ( properties != null && properties . length > num_ ) { this . properties = new array list < inventory property < ? , ? > > ( ) ; for ( inventory property < ? , ? > property : properties ) { this . properties . add ( property ) ; } } }
public static boolean is to string method ( method method ) { return ( method != null && method . get name ( ) . equals ( str_ ) && method . get parameter types ( ) . length == num_ ) ; }
public str builder delete first ( final string str ) { final int len = ( str == null ? num_ : str . length ( ) ) ; if ( len > num_ ) { final int index = index of ( str , num_ ) ; if ( index >= num_ ) { delete impl ( index , index + len , len ) ; } } return this ; }
public static double l_ rank loss ( int y [ ] , int r [ ] ) { int l = y . length ; array list < integer > t i = new array list < integer > ( ) ; array list < integer > f i = new array list < integer > ( ) ; for ( int j = num_ ; j < l ; j ++ ) { if ( y [ j ] == num_ ) { t i . add ( j ) ; } else { f i . add ( j ) ; } } if ( ! t i . is empty ( ) && ! f i . is empty ( ) ) { int c = num_ ; for ( int k : t i ) { for ( int l : f i ) { if ( position ( k , r ) < position ( l , r ) ) { c ++ ; } } } return ( double ) c / ( double ) ( t i . size ( ) * f i . size ( ) ) ; } else { return num_ ; } }
public boolean is min y set ( int scale ) { return m min y [ scale ] != math helper . nul l_ value ; }
public static float [ ] ga to l la ( geo [ ] ga , float [ ] lla ) { if ( lla == null ) { lla = new float [ num_ * ga . length ] ; } for ( int i = num_ ; i < ga . length ; i ++ ) { geo g = ga [ i ] ; lla [ i * num_ ] = ( float ) g . get latitude ( ) ; lla [ i * num_ + num_ ] = ( float ) g . get longitude ( ) ; } return lla ; }
public void collect ( ) { vm . assertions . fail ( str_ ) ; }
protected void parse lookup table ( in stream in ) throws io exception { string [ ] strings = new string [ in . read u i 1 6 ( ) ] ; for ( int i = num_ ; i < strings . length ; i ++ ) { strings [ i ] = in . read string ( ) ; } actions . lookup table ( strings ) ; }
public boolean equals ( object other ) { if ( other == this ) { return bool_ ; } if ( ! ( other instanceof x 5 0 9 crl entry ) ) { return bool_ ; } x 5 0 9 crl entry obj = ( x 5 0 9 crl entry ) other ; try { return arrays . equals ( get encoded ( ) , obj . get encoded ( ) ) ; } catch ( crl exception e ) { return bool_ ; } }
public void invoke ( r syntax text area text area ) throws bad location exception ;
public static final void convert proxy cross references ( collection < ? > roots , proxy handler handler ) { new proxy traverser ( roots , handler ) . handle proxy cross references ( ) ; }
public static component ui create ui ( j component ta ) { return new compiere text area ui ( ta ) ; }
public abstract boolean update last mac ( int account id , string mac ) ;
public boolean is secondary menu showing ( ) { return m view above . get current item ( ) == num_ ; }
public string local node id ( ) { return this . local node id ; }
protected void process nodes after add instance ( ball node node ) { node . m _ start ++ ; node . m _ end ++ ; if ( node . m _ left != null && node . m _ right != null ) { process nodes after add instance ( node . m _ left ) ; process nodes after add instance ( node . m _ right ) ; } }
public void load cell block ( int c , byte buffer buf ) { load columns ( info . col blocks [ c ] , buf ) ; }
public int num buckets ( ) { return preamble . get config k ( ) ; }
private position update position ( entry entry ) throws io exception { if ( ! entry . is valid ( ) ) { if ( _first pos . equals entry ( entry ) ) { return _first pos ; } else if ( _last pos . equals entry ( entry ) ) { return _last pos ; } else { throw new illegal argument exception ( with error context ( str_ + entry ) ) ; } } position pos = find entry position ( entry ) ; if ( pos . compare to ( _last pos ) >= num_ ) { return _last pos ; } else if ( pos . compare to ( _first pos ) <= num_ ) { return _first pos ; } return pos ; }
public static string request path ( url url ) { string file only = url . get file ( ) ; if ( file only == null ) { return str_ ; } else if ( ! file only . starts with ( str_ ) ) { return str_ + file only ; } else { return file only ; } }
void post process ( result producer rp ) throws exception ;
void show logo loading view ( ) { m search provider logo view . show loading view ( ) ; }
public synchronized table model < v > insert row ( int index , collection < v > values ) { array list < v > list = new array list < v > ( values ) ; rows . add ( index , list ) ; for ( listener < v > listener : listeners ) { listener . on row added ( this , index ) ; } return this ; }
public static o data uri create o data uri for service document ( string service root , media type ... media types ) { scala . option < media type > format = scala . option . apply ( null ) ; if ( media types . length > num_ ) { format = scala . option . apply ( media types [ num_ ] ) ; } return new o data uri ( service root , new service root uri ( format ) ) ; }
sea glass tabbed pane ui ( ) { text rect = new rectangle ( ) ; icon rect = new rectangle ( ) ; tab area rect = new rectangle ( ) ; content rect = new rectangle ( ) ; }
public void test write read empty ( ) throws exception { byte array output stream out = new byte array output stream ( num_ ) ; object output stream os = new object output stream ( out ) ; os . write object ( empty ) ; object input stream is = new object input stream ( new byte array input stream ( out . to byte array ( ) ) ) ; fail over policy copy = ( fail over policy ) is . read object ( ) ; is . close ( ) ; os . close ( ) ; assert true ( helper . are equals ( empty , copy ) ) ; }
default < t > void convert ( class < t > target type , s source , result < t > result ) { converter ( target type ) . convert ( source , result ) ; }
private r utils ( ) { throw new error ( str_ ) ; }
private void next ( ) { while ( it . valid ( ) ) { object o = it . get ( ) ; it . advance ( ) ; if ( filter . is instance ( o ) ) { current = filter . cast ( o ) ; return ; } } current = null ; }
private void remove texture layer ( int selected index ) { if ( selected index < num_ ) { return ; } get table model ( ) . remove texture ( selected index ) ; editor controller . remove texture layer ( selected index ) ; }
public boolean is refreshing ( ) ;
public static xml ordered result ordered ( ) { return new xml ordered result ( bool_ , str_ ) ; }
public boolean bool ( x path context xctxt ) throws javax . xml . transform . transformer exception { return ( as node ( xctxt ) != dtm . null ) ; }
public local environment ( ) throws guacamole exception { guac home = find guacamole home ( ) ; properties = new properties ( ) ; try { input stream stream = null ; if ( ! guac home . is directory ( ) ) stream = local environment . class . get resource as stream ( str_ ) ; else { file properties file = new file ( guac home , str_ ) ; if ( properties file . exists ( ) ) stream = new file input stream ( properties file ) ; } if ( stream != null ) { try { properties . load ( stream ) ; } finally { stream . close ( ) ; } } else logger . info ( str_ ) ; } catch ( io exception e ) { logger . warn ( str_ , e . get message ( ) ) ; logger . debug ( str_ , e ) ; } available protocols = read protocols ( ) ; }
graphics state ( graphics state copy ) { m _current color = copy . m _current color ; m _current font = copy . m _current font ; m _current stroke = copy . m _current stroke ; m _x offset = copy . m _x offset ; m _y offset = copy . m _y offset ; m _x scale = copy . m _x scale ; m _y scale = copy . m _y scale ; }
public channel delete handler ( impl discord api api ) { super ( api , bool_ , str_ ) ; }
public static boolean is finished ( final protos . task state state ) { return protos . task state . tas k_ finished . equals ( state ) ; }
public static int unpack int ( final byte [ ] array , final jbbp int counter position ) { final int code = array [ position . get and increment ( ) ] & num_ ; if ( code < num_ ) { return code ; } final int result ; switch ( code ) { case num_ : { result = ( ( array [ position . get and increment ( ) ] & num_ ) << num_ ) | ( array [ position . get and increment ( ) ] & num_ ) ; } break ; case num_ : { result = ( ( array [ position . get and increment ( ) ] & num_ ) << num_ ) | ( ( array [ position . get and increment ( ) ] & num_ ) << num_ ) | ( ( array [ position . get and increment ( ) ] & num_ ) << num_ ) | ( array [ position . get and increment ( ) ] & num_ ) ; } break ; default : throw new illegal argument exception ( str_ + integer . to hex string ( code ) . to upper case ( locale . english ) + str_ ) ; } return result ; }
public void on refresh complete ( ) ;
private static string clean jersey root ( string raw jersey root ) { string cleaned = raw jersey root ; if ( cleaned . ends with ( str_ ) ) { cleaned = cleaned . substring ( num_ , cleaned . length ( ) - num_ ) ; } if ( cleaned . ends with ( str_ ) ) { cleaned = cleaned . substring ( num_ , cleaned . length ( ) - num_ ) ; } if ( ! cleaned . starts with ( str_ ) ) { cleaned = str_ + cleaned ; } return cleaned ; }
private static int convert to int ( string value , int default value ) { string trim = value . trim ( ) ; if ( trim . length ( ) == num_ ) { return default value ; } return integer . parse int ( trim ) ; }
public void test _ ge t _access path _delete _all ( ) throws exception { do insertby url ( str_ , package path + str_ ) ; final long result = count results ( do get with access path ( null , null , null ) ) ; assert equals ( num_ , result ) ; }
route route ( ) ;
private void show feedback ( string message ) { if ( my host != null ) { my host . show feedback ( message ) ; } else { system . out . println ( message ) ; } }
public void save window states ( ) { window state manager . save window states ( ) ; client . settings . put list ( str_ , channels . get popout attributes ( ) ) ; }
public void remove template ( context context , i template holder template , boolean from replication , boolean origin , boolean dont replicate , template remove reason codes remove reason ) { template . set deleted ( bool_ ) ; if ( template . is has waiting for ( ) ) { remove waiting for info sa bus packet packet = new remove waiting for info sa bus packet ( context . get operation id ( ) , null , template ) ; _engine . get processor wg ( ) . enqueue blocked ( packet ) ; } boolean update redo log = bool_ ; if ( ! dont replicate ) { if ( template . is notify template ( ) ) { boolean replicate = ( ( notify template holder ) template ) . is replicate notify ( ) ; update redo log = _engine . is replicated ( ) && ! from replication && replicate ; } else update redo log = bool_ ; } if ( template . is in expiration manager ( ) ) _template expiration manager . remove template ( template ) ; remove template ( context , template , update redo log , origin , remove reason ) ; }
public void paint progress bar foreground ( synth context context , graphics g , int x , int y , int w , int h , int orientation ) { }
public abstract xml string concat ( string str ) ;
public string description ( ) { string builder sb = new string builder ( ) ; if ( is combo ( ) ) { int i = num_ ; for ( new combo leg leg : m _combo legs ) { if ( i ++ > num_ ) { sb . append ( str_ ) ; } sb . append ( leg . to string ( ) ) ; } } else { sb . append ( m _symbol ) ; app ( sb , m _sec type ) ; app ( sb , m _exchange ) ; if ( m _exchange != null && m _exchange . equals ( str_ ) && m _primary exch != null ) { app ( sb , m _primary exch ) ; } app ( sb , m _expiry ) ; if ( m _strike != num_ ) { app ( sb , m _strike ) ; } if ( m _right != right . none ) { app ( sb , m _right ) ; } } return sb . to string ( ) ; }
public boolean has non empty intersection ( points to set other ) { return old set . has non empty intersection ( other ) || new set . has non empty intersection ( other ) ; }
final fork join task < ? > poll ( ) { for ( ; ; ) { int b = base , s = top , d , al ; fork join task < ? > [ ] a ; if ( ( a = array ) != null && ( d = b - s ) < num_ && ( al = a . length ) > num_ ) { int index = ( al - num_ ) & b ; long offset = ( ( long ) index << ashift ) + abase ; fork join task < ? > t = ( fork join task < ? > ) u . get object volatile ( a , offset ) ; if ( b ++ == base ) { if ( t != null ) { if ( u . compare and swap object ( a , offset , t , null ) ) { base = b ; return t ; } } else if ( d == - num_ ) break ; } } else break ; } return null ; }
public object run safely ( catbert . fast stack stack ) throws exception { object relative root = stack . pop ( ) ; return sage . vfs . vfs factory . get instance ( ) . create media source ( get string ( stack ) , relative root ) ; }
private void create overview page ( ) { remap overview overview = new remap overview ( migration task , get container ( ) ) ; int index = add page ( overview . get control ( ) ) ; set page text ( index , str_ ) ; task listeners . add ( overview ) ; }
public abstract abstract selector open selector ( ) throws io exception ;
public static collection < symbol token > system symbols ( ) { return syste m_ tokens ; }
public cannot nest exception ( ) { super ( ) ; }
public void tick ( int integer ) { this . uses [ integer ] += num_ ; }
public void add attribute ( a xml attribute < ? > attr ) { if ( attr == null ) throw new null pointer exception ( str_ ) ; if ( this . attributes == null ) this . attributes = new hash map < string , a xml attribute < ? > > ( ) ; this . attributes . put ( attr . get name ( ) , attr ) ; }
public string map index to display name ( int index ) { string value type string = map index ( index ) ; value type string = value type string . replace all ( str_ , str_ ) ; value type string = string . value of ( value type string . char at ( num_ ) ) . to upper case ( ) + value type string . substring ( num_ ) ; return value type string ; }
void prepare ( ) ;
public void error handling ( exception error , coordinator layout coordinator layout ) { show spinner ( bool_ ) ; error . print stack trace ( ) ; string error message = m domoticz . get error message ( error ) ; if ( m phone connection util == null ) m phone connection util = new phone connection util ( get context ( ) ) ; if ( m phone connection util . is network available ( ) ) { if ( error instanceof json exception && error message . equals ignore case ( str_ ) ) { set message ( get string ( r . string . no _data _on _domoticz ) ) ; } else set error message ( error message ) ; } else { if ( coordinator layout != null ) { useful bits . show snackbar ( get context ( ) , coordinator layout , r . string . error _not connected , snackbar . lengt h_ short ) ; if ( get activity ( ) instanceof main activity ) ( ( main activity ) get activity ( ) ) . talk ( r . string . error _not connected ) ; } } }
protected boolean has graph computer requirement ( ) { return ! graph manager . get traversal engine type ( ) . equals ( traversal engine . type . standard ) ; }
static jaxb context new instance ( string context path , string class name , class loader class loader , map properties ) throws jaxb exception { try { class sp factory = safe load class ( class name , class loader ) ; return new instance ( context path , sp factory , class loader , properties ) ; } catch ( class not found exception x ) { throw new jaxb exception ( messages . format ( messages . provide r_ no t_ found , class name ) , x ) ; } catch ( runtime exception x ) { throw x ; } catch ( exception x ) { throw new jaxb exception ( messages . format ( messages . coul d_ no t_ instantiate , class name , x ) , x ) ; } }
public builder to uri ( context ctxt , uri output , boolean update media store ) { jpeg writer jpeg = ( jpeg writer ) result . find processor by tag ( jpeg writer . class . get canonical name ( ) ) ; if ( jpeg == null ) { jpeg = new jpeg writer ( ctxt ) ; append ( jpeg ) ; } result . get properties ( ) . put parcelable ( jpeg writer . pro p_ output , output ) ; result . get properties ( ) . put boolean ( jpeg writer . pro p_ updat e_ medi a_ store , update media store ) ; return ( this ) ; }
static object unmask null ( object key ) { return ( key == nul l_ key ) ? null : key ; }
protected void write dash ( double [ ] dash , double phase ) throws io exception { write warning ( get class ( ) + str_ ) ; }
public long create _visual _sample _entry _atom ( m p4 data stream bitstream ) throws io exception { log . trace ( str_ ) ; bitstream . skip bytes ( num_ ) ; width = ( int ) bitstream . read bytes ( num_ ) ; log . trace ( str_ , width ) ; height = ( int ) bitstream . read bytes ( num_ ) ; log . trace ( str_ , height ) ; bitstream . skip bytes ( num_ ) ; readed += num_ ; m p4 atom child = m p4 atom . create atom ( bitstream ) ; this . children . add ( child ) ; readed += child . get size ( ) ; return readed ; }
public abstract scanning new scanning ( ) ;
public final boolean has children container ( ) { int length = this . get children ( ) . get length ( ) ; assert ( length < num_ ) : str_ ; return ( length == num_ ) ; }
void check moral ( boolean forced withdrawal , int bravery , int self preservation , i player player , i game game ) ;
public boolean accept call ( ) { return super . is active ( ) ? m session . accept ( ) : bool_ ; }
void on generate github key clicked ( ) ;
public xtruct 2 test nest ( xtruct 2 thing ) throws org . apache . thrift . t exception ;
public void on view detached from window ( ) { }
private boolean in quotes ( boolean in quotes ) { return ( in quotes && ! ignore quotations ) || in field ; }
static public b tree do insert random sparse key sequence test ( final b tree btree , final int ninserts , final int trace ) { final int keys [ ] = new int [ ninserts ] ; final simple entry entries [ ] = new simple entry [ ninserts ] ; final random r = new random ( ) ; int last key = num_ ; for ( int i = num_ ; i < ninserts ; i ++ ) { final int key = r . next int ( num_ ) + last key + num_ ; keys [ i ] = key ; entries [ i ] = new simple entry ( ) ; last key = key ; } return do insert random key sequence test ( btree , keys , entries , trace ) ; }
public comparator < ? super k > key comparator ( ) { return key comparator ; }
public rdf handler exception ( throwable cause ) { super ( cause ) ; }
public static instances [ ] curve data ( int y [ ] [ ] , double p [ ] [ ] ) { int l = y [ num_ ] . length ; instances curve data [ ] = new instances [ l ] ; for ( int j = num_ ; j < l ; j ++ ) { instances cd = curve data ( matrix utils . get col ( y , j ) , matrix utils . get col ( p , j ) ) ; curve data [ j ] = cd ; } return curve data ; }
public abstract boolean contain micro species ( i species species ) ;
public boolean run ( final event types event typ , final event args args , final i configuration configuration ) throws connector exception { for ( event command data event command data : event handlers . get ( event typ ) ) { try { i event handler events ; if ( event command data . get plugin info ( ) != null ) { events = event command data . get event listener ( ) . get constructor ( plugin info . class ) . new instance ( event command data . get plugin info ( ) ) ; } else { events = event command data . get event listener ( ) . new instance ( ) ; } if ( ! events . run event handler ( args , configuration ) ) { return bool_ ; } } catch ( exception e ) { throw new connector exception ( e ) ; } } return bool_ ; }
public static boolean equals ( i binding b 1 , i binding b 2 ) { return b 1 . is equal to ( b 2 ) ; }
public list < oozie node > rearrange oozie nodes ( map < string , oozie node > oozie node map ) { this . oozie node map = oozie node map ; add to node ( oozie node map . get ( str_ ) ) ; add to node ( oozie node map . get ( str_ ) ) ; return oozie node list ; }
public void cancel and replace order ( string original order id , trade order new order ) ;
private void write q name ( javax . xml . namespace . q name qname , javax . xml . stream . xml stream writer xml writer ) throws javax . xml . stream . xml stream exception { java . lang . string namespace uri = qname . get namespace uri ( ) ; if ( namespace uri != null ) { java . lang . string prefix = xml writer . get prefix ( namespace uri ) ; if ( prefix == null ) { prefix = generate prefix ( namespace uri ) ; xml writer . write namespace ( prefix , namespace uri ) ; xml writer . set prefix ( prefix , namespace uri ) ; } if ( prefix . trim ( ) . length ( ) > num_ ) { xml writer . write characters ( prefix + str_ + org . apache . axis 2 . databinding . utils . converter util . convert to string ( qname ) ) ; } else { xml writer . write characters ( org . apache . axis 2 . databinding . utils . converter util . convert to string ( qname ) ) ; } } else { xml writer . write characters ( org . apache . axis 2 . databinding . utils . converter util . convert to string ( qname ) ) ; } }
< s > void subscribe with filter only ( final object subscriber , final consumer < ? super s > consumer , final class < s > event type , final object filter ) ;
public static void center ( j dialog frame ) { dimension screen _size = toolkit . get default toolkit ( ) . get screen size ( ) ; frame . set location ( ( int ) ( ( screen _size . get width ( ) - frame . get width ( ) ) / num_ ) , ( int ) ( ( screen _size . get height ( ) - frame . get height ( ) ) / num_ ) ) ; }
private static void create combined trace ( final trace list new trace , final list < trace list > traces , final set < breakpoint address > addresses ) { final set < breakpoint address > visited addresses = new linked hash set < breakpoint address > ( ) ; for ( final trace list trace : traces ) { for ( final i trace event event : trace ) { final breakpoint address address = event . get offset ( ) ; if ( ! addresses . contains ( address ) ) { continue ; } if ( visited addresses . contains ( address ) ) { continue ; } visited addresses . add ( address ) ; new trace . add event ( event ) ; } } }
public video adapter ( context context ) { super ( ) ; m context = context ; }
protected abstract void emit _lastore ( ) ;
public void callback ( double value ) ;
public vector 3f add ( float add x , float add y , float add z ) { return new vector 3f ( x + add x , y + add y , z + add z ) ; }
public static string to string ( int x ) { return to string ( x , num_ ) ; }
private void schedule ( leased resource resource ) { final wakeup manager . ticket ticket = expiration queue . schedule ( resource . get expiration ( ) , new canceler ( resource ) ) ; ticket map . get or add ( resource , ticket ) ; }
public boolean read bit ( ) { return read bits ( num_ ) == num_ ; }
data tag quality clone ( ) throws clone not supported exception ;
protected boolean try again ( ) { if ( ! is cancelled ( ) ) { try { value = request . request ( ) ; time for next request = - num_ ; is done = bool_ ; } catch ( rate limit exception e ) { time for next request = system . current time millis ( ) + e . get retry delay ( ) ; bucket = e . get method ( ) ; } } return is done ( ) || is cancelled ( ) ; }
public void copy location ( location new location ) { new location . set comment ( get comment ( ) ) ; new location . set default printer name ( get default printer name ( ) ) ; new location . set location ops ( get location ops ( ) ) ; new location . set switch list comment ( get switch list comment ( ) ) ; new location . set switch list enabled ( is switch list enabled ( ) ) ; new location . set train directions ( get train directions ( ) ) ; for ( string type : new location . get type names ( ) ) { if ( accepts type name ( type ) ) { continue ; } else { new location . delete type name ( type ) ; } } copy tracks location ( new location ) ; }
void continue pending request if possible ( permission listener listener , thread thread ) { multiple permissions listener to permission listener adapter adapter = new multiple permissions listener to permission listener adapter ( listener ) ; continue pending requests if possible ( adapter , thread ) ; }
public n4 scheme uri based storage ( uri uri , built in scheme registrar scheme helper ) { super ( uri ) ; this . scheme helper = scheme helper ; }
public fade drawable ( drawable [ ] layers ) { super ( layers ) ; preconditions . check state ( layers . length >= num_ , str_ ) ; m layers = layers ; m start alphas = new int [ layers . length ] ; m alphas = new int [ layers . length ] ; m alpha = num_ ; m is layer on = new boolean [ layers . length ] ; m prevent invalidate count = num_ ; reset internal ( ) ; }
public degree scorer ( hypergraph < v , ? > graph ) { this . graph = graph ; }
public future < dlsn > write control record ( final log record record ) { record . set control ( ) ; return write ( record ) ; }
void lock incoming ( ) ;
public static list < foo > to models ( foo soap [ ] soap models ) { if ( soap models == null ) { return null ; } list < foo > models = new array list < foo > ( soap models . length ) ; for ( foo soap soap model : soap models ) { models . add ( to model ( soap model ) ) ; } return models ; }
public string global info ( ) { return str_ + str_ + str_ + str_ + str_ + str_ + str_ + str_ + str_ + str_ + str_ + str_ + get technical information ( ) . to string ( ) ; }
public iterable < divider > dividers that overlap ( final rectangle r ) { if ( r == null ) { throw new illegal argument exception ( str_ ) ; } return dividers that overlap ( get model ( ) , r ) ; }
public bytes reference query source ( ) { return query source ; }
public final int x ( ) { return ( int ) fast math . floor ( position ( ) . get x ( ) ) ; }
public static int to modifier ( int accflags ) { return accflags ; }
public void save ( string type , list < elastic search doc > docs ) { if ( docs != null && ! docs . is empty ( ) ) { list < list < elastic search doc > > partitioned docs = lists . partition ( docs , num_ ) ; partitioned docs . for each ( null ) ; } }
public input venue message content build ( ) { return new input venue message content ( latitude , longitude , title , address , foursquare _id ) ; }
public static s m_ syste m_ message st r_ skil l_ suc c_ switch hpm p_ instant _ m e_ t o_ b ( string skilltarget , string skillname ) { return new s m_ syste m_ message ( num_ , skilltarget , skillname ) ; }
public boolean answer format ( string true string , string false string ) { super ( choice answer style . single choice , new choice < > ( true string , bool_ ) , new choice < > ( false string , bool_ ) ) ; }
public static transfer transaction create transfer ( final account signer ) { return create transfer with attachment ( signer , null ) ; }
public static void main ( string argv [ ] ) { system . out . println ( f version ) ; }
private final int increment ( int a strength , int last value ) { switch ( a strength ) { case collator . primary : last value += primaryorderincrement ; last value &= rb collation tables . primaryordermask ; is over ignore = bool_ ; break ; case collator . secondary : last value += secondaryorderincrement ; last value &= rb collation tables . secondarydifferenceonly ; if ( ! is over ignore ) max sec order ++ ; break ; case collator . tertiary : last value += tertiaryorderincrement ; if ( ! is over ignore ) max ter order ++ ; break ; } return last value ; }
private void show feedback ( string feedback ) { if ( my host != null ) { my host . show feedback ( feedback ) ; } else { system . out . println ( feedback ) ; } }
public string to string ( ) { string pretty text = this . text . replace ( str_ , str_ ) ; return str_ + this . operation + str_ + pretty text + str_ ; }
public void test decrement pending count unless zero ( ) { noop cc a = new noop cc ( null , num_ ) ; assert equals ( num_ , a . get pending count ( ) ) ; assert equals ( num_ , a . decrement pending count unless zero ( ) ) ; assert equals ( num_ , a . get pending count ( ) ) ; assert equals ( num_ , a . decrement pending count unless zero ( ) ) ; assert equals ( num_ , a . get pending count ( ) ) ; assert equals ( num_ , a . decrement pending count unless zero ( ) ) ; assert equals ( num_ , a . get pending count ( ) ) ; a . set pending count ( - num_ ) ; assert equals ( - num_ , a . decrement pending count unless zero ( ) ) ; assert equals ( - num_ , a . get pending count ( ) ) ; }
public i stored list iterator < t > establish list scan ( boolean random _scan ) { if ( ! random _scan ) throw new runtime exception ( str_ ) ; segmented list iterator < t > slh = _ sl holder pool . get ( ) ; segmented list iterator < t > res = establish pos ( slh ) ; if ( res == null ) slh . release ( ) ; return res ; }
public xy series ( comparable key , boolean auto sort ) { this ( key , auto sort , bool_ ) ; }
public boolean intersects ( final s1 interval y ) { if ( is empty ( ) || y . is empty ( ) ) { return bool_ ; } if ( is inverted ( ) ) { return y . is inverted ( ) || y . lo ( ) <= hi ( ) || y . hi ( ) >= lo ( ) ; } else { if ( y . is inverted ( ) ) { return y . lo ( ) <= hi ( ) || y . hi ( ) >= lo ( ) ; } return y . lo ( ) <= hi ( ) && y . hi ( ) >= lo ( ) ; } }
public rel node parse ( string sql ) { sql handler config config = new sql handler config ( planner ) ; sql handler < rel node , string > handler = new enumerable sql handler ( config ) ; return handler . convert ( sql ) ; }
public jc method decl method def ( method symbol m , jc block body ) { return method def ( m , m . type , body ) ; }
protected abstract boolean is ready for pull end ( ) ;
public void $set $ ( reachable reference reference , java . lang . object instance ) ;
public static str matcher trim matcher ( ) { return tri m_ matcher ; }
public static < e > set < e > singleton ( e object ) { return new singleton set < e > ( object ) ; }
public boolean is install started ( ) { return is install started ; }
public boolean is enabled ( ) { return ( m _flags & enable d_ flag ) == enable d_ flag ; }
public static string millis to text ( long millis ) { return strings . millis to string ( millis , bool_ ) ; }
public void subscribe to default perms ( boolean op , permissible permissible ) ;
public static list < writable > sample invalid from column ( int num to sample , string column name , schema schema , java rdd < list < writable > > data ) { return sample invalid from column ( num to sample , column name , schema , data , bool_ ) ; }
public static void main ( string [ ] args ) throws exception { new result file seed merger ( ) . start ( args ) ; }
public void test topic dinamically included behavior ( ) throws exception { start all brokers ( ) ; destination dest = create destination ( str_ , bool_ ) ; message consumer client a = create consumer ( str_ , dest ) ; message consumer client b = create consumer ( str_ , dest ) ; thread . sleep ( num_ * num_ ) ; send messages ( str_ , dest , messag e_ count ) ; message id list msgs a = get consumer messages ( str_ , client a ) ; msgs a . wait for messages to arrive ( messag e_ count ) ; assert equals ( messag e_ count , msgs a . get message count ( ) ) ; message id list msgs b = get consumer messages ( str_ , client b ) ; msgs b . wait for messages to arrive ( messag e_ count ) ; assert equals ( num_ , msgs b . get message count ( ) ) ; }
public static long count ( ) { return hawk facade . count ( ) ; }
private void show feedback ( string message ) { if ( my host != null ) { my host . show feedback ( message ) ; } else { system . out . println ( message ) ; } }
public string [ ] country must match list ( ) { string country must match = get ( crawl attribute . crawle r_ countr y_ mustmatch . key ) ; if ( country must match == null ) country must match = crawl profile . matc h_ neve r_ string ; if ( country must match . is empty ( ) ) return new string [ num_ ] ; string [ ] list = common pattern . comma . split ( country must match ) ; if ( list . length == num_ && list . length == num_ ) list = new string [ num_ ] ; return list ; }
public static frame block convert to frame block ( matrix block mb ) { return convert to frame block ( mb , value type . double ) ; }
public meter plot ( value dataset dataset ) { super ( ) ; this . shape = dial shape . circle ; this . meter angle = defaul t_ mete r_ angle ; this . range = new range ( num_ , num_ ) ; this . tick size = num_ ; this . tick paint = color . white ; this . units = str_ ; this . needle paint = meter plot . defaul t_ needl e_ paint ; this . tick labels visible = bool_ ; this . tick label font = meter plot . defaul t_ labe l_ font ; this . tick label paint = color . black ; this . tick label format = number format . get instance ( ) ; this . value font = meter plot . defaul t_ valu e_ font ; this . value paint = meter plot . defaul t_ valu e_ paint ; this . dial background paint = meter plot . defaul t_ dia l_ backgroun d_ paint ; this . intervals = new java . util . array list ( ) ; set dataset ( dataset ) ; }
public exponential power ( double tau , random engine random generator ) { set random generator ( random generator ) ; set state ( tau ) ; }
public void skip ( ) throws no such element exception { throw if not reset ( ) ; throw if delimiter not set ( ) ; advance ( ) ; }
void out remove notify template ( i replication out context context , notify template holder template holder ) ;
public static void drop table ( database db , boolean if exists ) { string sql = str_ + ( if exists ? str_ : str_ ) + str_ ; db . exec sql ( sql ) ; }
public exponential sawtooth ( type units ) { super ( units ) ; }
void remove all ( ) ;
public static void main ( final string [ ] args ) throws exception { if ( args . length != num_ ) { system . err . println ( string . format ( str_ , cloud monitoring auth sample . class . get simple name ( ) ) ) ; return ; } string project = args [ num_ ] ; cloud monitoring cloudmonitoring = authenticate ( ) ; cloud monitoring . timeseries . list timeseries list request = cloudmonitoring . timeseries ( ) . list ( project , metric , youngest ) ; system . out . println ( str_ ) ; system . out . println ( timeseries list request . execute ( ) . to pretty string ( ) ) ; }
public static string init cap ( string in ) { if ( in == null || in . length ( ) == num_ ) return in ; boolean capitalize = bool_ ; char [ ] data = in . to char array ( ) ; for ( int i = num_ ; i < data . length ; i ++ ) { if ( data [ i ] == str_ || character . is whitespace ( data [ i ] ) ) capitalize = bool_ ; else if ( capitalize ) { data [ i ] = character . to upper case ( data [ i ] ) ; capitalize = bool_ ; } else data [ i ] = character . to lower case ( data [ i ] ) ; } return new string ( data ) ; }
public static list < type > map ( list < type > ts , mapping f ) { if ( ts . non empty ( ) ) { list < type > tail 1 = map ( ts . tail , f ) ; type t = f . apply ( ts . head ) ; if ( tail 1 != ts . tail || t != ts . head ) return tail 1 . prepend ( t ) ; } return ts ; }
public static long max memory ( ) { return num_ ; }
public static aggregate < map < string , concept > , optional < ? > > max ( string var name ) { return aggregates . max ( var name ) ; }
public abstract t read blob ( blob container blob container , string blob name ) throws io exception ;
public filename utils ( ) { super ( ) ; }
public final instruction make goto ( ) { return goto . create ( goto , make jump target ( ) ) ; }
public com . sun . identity . liberty . ws . idpp . jaxb . l legal name element create l legal name element ( ) throws javax . xml . bind . jaxb exception { return new com . sun . identity . liberty . ws . idpp . jaxb . impl . l legal name element impl ( ) ; }
private void update progress ( int progress ) { if ( my host != null && progress != previous progress ) { my host . update progress ( progress ) ; } previous progress = progress ; }
private void write object ( object output stream s ) throws io exception { s . default write object ( ) ; attribute [ ] attrs = to array ( ) ; s . write int ( attrs . length ) ; for ( int i = num_ ; i < attrs . length ; i ++ ) { s . write object ( attrs [ i ] ) ; } }
public synchronized long size ( ) { return size ; }
public int rewind ( int n ) { pos -= n ; return pos ; }
private void initialize screen ( view root view ) { m list view = ( list view ) root view . find view by id ( r . id . list _view _active _lists ) ; }
value convert ( ) ;
private static string exception to string ( throwable e ) { string writer string writer = new string writer ( ) ; print writer writer = new print writer ( string writer ) ; e . print stack trace ( writer ) ; return string writer . to string ( ) ; }
public boolean is erroneous ( ) { return erroneous ; }
public void reset ( ) { m provider = null ; m time = num_ ; m elapsed realtime nanos = num_ ; m latitude = num_ ; m longitude = num_ ; m has altitude = bool_ ; m altitude = num_ ; m has speed = bool_ ; m speed = num_ ; m has bearing = bool_ ; m bearing = num_ ; m has accuracy = bool_ ; m accuracy = num_ ; m extras = null ; m is from mock provider = bool_ ; }
public void append package fragment root label ( i package fragment root root , long flags ) { if ( get flag ( flags , roo t_ variable ) && append variable label ( root , flags ) ) return ; if ( root . is archive ( ) ) append archive label ( root , flags ) ; else append folder label ( root , flags ) ; }
public void add listener ( configuration listener l ) { service listeners . add ( pair . < configuration listener , predicate < string > > of ( l , null ) ) ; }
int find ( long key ) { int l = num_ , r = entry count ; while ( l < r ) { int i = ( l + r ) > > > num_ ; long k = keys [ i ] ; if ( k == key ) { return i ; } else if ( k > key ) { r = i ; } else { l = i + num_ ; } } return l ; }
public void loading started ( ) { m load tracker . loading started ( ) ; }
private void read object ( java . io . object input stream s ) throws java . io . io exception , class not found exception { try { s . default read object ( ) ; this . queue = new object [ q . size ( ) ] ; comparator = q . comparator ( ) ; add all ( q ) ; } finally { q = null ; } }
private void create distributed system ( ) throws exception { properties ds props = new properties ( ) ; if ( system . get property ( distribution config . gemfir e_ prefix + mcas t_ port ) == null && system . get property ( distribution config . gemfir e_ prefix + locators ) == null ) { ds props . put ( mcas t_ port , str_ ) ; } ds props . put ( lo g_ file , str_ ) ; if ( this . cache xml file != null ) { ds props . put ( cach e_ xm l_ file , this . cache xml file . get name ( ) ) ; } this . distributed system = distributed system . connect ( ds props ) ; }
private void return data ( object ret ) { if ( my host != null ) { my host . return data ( ret ) ; } }
public observable < string > exercise filter map ( observable < integer > nums ) { return observable . error ( new runtime exception ( str_ ) ) ; }
public void send acknowledgement ( ) throws io exception { if ( is committed ( ) ) { return ; } if ( included ) { return ; } get coyote response ( ) . action ( action code . ack , null ) ; }
public int read current ( ) ;
private void enable super dev mode selection ( i launch configuration working copy configuration ) { gwt sdk sdk = null ; try { sdk = gwt sdk . find sdk for ( get java project ( ) ) ; } catch ( core exception e ) { selection block . set visible ( bool_ ) ; } string version = sdk . get version ( ) ; if ( can sdk version use super dev mode ( version ) ) { selection block . set visible ( bool_ ) ; } else { selection block . set visible ( bool_ ) ; gwt launch configuration working copy . set super dev mode enabled ( configuration , bool_ ) ; } if ( development mode block != null ) { development mode block . set title ( ) ; } }
public json request params ( object params ) { if ( params == null ) return ; if ( params instanceof map < ? , ? > ) { url params with objects . put all ( ( map < string , object > ) params ) ; } else { this . m criteria = params ; } }
public static boolean is _system ( soot method m ) { project p = project . v ( ) ; soot class c = m . get declaring class ( ) ; return ! p . is src class ( c ) && ! p . is lib class ( c ) ; }
public io buffer buf ( ) { return this . buf ; }
public abstract void close ( ) throws io exception ;
private double distance d1 ( double [ ] f , double [ ] w ) { double dn = norm vector ( w ) ; for ( int j = num_ ; j < problem . get number of objectives ( ) ; j ++ ) { w [ j ] = w [ j ] / dn ; } return innerproduct ( f , w ) ; }
public event 3 5 id . builder clear first ( ) { first = null ; field set flags ( ) [ num_ ] = bool_ ; return this ; }
public abstract void map ( import folder selected path , string local path , import options import options ) ;
public void detach ( ) { super . detach ( ) ; if ( m _can detach nodeset ) { m _expr obj . detach ( ) ; } m _expr obj = null ; }
public static boolean is any variable ( string key ) { if ( string utils . is blank ( key ) ) { return bool_ ; } if ( key . char at ( num_ ) == identifier char ) { return bool_ ; } if ( key . index of ( str_ ) == num_ && key . index of ( str_ ) == key . length ( ) - num_ ) { return bool_ ; } return bool_ ; }
protected void clear out events ( ) { }
public boolean intersects viewport ( viewport viewport ) { if ( viewport == null ) { throw new illegal argument exception ( logger . log message ( logger . error , str_ , str_ , str_ ) ) ; } return this . viewport . intersects ( viewport ) ; }
public stroke action ( ) { super ( ) ; }
public void post stop ( ) { }
private static void print ( string msg , iterable < ? > col ) { print ( msg ) ; print ( col ) ; }
public void execute ( transformer impl transformer ) throws transformer exception { variable stack vars = transformer . get x path context ( ) . get var stack ( ) ; if ( ! vars . is local set ( m _index ) ) { int source node = transformer . get x path context ( ) . get current node ( ) ; x object var = get value ( transformer , source node ) ; transformer . get x path context ( ) . get var stack ( ) . set local variable ( m _index , var ) ; } }
static boolean is system windows ( ) { return syste m_ separator == window s_ separator ; }
public void event dispatched ( awt event event ) { object source = event . get source ( ) ; if ( event instanceof key event && source instanceof component ) { if ( ( swing utilities . window for component ( ( component ) source ) == _window ) ) { ( ( key event ) event ) . consume ( ) ; } } }
public class < ? > for class ( ) { return resolved class ; }
public static native long new notification adapter ( property change listener listener ) ;
public boolean is set ( _ fields field ) { if ( field == null ) { throw new illegal argument exception ( ) ; } switch ( field ) { case packet : return is set packet ( ) ; } throw new illegal state exception ( ) ; }
void after batch ( ) ;
public x object operate ( x object left , x object right ) throws javax . xml . transform . transformer exception { return new x number ( left . num ( ) - right . num ( ) ) ; }
public material tooltip ( final widget w ) { set widget ( w ) ; }
public gpu image 3x 3 convolution filter ( final float [ ] convolution kernel ) { super ( thre e_ x_ thre e_ textur e_ samplin g_ fragmen t_ shader ) ; m convolution kernel = convolution kernel ; }
public static boolean bernoulli ( ) { return bernoulli ( num_ ) ; }
public boolean is centrally maintained ( ) ;
private void destroy notification ( int notification id ) { if ( does notification exist ( notification id ) ) { m notification manager . cancel ( notificatio n_ namespace , notification id ) ; m notifications . delete ( notification id ) ; update shared preferences entry ( notification id , bool_ ) ; } }
public void title updated ( title updated event event ) { if ( property dialog . get parent dialog ( scripting panel . this ) != null ) property dialog . get parent dialog ( scripting panel . this ) . set title ( get title ( ) ) ; else if ( property dialog . get parent frame ( scripting panel . this ) != null ) property dialog . get parent frame ( scripting panel . this ) . set title ( get title ( ) ) ; }
protected hash attribute set ( class < ? > interface name ) { if ( interface name == null ) { throw new null pointer exception ( str_ ) ; } my interface = interface name ; }
public void action performed ( action event e ) { j text component target = get text component ( e ) ; if ( target != null ) { document doc = target . get document ( ) ; target . set caret position ( num_ ) ; target . move caret position ( doc . get length ( ) ) ; } }
public static double angle ( tuple 3d a , tuple 3d b ) { double dx = b . x - a . x ; double dy = b . y - a . y ; double angle = num_ ; if ( dx == num_ ) { if ( dy == num_ ) angle = num_ ; else if ( dy > num_ ) angle = math . pi / num_ ; else angle = ( math . pi * num_ ) / num_ ; } else if ( dy == num_ ) { if ( dx > num_ ) angle = num_ ; else angle = math . pi ; } else { if ( dx < num_ ) angle = math . atan ( dy / dx ) + math . pi ; else if ( dy < num_ ) angle = math . atan ( dy / dx ) + ( num_ * math . pi ) ; else angle = math . atan ( dy / dx ) ; } return angle ; }
private synchronized void user has joined ( ) { list < string > rooms = joined rooms . get ( connection ) ; if ( rooms == null ) { rooms = new array list < string > ( ) ; joined rooms . put ( connection , rooms ) ; } rooms . add ( room ) ; }
public string use tabs tip text ( ) { return str_ ; }
public printer message from operator ( string message , locale locale ) { super ( message , locale ) ; }
public uri ( string p _scheme , string p _scheme specific part ) throws malformed uri exception { if ( p _scheme == null || p _scheme . trim ( ) . length ( ) == num_ ) { throw new malformed uri exception ( str_ ) ; } if ( p _scheme specific part == null || p _scheme specific part . trim ( ) . length ( ) == num_ ) { throw new malformed uri exception ( str_ ) ; } set scheme ( p _scheme ) ; set path ( p _scheme specific part ) ; }
public boolean is transaction input mine ( transaction input transaction input , wallet wallet ) { try { byte [ ] pubkey = transaction input . get script sig ( ) . get pub key ( ) ; return wallet . is pub key mine ( pubkey ) ; } catch ( script exception e ) { return bool_ ; } }
public vm scheduler space shared ( list < ? extends pe > pelist ) { super ( pelist ) ; set pe allocation map ( new hash map < string , list < pe > > ( ) ) ; set free pes ( new array list < pe > ( ) ) ; get free pes ( ) . add all ( pelist ) ; }
public communication exception ( ) { super ( ) ; }
public static can jaguar can jaguar ( int can id ) { return can registrar . fetch ( can id , can jaguar . class , null ) ; }
public type < ? > resolve property type ( method read method , class < ? > raw type , class < ? > owning type , type < ? > reference type ) { raw type = resolve raw property type ( raw type , read method ) ; type < ? > resolved generic type = null ; if ( reference type . is parameterized ( ) || has type parameters ( owning type ) || has type parameters ( raw type ) ) { if ( read method != null ) { try { resolved generic type = resolve generic type ( read method . get declaring class ( ) . get declared method ( read method . get name ( ) , new class [ num_ ] ) . get generic return type ( ) , owning type , reference type ) ; } catch ( no such method exception e ) { throw new illegal state exception ( str_ , e ) ; } } } if ( resolved generic type == null || resolved generic type . is assignable from ( raw type ) ) { resolved generic type = type factory . value of ( raw type ) ; } return resolved generic type ; }
public static < s > s from spec ( string spec , final class < s > type , final string [ ] packages , final string [ ] factory method ) throws illegal argument exception , class not found exception , illegal access exception , invocation target exception , instantiation exception , no such method exception { return from spec ( n o_ context , spec , type , packages , factory method ) ; }
protected sql exception show usage and throw unsupported option ( string option ) throws sql exception { show usage ( ) ; throw throw unsupported option ( option ) ; }
public static object invoke method ( method method , object target , object [ ] args ) throws throwable { try { return method . invoke ( target , args ) ; } catch ( invocation target exception e ) { throw e . get cause ( ) ; } }
private void update progress ( int progress ) { if ( my host != null && progress != previous progress ) { my host . update progress ( progress ) ; } previous progress = progress ; }
public void create structure ( ) { m p3 file . get structure formatter ( ) . open heading element ( typ e_ frame , get identifier ( ) ) ; m p3 file . get structure formatter ( ) . close heading element ( typ e_ frame ) ; }
public authentication exception ( string message , throwable cause ) { super ( message , cause ) ; }
public boolean on scroll changed ( int x , int y ) { long event time = system clock . uptime millis ( ) ; boolean should dispatch = event time - m last scroll event time ms > mi n_ even t_ separatio n_ ms || m prev x != x || m prev y != y ; m last scroll event time ms = event time ; m prev x = x ; m prev y = y ; return should dispatch ; }
public static array based escaper map create ( map < character , string > replacements ) { return new array based escaper map ( create replacement array ( replacements ) ) ; }
public void sync ( ) { if ( get pipelined response length ( ) > num_ ) { list < object > unformatted = client . get many ( get pipelined response length ( ) ) ; for ( object o : unformatted ) { generate response ( o ) ; } } }
public connection config ( jmri . jmrix . network port adapter p ) { super ( p ) ; }
protected void deflate ( ) throws io exception { int byte count ; while ( ( byte count = def . deflate ( buf ) ) != num_ ) { out . write ( buf , num_ , byte count ) ; } }
public void increment access count ( ) { if ( is primitive ( ) ) { return ; } if ( ( this . access date != null ) && ( ( system . current time millis ( ) - this . access date . get time ( ) ) < ( num_ * utils . hour ) ) ) { return ; } set access date ( new date ( ) ) ; set access count ( this . access count + num_ ) ; }
public static date min ( final date ... t ) { ql . require ( t != null , str_ ) ; if ( t . length == num_ ) return new date ( ) ; else { date min = t [ num_ ] ; for ( int i = num_ ; i < t . length ; i ++ ) { final date curr = t [ i ] ; if ( curr . lt ( min ) ) { min = curr ; } } return min ; } }
public boolean play ( ) { return native _play jet ( ) ; }
public local new local ( string name , type t ) { return new jimple local ( name , t ) ; }
public void handle re invite response ( invitation status code , sip response response , int request type ) { }
public void finish decode ( io session session , protocol decoder output out ) throws exception { }
public and predicate ( predicate p 1 ) { add ( p 1 ) ; }
public void update ( ) { steps done ++ ; int new state = ( int ) ( num_ * steps done / number of steps ) ; if ( new state > num_ ) new state = num_ ; while ( new state > percent ) { percent ++ ; system . out . print ( str_ ) ; } if ( new state == num_ && ! is finished ) { system . out . println ( str_ ) ; is finished = boolean . true ; } }
public void on message ( web socket conn , byte buffer message ) { }
public string parse dtd markup ( ) throws io exception { string builder str buff = new string builder ( ) ; ch = read ch ( ) ; while ( bool_ ) { switch ( ch ) { case str_ : ch = read ch ( ) ; return str buff . to string ( ) ; case - num_ : error ( str_ ) ; return str buff . to string ( ) ; case str_ : ln ++ ; ch = read ch ( ) ; lf count ++ ; break ; case str_ : ch = read ch ( ) ; break ; case str_ : ln ++ ; if ( ( ch = read ch ( ) ) == str_ ) { ch = read ch ( ) ; crlf count ++ ; } else { cr count ++ ; } break ; default : str buff . append ( ( char ) ( ch & num_ ) ) ; ch = read ch ( ) ; break ; } } }
void log message ( string message ) ;
private query builder query for string ( string field , string term ) { if ( term . contains ( str_ ) || term . contains ( str_ ) ) { return query builders . wildcard query ( field , term . replace all ( str_ , str_ ) . replace all ( str_ , str_ ) ) ; } else if ( term . contains ( str_ ) ) { return query builders . match phrase query ( field , term ) ; } else return query builders . term query ( field , term ) ; }
void add input ( string name , map < string , object > elements ) ;
void unregister ( ) throws illegal state exception ;
private void validate column ( column new column ) { preconditions . check not null ( new column , str_ + name ) ; list < string > string list = new array list < > ( ) ; for ( string name : column names ( ) ) { string list . add ( name . to lower case ( ) ) ; } if ( string list . contains ( new column . name ( ) . to lower case ( ) ) ) { string message = string . format ( str_ , new column , name ) ; throw new runtime exception ( message ) ; } }
public static string [ ] read strings ( string filename ) { return new in ( filename ) . read all strings ( ) ; }
public static void print array ( int [ ] arr ) { system . out . print ( str_ ) ; for ( int j = num_ ; j < ( arr . length - num_ ) ; j ++ ) { system . out . print ( arr [ j ] + str_ ) ; } if ( arr . length > num_ ) { system . out . print ( arr [ arr . length - num_ ] ) ; } system . out . println ( str_ ) ; }
public boolean show title ( ) { return show title ; }
protected void preprocess ( ) throws exception { }
public void stop ( ) { m running = bool_ ; m stop = bool_ ; }
public object [ ] parse ( string string ) throws parse exception { parse position position = new parse position ( num_ ) ; object [ ] result = parse ( string , position ) ; if ( position . get index ( ) == num_ ) { throw new parse exception ( str_ , position . get error index ( ) ) ; } return result ; }
private void init context ( ) { if ( context . get current context ( ) == null ) { context . enter ( ) ; } }
public tree ( int root , int [ ] parent , list < integer > search order ) { this . root = root ; this . parent = parent ; this . search order = search order ; }
void reset viewable area ( ) ;
int reference kind ( ) { return lambda to method . this . reference kind ( needs bridge ( ) ? bridge sym : tree . sym ) ; }
public void prepare matrix value px ( float x chart min , float delta x , float delta y , float y chart min ) { float scale x = m view port handler . content width ( ) / delta x ; float scale y = m view port handler . content height ( ) / delta y ; if ( float . is infinite ( scale x ) ) scale x = num_ ; if ( float . is infinite ( scale y ) ) scale y = num_ ; m matrix value to px . reset ( ) ; m matrix value to px . post translate ( - x chart min , - y chart min ) ; m matrix value to px . post scale ( scale x , - scale y ) ; }
public block [ ] basic blocks ( ) { return basic blocks ; }
public static string replace illegal character ( final string text , final char replacement ) { final string builder r val = new string builder ( ) ; for ( int i = num_ ; i < text . length ( ) ; ++ i ) { if ( ! is illegal file name char ( text . char at ( i ) ) ) { r val . append ( text . char at ( i ) ) ; } else { r val . append ( replacement ) ; } } return r val . to string ( ) ; }
void on mouse out ( basic panel panel , box box ) ;
private void load profile ( string user id , string name ) { final intent user profile intent = new intent ( get activity ( ) , user profile activity . class ) ; user profile intent . put extra ( app constants . keys . use r_ id , user id ) ; user profile intent . put extra ( app constants . keys . use r_ name , name ) ; user profile intent . put extra ( app constants . keys . servic e_ scree n_ type , app constants . service screen type . profile ) ; start activity ( user profile intent ) ; }
public measurement convert ( reading r , point 3d guess ) { this . xt = guess . x ; this . yt = guess . y ; this . zt = guess . z ; return convert ( r ) ; }
public void load data ( ) throws core exception { tlc output source registry model check source registry = tlc output source registry . get model check source registry ( ) ; tlc model launch data provider provider = model check source registry . get provider ( get model ( ) ) ; if ( provider != null ) { provider . set presenter ( this ) ; } else { reinit ( ) ; } expression eval input . set document ( new document ( get model ( ) . get eval expression ( ) ) ) ; }
public protocol version ( string protocol , int major , int minor ) { if ( protocol == null ) { throw new illegal argument exception ( str_ ) ; } if ( major < num_ ) { throw new illegal argument exception ( str_ ) ; } if ( minor < num_ ) { throw new illegal argument exception ( str_ ) ; } this . protocol = protocol ; this . major = major ; this . minor = minor ; }
public boolean yield if contended safely ( ) { return bool_ ; }
public boolean is set header ( ) { return this . header != null ; }
public static er throwable from throwable proxy ( throwable proxy tp ) { if ( tp == null ) { return null ; } er throwable ert = new er throwable ( ) ; ert . set detail message ( tp . get message ( ) ) ; extended stack trace element [ ] est = tp . get extended stack trace ( ) ; er stack trace element [ ] er stack trace elements = new er stack trace element [ est . length ] ; for ( int i = num_ ; i < est . length ; i ++ ) { er stack trace elements [ i ] = er stack trace element . from extended stack trace element ( est [ i ] ) ; } ert . set stack trace elements ( er stack trace elements ) ; return ert ; }
public directed path ( iterable < ? extends position > positions ) { super ( positions ) ; }
public void test remaining options ( ) { if ( ! m _ option tester . check remaining options ( ) ) { fail ( str_ ) ; } }
public void add ( e value ) { entry entry = new entry < > ( value , string . value of ( value ) ) ; add item ( entry ) ; }
public void on status message changed ( int message id ) ;
public double [ ] to euler angles ( ) { double [ ] ret = new double [ num_ ] ; ret [ num_ ] = math . atan 2 ( num_ * points [ num_ ] * get w ( ) - num_ * points [ num_ ] * points [ num_ ] , num_ - num_ * ( points [ num_ ] * points [ num_ ] ) - num_ * ( points [ num_ ] * points [ num_ ] ) ) ; ret [ num_ ] = math . asin ( num_ * points [ num_ ] * points [ num_ ] + num_ * points [ num_ ] * get w ( ) ) ; ret [ num_ ] = math . atan 2 ( num_ * points [ num_ ] * get w ( ) - num_ * points [ num_ ] * points [ num_ ] , num_ - num_ * ( points [ num_ ] * points [ num_ ] ) - num_ * ( points [ num_ ] * points [ num_ ] ) ) ; return ret ; }
public long write lock ( ) { long s , next ; return ( ( ( ( s = state ) & abits ) == num_ && u . compare and swap long ( this , state , s , next = s + wbit ) ) ? next : acquire write ( bool_ , num_ ) ) ; }
public boolean process socket ( socket wrapper base < s > socket wrapper , socket event event , boolean dispatch ) { try { if ( socket wrapper == null ) { return bool_ ; } socket processor base < s > sc = processor cache . pop ( ) ; if ( sc == null ) { sc = create socket processor ( socket wrapper , event ) ; } else { sc . reset ( socket wrapper , event ) ; } executor executor = get executor ( ) ; if ( dispatch && executor != null ) { executor . execute ( sc ) ; } else { sc . run ( ) ; } } catch ( rejected execution exception ree ) { get log ( ) . warn ( sm . get string ( str_ , socket wrapper ) , ree ) ; return bool_ ; } catch ( throwable t ) { exception utils . handle throwable ( t ) ; get log ( ) . error ( sm . get string ( str_ ) , t ) ; return bool_ ; } return bool_ ; }
public static vector < oc file > sort oc folder ( vector < oc file > files ) { switch ( m sort order ) { case num_ : files = file storage utils . sort oc files by name ( files ) ; break ; case num_ : files = file storage utils . sort oc files by date ( files ) ; break ; case num_ : files = file storage utils . sort oc files by size ( files ) ; break ; } files = file storage utils . sort oc files by favourite ( files ) ; return files ; }
public boolean is check required for group ( final string group name ) { not null ( group name ) ; return current hash == null ; }
public likes get list query ( vk api client client , user actor actor , likes type type ) { super ( client , str_ , get list response . class ) ; access token ( actor . get access token ( ) ) ; type ( type ) ; }
union 5 < first , second , third , fourth , fifth > third ( third value ) ;
public void add cookie ( string name , string value ) ;
public void test declaring parameter entities ( ) throws exception { string xml = str_ + str_ + str_ ; xml pull parser parser = new pull parser ( xml ) ; while ( parser . next ( ) != xml pull parser . en d_ document ) { } }
public locator state wait on locator ( ) { throwable t = null ; try { assert get locator ( ) != null : str_ ; debug ( str_ , get id ( ) ) ; get locator ( ) . wait to stop ( ) ; } catch ( interrupted exception e ) { thread . current thread ( ) . interrupt ( ) ; t = e ; debug ( e ) ; } catch ( runtime exception e ) { t = e ; throw e ; } catch ( throwable e ) { t = e ; throw e ; } finally { fail on start ( t ) ; } return new locator state ( this , status . stopped ) ; }
public static void downsample ( mat img , double scale ) { imgproc . pyr down ( img , img , new size ( ( double ) img . width ( ) / scale , ( double ) img . height ( ) / scale ) ) ; }
public abstract void destroy ( ) ;
public void on restore instance state ( bundle saved instance state ) { selected items = saved instance state . get integer array list ( tag ) ; }
public static string to char ( byte b ) { if ( b >= num_ ) { return character . to string ( ( char ) b ) ; } else { return string . format ( str_ , b ) ; } }
public list < string > read all parameters ( final error drain errors ) { final list < string > params = new vector < string > ( ) ; do { skip whitespace ( ) ; final string param = get next parameter ( errors ) ; if ( param == null ) { break ; } params . add ( param ) ; } while ( ! errors . has error ( ) ) ; return params ; }
public boolean is editable ( ) { return editable ; }
public reverse adapter factory content provider ( adapter factory adapter factory ) { super ( adapter factory ) ; }
public void init $ children ( ) { }
public static void verify output against file ( output analyzer output ) throws io exception { string test src = system . get property ( str_ , str_ ) ; file file = new file ( test src , str_ ) ; list < string > file output = utils . file as list ( file ) ; list < string > output as lines = output . as lines ( ) ; assert true ( output as lines . contains all ( file output ) , str_ + file . get absolute path ( ) ) ; }
private fast math literal arrays ( ) { }
public eq io exception ( final string descr ) { super ( descr ) ; }
public am search results search groups ( string wildcard , map av pairs , am search control search control ) throws am exception , sso exception ;
public e put ( int key , e value ) { if ( value == null ) { throw new null pointer exception ( ) ; } final e prev ; if ( key < array . length ) { prev = ( e ) array [ key ] ; } else { array = arrays . copy of ( array , key * num_ / num_ + num_ ) ; prev = null ; size ++ ; } array [ key ] = value ; return prev ; }
private void write q name ( javax . xml . namespace . q name qname , javax . xml . stream . xml stream writer xml writer ) throws javax . xml . stream . xml stream exception { java . lang . string namespace uri = qname . get namespace uri ( ) ; if ( namespace uri != null ) { java . lang . string prefix = xml writer . get prefix ( namespace uri ) ; if ( prefix == null ) { prefix = generate prefix ( namespace uri ) ; xml writer . write namespace ( prefix , namespace uri ) ; xml writer . set prefix ( prefix , namespace uri ) ; } if ( prefix . trim ( ) . length ( ) > num_ ) { xml writer . write characters ( prefix + str_ + org . apache . axis 2 . databinding . utils . converter util . convert to string ( qname ) ) ; } else { xml writer . write characters ( org . apache . axis 2 . databinding . utils . converter util . convert to string ( qname ) ) ; } } else { xml writer . write characters ( org . apache . axis 2 . databinding . utils . converter util . convert to string ( qname ) ) ; } }
public generic principal ( string name , string password , list < string > roles , principal user principal ) { this ( name , password , roles , user principal , null ) ; }
public object run safely ( catbert . fast stack stack ) throws exception { return ( ( agent ) stack . pop ( ) ) . get pr ( ) ; }
public boolean is set messages ( ) { return this . messages != null ; }
public static string read content ( string source ) throws io exception { byte array output stream output stream = new byte array output stream ( ) ; try ( input stream input stream = test utils . class . get resource as stream ( source ) ) { copy ( input stream , output stream ) ; } return output stream . to string ( charset . for name ( str_ ) . name ( ) ) ; }
public static flexible space with image fragment new instance ( ) { return new flexible space with image fragment ( ) ; }
public void assert subtype ( type s , type t , boolean expected ) { if ( types . is subtype ( s , t ) != expected ) { string msg = expected ? str_ : str_ ; error ( s + msg + t ) ; } }
void clear command page container ( ) ;
private void unpark successor ( node node ) { int ws = node . wait status ; if ( ws < num_ ) compare and set wait status ( node , ws , num_ ) ; node s = node . next ; if ( s == null || s . wait status > num_ ) { s = null ; for ( node t = tail ; t != null && t != node ; t = t . prev ) if ( t . wait status <= num_ ) s = t ; } if ( s != null ) lock support . unpark ( s . thread ) ; }
protected boolean is valid serialized type ( metadata class cls ) { if ( cls . is primitive ( ) ) { return bool_ ; } if ( is primitive wrapper class ( cls ) ) { return bool_ ; } if ( lob metadata . is valid lob type ( cls ) ) { return bool_ ; } if ( temporal metadata . is valid temporal type ( cls ) ) { return bool_ ; } return bool_ ; }
public void read write ( ) ;
int array length ( ) { return m array . length ; }
public result ( query query , long countdown ) { super ( query . get id ( ) ) ; set query ( query ) ; set countdown ( countdown ) ; }
public sub category axis ( string label ) { super ( label ) ; this . sub categories = new java . util . array list ( ) ; }
public forwarding drawable ( drawable drawable ) { m current delegate = drawable ; drawable utils . set callbacks ( m current delegate , this , this ) ; }
public static boolean is running ( j component c ) { return shared instance . _is running ( c ) ; }
public x object execute ( x path context xctxt ) throws javax . xml . transform . transformer exception { string buffer sb = new string buffer ( ) ; sb . append ( m _arg 0 . execute ( xctxt ) . str ( ) ) ; sb . append ( m _arg 1 . execute ( xctxt ) . str ( ) ) ; if ( null != m _arg 2 ) sb . append ( m _arg 2 . execute ( xctxt ) . str ( ) ) ; if ( null != m _args ) { for ( int i = num_ ; i < m _args . length ; i ++ ) { sb . append ( m _args [ i ] . execute ( xctxt ) . str ( ) ) ; } } return new x string ( sb . to string ( ) ) ; }
public static string encrypt ( string input ) { if ( encryption service == null || input == null || input . length ( ) == num_ ) { return input ; } return encryptio n_ prefix + encryption service . encrypt ( input ) ; }
void put object ( int offset , native object ob ) { switch ( address size ( ) ) { case num_ : put long ( offset , ob . address ) ; break ; case num_ : put int ( offset , ( int ) ( ob . address & num_ ) ) ; break ; default : throw new internal error ( str_ ) ; } }
private boolean is touch point in view ( view view , int x , int y ) { int [ ] location = new int [ num_ ] ; view . get location on screen ( location ) ; int left = location [ num_ ] ; int top = location [ num_ ] ; int right = left + view . get measured width ( ) ; int bottom = top + view . get measured height ( ) ; if ( view . is clickable ( ) && y >= top && y <= bottom && x >= left && x <= right ) { return bool_ ; } return bool_ ; }
public static short parse marker coordinate system ( element e , string attr , string coordinate system , bridge context ctx ) { if ( sv g_ use r_ spac e_ o n_ us e_ value . equals ( coordinate system ) ) { return use r_ spac e_ o n_ use ; } else if ( sv g_ strok e_ widt h_ value . equals ( coordinate system ) ) { return strok e_ width ; } else { throw new bridge exception ( ctx , e , er r_ attribut e_ valu e_ malformed , new object [ ] { attr , coordinate system } ) ; } }
void parse ( element element , t t ) ;
public static int expand roman ( string roman ) { int value = num_ ; for ( int p = num_ ; p < roman . length ( ) ; p ++ ) { char c = roman . char at ( p ) ; if ( c == str_ ) { value += num_ ; } else if ( c == str_ ) { value += num_ ; } else if ( c == str_ ) { if ( p + num_ < roman . length ( ) ) { char p 1 = roman . char at ( p + num_ ) ; if ( p 1 == str_ ) { value += num_ ; p ++ ; } else if ( p 1 == str_ ) { value += num_ ; p ++ ; } else { value += num_ ; } } else { value += num_ ; } } } return value ; }
public void write ( pipeline jedis , boolean replace ) ;
public xml filter new xml filter ( templates templates ) throws transformer configuration exception { try { return new tr ax filter ( templates ) ; } catch ( transformer configuration exception ex ) { if ( m _error listener != null ) { try { m _error listener . fatal error ( ex ) ; return null ; } catch ( transformer configuration exception ex 1 ) { throw ex 1 ; } catch ( transformer exception ex 1 ) { throw new transformer configuration exception ( ex 1 ) ; } } throw ex ; } }
boolean is compression active ( ) ;
public wood ( tree species species ) { this ( defaul t_ type , species ) ; }
void validate ( ) throws dss exception ;
public d system information ( j frame parent ) { super ( parent , res . get string ( str_ ) , modality type . documen t_ modal ) ; init components ( ) ; }
public audio data ( ) { this ( io buffer . allocate ( num_ ) . flip ( ) ) ; }
public boolean check valid generic type ( type t ) { return first incompatible type arg ( t ) == null ; }
public void change cursor ( squid cursor < ? extends t > new cursor ) { squid cursor < ? extends t > old cursor = swap cursor ( new cursor ) ; if ( old cursor != null ) { old cursor . close ( ) ; } }
public void init ( ) { if ( ! initialized ) { register delegate registration handler ( ) ; load stored delegates ( ) ; } initialized = bool_ ; }
public boolean remove all ( collection < ? > collection ) ;
public menu item add ( int title res ) ;
public storage group policy limits param create storage group policy limits param ( collection < volume urihlu > volume uri hl us , storage system storage , db client db client ) { storage group policy limits param policy quota = new storage group policy limits param ( constants . none ) ; for ( volume urihlu volume uri hlu : volume uri hl us ) { string policy name = null ; if ( storage . check if vmax 3 ( ) ) { policy name = get vma x3 fast setting for volume ( volume uri hlu . get volume uri ( ) , volume uri hlu . get auto tier policy name ( ) ) ; } else { policy name = volume uri hlu . get auto tier policy name ( ) ; } policy quota = new storage group policy limits param ( policy name , volume uri hlu . get host io limit bandwidth ( ) , volume uri hlu . get host io limit io ps ( ) , storage ) ; break ; } return policy quota ; }
public boolean is up ( ) throws socket exception { return has flag ( if f_ up ) ; }
public ns date ( date d ) { if ( d == null ) throw new illegal argument exception ( str_ ) ; date = d ; }
public void test load search results _hides spinner when requested ( ) { m controller . load search results ( bool_ ) ; verify ( m fragment mock ui , times ( num_ ) ) . show spinner ( bool_ ) ; }
public sft pv 3 client ( connection conn ) throws io exception { this ( conn , null ) ; }
public currency indicator ( string file , boolean gzip ) throws io exception , uri syntax exception { this . file = file ; this . gzip = gzip ; this . currency list file = null ; }
final boolean is open ( ) { return ! closed ; }
public log configuration exception ( string message , throwable cause ) { super ( message + str_ + cause + str_ ) ; this . cause = cause ; }
public void generate sql drop schema file ( file output file ) ;
multimap < k , v > new empty ( ) ;
private void warmup miss ( ) { hot ( ) ; move to stack top ( ) ; }
public boolean has comments ( ) { return has extension ( comments . class ) ; }
public final int yystate ( ) { return zz lexical state ; }
public static writable double data store make double storage ( dbi ds ids , int hints , double def ) { return data store factory . factory . make double storage ( ids , hints , def ) ; }
public boolean is radial ( ) { return radial ; }
generic result waiter run async wait ( string service name , map < string , ? extends object > context ) throws service auth exception , service validation exception , generic service exception ;
public tag field create linked artwork field ( string url ) { abstract i d 3v 2 frame frame = create frame ( get frame and sub id from generic key ( field key . cove r_ art ) . get frame id ( ) ) ; if ( frame . get body ( ) instanceof frame body apic ) { frame body apic body = ( frame body apic ) frame . get body ( ) ; body . set object value ( data types . ob j_ pictur e_ data , utils . get default bytes ( url , text encoding . charse t_ is o _ 8 8 5 9 _ 1 ) ) ; body . set object value ( data types . ob j_ pictur e_ type , picture types . defaul t_ id ) ; body . set object value ( data types . ob j_ mim e_ type , frame body apic . imag e_ i s_ url ) ; body . set object value ( data types . ob j_ description , str_ ) ; } else if ( frame . get body ( ) instanceof frame body pic ) { frame body pic body = ( frame body pic ) frame . get body ( ) ; body . set object value ( data types . ob j_ pictur e_ data , utils . get default bytes ( url , text encoding . charse t_ is o _ 8 8 5 9 _ 1 ) ) ; body . set object value ( data types . ob j_ pictur e_ type , picture types . defaul t_ id ) ; body . set object value ( data types . ob j_ imag e_ format , frame body apic . imag e_ i s_ url ) ; body . set object value ( data types . ob j_ description , str_ ) ; } return frame ; }
public long next long ( long least , long bound ) { if ( least >= bound ) throw new illegal argument exception ( ) ; return next long ( bound - least ) + least ; }
public template entry ( template template , dn parent dn ) { this . branch = null ; dn = null ; this . template = template ; this . parent dn = parent dn ; }
public boolean is set value ( ) { return this . value != null ; }
private void remove task ( hadoop task info task ) { if ( tasks != null ) tasks . remove ( task ) ; }
private static boolean eq ( object x , object y ) { return x == y || x . equals ( y ) ; }
private void clean up ( ) { process reference reference ; while ( ( reference = reference queue . poll ( ) ) != null ) { synchronized ( process references ) { process references . remove ( reference . process id ) ; } } }
public void test _fill $ fiif ( ) { float val = float . ma x_ value ; float d [ ] = new float [ num_ ] ; arrays . fill ( d , num_ , d . length , val ) ; for ( int i = num_ ; i < num_ ; i ++ ) assert true ( str_ , ! ( d [ i ] == val ) ) ; for ( int i = num_ ; i < d . length ; i ++ ) assert true ( str_ , d [ i ] == val ) ; try { arrays . fill ( d , num_ , num_ , val ) ; fail ( str_ ) ; } catch ( illegal argument exception e ) { } try { arrays . fill ( d , - num_ , num_ , val ) ; fail ( str_ ) ; } catch ( array index out of bounds exception e ) { } try { arrays . fill ( d , num_ , d . length + num_ , val ) ; fail ( str_ ) ; } catch ( array index out of bounds exception e ) { } }
public boolean is unindex supported ( ) { return bool_ ; }
private string create string ( string f ) { string buffer sb = new string buffer ( ) ; int keys [ ] = get keys ( ) ; for ( int i = num_ ; i < keys . length ; i ++ ) { int key = keys [ i ] ; sb . append ( c ujit _option . string for ( key ) + str_ ) ; object value = map . get ( key ) ; if ( value instanceof byte [ ] ) { byte data [ ] = ( byte [ ] ) value ; sb . append ( create string ( data ) ) ; } else { sb . append ( string . value of ( value ) ) ; } if ( i < keys . length - num_ ) { sb . append ( f ) ; } } return sb . to string ( ) ; }
public final void warn ( final string message , final throwable throwable ) { if ( is warn enabled ( ) ) { output ( priority . warn , message , throwable ) ; } }
public boolean is refreshing ( ) ;
public static dimension encoding create ( string encoding name , string [ ] args ) { if ( factory map == null ) init factory map ( ) ; dimension encoding factory factory = factory map . get ( encoding name ) ; if ( factory == null ) { throw new illegal argument exception ( str_ + encoding name + str_ + dictionary dim enc . encodin g_ name + str_ ) ; } return factory . create dimension encoding ( encoding name , args ) ; }
private byte string to byte string ( ) { return new byte string ( to byte array ( ) ) ; }
public void reset state ( ) { set translation x ( num_ ) ; set alpha ( num_ ) ; set scale x ( num_ ) ; set scale y ( num_ ) ; set height ( m default height ) ; cancel running animation ( ) ; m handler . remove callbacks ( m close runnable ) ; if ( m listener != null ) { boolean has pending closure = m listener . has pending closure ( m tab . get id ( ) ) ; show undo view ( has pending closure ) ; if ( has pending closure ) m handler . post delayed ( m close runnable , m close timeout ms ) ; } else { show undo view ( bool_ ) ; } }
final void close node ( node data adapter < d > data adapter , tree . css css , animation controller closer , boolean should animate ) { ensure children container ( data adapter , css ) ; element expand control = get expand control ( ) ; assert ( has children container ( ) && css utils . contains class name ( expand control , css . expand control ( ) ) ) : str_ ; set open ( css , bool_ ) ; element children container = get children container ( ) ; if ( should animate ) { closer . hide ( children container ) ; } else { closer . hide without animating ( children container ) ; } }
private void put head ( string key , template sub pattern association assoc ) { if ( key . equals ( psuedo names . pseudonam e_ text ) ) m _text patterns = assoc ; else if ( key . equals ( psuedo names . pseudonam e_ root ) ) m _doc patterns = assoc ; else if ( key . equals ( psuedo names . pseudonam e_ comment ) ) m _comment patterns = assoc ; m _pattern table . put ( key , assoc ) ; }
public string boolean cols tip text ( ) { return str_ ; }
public aem dialog click tab ( final string label ) { bobcat wait . with timeout ( timeouts . big ) . until ( ( expected condition < object > ) null , num_ ) ; return this ; }
public static < k , v > sorted map < k , v > synchronized sorted map ( sorted map < k , v > map ) { if ( map == null ) { throw new null pointer exception ( ) ; } return new synchronized sorted map < k , v > ( map ) ; }
public void clear valores ( ) { valores . clear ( ) ; }
public boolean is verbose ( ) ;
public static void sort reverse ( double [ ] keys , int [ ] values , int len ) { sort reverse ( keys , values , num_ , len ) ; }
private void change size ( int new size ) { if ( new size >= length ) { long [ ] old data = data ; int old length = length ; data = new long [ new size ] ; length = num_ ; add ( old data , old length ) ; } }
public void open child node ( int index ) { if ( active node . has children ( ) && index > num_ && index < active node . get child count ( ) ) show views for node ( active node . get child at ( index ) , bool_ , bool_ ) ; }
public void test bug 2 8 5 2 ( ) throws exception { try { this . stmt . execute update ( str_ ) ; this . stmt . execute update ( str_ ) ; this . stmt . execute update ( str_ ) ; this . rs = this . stmt . execute query ( str_ ) ; assert true ( this . rs . next ( ) ) ; result set meta data rsmd = this . rs . get meta data ( ) ; assert true ( rsmd . get column class name ( num_ ) . equals ( this . rs . get object ( num_ ) . get class ( ) . get name ( ) ) ) ; assert true ( str_ . equals ( rsmd . get column class name ( num_ ) ) ) ; assert true ( rsmd . get column class name ( num_ ) . equals ( this . rs . get object ( num_ ) . get class ( ) . get name ( ) ) ) ; assert true ( str_ . equals ( rsmd . get column class name ( num_ ) ) ) ; } finally { this . stmt . execute update ( str_ ) ; } }
public boolean is vertical ( ) { return p 0 . x == p 1 . x ; }
public d policy constraints ( j dialog parent ) { super ( parent ) ; set title ( res . get string ( str_ ) ) ; init components ( ) ; }
public void add cpu usage ( float cpu usage ) { this . total cpu usage += cpu usage ; }
public void read sequence of ( as n1 sequence of sequence of ) throws io exception { if ( tag != as n1 constants . ta g_ c_ sequenceof ) { throw expected ( str_ ) ; } decode value collection ( sequence of ) ; }
public builder with log index ( long index ) { response . log index = assert . arg not ( index , index < num_ , str_ ) ; return this ; }
public void dispose ( ) { my layoutlib callback . set logger ( null ) ; my layoutlib callback . set resource resolver ( null ) ; if ( my render session != null ) { assert application manager . get application ( ) . is dispatch thread ( ) || ! application manager . get application ( ) . is read access allowed ( ) : str_ ; try { render service . run render action ( null ) ; my render session = null ; } catch ( exception ignored ) { } } my image factory delegate = null ; }
public static object [ ] ordinal array ( tuple set tuples , string field , comparator cmp ) { if ( tuples instanceof table ) { column metadata md = ( ( table ) tuples ) . get metadata ( field ) ; return md . get ordinal array ( ) ; } else { return ordinal array ( tuples . tuples ( ) , field , cmp ) ; } }
public boolean is include request processors ( ) { return include request processors ; }
public boolean has main activity ( ) { return bool_ ; }
private static boolean is ancestor ( string ancestor path , string path ) { if ( ancestor path . equals ( path ) ) { return bool_ ; } return file util . is ancestor ( ancestor path , path , bool_ ) ; }
public final int yystate ( ) { return zz lexical state ; }
public static int find best sample size ( int actual width , int actual height , int desired width , int desired height ) { double wr = ( double ) actual width / desired width ; double hr = ( double ) actual height / desired height ; double ratio = math . min ( wr , hr ) ; float n = num_ ; while ( ( n * num_ ) <= ratio ) { n *= num_ ; } return ( int ) n ; }
public list < flashcard entity > query deep ( string where , string ... selection arg ) { cursor cursor = db . raw query ( get select deep ( ) + where , selection arg ) ; return load deep all and close cursor ( cursor ) ; }
public void sort instances ( ) { if ( m _ current col == - num_ ) { return ; } ( ( arff sorted table model ) m _ table arff . get model ( ) ) . sort instances ( m _ current col ) ; }
public asf header reader ( final list < class < ? extends chunk reader > > to register , final boolean read chunk once ) { super ( to register , read chunk once ) ; }
void clear new chars ( ) { fresh chars = new string buffer ( num_ ) ; }
public servlet request event ( servlet context sc , servlet request request ) { super ( sc ) ; this . request = request ; }
public list < node > init ( ) ;
public void test select elements 2 _ 1 ( ) { logger . debug ( str_ ) ; document doc = null ; try { doc = jsoup . parse ( new file ( str_ ) , charset . default charset ( ) . display name ( ) ) ; } catch ( io exception ex ) { } init mock context ( html element store . im g_ element , doc ) ; element handler < element > element handler = new element handler impl ( ) ; image element selector instance = new image element selector ( html element store . im g_ element , bool_ , bool_ ) ; instance . select elements ( ssp handler , element handler ) ; assert true ( element handler . get ( ) . size ( ) == num_ ) ; assert true ( element handler . get ( ) . iterator ( ) . next ( ) . node name ( ) . equals ( html element store . im g_ element ) ) ; verify mock context ( ) ; }
public final void yyclose ( ) throws java . io . io exception { zz at eof = bool_ ; zz end read = zz start read ; if ( zz reader != null ) zz reader . close ( ) ; }
public string data type ( string s , int len ) { if ( len < s . length ( ) ) { this . s = s . substring ( num_ , len ) ; } else { this . s = string . format ( str_ + len + str_ , s ) ; } }
public pre response deserialize ( string pre response ) throws io exception { json node serialized pre response = non response context mapper . read tree ( pre response ) ; return new pre response ( get result set ( serialized pre response . get ( resul t_ se t_ key ) ) , get response context ( serialized pre response . get ( respons e_ contex t_ key ) ) ) ; }
private pla point float left _right _tangential _point ( pla point float p _from _point , pla point float p _to _point , pla point float p _center , double p _dist ) { pla point float curr _tangential _point = p _from _point . left _tangential _point ( p _center , p _dist ) ; if ( curr _tangential _point == null ) { system . out . println ( str_ ) ; return null ; } pla segment float first _line = new pla segment float ( p _from _point , curr _tangential _point ) ; curr _tangential _point = p _to _point . right _tangential _point ( p _center , p _dist ) ; if ( curr _tangential _point == null ) { system . out . println ( str_ ) ; return null ; } pla segment float second _line = new pla segment float ( p _to _point , curr _tangential _point ) ; return first _line . intersection ( second _line ) ; }
public static list < i java completion proposal > create proposals for problems on sync method ( ast node node ) { rpc pair rpc pair = resolve rpc pair ( node , peer type resolver . asyn c_ resolver ) ; return create proposal ( rpc pair , builder ) ; }
public static float next down ( final float start ) { if ( start > float . negativ e_ infinity ) { if ( start == num_ ) { return - float . mi n_ value ; } final int bits = float . float to raw int bits ( start ) ; return float . int bits to float ( bits + ( bits > num_ ? - num_ : num_ ) ) ; } else if ( start == float . negativ e_ infinity ) { return float . negativ e_ infinity ; } else { return start ; } }
public synchronized enumeration elements ( ) { return new enumerator ( values , bool_ ) ; }
protected final void topology read unlock ( ) { tx . tx state ( ) . topology read unlock ( cctx ) ; }
public final void walk graph ( hashtable sem nodes table ) { integer uid = new integer ( my uid ) ; if ( sem nodes table . get ( uid ) != null ) return ; sem nodes table . put ( uid , this ) ; if ( params != null && params . length > num_ ) { for ( int i = num_ ; i < params . length ; i ++ ) { if ( params [ i ] != null ) params [ i ] . walk graph ( sem nodes table ) ; } } if ( body != null ) body . walk graph ( sem nodes table ) ; if ( step node != null ) step node . walk graph ( sem nodes table ) ; }
public void recover tree ( tree node root ) { if ( root == null ) return ; prev = new tree node ( integer . mi n_ value ) ; morris inorder ( root ) ; int t = first . val ; first . val = second . val ; second . val = t ; }
private void write handshake ( web socket output stream output , string key ) throws web socket exception { m handshake builder . set key ( key ) ; string request line = m handshake builder . build request line ( ) ; list < string [ ] > headers = m handshake builder . build headers ( ) ; string handshake = handshake builder . build ( request line , headers ) ; m listener manager . call on sending handshake ( request line , headers ) ; try { output . write ( handshake ) ; output . flush ( ) ; } catch ( io exception e ) { throw new web socket exception ( web socket error . openin g_ hahdshak e_ reques t_ failure , str_ + e . get message ( ) , e ) ; } }
public element reference expression item provider ( adapter factory adapter factory ) { super ( adapter factory ) ; }
protected void add document listeners ( ) { dom node inserted listener = new dom node inserted listener ( ) ; dom node removed listener = new dom node removed listener ( ) ; dom attr modified listener = new dom attr modified listener ( ) ; abstract document doc = ( abstract document ) document ; xbl event support es = ( xbl event support ) doc . initialize event support ( ) ; es . add implementation event listener ns ( xml constants . xm l_ event s_ namespac e_ uri , str_ , dom node inserted listener , bool_ ) ; es . add implementation event listener ns ( xml constants . xm l_ event s_ namespac e_ uri , str_ , dom node removed listener , bool_ ) ; es . add implementation event listener ns ( xml constants . xm l_ event s_ namespac e_ uri , str_ , dom attr modified listener , bool_ ) ; }
public wine killall ( ) throws script failure exception { validate wine installation initialized ( ) ; try { wine version . get installation ( ) . kill all process ( this . prefix ) ; } catch ( io exception logged ) { logger . warn ( str_ , logged ) ; } return this ; }
public void test simple builder registered ( ) throws exception { check simple builder ( bool_ ) ; }
public abstract short buffer put ( short s ) ;
boolean match ( string name ) { return copy all || names . contains ( name ) ; }
public abstract void read _long _array ( int [ ] value , int offset , int length ) ;
protected float calculate defense ( final rp entity entity ) { float potential ; float min ; float score ; final float armor = entity . get item def ( ) + num_ ; final int def = entity . get def ( ) ; if ( logger . is debug enabled ( ) ) { logger . debug ( str_ + def + str_ + armor ) ; } potential = ( ( float ) level . get wisdom ( def ) ) * num_ * armor ; min = ( float ) level . get wisdom ( entity . get level ( ) ) * num_ ; score = ( ( rand . next float ( ) * ( num_ - min ) ) + min ) * potential ; score += ( ( float ) entity . use karma ( num_ ) * potential ) ; if ( logger . is debug enabled ( ) ) { logger . debug ( str_ + potential + str_ + score ) ; } return score ; }
public double normal distance squared ( final vector v ) { double t = dot product ( v ) ; double delta x = this . x * t - v . x ; double delta y = this . y * t - v . y ; double delta z = this . z * t - v . z ; return delta x * delta x + delta y * delta y + delta z * delta z ; }
public static boolean place image url ( link link ) { string url = link . get url ( ) ; if ( ! url . starts with ( str_ ) ) { url += str_ ; } string domain = link . get domain ( ) ; if ( domain . contains ( str_ ) ) { if ( url . contains ( str_ ) ) { return bool_ ; } else if ( ends with image extension ( url , gifv ) ) { return bool_ ; } else if ( url . contains ( str_ ) ) { return bool_ ; } else if ( url . contains ( str_ ) ) { return bool_ ; } else if ( ! check is image url ( url ) ) { if ( url . char at ( url . length ( ) - num_ ) == str_ ) { url = url . substring ( num_ , url . length ( ) - num_ ) ; } url += str_ ; } } boolean is image = check is image url ( url ) ; if ( ! is image ) { return bool_ ; } link . set url ( url ) ; return bool_ ; }
public boolean is selected ( ) { return selected ; }
public synchronized boolean is sorted ( ) { return m _ model . is sorted ( ) ; }
public string create ser no ( ) { string buffer name = new string buffer ( ) ; if ( get prefix ( ) != null ) name . append ( get prefix ( ) ) ; int no = get current next ( ) ; name . append ( no ) ; if ( get suffix ( ) != null ) name . append ( get suffix ( ) ) ; no += get increment no ( ) ; set current next ( no ) ; save ( ) ; return name . to string ( ) ; }
public list ( t ... items ) { this ( new default list model ( items ) ) ; }
programmer select by primary key ( integer id ) ;
public change set increment ( string path , float delta ) { return add ( new increment space entry mutator ( path , delta ) ) ; }
public void notify listeners ( ) { for ( spin statistics listener listener : new array list < spin statistics listener > ( listeners ) ) { listener . statistics updated ( ) ; } }
public insert content action ( ) { super ( insert content action ) ; }
module fixture builder < t > add content root ( final string content root path ) ;
string convert to compilable expression ( string expression , class < ? > object type , class < ? > return type ) ;
public void select _items _in _region ( ) { if ( board _is _read _only ) return ; if ( ! ( interactive _state instanceof state menu ) ) return ; set _interactive _state ( state select region items . get _instance ( interactive _state , this , actlog ) ) ; }
public abstract byte buffer put ( byte b ) ;
public static void add style ( element e ) { e . add class name ( resources . i . css ( ) . tooltip ( ) ) ; }
public static shape layout glyph vector ( glyph vector glyphs , shape path , int align ) { return layout glyph vector ( glyphs , path , align , num_ , ( float ) glyphs . get visual bounds ( ) . get width ( ) , adjus t_ spacing ) ; }
private osm user read user ( ) { string raw user id ; string raw user name ; raw user id = reader . get attribute value ( null , attribut e_ nam e_ use r_ id ) ; raw user name = reader . get attribute value ( null , attribut e_ nam e_ user ) ; if ( raw user id != null ) { int user id ; string user name ; user id = integer . parse int ( raw user id ) ; if ( raw user name == null ) { user name = str_ ; } else { user name = raw user name ; } return new osm user ( user id , user name ) ; } else { return osm user . none ; } }
public string output string ( element element ) { string writer out = new string writer ( ) ; try { output ( element , out ) ; } catch ( io exception e ) { } return out . to string ( ) ; }
protected property change listener create rollover listener ( ) { return null ; }
public view ( string type name , string sql expression , query result type query result type ) { super ( type name , sql expression , query result type ) ; }
i basic request add header ( string key , string value ) ;
double reward ( s s ) ;
public boolean is cost frozen ( ) ;
private regex util ( ) { throw new error ( str_ ) ; }
public void test add ( ) { system . out . println ( str_ ) ; audit service listener listener = easy mock . create mock ( audit service listener . class ) ; audit service thread queue impl instance = new audit service thread queue impl ( ) ; instance . add ( listener ) ; assert equals ( num_ , instance . get listeners ( ) . size ( ) ) ; }
public goto ( ast source ) { super ( source , str_ ) ; }
void rename table ( session session , table name current name , table name new name ) ;
private boolean is implicit temporary table ( ) { return this . is implicit temp table ; }
public criteria or ( ) { criteria criteria = create criteria internal ( ) ; ored criteria . add ( criteria ) ; return criteria ; }
public void update date ( int year , int month of year , int day of month ) { m date picker . update date ( year , month of year , day of month ) ; }
private void rename value class names ( collection < pojo descriptor > sel pojos , string regex , string replace ) { for ( pojo descriptor pojo : sel pojos ) pojo . value class name ( pojo . value class name ( ) . replace all ( regex , replace ) ) ; }
public v new view holder ( int position ) ;
void hit execute ( search context context , hit context hit context ) ;
private void read object ( final java . io . object input stream in ) throws io exception , class not found exception { use on off swith = in . read boolean ( ) ; marker colors = ( marker colors ) in . read object ( ) ; }
private static void expand counter arrays ( ) { double [ ] [ ] temp = new double [ counter arrays . length * num_ ] [ ] ; for ( int i = num_ ; i < counter arrays . length ; i ++ ) { temp [ i ] = counter arrays [ i ] ; } counter arrays = temp ; }
new akiban join builder join to ( string table ) ;
void on upgrade ( sq lite database db , int old version , int new version ) ;
public void test get system id ( ) throws throwable { document doc ; document type doc type ; string system id ; doc = ( document ) load ( str_ , builder ) ; doc type = doc . get doctype ( ) ; system id = doc type . get system id ( ) ; assert uri equals ( str_ , null , null , null , str_ , null , null , null , null , system id ) ; }
protected abstract void connect ( string host , int port ) throws io exception ;
public static void write list as str ( final string file , final list list ) throws io exception { if ( ( list == null ) || ( list . size ( ) == num_ ) || ( file == null ) || ( file . trim ( ) . length ( ) == num_ ) ) { return ; } buffered writer bw = null ; try { bw = new buffered writer ( new file writer ( file ) ) ; for ( int i = num_ ; i < list . size ( ) ; i ++ ) { bw . write ( list . get ( i ) . to string ( ) ) ; bw . write ( string util . get newline str ( ) ) ; } } catch ( io exception ex ) { throw ex ; } finally { try { bw . close ( ) ; bw = null ; } catch ( exception ex ) { } } }
public static boolean is valid ( string data ) { return ( data . matches ( devic e_ pattern ) ) ; }
public vector 4d sub ( vector 4fc v ) { x -= v . x ( ) ; y -= v . y ( ) ; z -= v . z ( ) ; w -= v . w ( ) ; return this ; }
public short [ ] [ ] to short array ( ) ;
public void add ( final float operand ) { this . value += operand ; }
public void update notifications from server ( update policy update policy ) { update notifications from server ( update policy , null ) ; }
public native long c_ copy object ( long h session , long h object , c k_ attribute [ ] p template ) throws pkc s 1 1 exception ;
public void delete by id arch id fdr ( integer id libro , integer id registro , integer id oficina ) ;
public boolean is fresh ( ) ;
public static compatibility link control create link ( final composite parent , final int style ) { check . not null ( parent , str_ ) ; try { return create new link ( parent , style ) ; } catch ( final exception e ) { return create legacy link ( parent , style ) ; } }
public hessian debug state ( print writer dbg ) { _dbg = dbg ; _state = new initial state ( ) ; }
private boolean equal shapes ( shape [ ] s 1 , shape [ ] s 2 ) { if ( s 1 == null ) { return s 2 == null ; } if ( s 2 == null ) { return bool_ ; } if ( s 1 . length != s 2 . length ) { return bool_ ; } for ( int i = num_ ; i < s 1 . length ; i ++ ) { if ( ! shape utilities . equal ( s 1 [ i ] , s 2 [ i ] ) ) { return bool_ ; } } return bool_ ; }
public static int add and check ( int x , int y ) throws math runtime exception { long s = ( long ) x + ( long ) y ; if ( s < integer . mi n_ value || s > integer . ma x_ value ) { throw new math runtime exception ( localized core formats . overflo w_ i n_ addition , x , y ) ; } return ( int ) s ; }
private void write object ( java . io . object output stream s ) throws java . io . io exception { s . default write object ( ) ; for ( e e : this ) s . write object ( e ) ; s . write object ( null ) ; }
public static string parse string ( string value ) { if ( ( value . starts with ( str_ ) ) && ( value . ends with ( str_ ) ) || ( value . starts with ( str_ ) ) && ( value . ends with ( str_ ) ) ) { if ( value . length ( ) > num_ ) { if ( value . index of ( str_ ) != - num_ ) { return unescape ( value . substring ( num_ , value . length ( ) - num_ ) ) ; } return value . substring ( num_ , value . length ( ) - num_ ) ; } } throw new illegal argument exception ( str_ + value + str_ ) ; }
public void destroy ( ) throws destroy failed exception { screds . destroy ( ) ; }
public static byte [ ] bitmap to byte ( bitmap b ) { byte array output stream o = new byte array output stream ( ) ; b . compress ( bitmap . compress format . png , num_ , o ) ; return o . to byte array ( ) ; }
void updated ( final int x , final int y ) ;
public void process ack ( request event request event , server transaction server transaction ) { system . out . println ( str_ ) ; system . out . println ( str_ + dialog . get state ( ) ) ; }
int check if assigned ( string webapp id ) { if ( webapp id == null ) { return invali d_ activit y_ index ; } for ( int i = m activity list . size ( ) - num_ ; i >= num_ ; i -- ) { if ( webapp id . equals ( m activity list . get ( i ) . m webapp id ) ) { return m activity list . get ( i ) . m activity index ; } } return invali d_ activit y_ index ; }
public boolean can traverse outside subtree ( ) { int n = get predicate count ( ) ; for ( int i = num_ ; i < n ; i ++ ) { if ( get predicate ( i ) . can traverse outside subtree ( ) ) return bool_ ; } return bool_ ; }
default double supplier with throwable < e > with logging ( ) { return with logging ( logger factory . get logger ( get class ( ) ) ) ; }
protected document by id ( final k key ) { return key != null ? new document ( id , key . to string ( ) ) : new document ( ) ; }
private void return data ( object ret ) { if ( my host != null ) { my host . return data ( ret ) ; } }
public static void split and log ( string tag , string text ) { array list < string > message list = utils . split string ( text ) ; for ( string message : message list ) { if ( is debug ( ) ) { log . d ( tag , message ) ; } } }
public buffer must be direct exception ( ) { super ( str_ ) ; }
public char [ ] constant pool name ( ) { if ( this . constant pool name != null ) return this . constant pool name ; char [ ] brackets = new char [ this . dimensions ] ; for ( int i = this . dimensions - num_ ; i >= num_ ; i -- ) brackets [ i ] = str_ ; return this . constant pool name = char operation . concat ( brackets , this . leaf component type . signature ( ) ) ; }
public static long parse date as epoch ( string date str ) { try { return date utils . parse date ( date str ) . get time ( ) ; } catch ( date parse exception e ) { return num_ ; } }
public void add input hash ( byte [ ] hash ) { if ( nodes != null ) { throw new illegal state exception ( str_ ) ; } inputs . add ( hash ) ; }
namespace iam role authorization create namespace iam role authorization ( namespace iam role authorization create request request ) ;
public request builder should buffer requests ( boolean should buffer ) { this . buffer requests = should buffer ; return this ; }
private boolean prepare and upload points ( fusiontables fusiontables , string table id , track track , list < location > locations , boolean last batch ) throws io exception { array list < track > split tracks = send to google utils . prepare locations ( track , locations ) ; boolean only one segment = last batch && current segment == num_ && split tracks . size ( ) == num_ ; for ( track split track : split tracks ) { if ( ! only one segment ) { split track . set name ( context . get string ( r . string . send _google _track _part _label , split track . get name ( ) , current segment ) ) ; } create new line string ( fusiontables , table id , split track ) ; current segment ++ ; } return bool_ ; }
computing concurrent hash map ( map maker builder , function < ? super k , ? extends v > computing function ) { super ( builder ) ; this . computing function = check not null ( computing function ) ; }
public final void skew ( vec 2 out ) { out . x = - y ; out . y = x ; }
protected void reset cache ( ) { cache = null ; hard cache = null ; }
public static void move ( string source , string target ) { new file ( source ) . rename to ( new file ( target ) ) ; }
private static void rewrite max retries ( int value ) throws exception { buffered reader fr = new buffered reader ( new file reader ( one kdc . kr b 5 _ conf ) ) ; file writer fw = new file writer ( str_ ) ; while ( bool_ ) { string s = fr . read line ( ) ; if ( s == null ) { break ; } if ( s . starts with ( str_ ) ) { fw . write ( str_ ) ; fw . write ( str_ + bad kdc . to real ( num_ ) + str_ ) ; } else if ( s . trim ( ) . starts with ( str_ ) ) { if ( value != - num_ ) { fw . write ( str_ + value + str_ ) ; fw . write ( str_ + bad kdc . to real ( value * num_ ) + str_ ) ; } fw . write ( str_ ) ; } fw . write ( s + str_ ) ; } fr . close ( ) ; fw . close ( ) ; sun . security . krb 5 . config . refresh ( ) ; }
public void handle button 1 request ( request invocation event event ) throws model control exception { string current realm = ( string ) get page session attribute ( am admin constants . curren t_ realm ) ; try { if ( reconstruct policy ( ) ) { } else { cached policy cached policy = get cached policy ( ) ; policy model model = ( policy model ) get model ( ) ; try { model . replace policy ( current realm , cached policy . get policy ( ) ) ; set inline alert message ( cc alert . typ e_ info , str_ , str_ ) ; cached policy . set policy modified ( bool_ ) ; } catch ( am console exception e ) { set inline alert message ( cc alert . typ e_ error , str_ , e . get message ( ) ) ; } } forward to ( ) ; } catch ( am console exception e ) { debug . warning ( str_ , e ) ; redirect to start url ( ) ; } }
public categorical distribution likelihood weighting ( random variable [ ] x , assignment proposition [ ] e , bayesian network bn , int n ) { double [ ] w = new double [ prob util . expected size of categorical distribution ( x ) ] ; for ( int j = num_ ; j < n ; j ++ ) { pair < map < random variable , object > , double > x _w = weighted sample ( bn , e ) ; w [ prob util . index of ( x , x _w . get first ( ) ) ] += x _w . get second ( ) ; } return new probability table ( w , x ) . normalize ( ) ; }
public agent ( pac man pacman ) { this . pacman = pacman ; double 2 d loc = get start location ( ) ; this . location = new mutable double 2 d ( loc ) ; pacman . agents . set object location ( this , loc ) ; }
boolean should spin ( s node s ) { s node h = head ; return ( h == s || h == null || is fulfilling ( h . mode ) ) ; }
public abstract void update consistency group ( uri vplex uri , uri cg uri , list < uri > add volumes list , list < uri > remove volumes list , string op id ) throws internal exception ;
private static synchronized void init true random ( long adjusted timestamp ) { _rand _m = num_ ; _rand _ia = num_ ; _rand _ib = num_ ; _rand _irand = num_ ; int seed = ( int ) ( adjusted timestamp > > > num_ ) ^ ( int ) ( adjusted timestamp > > > num_ ) ^ ( int ) ( adjusted timestamp > > > num_ ) ^ ( int ) ( adjusted timestamp & num_ ) ; _rand _irand = _rand _irand + seed + _os process id ; }
public static phased backoff wait strategy with sleep ( long spin timeout , long yield timeout , time unit units ) { return new phased backoff wait strategy ( spin timeout , yield timeout , units , new sleeping wait strategy ( num_ ) ) ; }
public spider panel ( extension spider extension , spider param spider scan param ) { super ( str_ , new image icon ( spider panel . class . get resource ( str_ ) ) , extension ) ; tabbed pane = new j tabbed pane ( ) ; this . extension = extension ; this . set default accelerator ( key stroke . get key stroke ( key event . v k_ d , toolkit . get default toolkit ( ) . get menu shortcut key mask ( ) | event . shif t_ mask , bool_ ) ) ; this . set mnemonic ( constant . messages . get char ( str_ ) ) ; }
public packer impl ( ) { }
private channel retrieve channel by name ( string name , e list < channel > channels ) { for ( channel channel : channels ) { if ( channel . get name ( ) . equals ( name ) ) { return channel ; } } return null ; }
public vcf record ( string sequence , int start , string ref ) { m sequence = sequence ; m start = start ; m ref call = ref ; m alt calls = new array list < > ( ) ; m filters = new array list < > ( ) ; m info = new linked hash map < > ( ) ; m format and sample = new linked hash map < > ( ) ; }
public void ignorable whitespace ( stylesheet handler handler , char ch [ ] , int start , int length ) throws org . xml . sax . sax exception { }
public boolean is values custom sorted ( ) { return bool_ ; }
public region ( int left , int top , int right , int bottom ) { m native region = native constructor ( ) ; native set rect ( m native region , left , top , right , bottom ) ; }
string extract script name ( resource resource ) { if ( location . get path ( ) . is empty ( ) ) { return resource . get location ( ) ; } return resource . get location ( ) . substring ( location . get path ( ) . length ( ) + num_ ) ; }
public empty scroll ( final string name , final string clazz , final string subclass , final map < string , string > attributes ) { super ( name , clazz , subclass , attributes ) ; }
public json array put ( collection < object > value ) { this . put ( new json array ( value ) ) ; return this ; }
public boolean is _leaf ( ) { return children . is empty ( ) ; }
public uniform ( ) { super ( ) ; }
private boolean zz refill ( ) throws java . io . io exception { return bool_ ; }
private static void check type safe ( object o ) { try { o = ( role ) o ; } catch ( class cast exception e ) { throw new illegal argument exception ( e ) ; } }
public paragraph clear paragraph output ( string paragraph id ) { synchronized ( paragraphs ) { for ( paragraph p : paragraphs ) { if ( p . get id ( ) . equals ( paragraph id ) ) { p . set return ( null , null ) ; return p ; } } } return null ; }
public void clear ( ) { nb bf accessed = num_ ; nb bf nodes accessed = num_ ; nb splits = num_ ; nb merges = num_ ; nb redistributes = num_ ; }
public attribute set add attributes ( attribute set old , attribute set attr ) ;
protected business object data status update response update business object data status impl ( business object data key business object data key , business object data status update request request ) { business object data helper . validate business object data key ( business object data key , bool_ , bool_ ) ; assert . has text ( request . get status ( ) , str_ ) ; request . set status ( request . get status ( ) . trim ( ) ) ; business object data entity business object data entity = business object data dao helper . get business object data entity ( business object data key ) ; string previous business object data status = business object data entity . get status ( ) . get code ( ) ; business object data dao helper . update business object data status ( business object data entity , request . get status ( ) ) ; business object data status update response response = new business object data status update response ( ) ; response . set business object data key ( business object data helper . get business object data key ( business object data entity ) ) ; response . set status ( business object data entity . get status ( ) . get code ( ) ) ; response . set previous status ( previous business object data status ) ; return response ; }
public com . sun . identity . wsfederation . jaxb . wsspolicy . lax ts last element create lax ts last element ( ) throws javax . xml . bind . jaxb exception { return new com . sun . identity . wsfederation . jaxb . wsspolicy . impl . lax ts last element impl ( ) ; }
private void redo layout ( ) { result panel . remove all ( ) ; if ( expanded ) { int cur width = parent . get size ( ) . width ; int relevant width = single result overview . mi n_ width + num_ ; int x count = cur width / relevant width ; int y count = ( int ) math . ceil ( ( double ) results . size ( ) / x count ) ; result panel . set layout ( new grid layout ( y count , x count ) ) ; for ( single result overview overview : results ) { result panel . add ( overview ) ; } } revalidate ( ) ; }
public data base admin ( ) { }
public boolean allow key repeat ( ) ;
public linked hash map entry ( final string ... ldif lines ) { this ( requests . new add request ( ldif lines ) ) ; }
private void update progress ( int progress ) { if ( my host != null && progress != previous progress ) { my host . update progress ( progress ) ; } previous progress = progress ; }
boolean send head ( send packet entity ) ;
public abstract boolean check resource exists ( locale locale ) throws exception ;
public static properties load properties ( string configuration path ) throws exception { properties props = new properties ( ) ; try ( file input stream input stream = new file input stream ( configuration path ) ) { props . load ( input stream ) ; } return props ; }
public default lml syntax ( ) { register tags ( ) ; register attributes ( ) ; }
public static void check ( random random , query q 1 , index searcher s ) { check ( random , q 1 , s , bool_ ) ; }
private long now ( ) { if ( outer . outer . clock == null ) { return system . current time millis ( ) ; } else { return outer . outer . clock . current time millis ( ) ; } }
public string next token ( ) { return next token ( bool_ ) ; }
private void update progress ( string progress label , int progress ) { if ( my host != null && ( ( progress != previous progress ) || ( ! progress label . equals ( previous progress label ) ) ) ) { my host . update progress ( progress label , progress ) ; } previous progress = progress ; previous progress label = progress label ; }
protected static void emit _package ( print stream out ) { if ( package _name != null ) out . println ( str_ + package _name + str_ ) ; }
public final jbbp text writer set value separator ( final string text ) { this . value separator = text == null ? str_ : text ; return this ; }
public com . sun . identity . liberty . ws . soapbinding . jaxb . provider element create provider element ( ) throws javax . xml . bind . jaxb exception { return new com . sun . identity . liberty . ws . soapbinding . jaxb . impl . provider element impl ( ) ; }
private animator animate list to width ( int delay , int duration , time interpolator interpolator , int ... width ) { if ( m animator set != null && m animator set . is running ( ) ) { m animator set . end ( ) ; } array list < animator > animators = new array list < animator > ( ) ; boolean animate mode items in order = bool_ ; if ( delay < num_ ) { animate mode items in order = bool_ ; delay *= - num_ ; } for ( int i = num_ ; i < m total modes ; i ++ ) { object animator animator ; if ( animate mode items in order ) { animator = object animator . of int ( m mode selector items [ i ] , str_ , width ) ; } else { animator = object animator . of int ( m mode selector items [ m total modes - num_ - i ] , str_ , width ) ; } animator . set duration ( duration ) ; animators . add ( animator ) ; } m animator set = new animator set ( ) ; m animator set . play together ( animators ) ; m animator set . set interpolator ( interpolator ) ; m animator set . start ( ) ; return m animator set ; }
builder add lenient ( string name , string value ) { names and values . add ( name ) ; names and values . add ( value . trim ( ) ) ; return this ; }
public long count ( ) { return count ; }
protected synchronized void update location ( point new locn ) { prev = locn ; locn = new locn ; if ( math . abs ( locn . x - prev . x ) > hysteresis || math . abs ( locn . y - prev . y ) > hysteresis ) { if ( timer . is running ( ) ) timer . stop ( ) ; } else { if ( ! timer . is running ( ) ) timer . start ( ) ; } }
void on list item expanded ( int position ) ;
public void update ui ( ) { set ui ( ( slider ui ) ui manager . get ui ( this ) ) ; update label u is ( ) ; }
public boolean is displayed ( ) { return bool_ ; }
public void configure option 3 ( string value ) ;
public static < t > void assert collection contains ( collection < t > actual , t ... expected elements ) { assert equals ( expected elements . length , actual . size ( ) ) ; collection < t > actual copy = new array list < t > ( actual ) ; for ( t expected element : expected elements ) { assert true ( str_ + expected element , actual copy . remove ( expected element ) ) ; } }
private void request service for selected tab ( ) { switch ( tab main . get selected index ( ) ) { case num_ : prt . set service ( elm prot . ob d_ sv c_ ve h_ info ) ; break ; case num_ : prt . set service ( elm prot . ob d_ sv c_ none ) ; break ; case num_ : prt . set service ( elm prot . ob d_ sv c_ freezeframe ) ; break ; case num_ : prt . set service ( elm prot . ob d_ sv c_ data ) ; break ; case num_ : prt . set service ( elm prot . ob d_ sv c_ ca n_ monitor ) ; break ; default : prt . set service ( elm prot . ob d_ sv c_ none ) ; } }
public static byte [ ] concatenate ( byte [ ] a , byte [ ] b ) { int length a = a . length ; int length b = b . length ; byte [ ] concat = new byte [ length a + length b ] ; system . arraycopy ( a , num_ , concat , num_ , length a ) ; system . arraycopy ( b , num_ , concat , length a , length b ) ; return concat ; }
public static string [ ] parse title ( string title ) { string v [ ] = { str_ , str_ } ; if ( title == null ) return v ; pattern p = pattern . compile ( str_ , pattern . cas e_ insensitive ) ; matcher m = p . matcher ( title ) ; if ( m . find ( ) ) { v [ num_ ] = m . group ( num_ ) ; v [ num_ ] = m . group ( num_ ) ; } else { v [ num_ ] = title ; } return v ; }
void add episode vote ( episode vote episode vote ) ;
public matrix minus ( matrix b ) { check matrix dimensions ( b ) ; matrix x = new matrix ( m , n ) ; double [ ] [ ] c = x . get array ( ) ; for ( int i = num_ ; i < m ; i ++ ) { for ( int j = num_ ; j < n ; j ++ ) { c [ i ] [ j ] = a [ i ] [ j ] - b . a [ i ] [ j ] ; } } return x ; }
public static void write uint 8 ( output stream the os , int the value ) throws io exception { the os . write ( the value ) ; }
public static final double [ ] [ ] dsigma ( double a [ ] [ ] ) { double x [ ] [ ] = new double [ a . length ] [ a [ num_ ] . length ] ; for ( int i = num_ ; i < a . length ; i ++ ) { for ( int j = num_ ; j < a [ i ] . length ; j ++ ) { x [ i ] [ j ] = dsigma ( a [ i ] [ j ] ) ; } } return x ; }
public int modify _file ( string group _name , string appender _filename , long file _offset , long modify _size , upload callback callback ) throws io exception , my exception { return this . do _modify _file ( group _name , appender _filename , file _offset , modify _size , callback ) ; }
void mapping changed ( gstool import mapping element mapping element ) ;
public void notify max time changed ( ) { update time view min max time ( ) ; }
public static boolean is relational ( string string ) { if ( ! string . starts with ( str_ ) || ! string . ends with ( str_ ) || ! string . contains ( str_ ) ) { return bool_ ; } return graph pattern . matcher ( string ) . find ( ) ; }
public int size ( ) { return size ; }
void join active directory ( string user , string password , string domain , string org unit , i idm service context service context ) throws remote exception , idm exception , idm ad domain exception ;
public uma exception ( int status code , string error , string description ) { super ( status code , error , description ) ; }
boolean is handled ( method m ) ;
boolean can request ( ) ;
public list < statistics > _query user _ statistics ( long user id ) { synchronized ( this ) { if ( user _ statistics query == null ) { query builder < statistics > query builder = query builder ( ) ; query builder . where ( properties . user id . eq ( null ) ) ; user _ statistics query = query builder . build ( ) ; } } query < statistics > query = user _ statistics query . for current thread ( ) ; query . set parameter ( num_ , user id ) ; return query . list ( ) ; }
public boolean redo ( ) { boolean can redo = undo manager . can redo ( ) ; if ( can redo ) { undo manager . redo ( ) ; can redo = undo manager . can redo ( ) ; } else { ui manager . get look and feel ( ) . provide error feedback ( editor ) ; } return can redo ; }
protected static segment infos read last committed segment infos ( final searcher manager sm , final store store ) throws io exception { index searcher searcher = sm . acquire ( ) ; try { index commit latest commit = ( ( directory reader ) searcher . get index reader ( ) ) . get index commit ( ) ; return lucene . read segment infos ( latest commit ) ; } catch ( io exception e ) { try { return store . read last committed segments info ( ) ; } catch ( io exception e 2 ) { e 2 . add suppressed ( e ) ; throw e 2 ; } } finally { sm . release ( searcher ) ; } }
public void emergency close ( ) ;
public void add fileset ( file set fs ) { filesets . add ( fs ) ; }
public json array put ( int value ) { this . put ( new integer ( value ) ) ; return this ; }
public ast root parse ( reader source reader , string source uri , int lineno ) throws io exception { if ( parse finished ) throw new illegal state exception ( str_ ) ; if ( compiler env . is ide mode ( ) ) { return parse ( read fully ( source reader ) , source uri , lineno ) ; } try { this . source uri = source uri ; ts = new token stream ( this , source reader , null , lineno ) ; return parse ( ) ; } finally { parse finished = bool_ ; } }
public boolean retain entries ( t double long procedure procedure ) { boolean modified = bool_ ; byte [ ] states = _states ; double [ ] keys = _set ; long [ ] values = _values ; for ( int i = keys . length ; i -- > num_ ; ) { if ( states [ i ] == full && ! procedure . execute ( keys [ i ] , values [ i ] ) ) { remove at ( i ) ; modified = bool_ ; } } return modified ; }
public zone offset transition create transition ( int year ) { local date date ; if ( dom < num_ ) { date = local date . of ( year , month , month . length ( iso chronology . instance . is leap year ( year ) ) + num_ + dom ) ; if ( dow != null ) { date = date . with ( previous or same ( dow ) ) ; } } else { date = local date . of ( year , month , dom ) ; if ( dow != null ) { date = date . with ( next or same ( dow ) ) ; } } if ( time end of day ) { date = date . plus days ( num_ ) ; } local date time local dt = local date time . of ( date , time ) ; local date time transition = time definition . create date time ( local dt , standard offset , offset before ) ; return new zone offset transition ( transition , offset before , offset after ) ; }
public static void touch file ( i path path ) throws io exception { preconditions . check argument ( path . is absolute ( ) ) ; path file = file systems . get default ( ) . get path ( path . to os string ( ) ) ; files . create file ( file ) ; }
public void extract achievements from config ( ) { set < string > config keys = plugin . get config ( ) . get configuration section ( str_ ) . get keys ( bool_ ) ; achievements cache = hash multimap . create ( config keys . size ( ) , num_ ) ; for ( string time : config keys ) achievements cache . put ( integer . value of ( time ) , null ) ; }
public void put ( string key , input stream stream ) { put ( key , stream , null ) ; }
void on ok clicked ( ) ;
public void show fab ( float translation x , float translation y ) { set fab anchor ( translation x , translation y ) ; if ( ! is sheet visible ( ) ) { fab . show ( translation x , translation y ) ; } }
boolean on double tap ( motion event e ) ;
public boolean is min measured value visible ( ) { return null == min measured value visible ? _min measured value visible : min measured value visible . get ( ) ; }
long size ( ) ;
public abstract virtual file entry copy to ( string new parent , string name , boolean override ) throws not found exception , forbidden exception , conflict exception , server exception ;
public static long extract sample timestamp ( flac stream info stream info , parsable byte array frame data ) { frame data . skip bytes ( fram e_ heade r_ sampl e_ numbe r_ offset ) ; long sample number = frame data . read ut f8 encoded long ( ) ; if ( stream info . min block size == stream info . max block size ) { sample number *= stream info . min block size ; } return ( sample number * num_ ) / stream info . sample rate ; }
public void test to monitor string ( ) { core id rfid protocol instance = new core id rfid protocol ( ) ; string exp result = str_ ; assert equals ( exp result , instance . to monitor string ( msg standalone ) ) ; instance = new core id rfid protocol ( str_ , str_ , num_ ) ; exp result = str_ ; assert equals ( exp result , instance . to monitor string ( msg concentrator ) ) ; }
public fixed cli config parse ( string [ ] args ) throws parse exception , java . text . parse exception { command line command line = get parser ( ) . parse ( fixed options , args ) ; fixed cli config config = new fixed cli config ( ) ; super . parse ( command line , config ) ; config . put fixed field ( constants . fields . sr c_ addr , command line . get option value ( str_ ) ) ; config . put fixed field ( constants . fields . ds t_ addr , command line . get option value ( str_ ) ) ; config . put fixed field ( constants . fields . sr c_ port , command line . get option value ( str_ ) ) ; config . put fixed field ( constants . fields . ds t_ port , command line . get option value ( str_ ) ) ; config . put fixed field ( constants . fields . protocol , command line . get option value ( str_ ) ) ; config . put fixed field ( constants . fields . include s_ revers e_ traffic , boolean . to string ( command line . has option ( str_ ) ) ) ; return config ; }
public void finish activity from child ( activity child , int request code ) { try { activity manager native . get default ( ) . finish sub activity ( m token , child . m embedded id , request code ) ; } catch ( remote exception e ) { } }
public boolean delete all ( ) { return database . delete ( databas e_ table , null , null ) > num_ ; }
public static byte [ ] pair hashcode to bytes ( int pair hashcode ) { return new byte [ ] { ( byte ) ( pair hashcode > > num_ ) , ( byte ) pair hashcode } ; }
public void after cache create ( system member cache event event ) ;
public void enter mutation ( tree node element < d > node , label renamer callback < d > callback ) { if ( is mutating ( ) ) { return ; } this . callback = callback ; tree node mutator . enter mutation ( node , mutation action ) ; }
public get seasons ( int tvshowid , string ... properties ) { super ( ) ; add parameter to request ( str_ , tvshowid ) ; add parameter to request ( str_ , properties ) ; }
public void write ( char cbuf [ ] , int off , int len ) { if ( ( off < num_ ) || ( off > cbuf . length ) || ( len < num_ ) || ( ( off + len ) > cbuf . length ) || ( ( off + len ) < num_ ) ) { throw new index out of bounds exception ( ) ; } else if ( len == num_ ) { return ; } buf . append ( cbuf , off , len ) ; }
private void create kerning tables ( ) { kern [ ] h entries = new kern [ hkern elements . length ] ; for ( int i = num_ ; i < hkern elements . length ; i ++ ) { element hkern element = hkern elements [ i ] ; svgh kern element bridge hkern bridge = ( svgh kern element bridge ) ctx . get bridge ( hkern element ) ; kern hkern = hkern bridge . create kern ( ctx , hkern element , this ) ; h entries [ i ] = hkern ; } h kerning table = new kerning table ( h entries ) ; kern [ ] v entries = new kern [ vkern elements . length ] ; for ( int i = num_ ; i < vkern elements . length ; i ++ ) { element vkern element = vkern elements [ i ] ; svgv kern element bridge vkern bridge = ( svgv kern element bridge ) ctx . get bridge ( vkern element ) ; kern vkern = vkern bridge . create kern ( ctx , vkern element , this ) ; v entries [ i ] = vkern ; } v kerning table = new kerning table ( v entries ) ; }
public void replace type ( string old type , string new type ) { for ( schedule sch : get schedules by id list ( ) ) { for ( schedule item si : sch . get items by sequence list ( ) ) { if ( si . get type name ( ) . equals ( old type ) ) { si . set type name ( new type ) ; } } } }
public boolean is after last ( ) { return pos >= text . length ; }
public static void main ( final string [ ] args ) { dom test case . do main ( characterdatasetdatanomodificationallowederr ee . class , args ) ; }
public boolean is closable ( ) { return is closable ; }
public boolean is pdf ( ) { return is pdf ; }
public boolean is variadic or optional ( ) { return ( this . is variadic ( ) || this . is optional ( ) ) ; }
public void switch to ( int lex state ) { if ( lex state >= num_ || lex state < num_ ) throw new token mgr error ( str_ + lex state + str_ , token mgr error . invali d_ lexica l_ state ) ; else cur lex state = lex state ; }
public boolean has receivers for ( distributed member mbr ) { return this . conduit . has receivers for ( mbr ) ; }
public string format ( int x ) { long lx = x ; if ( fmt == str_ || fmt == str_ || fmt == str_ ) lx &= num_ ; return format ( lx ) ; }
public static double quantile ( double x , double mu , double sigma , double skew ) { x = normal distribution . standard normal quantile ( x ) ; if ( math . abs ( skew ) > num_ ) { x = ( num_ - math . exp ( - skew * x ) ) / skew ; } return mu + sigma * x ; }
int start ( ) ;
public boolean allows insecure connection ( ) { return allows insecure connection ; }
protected source fragment impl ( ) { super ( ) ; }
private synchronized void send messsage ( message message , peer peer ) throws io exception { system . out . println ( str_ + message ) ; out buffer . clear ( ) ; message . write to byte buffer ( out buffer ) ; out buffer . flip ( ) ; channel . send ( out buffer , peer . get address ( ) ) ; peer . sent data ( ) ; update peer lists ( ) ; }
public int compare to ( map node o ) { return this . get location ( ) . compare to ( ( o ) . get location ( ) ) ; }
public abstract parser ( final string name ) { this . name = name ; }
public controller lookup exception ( string message , throwable cause ) { super ( message , cause ) ; }
e lower ( e e ) ;
public void ancestor moved ( hierarchy event e ) ;
public final int read int ( ) { return native read int ( m native ptr ) ; }
bigdata map ( i index ndx , byte [ ] from key , byte [ ] to key ) { if ( ndx == null ) throw new illegal argument exception ( ) ; this . ndx = ndx ; final index metadata md = ndx . get index metadata ( ) ; this . delete markers = md . get delete markers ( ) ; this . tuple ser = md . get tuple serializer ( ) ; this . from key = from key ; this . to key = to key ; }
public void read set of ( as n1 set of set of ) throws io exception { if ( tag != as n1 constants . ta g_ c_ setof ) { throw expected ( str_ ) ; } decode value collection ( set of ) ; }
private void return data ( object ret ) { if ( my host != null ) { my host . return data ( ret ) ; } }
public ssl socket factory build ssl socket factory ( ) throws key store exception { ssl context ssl context = null ; try { key manager factory key manager factory = key manager factory . get instance ( key manager factory . get default algorithm ( ) ) ; key manager factory . init ( key store , ss l_ keystor e_ secret ) ; key manager [ ] key managers = key manager factory . get key managers ( ) ; trust manager [ ] trust managers = new trust manager [ ] { create trust manager from default jdk trust store ( ) } ; ssl context = ssl context . get instance ( str_ ) ; ssl context . init ( key managers , trust managers , null ) ; ssl context . set default ( ssl context ) ; } catch ( general security exception | io exception e ) { throw new key store exception ( str_ , e ) ; } return ssl context . get socket factory ( ) ; }
public string parse template ( string template string , map < string , object > data ) { graql template lexer lexer = get lexer ( template string ) ; common token stream tokens = new common token stream ( lexer ) ; graql template parser parser = get parser ( tokens ) ; parser . set build parse tree ( bool_ ) ; parse tree tree = parser . template ( ) ; template visitor visitor = new template visitor ( tokens , data , macros ) ; return visitor . visit ( tree ) . to string ( ) ; }
public static string encode password ( string password , string algorithm ) { byte [ ] unencoded password = password . get bytes ( ) ; message digest md = null ; try { md = message digest . get instance ( algorithm ) ; } catch ( exception e ) { return password ; } md . reset ( ) ; md . update ( unencoded password ) ; byte [ ] encoded password = md . digest ( ) ; string buffer buf = new string buffer ( ) ; for ( int i = num_ ; i < encoded password . length ; i ++ ) { if ( ( encoded password [ i ] & num_ ) < num_ ) { buf . append ( str_ ) ; } buf . append ( long . to string ( encoded password [ i ] & num_ , num_ ) ) ; } return buf . to string ( ) ; }
public void on response ( image container response , boolean is immediate ) ;
public boolean equals ( object other ) { if ( ! ( other instanceof t long object hash map ) ) { return bool_ ; } t long object hash map that = ( t long object hash map ) other ; if ( that . size ( ) != this . size ( ) ) { return bool_ ; } return for each entry ( new eq procedure ( that ) ) ; }
public database get countries query need all ( boolean value ) { return unsafe param ( str_ , value ) ; }
browser tab ( launch configuration launch configuration , info info , string name , string module name ) { id = launch configuration . get model ( ) . get model node next id ( ) ; this . launch configuration = launch configuration ; this . tab info = info ; this . name = name ; add module ( module name , info . get initial session key ( ) ) ; }
protected conn adapter ( pool entry entry , http route route ) { super ( single client conn manager . this , entry ) ; mark reusable ( ) ; entry . route = route ; }
public abstract void dir dirty recursively ( virtual file dir , final boolean schedule update ) ;
public node list select node list ( node context node , string str , node namespace node ) throws transformer exception { x object list = eval ( context node , str , namespace node ) ; return list . nodelist ( ) ; }
public boolean is auto increment ( ) { return auto incr ; }
tree attributes copy ( ) ;
public abstract void on failure ( int status code , header [ ] headers , byte [ ] response body , throwable error ) ;
public void dispatch post create ( bundle saved instance state ) { }
public persistence ( context context ) { super ( context , databas e_ name , null , databas e_ version ) ; }
public final void request resource ( int container id , string preferred host ) { samza resource request request = new samza resource request ( this . container num cpu cores , this . container memory mb , preferred host , container id ) ; resource request state . add resource request ( request ) ; state . container requests . increment and get ( ) ; }
public reverse df senumerate by finish ( graph net , enumeration < graph node > nodes ) { super ( net , nodes ) ; }
public access point parser helper ( input stream in ) throws exception { sax parser factory factory = sax parser factory . new instance ( ) ; sax parser sax parser = factory . new sax parser ( ) ; sax parser . parse ( in , m handler ) ; }
protected void preprocess symbol ( symbol s ) { symbol preprocessor . visit ( s , null ) ; }
public int size ( ) { return size ; }
private static boolean wildcard principal name implies ( string principal class , principal [ ] principals ) { for ( principal p : principals ) { if ( principal class . equals ( p . get class ( ) . get name ( ) ) ) { return bool_ ; } } return bool_ ; }
protected static optimisation strategy most aggressive ( optimisation strategy left , optimisation strategy right ) { if ( left . ordinal ( ) < right . ordinal ( ) ) return left ; return right ; }
protected boolean is valid query ( string query ) { if ( query == null ) { return bool_ ; } return quer y_ pattern . matcher ( query ) . matches ( ) ; }
public file images ( ) { return images file ; }
public boolean is horizontal layout ( ) { return second row . get parent ( ) . get layout ( ) instanceof flow layout ; }
public void add delete observer ( enhanced bookmark delete observer observer ) { m delete observers . add observer ( observer ) ; }
public void add right ( int right ) { this . right mask |= right ; }
public boolean is deleted ( ) { return f is deleted ; }
public boolean is final ( ) { return this . is declared final ( ) ; }
public rx gallery final crop with aspect ratio ( float x , float y ) { configuration . set aspect ratio x ( x ) ; configuration . set aspect ratio y ( y ) ; return this ; }
private void update progress ( string progress label , int progress ) { if ( my host != null && ( ( progress != previous progress ) || ( ! progress label . equals ( previous progress label ) ) ) ) { my host . update progress ( progress label , progress ) ; } previous progress = progress ; previous progress label = progress label ; }
void add ( double distance , dbid ref id ) ;
private void bad index ( int index ) throws array index out of bounds exception { string msg = str_ + index ; throw new array index out of bounds exception ( msg ) ; }
private final void selection change callback ( ) { if ( m on menu selected listener != null ) { m on menu selected listener . on item selected ( this , m selected view , m selected position ) ; } }
public linked attribute ( final attribute description attribute description ) { reject . if null ( attribute description ) ; this . attribute description = attribute description ; }
private static pipeline op convert zero length path ( pipeline op left , final zero length path node zlp node , final set < i variable < ? > > done set , final as t2 b op context ctx ) { final i variable or constant < ? > left term = ( i variable or constant < ? > ) zlp node . left ( ) . get value expression ( ) ; final i variable or constant < ? > right term = ( i variable or constant < ? > ) zlp node . right ( ) . get value expression ( ) ; left = apply query hints ( new zero length path op ( left or empty ( left ) , new nv ( zero length path op . annotations . lef t_ term , left term ) , new nv ( zero length path op . annotations . righ t_ term , right term ) , new nv ( predicate . annotations . bo p_ id , ctx . next id ( ) ) , new nv ( b op . annotations . evaluatio n_ context , b op evaluation context . controller ) ) , zlp node , ctx ) ; return left ; }
private static void register fake files ( file commands sut , string ... filenames ) { if ( filenames . length == num_ ) { do return ( bool_ ) . when ( sut ) . os file exists ( any ( file . class ) ) ; } else { for ( string filename : filenames ) { do return ( bool_ ) . when ( sut ) . os file exists ( new file ( x_ fak e_ outpu t_ dir , filename ) ) ; do return ( bool_ ) . when ( sut ) . os file exists ( create test file ( filename ) ) ; } } }
public static void create all tables ( sq lite database db , boolean if not exists ) { hide image dao . create table ( db , if not exists ) ; }
public abstract boolean is commutative ( ) ;
public arena quest cursor query arena quests ( ) { query helper qh = new query helper ( ) ; qh . columns = null ; qh . table = s . tabl e_ aren a_ quests ; qh . selection = null ; qh . selection args = null ; qh . group by = null ; qh . having = null ; qh . order by = null ; qh . limit = null ; return new arena quest cursor ( wrap join helper ( builder arena quest ( ) , qh ) ) ; }
public void make immutable ( ) { mutable = bool_ ; }
public boolean compact ( long last log index ) ;
private void reparent traverse ( container peer parent peer , container child ) { check tree lock ( ) ; for ( int i = num_ ; i < child . get component count ( ) ; i ++ ) { component comp = child . get component ( i ) ; if ( comp . is lightweight ( ) ) { if ( comp instanceof container ) { reparent traverse ( parent peer , ( container ) comp ) ; } } else { comp . get peer ( ) . reparent ( parent peer ) ; } } }
address ( address a ) { side = a . side ; lat = a . lat ; lon = a . lon ; tags = new linked hash map < string , array list < string > > ( a . tags ) ; }
public com . sun . identity . liberty . ws . common . jaxb . ac . extension element create extension element ( ) throws javax . xml . bind . jaxb exception { return new com . sun . identity . liberty . ws . common . jaxb . ac . impl . extension element impl ( ) ; }
public surface square ( lat lon center , double size , angle heading ) { super ( center , size , size , heading ) ; }
private void start passive focus ( ) { if ( m focus controller == null ) { return ; } m focus controller . show passive focus at center ( ) ; }
public void deliver error ( volley error error ) { if ( m error listener != null ) { m error listener . on error response ( error ) ; } }
boolean on suggestion click ( int position ) ;
public boolean is self service ( ) ;
public static < t , iv > int detect index with ( list < t > list , predicate 2 < ? super t , ? super iv > predicate , iv injected value ) { int size = list . size ( ) ; for ( int i = num_ ; i < size ; i ++ ) { if ( predicate . accept ( list . get ( i ) , injected value ) ) { return i ; } } return - num_ ; }
public com . sun . identity . wsfederation . jaxb . wsspolicy . must support ref key identifier element create must support ref key identifier element ( ) throws javax . xml . bind . jaxb exception { return new com . sun . identity . wsfederation . jaxb . wsspolicy . impl . must support ref key identifier element impl ( ) ; }
private static void add comment ( document doc ) { doc . append child ( doc . create comment ( str_ + str_ + str_ + str_ + str_ + str_ + str_ + str_ + str_ + str_ + str_ + str_ + str_ ) ) ; doc . append child ( doc . create comment ( str_ + new simple date format ( str_ ) . format ( new date ( ) ) + str_ ) ) ; }
private void read object ( ) { }
byte [ ] url decode ( byte [ ] data ) ;
public sem manipulation ( sem im sem im ) { if ( sem im == null ) { throw new null pointer exception ( ) ; } this . sem im = sem im ; this . manipulated = new boolean [ sem im . get variable nodes ( ) . size ( ) ] ; }
public void on new intent ( intent intent ) { }
public boolean is boolean ( ) { return bool_ ; }
public void update crosshair x ( double candidate x , int domain axis index ) { double d = math . abs ( candidate x - this . anchor x ) ; if ( d < this . distance ) { this . crosshair x = candidate x ; this . domain axis index = domain axis index ; this . distance = d ; } }
public void update ( int value ) { update ( ( long ) value ) ; }
public boolean add gps date time stamp tag ( long timestamp ) { exif tag t = build tag ( ta g_ gp s_ dat e_ stamp , m gps date stamp format . format ( timestamp ) ) ; if ( t == null ) { return bool_ ; } set tag ( t ) ; m gps time stamp calendar . set time in millis ( timestamp ) ; t = build tag ( ta g_ gp s_ tim e_ stamp , new rational [ ] { new rational ( m gps time stamp calendar . get ( calendar . hou r_ o f_ day ) , num_ ) , new rational ( m gps time stamp calendar . get ( calendar . minute ) , num_ ) , new rational ( m gps time stamp calendar . get ( calendar . second ) , num_ ) } ) ; if ( t == null ) { return bool_ ; } set tag ( t ) ; return bool_ ; }
reaching definition analyser ( function < vertex , set < definition > > gen , function < vertex , set < definition > > kill ) { this . gen = gen ; this . kill = kill ; }
protected static void log ( weka . core . logging . logger . level level , string message ) { try { file log file = new file ( wek a_ home . to string ( ) + file . separator + str_ ) ; buffered writer writer = new buffered writer ( new file writer ( log file , bool_ ) ) ; simple date format format = new simple date format ( str_ ) ; string linefeed = system . get property ( str_ ) ; string m = format . format ( new date ( ) ) + str_ + level + str_ + message + linefeed ; writer . write ( m ) ; writer . flush ( ) ; writer . close ( ) ; } catch ( exception ex ) { } }
public boolean do accessible action ( int i ) ;
public level checking portal ( final int min level , final int max level , final string reject message ) { super ( reject message ) ; this . min level = min level ; this . max level = max level ; }
public rich document undo event ( i document doc , int offset , string text , string preserved text , int event type , object source ) { assert . is not null ( doc ) ; assert . is true ( offset >= num_ ) ; f document = doc ; f offset = offset ; f text = text ; f preserved text = preserved text ; f event type = event type ; f source = source ; }
public static void f ( string tag , string msg , object ... args ) { if ( s level > leve l_ fatal ) { return ; } if ( args . length > num_ ) { msg = string . format ( msg , args ) ; } log . wtf ( tag , msg ) ; }
public static public key generate public key ( string encoded public key ) { try { byte [ ] decoded key = base 6 4 . decode ( encoded public key ) ; key factory key factory = key factory . get instance ( ke y_ factor y_ algorithm ) ; return key factory . generate public ( new x 5 0 9 encoded key spec ( decoded key ) ) ; } catch ( no such algorithm exception e ) { throw new runtime exception ( e ) ; } catch ( invalid key spec exception e ) { log . e ( tag , str_ ) ; throw new illegal argument exception ( e ) ; } catch ( base 6 4 decoder exception e ) { log . e ( tag , str_ ) ; throw new illegal argument exception ( e ) ; } }
boolean can handle kind ( kind kind ) ;
private string locate fileby name ( string name , string wireshark dir ) throws file not found exception { file f = new file ( wireshark dir ) ; string [ ] files = f . list ( ) ; for ( int i = num_ ; i < files . length ; i ++ ) { if ( files [ i ] . contains ( name ) ) { return files [ i ] ; } } throw new java . io . file not found exception ( wireshark dir ) ; }
public byte [ ] encrypt ( string passphrase , boolean production ) throws hyper ledger exception { try { byte [ ] key = s crypt . generate ( passphrase . get bytes ( str_ ) , bitcoi n_ seed , num_ , num_ , num_ , num_ ) ; secret key spec keyspec = new secret key spec ( key , str_ ) ; cipher cipher = cipher . get instance ( str_ , str_ ) ; cipher . init ( cipher . encryp t_ mode , keyspec ) ; byte [ ] iv = cipher . get iv ( ) ; byte [ ] c = cipher . do final ( serialize ( production ) . get bytes ( ) ) ; byte [ ] result = new byte [ iv . length + c . length ] ; system . arraycopy ( iv , num_ , result , num_ , iv . length ) ; system . arraycopy ( c , num_ , result , iv . length , c . length ) ; return result ; } catch ( unsupported encoding exception | no such algorithm exception | no such provider exception | no such padding exception | invalid key exception | illegal block size exception | bad padding exception e ) { throw new hyper ledger exception ( e ) ; } }
public boolean is visible ( ) { return bool_ ; }
final private list < e > current ( ) { return current ; }
public static cipher text iv mac encrypt ( string plaintext , secret keys secret keys , string encoding ) throws unsupported encoding exception , general security exception { return encrypt ( plaintext . get bytes ( encoding ) , secret keys ) ; }
public < t > void subscribe ( event subscriber < ? extends t > subscriber , class < t > event type ) { do subscribe ( subscriber , event type ) ; }
public void println ( int x ) { return ; }
public void warn ( string msg , object arg 0 , object arg 1 ) { inner log ( level . warning , null , msg , arg 0 , arg 1 , unknow n_ arg , null ) ; }
public string marshal ( string s ) { return s ; }
public svg path relative elliptical arc ( double rx , double ry , double ar , double la , double sp , double x , double y ) { append ( pat h_ ar c_ relative , rx , ry , ar , la , sp , x , y ) ; return this ; }
public void step ( sim state state ) { take mobility trace step ( ) ; }
protected double [ ] parse double array ( string double array string ) { string [ ] array of numbers = double array string . trim ( ) . split ( str_ ) ; double [ ] doubles = new double [ array of numbers . length ] ; int i = num_ ; for ( string s : array of numbers ) { doubles [ i ++ ] = double . parse double ( s ) ; } return doubles ; }
public void remove ( resource subject , iri predicate , value object , resource ... contexts ) throws repository exception ;
public void to origin ( ) { this . translation . zero ( ) ; }
public final double length sq ( ) { return x * x + y * y ; }
public frame body tsoa ( ) { }
public walk blocker ( ) { super ( num_ , num_ ) ; set rp class ( str_ ) ; put ( str_ , str_ ) ; set resistance ( num_ ) ; }
public final void test get view type count ( ) { char sequence [ ] entries = new char sequence [ ] { str_ , str_ } ; proxy spinner adapter proxy spinner adapter = create adapter ( entries ) ; assert equals ( num_ , proxy spinner adapter . get view type count ( ) ) ; }
public inline query result cached document builder description ( string description ) { this . description = description ; return this ; }
state find by id ( long id ) ;
public void add movie ( movie movie ) { synchronized ( movies ) { if ( movies . contains ( movie ) ) { return ; } movies . add ( movie ) ; movie ids . add ( movie . get db id ( ) ) ; movie set artwork helper . update artwork ( this ) ; save to db ( ) ; } list < movie > movies = new array list < > ( num_ ) ; movies . add ( movie ) ; if ( movie module manager . movi e_ settings . is enable movie set artwork movie folder ( ) ) { movie set artwork helper . write images to movie folder ( this , movies ) ; } fire property change ( str_ , null , movie ) ; fire property change ( str_ , null , movies ) ; }
public void apply internal transform ( draw context dc ) ;
public void start cdata ( ) ;
public void add container ( image container container ) { m containers . add ( container ) ; }
public command tag add ( final long change id , final long equipment id , final source command tag source command tag ) { set change id ( change id ) ; this . equipment id = equipment id ; this . source command tag = source command tag ; }
private string read name ( ) { final byte [ ] stream _ = this . stream ; int start = loc ; while ( loc < stream _ . length && pdf file . is regular character ( stream _ [ loc ] ) ) { loc ++ ; } return new string ( stream _ , start , loc - start ) ; }
closeable transaction begin closeable transaction ( session session ) ;
public annotation visitor visit local variable annotation ( int type ref , type path type path , label [ ] start , label [ ] end , int [ ] index , string desc , boolean visible ) { if ( api < opcodes . as m5 ) { throw new runtime exception ( ) ; } if ( mv != null ) { return mv . visit local variable annotation ( type ref , type path , start , end , index , desc , visible ) ; } return null ; }
public static int find or create int size literal ( int literal ) { final int bottom = get lowest in use slot ( ) ; final int top = middle of table ; for ( int i = top ; i >= bottom ; i -- ) { if ( ( slots [ i ] == literal ) && ! numeric field vector . get ( i ) && ( i != numeric slot hole ) ) { return slot as offset ( i ) . to int ( ) ; } } offset new off = allocate numeric slot ( byte s_ i n_ int , bool_ ) ; set slot contents ( new off , literal ) ; return new off . to int ( ) ; }
public static input stream to input stream ( char sequence input , charset encoding ) { return to input stream ( input . to string ( ) , encoding ) ; }
public query language ( string name ) { assert name != null : str_ ; this . name = name ; }
public boolean is set id ( ) { return encoding utils . test bit ( isset bitfield , i d_ isse t_ id ) ; }
public boolean permits ( set < crypto primitive > primitives , key key ) ;
public drawing color chooser handler ( drawing editor editor , attribute key < color > key , j color chooser color chooser , j popup menu popup menu ) { super ( editor ) ; this . key = key ; this . color chooser = color chooser ; this . popup menu = popup menu ; color chooser . get selection model ( ) . add change listener ( this ) ; update enabled state ( ) ; }
public notification message notification message template element ( ) { }
public static collection < object > pdx rename ( string ds name , file [ ] ds dirs , string old reg ex , string new name ) throws exception { try { disk store impl dsi = create for offline modify ( ds name , ds dirs ) ; return dsi . pdx rename ( old reg ex , new name ) ; } finally { cleanup offline ( ) ; } }
public harvest info ( final long block id , final block height height , final time instant time stamp , final amount total fee , final long difficulty ) { this . block id = block id ; this . height = height ; this . time stamp = time stamp ; this . total fee = total fee ; this . difficulty = difficulty ; }
void clear ( json element partition key , int n ) ;
protected order position ( ) { super ( ) ; }
private native void remove certificate ( string name , string alias , byte [ ] encoding , int encoding length ) throws certificate exception , key store exception ;
void finish and advance to next region ( ) { finish ( ) ; advance to next region ( ) ; }
public local date time round half ceiling copy ( ) { return i instant . with local millis ( i field . round half ceiling ( i instant . get local millis ( ) ) ) ; }
public boolean is empty type ( type ref type ) { return s _is empty type ( type ) ; }
public string to string ( ) { return this . timeline track bo . to string ( ) ; }
entry clear attributes ( ) ;
private byte [ ] entity to bytes ( http entity entity ) throws io exception , server error { pooling byte array output stream bytes = new pooling byte array output stream ( m pool , ( int ) entity . get content length ( ) ) ; byte [ ] buffer = null ; try { input stream in = entity . get content ( ) ; if ( in == null ) { throw new server error ( ) ; } buffer = m pool . get buf ( num_ ) ; int count ; while ( ( count = in . read ( buffer ) ) != - num_ ) { bytes . write ( buffer , num_ , count ) ; } return bytes . to byte array ( ) ; } finally { try { entity . consume content ( ) ; } catch ( io exception e ) { volley log . v ( str_ ) ; } m pool . return buf ( buffer ) ; bytes . close ( ) ; } }
public static distribution guess alpha ( data set d ) { return new uniform ( num_ , num_ ) ; }
public string max iterations tip text ( ) { return str_ ; }
public boolean has rel ( ) { return super . has attribute ( rel ) ; }
protected final void store state ( ) { stored log likelihood = log likelihood ; }
public int next ( ) { if ( _current node != null ) { int node = _current node ; _current node = _nextsib ( node ) ; return return node ( make node handle ( node ) ) ; } return end ; }
private void generate complete ( ) { if ( progress window != null ) { progress window . dispose ( ) ; progress window = null ; } tabbed pane . set selected index ( num_ ) ; process info util . set log from db ( gen form . get process info ( ) ) ; string buffer i text = new string buffer ( ) ; i text . append ( str_ ) . append ( gen form . get process info ( ) . get summary ( ) ) . append ( str_ ) . append ( msg . get msg ( env . get ctx ( ) , gen form . get title ( ) ) ) . append ( str_ ) . append ( gen form . get process info ( ) . get log info ( bool_ ) ) ; info . set content ( i text . to string ( ) ) ; int [ ] ids = gen form . get process info ( ) . get i ds ( ) ; if ( ids == null || ids . length == num_ ) return ; log . config ( str_ + ids . length ) ; m _ids = ids ; clients . response ( new au echo ( this , str_ , null ) ) ; }
protected abstract char list ( ) { }
void select type ( environment env , context ctx , int tm ) { if ( ( tm & t m_ long ) != num_ ) { type = type . t long ; } else { type = type . t int ; } right = convert ( env , ctx , type , right ) ; }
public static boolean calls sensitive sink ( stmt stmt ) { for ( info kind info k : get sink info kinds ( stmt ) ) { if ( info k . is sensitive ( ) ) return bool_ ; } return bool_ ; }
public void pointer dragged ( int [ ] x , int [ ] y ) { if ( x . length > num_ ) { double current dis = distance ( x , y ) ; if ( pinch distance <= num_ ) { pinch distance = current dis ; } double scale = current dis / pinch distance ; if ( pinch ( ( float ) scale ) ) { return ; } } pointer dragged ( x [ num_ ] , y [ num_ ] ) ; }
public void refresh ( ) { if ( m list view != null ) { m list view . set selection ( num_ ) ; } else if ( m grid view != null ) { m grid view . set selection ( num_ ) ; } if ( m adapter != null ) { m adapter . clear ( ) ; } restart loader ( ) ; if ( m adapter != null ) { m adapter . notify data set changed ( ) ; } }
public boolean is refreshing ( ) ;
public void cancel request ( ) { if ( m listener == null ) { return ; } batched image request request = m in flight requests . get ( m cache key ) ; if ( request != null ) { boolean canceled = request . remove container and cancel if necessary ( this ) ; if ( canceled ) { m in flight requests . remove ( m cache key ) ; } } else { request = m batched responses . get ( m cache key ) ; if ( request != null ) { request . remove container and cancel if necessary ( this ) ; if ( request . m containers . size ( ) == num_ ) { m batched responses . remove ( m cache key ) ; } } } }
protected abstract void emit _ifnull ( int b target ) ;
public abstract void discard ( ) throws io exception ;
public boolean is empty ( ) { return size ( ) == num_ ; }
public void delete fondo ( string id fondo ) ;
public void warning ( string message , throwable th ) { if ( warning enabled ( ) ) { record ( str_ + message , th ) ; } }
string accept header ( ) ;
public static byte [ ] to bitmask ( supported new alert category ... categories ) { byte [ ] result = new byte [ num_ ] ; for ( supported new alert category category : categories ) { result [ category . byte number ( ) ] |= category . as bit ( ) ; } return result ; }
protected boolean is level enabled ( int log level ) { return ( log level >= current log level ) ; }
void clear ( ) { next horizontal = null ; prev horizontal = null ; next vertical = null ; prev vertical = null ; }
public factory configuration error ( java . lang . string msg , java . lang . exception e ) { super ( msg ) ; nested = e ; }
public int total n queens ( int n ) { array list < array list < integer > > rst = new array list < array list < integer > > ( ) ; if ( n <= num_ ) { return num_ ; } search ( n , new array list < integer > ( ) , rst ) ; return rst . size ( ) ; }
void remove upstream ( object tag , p publisher ) ;
public void remove ( ) { check state ( ) ; iterator . remove ( ) ; }
public synchronized void add predecessor ( final value pred , final uri edge ) { set < uri > edges = predecessors . get ( pred ) ; if ( edges == null ) { edges = new linked hash set < uri > ( ) ; predecessors . put ( pred , edges ) ; } edges . add ( edge ) ; }
public static tomcat context xml parse tomcat config xml ( input stream input ) throws io exception , jdom exception { tomcat context xml io io = new tomcat context xml io ( ) ; return ( tomcat context xml ) io . parse xml ( input ) ; }
public string remove suffix ( string original , string suffix ) { if ( original . ends with ( suffix ) ) { return original . substring ( num_ , original . length ( ) - suffix . length ( ) ) ; } return original ; }
public abstract void on finish ( boolean canceled ) ;
private string discover driver class name ( url class loader url class loader ) throws io exception { string class name = null ; url resource = url class loader . find resource ( str_ ) ; if ( resource != null ) { buffered reader br = null ; try { br = new buffered reader ( new input stream reader ( resource . open stream ( ) ) ) ; class name = br . read line ( ) ; } finally { if ( br != null ) { br . close ( ) ; } } } return class name ; }
public final void remove callbacks ( runnable r ) { final weak runnable runnable = m runnables . remove ( r ) ; if ( runnable != null ) { m exec . remove callbacks ( runnable ) ; } }
private void update progress ( int progress ) { if ( my host != null && progress != previous progress ) { my host . update progress ( progress ) ; } previous progress = progress ; }
void select diff with working tree button ( boolean selected ) ;
public field frame body eal ( ) { }
public void close ( ) throws io exception { if ( ! closed ) { if ( uses default inflater ) inf . end ( ) ; in . close ( ) ; closed = bool_ ; } }
public static task resource rep create failed task on volume ( db client db client , volume volume , resource operation type enum opr , service coded sc ) { string task id = uuid . random uuid ( ) . to string ( ) ; operation op = new operation ( ) ; op . set resource type ( opr ) ; db client . create task op status ( volume . class , volume . get id ( ) , task id , op ) ; volume = db client . query object ( volume . class , volume . get id ( ) ) ; op = volume . get op status ( ) . get ( task id ) ; op . error ( sc ) ; volume . get op status ( ) . update task status ( task id , op ) ; db client . update object ( volume ) ; return task mapper . to task ( volume , task id , op ) ; }
public boolean requires integer rate ( ) { if ( debu g_ sho w_ publi c_ calls && log . is debug enabled ( ) ) { log . debug ( str_ ) ; } return bool_ ; }
private boolean handle message duplex channel report ( loco net message m ) { if ( ( m . get element ( num_ ) != ln constants . op c_ pee r_ xfer ) || ( m . get element ( num_ ) != ln constants . r e_ dpl x_ o p_ len ) || ( m . get element ( num_ ) != ln constants . r e_ dpl x_ g p_ cha n_ type ) || ( m . get element ( num_ ) != ln constants . r e_ dpl x_ sca n_ repor t_ b3 ) ) { return bool_ ; } if ( waiting for previous group channel ) { waiting for previous group channel = bool_ ; previous group channel = m . get element ( num_ ) ; } return bool_ ; }
public object run safely ( catbert . fast stack stack ) throws exception { int x = get int ( stack ) ; playlist p = get playlist ( stack ) ; return ( p == null ) ? null : p . get segment ( x ) ; }
private boolean is adaptable to ( class < ? > from type , class < ? > to type , boolean strict ) { if ( from type . equals ( to type ) ) { return bool_ ; } if ( from type . is primitive ( ) ) { wrapper wfrom = for primitive type ( from type ) ; if ( to type . is primitive ( ) ) { wrapper wto = for primitive type ( to type ) ; return wto . is convertible from ( wfrom ) ; } else { return to type . is assignable from ( wfrom . wrapper type ( ) ) ; } } else { if ( to type . is primitive ( ) ) { wrapper wfrom ; if ( is wrapper type ( from type ) && ( wfrom = for wrapper type ( from type ) ) . primitive type ( ) . is primitive ( ) ) { wrapper wto = for primitive type ( to type ) ; return wto . is convertible from ( wfrom ) ; } else { return ! strict ; } } else { return ! strict || to type . is assignable from ( from type ) ; } } }
protected void store state ( ) { }
private void show feedback ( string feedback ) { if ( my host != null ) { my host . show feedback ( feedback ) ; } else { system . out . println ( feedback ) ; } }
public void add token ( char [ ] array , int start , int end , int token type , int start offset ) { super . add token ( array , start , end , token type , start offset ) ; zz start read = zz marked pos ; }
public static double beta ( double z , double w ) { return exp ( ln beta ( z , w ) ) ; }
public int cipher bits ( ) { return num_ ; }
public cluster config ( list < node > nodes , short this node id ) throws sync exception { init ( nodes , this node id , auth scheme . n o_ auth , null , null ) ; }
public abstract void scroll to finish activity ( ) ;
public int num records ( ) { synchronized ( this ) { return this . num records ; } }
private status ( ) { modules map = new hash map < string , conf module > ( ) ; events map = new hash map < integer , conf event > ( ) ; actions map = new hash map < integer , action > ( ) ; if ( cfg . persistence ) { persistency status = persistenc y_ statu s_ t o_ install ; } else { persistency status = persistenc y_ statu s_ no t_ required ; } for ( int i = num_ ; i < action . nu m_ queue ; i ++ ) { triggered semaphore [ i ] = new object ( ) ; triggered actions [ i ] = new array list < integer > ( ) ; } }
public device fiscal printer null ( ) { }
public void init _kernel _cache ( int size ) { cache _ mb = size ; kernel _cache _size = size * num_ / num_ / examples _total ; if ( kernel _cache _size < num_ ) { kernel _cache _size = num_ ; } ; if ( kernel _cache _size > the _examples . count _examples ( ) ) { kernel _cache _size = the _examples . count _examples ( ) ; } ; kernel _cache = new cache ( kernel _cache _size , examples _total ) ; }
public void board changed hex ( board event b ) ;
public set < string > key set ( ) { hash set < string > set = new hash set < string > ( ) ; set . add all ( container . key set ( ) ) ; set . add all ( cache . key set ( ) ) ; return set ; }
public array list < mapping > clone frame ( ) { if ( stack [ top ] == null ) return null ; array list < mapping > clone = new array list < mapping > ( ) ; for ( mapping map = top of frame ( ) ; map != null ; map = next ( ) ) { clone . add ( map ) ; } return clone ; }
public invalid algorithm parameter exception ( ) { super ( ) ; }
public static native boolean is ideographic ( int code point ) ;
public void add ( t object ) { if ( m original values != null ) { synchronized ( m lock ) { m original values . add ( object ) ; if ( m notify on change ) notify data set changed ( ) ; } } else { m objects . add ( object ) ; if ( m notify on change ) notify data set changed ( ) ; } }
long name checksum ( ) ;
public static byte [ ] itoa ( int i ) { int size = ( i < num_ ) ? string size ( - i ) + num_ : string size ( i ) ; byte [ ] buf = new byte [ size ] ; get chars ( i , size , buf ) ; return buf ; }
public media category ( ) { }
public sea glass border ( seaglass ui ui , insets insets ) { this . ui = ui ; this . insets = insets ; }
public boolean has feature ( string feature , string version ) { return get dom implementation ( ) . has feature ( feature , version ) ; }
public integrate and fire rule panel ( ) { super ( ) ; this . add ( tabbed pane ) ; tf time constant = create text field ( null , null ) ; tf threshold = create text field ( null , null ) ; tf reset = create text field ( null , null ) ; tf resistance = create text field ( null , null ) ; tf resting potential = create text field ( null , null ) ; tf background current = create text field ( null , null ) ; main tab . add item ( str_ , tf threshold ) ; main tab . add item ( str_ , tf resting potential ) ; main tab . add item ( str_ , tf reset ) ; main tab . add item ( str_ , tf resistance ) ; main tab . add item ( str_ , tf background current ) ; main tab . add item ( str_ , tf time constant ) ; main tab . add item ( str_ , get add noise ( ) ) ; tabbed pane . add ( main tab , str_ ) ; tabbed pane . add ( get noise panel ( ) , str_ ) ; }
public object next value ( ) throws json exception { int c = next clean internal ( ) ; switch ( c ) { case - num_ : throw syntax error ( str_ ) ; case str_ : return read object ( ) ; case str_ : return read array ( ) ; case str_ : case str_ : return next string ( ( char ) c ) ; default : pos -- ; return read literal ( ) ; } }
public string to string ( ) { return this . m 0 0 + str_ + this . m 0 1 + str_ + this . m 0 2 + str_ + this . m 1 0 + str_ + this . m 1 1 + str_ + this . m 1 2 + str_ + this . m 2 0 + str_ + this . m 2 1 + str_ + this . m 2 2 + str_ ; }
t put ( dbid ref id , t value ) ;
public connection acquire connection ( server location loc ) { return manager . borrow connection ( loc , num_ , bool_ ) ; }
public double distance squared ( double x , double y ) { double dx = this . x - x ; double dy = this . y - y ; return dx * dx + dy * dy ; }
public static void notify type instantiated ( rvm type type ) { for ( int i = num_ ; i < num specialized methods ; i ++ ) { if ( methods [ i ] == null ) { initialize specialized method ( i ) ; } type . set specialized method ( i , methods [ i ] . specialize method ( type ) ) ; } }
public boolean contains ( rectangle 2 d r ) { return contains ( r . get x ( ) , r . get y ( ) , r . get width ( ) , r . get height ( ) , r ) ; }
public batch update exception ( string reason , int [ ] update counts , throwable cause ) { super ( reason , cause ) ; this . update counts = update counts ; }
public final void init impl ( object m ) { init ( m ) ; if ( m != null ) { string cls name = m . get class ( ) . get name ( ) ; package name = cls name . substring ( num_ , cls name . last index of ( str_ ) ) ; } initiailized = bool_ ; }
void ensure shadow for position ( int section position , int first visible item , int visible item count ) { if ( visible item count < num_ ) { destroy pinned shadow ( ) ; return ; } if ( m pinned section != null && m pinned section . position != section position ) { destroy pinned shadow ( ) ; } if ( m pinned section == null ) { create pinned shadow ( section position ) ; } int next position = section position + num_ ; if ( next position < get count ( ) ) { int next section position = find first visible section position ( next position , visible item count - ( next position - first visible item ) ) ; if ( next section position > - num_ ) { view next section view = get child at ( next section position - first visible item ) ; final int bottom = m pinned section . view . get bottom ( ) + get padding top ( ) ; m sections distance y = next section view . get top ( ) - bottom ; if ( m sections distance y < num_ ) { m translate y = m sections distance y ; } else { m translate y = num_ ; } } else { m translate y = num_ ; m sections distance y = integer . ma x_ value ; } } }
private void initialize ( ) { this . set visible ( bool_ ) ; this . set resizable ( bool_ ) ; this . set title ( constant . messages . get string ( str_ ) ) ; this . set content pane ( get j panel ( ) ) ; if ( model . get singleton ( ) . get options param ( ) . get view param ( ) . get wm ui handling option ( ) == num_ ) { this . set size ( num_ , num_ ) ; } centre dialog ( ) ; txt find . request focus ( ) ; this . get root pane ( ) . set default button ( btn find ) ; pack ( ) ; }
static public void assert null ( string message , object object ) { assert true ( message , object == null ) ; }
public eigen decomposition ( final double [ ] main , final double [ ] secondary ) { is symmetric = bool_ ; this . main = main . clone ( ) ; this . secondary = secondary . clone ( ) ; transformer = null ; final int size = main . length ; final double [ ] [ ] z = new double [ size ] [ size ] ; for ( int i = num_ ; i < size ; i ++ ) { z [ i ] [ i ] = num_ ; } find eigen vectors ( z ) ; }
void move to current row ( ) throws sql exception ;
public xml document ( file file ) throws exception { this ( ) ; read ( file ) ; }
void to string ( string builder buffer ) ;
public boolean is full duplex ( ) { return full duplex ; }
private void reset ( ) { init view ( ) ; remove all views in layout ( ) ; request layout ( ) ; }
private object old comment format option ( ) { return this . options . get ( default code formatter constants . formatte r_ commen t_ format ) ; }
public void init ( sip stack stack ) ;
protected node deep copy into ( node n ) { super . deep copy into ( n ) ; abstract element ae = ( abstract element ) n ; if ( attributes != null ) { named node map map = attributes ; for ( int i = map . get length ( ) - num_ ; i >= num_ ; i -- ) { abstract attr aa = ( abstract attr ) map . item ( i ) . clone node ( bool_ ) ; if ( aa instanceof abstract attr ns ) { ae . set attribute node ns ( aa ) ; } else { ae . set attribute node ( aa ) ; } } } return n ; }
public static range to range ( i compilation unit unit , int offset , int length ) throws java model exception { range result = new range ( ) ; final i buffer buffer = unit . get buffer ( ) ; int [ ] loc = json rpc helpers . to line ( buffer , offset ) ; int [ ] end loc = json rpc helpers . to line ( buffer , offset + length ) ; if ( loc != null && end loc != null ) { result . set start ( new position ( ) . with line ( loc [ num_ ] ) . with character ( loc [ num_ ] ) ) ; result . set end ( new position ( ) . with line ( end loc [ num_ ] ) . with character ( end loc [ num_ ] ) ) ; } return result ; }
public static void tab ( string tab ) { formatting . tab = tab ; formatting . nltab = nl + tab ; }
private static void fill ( final image image , final int size ) { graphics 2 d graphics = ( graphics 2 d ) image . get graphics ( ) ; graphics . set composite ( alpha composite . src ) ; graphics . set color ( color . green ) ; graphics . fill rect ( num_ , num_ , image . get width ( null ) , image . get height ( null ) ) ; int row = image . get height ( null ) / size ; for ( int i = num_ ; i < size ; ++ i ) { graphics . set color ( new color ( num_ , num_ , num_ , i ) ) ; graphics . fill rect ( num_ , i * row , image . get width ( null ) , row ) ; } graphics . dispose ( ) ; }
void add on load listener ( i item tree listener listener ) ;
public static void init ( ) { try { field field = rendering hints . key . class . get declared field ( str_ ) ; field . set accessible ( bool_ ) ; rendering hints key identity map = ( map ) field . get ( null ) ; rendering hints key identity map copy = new linked hash map < > ( rendering hints key identity map . size ( ) ) ; rendering hints key identity map copy . put all ( rendering hints key identity map ) ; } catch ( exception e ) { logger . error ( str_ + e . to string ( ) ) ; } }
public static final void draw revolute joint ( g l2 gl , revolute joint joint ) { vector 2 anchor = joint . get anchor 1 ( ) ; gl . gl color 4f ( num_ , num_ , num_ , num_ ) ; render utilities . fill circle from center ( gl , num_ , anchor . x , anchor . y ) ; gl . gl color 4f ( num_ , num_ , num_ , num_ ) ; render utilities . draw circle from center ( gl , num_ , anchor . x , anchor . y , bool_ , bool_ ) ; }
public static search fragment new instance ( string product name ) { search fragment search fragment = new search fragment ( ) ; bundle args = new bundle ( ) ; args . put string ( ke y_ produc t_ name , product name ) ; search fragment . set arguments ( args ) ; return search fragment ; }
public string encoder comparator ( ) { }
public void add custom user ( user user ) { table model . add user ( user ) ; }
public po user group create group ( po user group group , string marketplace id ) throws validation exception , non unique business key exception , operation not permitted exception , mail operation exception , object not found exception , concurrent modification exception ;
public void replace stop facility in all routes ( transit stop facility to replace , transit stop facility replace with ) { for ( transit line line : schedule . get transit lines ( ) . values ( ) ) { for ( transit route route : line . get routes ( ) . values ( ) ) { replace stop facility in route ( route , to replace , replace with ) ; } } }
public boolean has active angel ecm ( ) { if ( game . get board ( ) . in space ( ) && ! game . get options ( ) . boolean option ( str_ ) ) { return bool_ ; } if ( game . get options ( ) . boolean option ( str_ ) && ! is shut down ( ) ) { for ( mounted m : get misc ( ) ) { equipment type type = m . get type ( ) ; if ( ( type instanceof misc type ) && type . has flag ( misc type . f_ ange l_ ecm ) && ( m . cur mode ( ) . equals ( str_ ) || m . cur mode ( ) . equals ( str_ ) || m . cur mode ( ) . equals ( str_ ) ) ) { return ! ( m . is inoperable ( ) ) ; } } } return bool_ ; }
public void entries added ( collection < string > addresses ) ;
private postgre sql trace functions ( ) { }
private int load next byte in buffer ( ) throws io exception { final int value = this . read byte from stream ( ) ; if ( value < num_ ) { return value ; } this . bit buffer = value ; this . bits in buffer = num_ ; return value ; }
private boolean is collection usage unsupported ( memory pool mx bean mp ) { return this . collection usage unsupported . contains ( mp . get name ( ) ) ; }
< r extends extended result > void handle extended request ( c request context , extended request < r > request , intermediate response handler intermediate response handler , ldap result handler < r > result handler ) ;
public void postorder ( ) ;
public void invalidate ( ) ;
public synchronized void allow thread decoding ( thread set threads ) { for ( thread t : threads ) { allow thread decoding ( t ) ; } }
public boolean is valid ( ) { return valid ; }
public boolean has variable ( string name ) { return has argument ( str_ + name + str_ ) ; }
public vo subscription details subscribe to service ( string subscription id , long unit key , vo service service , vo user user , vo role definition role ) throws exception { return subscribe to service ( new vo subscription ( subscription id , unit key ) , service , user , role ) ; }
public void test serialize float array ( ) { serializer serializer = new serializer ( ) ; float [ ] floats = new float [ ] { num_ , num_ , num_ , num_ , num_ } ; buffer buffer = serializer . write object ( floats ) . flip ( ) ; float [ ] result = serializer . read object ( buffer ) ; assert equals ( num_ , result [ num_ ] ) ; assert equals ( num_ , result [ num_ ] ) ; assert equals ( num_ , result [ num_ ] ) ; assert equals ( num_ , result [ num_ ] ) ; assert equals ( num_ , result [ num_ ] ) ; }
private static boolean node name equal to ( node node , string target ) { if ( node == null || target == null ) return bool_ ; string name = node . get node name ( ) ; if ( target . index of ( str_ ) < num_ ) { int index = name . index of ( str_ ) ; if ( index >= num_ ) name = name . substring ( index + num_ ) ; } return name . equals ( target ) ; }
public static boolean is core file loader ( string classname ) { boolean result ; string [ ] classnames ; classnames = cor e_ fil e_ loaders . split ( str_ ) ; result = ( arrays . binary search ( classnames , classname ) >= num_ ) ; return result ; }
public void reset ( ) throws io exception { if ( queue != null ) { queue . clear ( ) ; for ( t sub : subs ) { while ( bool_ ) { int doc id = sub . next doc ( ) ; if ( doc id == n o_ mor e_ docs ) { break ; } int mapped doc id = sub . doc map . get ( doc id ) ; if ( mapped doc id == - num_ ) { continue ; } else { sub . mapped doc id = mapped doc id ; queue . add ( sub ) ; break ; } } } first = bool_ ; } else if ( subs . size ( ) > num_ ) { current = subs . get ( num_ ) ; next index = num_ ; } else { current = null ; next index = num_ ; } }
public void insert ( blorp item , int position ) { if ( sentinel . next == null || position == num_ ) { insert front ( item ) ; return ; } node current node = sentinel . next . next ; while ( position > num_ && current node . next != null ) { position -= num_ ; current node = current node . next ; } node new node = new node ( item , current node . next ) ; current node . next = new node ; }
public static string load file to string with newlines ( string s filename ) { string buffer sb = new string buffer ( ) ; try { buffered reader in = new buffered reader ( new file reader ( s filename ) ) ; string line ; while ( ( line = in . read line ( ) ) != null ) { sb . append ( line ) ; sb . append ( str_ ) ; } in . close ( ) ; } catch ( exception e ) { system . err . println ( str_ + s filename ) ; e . print stack trace ( system . err ) ; } return sb . to string ( ) ; }
static void stop context ( ) { if ( ! started ) return ; started = bool_ ; for ( int i = listeners . size ( ) - num_ ; i >= num_ ; i -- ) { listener listener = listeners . get ( i ) ; listener . application stopped ( ) ; } if ( context != null && context instanceof configurable application context ) { ( ( configurable application context ) context ) . close ( ) ; } }
public static void main ( final string [ ] args ) { dom test case . do main ( nodelistreturnlastitem . class , args ) ; }
long min number of write bytes remaining ( ) ;
protected abstract void scan jar file ( class loader loader , jar file file ) throws io exception ;
public void init $ children ( ) { children = new ast node [ num_ ] ; set child ( new opt ( ) , num_ ) ; set child ( new list ( ) , num_ ) ; }
public void invoke dynamic ( string name , string desc , handle bsm , object ... bsm args ) { mv . visit invoke dynamic insn ( name , desc , bsm , bsm args ) ; }
public boolean is pick list print details ( ) ;
protected abstract message meta data copy ( mailbox mailbox , message uid uid , long mod seq , mailbox message original ) throws mailbox exception ;
public void unassign service ( string service name ) throws sms exception { remove service config ( service name ) ; }
private map < uri , integer > make network 2 max host initiators ( map < uri , set < initiator > > net 2 initiators map ) { map < uri , integer > net 2 max host initiators = new hash map < uri , integer > ( ) ; for ( uri net : net 2 initiators map . key set ( ) ) { map < uri , list < initiator > > host initiators map = make host initiators map ( net 2 initiators map . get ( net ) ) ; int max = num_ ; for ( uri host : host initiators map . key set ( ) ) { int this host = host initiators map . get ( host ) . size ( ) ; max = ( this host > max ) ? this host : max ; } net 2 max host initiators . put ( net , max ) ; _log . info ( string . format ( str_ , net . to string ( ) , max ) ) ; } return net 2 max host initiators ; }
public void add data change listener ( data changed listener d ) ;
public void request location permission ( ) { if ( activity == null ) { if ( ! quiet ) log . e ( get class ( ) . get simple name ( ) , str_ + str_ + get class ( ) . get simple name ( ) + str_ ) ; return ; } activity compat . request permissions ( activity , new string [ ] { manifest . permission . acces s_ fin e_ location } , reques t_ reques t_ permission ) ; }
public cloudlet scheduler dynamic workload ( double mips , int number of pes ) { super ( ) ; set mips ( mips ) ; set number of pes ( number of pes ) ; set total mips ( get number of pes ( ) * get mips ( ) ) ; set under allocated mips ( new hash map < string , double > ( ) ) ; set cache previous time ( - num_ ) ; }
public void add plugin schema ( document plugin doc ) throws sms exception , sso exception { sms entry . validate token ( token ) ; node service node = xml utils . get root node ( plugin doc , sms utils . service ) ; string service name = xml utils . get node attribute value ( service node , sms utils . name ) ; service schema manager ssm = new service schema manager ( service name , token ) ; document schema doc = ssm . get document copy ( ) ; node plugin schema doc = xml utils . get root node ( plugin doc , sms utils . plugi n_ schema ) ; sms schema sms schema = new sms schema ( schema doc ) ; plugin schema . create plugin schema ( token , plugin schema doc , sms schema ) ; }
public boolean is auto connect ( ) { return auto connect ; }
private void open file ( ) { m container activity . get file operations helper ( ) . open file ( get file ( ) ) ; finish ( ) ; }
public synchronized void add ( double x , double y , double value ) { super . add ( x , y ) ; m value . add ( value ) ; update range ( value ) ; }
private void update style and text ( ) { update style imp ( style ) ; if ( attr != null ) { m text = wx attr . get value ( attr ) ; } }
boolean is friend ( user user ) ;
public boolean execute ( i node n ) { if ( ! is valid ( n ) ) { system . err . println ( str_ ) ; return bool_ ; } free cell node state = ( free cell node ) n ; int ct = num ; int idx = num_ ; while ( ct -- > num_ ) { cards [ idx ++ ] = state . cols [ from col ] . remove ( ) ; } while ( idx -- > num_ ) { state . cols [ to col ] . add ( cards [ idx ] ) ; } if ( state . cols [ from col ] . num == num_ || state . cols [ to col ] . num == num_ ) { state . sort map ( ) ; } return bool_ ; }
public boolean is state active ( state state ) { switch ( state ) { case main _region _ a : return state vector [ num_ ] == state . main _region _ a ; default : return bool_ ; } }
public static int elibmax ( ) { return num_ ; }
void enable ecas ( ) ;
public static character previous ( character self ) { return ( char ) ( self - num_ ) ; }
private class < ? > find base type ( class < ? > type , map < class < ? > , type serializer factory > factories ) { if ( factories . contains key ( type ) ) return type ; list < map . entry < class < ? > , type serializer factory > > ordered factories = new array list < > ( factories . entry set ( ) ) ; collections . reverse ( ordered factories ) ; optional < map . entry < class < ? > , type serializer factory > > optional = ordered factories . stream ( ) . filter ( null ) . find first ( ) ; return optional . is present ( ) ? optional . get ( ) . get key ( ) : null ; }
public void save ( output stream stream ) throws io exception { output stream writer writer = new output stream writer ( stream , charsets . ut f _ 8 ) ; csv format format = csv format . default . with escape ( str_ ) ; if ( csv options . s separated char . length ( ) == num_ ) { format = format . with delimiter ( csv options . s separated char . char at ( num_ ) ) ; } if ( csv options . s separated text char . length ( ) == num_ ) { format = format . with quote ( csv options . s separated text char . char at ( num_ ) ) ; } csv printer csv printer = new csv printer ( writer , format ) ; write tasks ( csv printer ) ; if ( my project . get human resource manager ( ) . get resources ( ) . size ( ) > num_ ) { csv printer . println ( ) ; csv printer . println ( ) ; write resources ( csv printer ) ; } writer . flush ( ) ; writer . close ( ) ; }
public boolean is truncate supported ( ) ;
private key listener create key listener ( ) { if ( key listener == null ) { key listener = new key handler ( ) ; } return key listener ; }
void on selection changed ( int index , boolean selected ) ;
static void cancel activity ( activity a ) { get instance ( ) . _cancel activity ( a ) ; }
private boolean is locking suspended by current thread ( ) { try { return get lock service ( ) . is locking suspended by current thread ( ) ; } catch ( illegal state exception e ) { lock check readiness ( ) ; throw e ; } }
private boolean compare user attribute param ( user group user group , string attribute param string ) { boolean is equal = bool_ ; if ( string utils . is blank ( attribute param string ) ) { _log . warn ( str_ , attribute param string , this . get label ( ) ) ; return is equal ; } user attribute param attribute param = user attribute param . from string ( attribute param string ) ; if ( attribute param == null ) { _log . warn ( str_ , attribute param string ) ; return is equal ; } if ( collection utils . is empty ( user group . _attributes ) ) { _log . info ( str_ ) ; return is equal ; } for ( string comparing attribute param string : user group . _attributes ) { if ( string utils . is blank ( comparing attribute param string ) ) { _log . info ( str_ , comparing attribute param string ) ; break ; } user attribute param comparing attribute param = user attribute param . from string ( comparing attribute param string ) ; if ( comparing attribute param == null ) { _log . info ( str_ , comparing attribute param string ) ; return is equal ; } if ( comparing attribute param . is equal ( attribute param ) ) { _log . debug ( str_ , attribute param string , comparing attribute param string ) ; is equal = bool_ ; break ; } } return is equal ; }
public boolean is smooth scrollbar enabled ( ) { return m smooth scrollbar enabled ; }
public static void add required project ( i java project jproject , i java project required ) throws java model exception { i classpath entry cpe = java core . new project entry ( required . get project ( ) . get full path ( ) ) ; add to classpath ( jproject , cpe ) ; }
public boolean is zoomed ( ) { return normalized scale != num_ ; }
public statement egt ( object value ) { return compare ( str_ , value ) ; }
void on change ( int value ) { }
public filer exception ( string s ) { super ( s ) ; }
public boolean equals ( object o ) { return referent uuids . compare ( this , o ) ; }
private void process type restriction ( query service qs ) { if ( selector type restriction != null ) { qs . add criteria ( str_ + selector type restriction ) ; } if ( body type restriction != null ) { qs . add criteria ( str_ + body type restriction ) ; } if ( target type restriction != null ) { qs . add criteria ( str_ + target type restriction ) ; } }
public static image source asset ( string asset name ) { if ( asset name == null ) { throw new null pointer exception ( str_ ) ; } return uri ( asse t_ scheme + asset name ) ; }
public void run test ( ) throws throwable { document doc ; document type doc type ; named node map entities ; node entity node ; string entity value ; doc = ( document ) load ( str_ , bool_ ) ; doc type = doc . get doctype ( ) ; assert not null ( str_ , doc type ) ; entities = doc type . get entities ( ) ; assert not null ( str_ , entities ) ; entity node = entities . get named item ( str_ ) ; assert not null ( str_ , entity node ) ; entity node . set node value ( str_ ) ; entity value = entity node . get node value ( ) ; assert null ( str_ , entity value ) ; }
public static byte j 2d alpha comp to xr ( int j 2d rule ) { switch ( j 2d rule ) { case clear : return pict op clear ; case src : return pict op src ; case dst : return pict op dst ; case sr c_ over : return pict op over ; case ds t_ over : return pict op over reverse ; case sr c_ in : return pict op in ; case ds t_ in : return pict op in reverse ; case sr c_ out : return pict op out ; case ds t_ out : return pict op out reverse ; case sr c_ atop : return pict op atop ; case ds t_ atop : return pict op atop reverse ; case xor : return pict op xor ; } throw new internal error ( str_ + j 2d rule ) ; }
public void test get elements by tag name n s1 ( ) throws throwable { document doc ; element element ; node list element list ; doc = ( document ) load ( str_ , builder ) ; element = doc . get document element ( ) ; element list = element . get elements by tag name ns ( str_ , str_ ) ; assert equals ( str_ , num_ , element list . get length ( ) ) ; }
public boolean is purge ( ) { return purge ; }
public static void main ( final string [ ] args ) { dom test case . do main ( nodecommentnodevalue . class , args ) ; }
public void dup ( ) { mv . visit insn ( opcodes . dup ) ; }
public static ui result open url ( string url ) { ui result r = new ui result ( ) ; r . url = url ; r . open window = bool_ ; return r ; }
void on started ( ) ;
public boolean is event forked ( string ename ) { if ( is logging enabled ( ) ) { stack logger . log debug ( str_ + ename + str_ + this . forked events . contains ( ename ) ) ; } return this . forked events . contains ( ename ) ; }
private static native int reg delete value ( int h key , byte [ ] value name ) ;
public iterator < statistic id > iterator ( statistics type statistics type ) ;
public boolean is cancel needed ( ) { return m last event != null && m last event . get action ( ) != motion event . actio n_ up ; }
public void triangulate y monotone polygons ( ) { list < monotone polygon < double edge list vertex > > monotone polygons = this . get y monotone polygons ( ) ; int size = monotone polygons . size ( ) ; for ( int i = num_ ; i < size ; i ++ ) { this . triangulate y monotone polygon ( monotone polygons . get ( i ) ) ; } }
public static boolean on render ( render < ? > render , entity entity , double x , double y , double z , float yaw , float partial ticks ) { gl state manager . push matrix ( ) ; final boolean successful = open mod loader . get event bus ( ) . post ( new entities ( render , entity , x , y , z , yaw , partial ticks ) ) ; gl state manager . pop matrix ( ) ; return successful ; }
public simple io processor pool ( class < ? extends io processor < s > > processor type , int size ) { this ( processor type , null , size , null ) ; }
public void add ( permission permission ) { if ( ! ( permission instanceof basic permission ) ) throw new illegal argument exception ( str_ + permission ) ; if ( is read only ( ) ) throw new security exception ( str_ ) ; basic permission bp = ( basic permission ) permission ; if ( perm class == null ) { perm class = bp . get class ( ) ; } else { if ( bp . get class ( ) != perm class ) throw new illegal argument exception ( str_ + permission ) ; } synchronized ( this ) { perms . put ( bp . get canonical name ( ) , permission ) ; } if ( ! all _allowed ) { if ( bp . get canonical name ( ) . equals ( str_ ) ) all _allowed = bool_ ; } }
public color list ( ) { }
protected object to type ( calendar value ) { return value . get time ( ) ; }
public void update delete time ( long time ) { if ( time > num_ && time < delete time min ) { delete time min = time ; } if ( time > delete time max ) { delete time max = time ; } delete cumulative count += time ; delete time average = delete cumulative count / total deletes ; }
public conversion exception ( throwable cause ) { super ( cause . get message ( ) ) ; this . cause = cause ; }
public static map < string , list < list < distributable > > > node block task mapping ( list < distributable > block infos , int no of nodes input , int parallelism , list < string > active node ) { map < string , list < distributable > > map of nodes = carbon loader util . node block mapping ( block infos , no of nodes input , active node ) ; int task per node = parallelism / map of nodes . size ( ) ; int no of tasks per node = task per node == num_ ? num_ : task per node ; return assign blocks to tasks per node ( map of nodes , no of tasks per node ) ; }
public text style template delimiter text style ( ) { text style text style = default text style ( ) . copy ( ) ; text style . set color ( new rgb ( num_ , num_ , num_ ) ) ; return text style ; }
string execute ( string command ) throws io exception , interrupted exception ;
public static < k > map . entry < k , ? > entry ( k key , object value ) { return new abstract map . simple immutable entry < > ( key , value ) ; }
public abstract optional < bearer token > api token ( ) ;
public user synchronizer ( long sync _id ) throws o data exception { this ( syn c_ service . get synchronizer conf by id ( sync _id ) ) ; }
public android authenticator ( context context , account account , string auth token type , boolean notify auth failure ) { this ( account manager . get ( context ) , account , auth token type , notify auth failure ) ; }
public static byte [ ] decode ( byte [ ] source ) throws base 6 4 decoder exception { return decode ( source , num_ , source . length ) ; }
void error ( string msg ) ;
public categories example ( ) { ored criteria = new array list < criteria > ( ) ; }
private void init indeterminate values ( ) { init indeterminate defaults ( ) ; num frames = cycle time / repaint interval ; init animation index ( ) ; box rect = new rectangle ( ) ; next paint rect = new rectangle ( ) ; component innards = new rectangle ( ) ; old component innards = new rectangle ( ) ; progress bar . add hierarchy listener ( get handler ( ) ) ; if ( progress bar . is displayable ( ) ) { start animation timer ( ) ; } }
private void show feedback ( string message ) { if ( my host != null ) { my host . show feedback ( message ) ; } else { system . out . println ( message ) ; } }
public boolean is errors ( ) { return errors ; }
public boolean bool ( ) { return bool_ ; }
public void finish ( ) throws io exception { if ( done ) { return ; } def . finish ( ) ; while ( ! def . finished ( ) ) { int byte count = def . deflate ( buf ) ; out . write ( buf , num_ , byte count ) ; } done = bool_ ; }
protected void bind view ( view interface < t , ? extends view model > view interface ) { m view = view interface ; }
public kml vertex descriptor ( graph graph ) { k distr = degree . get instance ( ) . values ( graph . get vertices ( ) ) ; }
public void assert not equal ( int expected , int actual ) { test utils . assert not equal ( expected , actual ) ; }
static public final int random ( int range ) { return random . next int ( range + num_ ) ; }
public void init $ children ( ) { children = new ast node [ num_ ] ; set child ( new list ( ) , num_ ) ; }
public void fire examined game became setup ( string game id ) { game game = get game ( game id ) ; if ( game != null ) { synchronized ( listeners ) { for ( game service listener listener : listeners ) { listener . examined game became setup ( game ) ; } } } }
public static cramm d5 sasl bind request unmodifiable cramm d5 sasl bind request ( final cramm d5 sasl bind request request ) { if ( request instanceof unmodifiable cramm d5 sasl bind request impl ) { return request ; } return new unmodifiable cramm d5 sasl bind request impl ( request ) ; }
private void populate cert issuer names ( ) { if ( certificates == null ) return ; cert issuer names = new principal [ certificates . length ] ; for ( int i = num_ ; i < certificates . length ; i ++ ) { x 5 0 9 certificate cert = certificates [ i ] ; principal cert issuer name = cert . get issuer dn ( ) ; if ( ! ( cert issuer name instanceof x 5 0 0 name ) ) { try { x 5 0 9 cert info tbs cert = new x 5 0 9 cert info ( cert . get tbs certificate ( ) ) ; cert issuer name = ( principal ) tbs cert . get ( x 5 0 9 cert info . issuer + str_ + x 5 0 9 cert info . d n_ name ) ; } catch ( exception e ) { } } cert issuer names [ i ] = cert issuer name ; } }
public string weight trim beta tip text ( ) { return str_ + str_ + str_ + str_ ; }
public blacklist exception ( string message ) { super ( message ) ; }
private boolean check if expression contains column ( expression expression ) { if ( expression instanceof column expression ) { return bool_ ; } for ( expression child : expression . get children ( ) ) { if ( check if expression contains column ( child ) ) { return bool_ ; } } return bool_ ; }
public boolean should parse id ( ) { return should parse id ; }
public element add element to registry ( string value ) { if ( value == null ) return ( this ) ; add element to registry ( new string element ( value ) ) ; return ( this ) ; }
public people panel ( ) { }
public void read data ( data input din ) throws io exception { }
private static void assert argument ( boolean expression , string message ) { if ( expression ) { throw new illegal argument exception ( message ) ; } }
public value evaluate ( is literal node , binding set bindings ) throws value expr evaluation exception , query evaluation exception { value arg value = evaluate ( node . get arg ( ) , bindings ) ; return boolean literal . value of ( arg value instanceof literal ) ; }
public boolean is verbose ( ) { return verbose ; }
public static cst float make ( int bits ) { return new cst float ( bits ) ; }
public source attr ( string name ) { this . name = new ascii cp ( name ) ; }
private void update progress ( string progress label , int progress ) { if ( my host != null && ( ( progress != previous progress ) || ( ! progress label . equals ( previous progress label ) ) ) ) { my host . update progress ( progress label , progress ) ; } previous progress = progress ; previous progress label = progress label ; }
socket create socket ( socket socket , string host , int port , boolean auto close ) throws io exception , unknown host exception ;
public void reconnection failed ( exception e ) ;
protected boolean is string flavor ( data flavor flavor ) { data flavor [ ] flavors = string flavors ; for ( int i = num_ ; i < flavors . length ; i ++ ) { if ( flavors [ i ] . equals ( flavor ) ) { return bool_ ; } } return bool_ ; }
public final http request factory create request factory ( http request initializer initializer ) { return new http request factory ( this , initializer ) ; }
protected void write acknowledged ( stream output out ) throws io exception { out . write boolean ( acknowledged ) ; }
public static void release ( application app ) { if ( s lifecycle callbacks != null ) { app . unregister activity lifecycle callbacks ( s lifecycle callbacks ) ; } hide progress dialogs all ( ) ; }
public boolean is clean ( file file ) throws io exception { string raw = new string ( files . read all bytes ( file . to path ( ) ) , encoding ) ; string unix = line ending . to unix ( raw ) ; int total new lines = ( int ) unix . code points ( ) . filter ( null ) . count ( ) ; int windows new lines = raw . length ( ) - unix . length ( ) ; if ( line ending policy . is unix ( file ) ) { if ( windows new lines != num_ ) { return bool_ ; } } else { if ( windows new lines != total new lines ) { return bool_ ; } } string formatted = apply steps ( unix , file ) ; return formatted . equals ( unix ) ; }
protected un managed file system check un managed file system exists in db ( string native guid ) { un managed file system filesystem info = null ; uri query result list result = new uri query result list ( ) ; _db client . query by constraint ( alternate id constraint . factory . get file system info native gu id constraint ( native guid ) , result ) ; list < uri > filesystem uris = new array list < uri > ( ) ; iterator < uri > iter = result . iterator ( ) ; while ( iter . has next ( ) ) { uri un file systemt uri = iter . next ( ) ; filesystem uris . add ( un file systemt uri ) ; } if ( ! filesystem uris . is empty ( ) ) { filesystem info = _db client . query object ( un managed file system . class , filesystem uris . get ( num_ ) ) ; } return filesystem info ; }
public boolean add ( string k , string v ) { return add 0 ( k , v ) ; }
public matrix plus ( matrix b ) { check matrix dimensions ( b ) ; matrix x = new matrix ( m , n ) ; double [ ] [ ] c = x . get array ( ) ; for ( int i = num_ ; i < m ; i ++ ) { for ( int j = num_ ; j < n ; j ++ ) { c [ i ] [ j ] = a [ i ] [ j ] + b . a [ i ] [ j ] ; } } return x ; }
public write stream ( output stream os ) { init ( new vfs stream ( os ) ) ; }
public extension file comparator ( io case case sensitivity ) { this . case sensitivity = case sensitivity == null ? io case . sensitive : case sensitivity ; }
public void post on wall ( string user id , string message ) throws io exception { post on wall ( user id , message , null ) ; }
public void add raster ( int x 1 , int y 1 , image icon ii , link properties properties ) throws io exception , interrupted exception { link raster . write ( x 1 , y 1 , ii , properties , link . dos ) ; }
private static cst string make short form ( prototype prototype ) { std type list parameters = prototype . get parameter types ( ) ; int size = parameters . size ( ) ; string builder sb = new string builder ( size + num_ ) ; sb . append ( short form char for ( prototype . get return type ( ) ) ) ; for ( int i = num_ ; i < size ; i ++ ) { sb . append ( short form char for ( parameters . get type ( i ) ) ) ; } return new cst string ( sb . to string ( ) ) ; }
public boolean contains ( write modifiers modifiers ) { return super . contains ( modifiers ) ; }
public void template changed ( value change event event ) { final long selected service key = ( ( long ) event . get new value ( ) ) . long value ( ) ; if ( selected service key != model . get selected template key ( ) ) { model . set selected template key ( selected service key ) ; } }
public void notify navigation state changed ( ) { if ( m navigation manager != null ) m navigation manager . notify state changed ( ) ; }
void deregister log control ( log control control ) ;
public memory store ( file data dir ) { this ( ) ; set data dir ( data dir ) ; set persist ( bool_ ) ; }
public void configure baud rate ( string rate ) { log . debug ( str_ + rate ) ; selected speed = rate ; super . configure baud rate ( rate ) ; }
private void show feedback ( string message ) { if ( my host != null ) { my host . show feedback ( message ) ; } else { system . out . println ( message ) ; } }
public void step ( sim state state ) { double diff = initial concentration - concentration ; if ( diff > num_ ) { diff *= num_ ; diff = math . min ( diff , num_ ) ; increase concentration ( diff ) ; } }
public static boolean add files to existing zip ( file temp apk , array list < file > classes files ) { boolean success = bool_ ; if ( cfg . get compresion mathod ( ) == num_ ) { success = zip . add files to existing zip aapt ( temp apk , classes files ) ; } else if ( cfg . get compresion mathod ( ) == num_ ) { try { success = zip . add files to existing zip j4 zip ( temp apk , classes files ) ; } catch ( io exception e ) { e . print stack trace ( ) ; success = zip . add files to existing zip aapt ( temp apk , classes files ) ; } } else if ( cfg . get compresion mathod ( ) == num_ ) { success = zip . add files to existing zip seven zip ( temp apk , classes files ) ; } return success ; }
public void after create ( memory allocator impl allocator ) ;
void received reply ( step breakpoint hit reply reply ) ;
public void check number args ( int arg num ) throws wrong number args exception { }
public static int encode ( byte [ ] data , int off , int length , output stream out ) throws io exception { return encoder . encode ( data , off , length , out ) ; }
public void unregister ( ) { if ( receiver != null ) { context . unregister receiver ( receiver ) ; } }
public static string create date time string ( string year , string month , string day , boolean midnight ) { string time = str_ ; if ( ! midnight ) { time = str_ ; } return year + str_ + month + str_ + day + str_ + time ; }
private void initialize live attributes ( ) { in = create live animated string ( null , sv g_ i n_ attribute ) ; operator = create live animated enumeration ( null , sv g_ operato r_ attribute , operato r_ values , ( short ) num_ ) ; }
public void write attribute ( string name , object value ) { if ( ! _is element open ) throw new illegal state exception ( str_ ) ; if ( value == null ) return ; _is element open = bool_ ; try { _strategy . write attribute ( this , name , value ) ; } finally { _is element open = bool_ ; } }
public string to string ( ) { string buffer buffer = new string buffer ( ) ; buffer . append ( str_ ) ; buffer . append ( str_ ) . append ( m _id ) ; buffer . append ( str_ ) . append ( m _name ) ; buffer . append ( str_ ) . append ( m _type ) ; buffer . append ( str_ ) . append ( m _len ) ; buffer . append ( str_ ) . append ( m _is nullable ) ; buffer . append ( str_ ) . append ( m _col name ) ; buffer . append ( str_ ) . append ( m _is doc ) ; buffer . append ( str_ ) . append ( m _is mult ) ; buffer . append ( str_ ) ; return buffer . to string ( ) ; }
public void paint tabbed pane background ( synth context context , graphics g , int x , int y , int w , int h ) { paint background ( context , g , x , y , w , h , null ) ; }
public key pair generate key pair ( ) { if ( random == null ) { random = jca util . get secure random ( ) ; } dsa parameter spec spec ; try { if ( force new parameters ) { spec = parameter cache . get new dsa parameter spec ( plen , qlen , random ) ; } else { if ( params == null ) { params = parameter cache . get dsa parameter spec ( plen , qlen , random ) ; } spec = params ; } } catch ( general security exception e ) { throw new provider exception ( e ) ; } return generate key pair ( spec . get p ( ) , spec . get q ( ) , spec . get g ( ) , random ) ; }
protected abstract short read short fast ( ) ;
public void encode ( final active mq buffer buffer ) { buffer . write string ( name ) ; buffer . write string ( factory class name ) ; buffer . write int ( params == null ? num_ : params . size ( ) ) ; if ( params != null ) { encode map ( buffer , params ) ; } if ( extra props != null ) { encode map ( buffer , extra props ) ; } }
public void clear ( ) { for ( int i = num_ ; i < components . length ; i ++ ) components [ i ] = num_ ; }
public void add row ( int index ) { m _data . rows . add ( index , new array list < object > ( ) ) ; m _data . rows meta . add ( index , null ) ; }
public t save or update ( t object ) { current session ( ) . save or update ( object ) ; return object ; }
public abs ( ) { super ( number . class , number . class ) ; }
public void debug print ( writer out , string prefix , boolean verbose ) { indenting writer iw = new indenting writer ( out , num_ , prefix ) ; int sz = size ( ) ; try { for ( int i = num_ ; i < sz ; i ++ ) { dalv insn insn = ( dalv insn ) get 0 ( i ) ; string s ; if ( ( insn . code size ( ) != num_ ) || verbose ) { s = insn . listing string ( str_ , num_ , verbose ) ; } else { s = null ; } if ( s != null ) { iw . write ( s ) ; } } iw . flush ( ) ; } catch ( io exception ex ) { throw new runtime exception ( ex ) ; } }
private static void loadcfg ( string [ ] args ) { cfg = new config properties ( args , null ) ; if ( cfg . get property ( str_ , str_ ) . equals ( str_ ) ) { try { cfg . load system resource ( str_ ) ; } catch ( throwable e ) { logger . error ( str_ , str_ , e ) ; } } }
public test subscriber ( subscriber < ? super payload > actual , long initial request ) { this . actual = actual ; this . initial request = initial request ; this . values = new array list < > ( ) ; this . errors = new array list < throwable > ( ) ; this . done = new count down latch ( num_ ) ; this . max await = num_ ; }
public static int compute message set extension size ( final int field number , final message lite value ) { return compute tag size ( wire format . messag e_ se t_ item ) * num_ + compute u int 3 2 size ( wire format . messag e_ se t_ typ e_ id , field number ) + compute message size ( wire format . messag e_ se t_ message , value ) ; }
public char [ ] read password ( ) { synchronized ( consol e_ lock ) { int previous state = set echo ( bool_ , num_ ) ; try { string password = read line ( ) ; writer . println ( ) ; return ( password == null ) ? null : password . to char array ( ) ; } finally { set echo ( bool_ , previous state ) ; } } }
private void create ( ) { document builder factory doc b fac ; document builder doc build ; try { doc b fac = document builder factory . new instance ( ) ; doc build = doc b fac . new document builder ( ) ; doc = doc build . new document ( ) ; } catch ( exception ex ) { ex . print stack trace ( ) ; return ; } root element = doc . create element ( str_ ) ; doc . append child ( root element ) ; non validated requests element = doc . create element ( str_ ) ; validated requests element = doc . create element ( str_ ) ; root element . append child ( non validated requests element ) ; root element . append child ( validated requests element ) ; write xml file ( ) ; }
protected boolean same content ( element element 1 , element element 2 ) { list < content > content 1 = get content except comments ( element 1 ) ; list < content > content 2 = get content except comments ( element 2 ) ; if ( content 1 . size ( ) != content 2 . size ( ) ) { return bool_ ; } for ( int i = num_ ; i < content 1 . size ( ) ; i ++ ) { string content 1 value = content 1 . get ( i ) . get value ( ) ; string content 2 value = content 2 . get ( i ) . get value ( ) ; if ( content 1 value == null || content 2 value == null ) { return content 1 value == content 2 value ; } if ( ! content 1 value . equals ( content 2 value ) ) { return bool_ ; } } return bool_ ; }
public string find class name with import ( string name , list < import > imports ) { if ( type exists ( name ) ) return name ; for ( import i : imports ) { if ( ! i . import all ) { if ( i . access . name . equals ( name ) ) { return get class name from access ( i . access ) ; } } } for ( import i : imports ) { if ( i . import all && i . pkg != null ) { string possible class name = i . pkg . pkg . replace ( str_ , str_ ) + str_ + name ; if ( type exists ( possible class name ) ) return possible class name ; } } return null ; }
public void destroy presenter ( ) { this . helper . destroy presenter ( ) ; }
public boolean retain entries ( t object double procedure < k > procedure ) { boolean modified = bool_ ; k [ ] keys = ( k [ ] ) _set ; double [ ] values = _values ; stop compacting on remove ( ) ; try { for ( int i = keys . length ; i -- > num_ ; ) { if ( keys [ i ] != null && keys [ i ] != removed && ! procedure . execute ( keys [ i ] , values [ i ] ) ) { remove at ( i ) ; modified = bool_ ; } } } finally { start compacting on remove ( modified ) ; } return modified ; }
public boolean has yomi ( ) { return get yomi ( ) != null ; }
public string global info ( ) { return m _global info ; }
void on dismiss ( recycler view recycler view , int [ ] reverse sorted positions , boolean right ) ;
static void terminate bits ( int num data bytes , bit array bits ) throws writer exception { int capacity = num data bytes * num_ ; if ( bits . get size ( ) > capacity ) { throw new writer exception ( str_ + bits . get size ( ) + str_ + capacity ) ; } for ( int i = num_ ; i < num_ && bits . get size ( ) < capacity ; ++ i ) { bits . append bit ( bool_ ) ; } int num bits in last byte = bits . get size ( ) & num_ ; if ( num bits in last byte > num_ ) { for ( int i = num bits in last byte ; i < num_ ; i ++ ) { bits . append bit ( bool_ ) ; } } int num padding bytes = num data bytes - bits . get size in bytes ( ) ; for ( int i = num_ ; i < num padding bytes ; ++ i ) { bits . append bits ( ( i & num_ ) == num_ ? num_ : num_ , num_ ) ; } if ( bits . get size ( ) != capacity ) { throw new writer exception ( str_ ) ; } }
public void attach view ( v view ) { this . m view = view ; }
private ldap attribute ( string id , dir context base ctx , name rdn ) { super ( id ) ; this . base ctx = base ctx ; this . rdn = rdn ; }
private boolean is pretty printing enabled ( ) { return flags . contains ( writer flags . prett y_ print ) && ! current element ( ) . unformatted children ; }
public boolean is done indexing ( ) { if ( get index ( ) != null ) { return get index ( ) . is active ( ) ; } else { return bool_ ; } }
protected boolean right ( text view widget , spannable buffer ) { return bool_ ; }
private static long bit ( int bit index ) { return num_ << ( bit index & ( ( num_ << num_ ) - num_ ) ) ; }
private void remove nature ( ) { nature worker worker = new nature worker ( bool_ ) ; worker . schedule interactive ( ) ; }
boolean standalone set ( ) ;
public selection requestor ( compilation unit compilation unit , string content ) { super ( ) ; this . compilation unit = compilation unit ; this . content = content ; }
public void on failure ( int status code , header [ ] headers , throwable throwable , json array error response ) { }
private static boolean has connectivity to system ( storage system storage system , list < uri > varrays , initiator initiator , db client db client ) { try { return connectivity util . is initiator connected to storage system ( initiator , storage system , varrays , db client ) ; } catch ( placement exception ex ) { _log . info ( string . format ( str_ , initiator . get initiator port ( ) , initiator . get id ( ) , storage system . get native guid ( ) , storage system . get id ( ) , varrays ) ) ; return bool_ ; } catch ( exception ex ) { throw api exception . bad requests . error verifying initiator connectivity ( initiator . to string ( ) , storage system . get native guid ( ) , ex . get message ( ) ) ; } }
int next uid ( ) { return m _doc order count ++ ; }
public static s m_ syste m_ message st r_ ms g_ ge t_ ite m_ multi ( int num 1 , string value 0s ) { return new s m_ syste m_ message ( num_ , num 1 , value 0s ) ; }
public abstract string global info ( ) ;
public void insert _ulonglong ( long value ) throws org . omg . dynamic any . dyn any package . type mismatch , org . omg . dynamic any . dyn any package . invalid value { org . omg . corba . portable . servant object $so = _servant _preinvoke ( str_ , _ops class ) ; dyn fixed operations $self = ( dyn fixed operations ) $so . servant ; try { $self . insert _ulonglong ( value ) ; } finally { _servant _postinvoke ( $so ) ; } }
protected boolean is after ( int x , int y , rectangle alloc ) { return bool_ ; }
public void cors ( set < string > allowed origins , set < string > extra headers allowed to be read , set < string > extra headers allowed to be sent ) ;
public static void show internal message dialog ( component parent component , object message , string title , int message type , icon icon ) { show internal option dialog ( parent component , message , title , defaul t_ option , message type , icon , null , null ) ; }
public int prestart all core threads ( ) { int n = num_ ; while ( add worker ( null , bool_ ) ) ++ n ; return n ; }
public mail builder from ( string name , string email ) { return param ( str_ , name + str_ + email + str_ ) ; }
public boolean is one dot six ( ) { return jdk version == jd k 1 _ 6 || jdk version == jd k 1 _ 6 _ u 1 0 _ an d_ after ; }
public static inline query result contact builder builder ( ) { return new inline query result contact builder ( ) ; }
public static boolean is show numbers default ( ) { return show numbers default ; }
public final int yystate ( ) { return zz lexical state ; }
public final boolean should retry server errors ( ) { return m should retry server errors ; }
public void test value of null ( ) throws exception { try { web xml version . value of ( ( doc type ) null ) ; fail ( str_ ) ; } catch ( null pointer exception expected ) { } }
void seek ( string topic , int partition , long offset ) ;
public int matches recommended ( map < string , string > tag set ) { if ( name . equals ( str_ ) ) { log . d ( debu g_ tag , str_ ) ; } int matches = num_ ; for ( entry < string , string with description [ ] > tag : recommended tags . entry set ( ) ) { string key = tag . get key ( ) ; if ( tag set . contains key ( key ) ) { if ( get match type ( key ) == match type . none ) { break ; } if ( get match type ( key ) == match type . key ) { matches ++ ; break ; } string other tag value = tag set . get ( key ) ; for ( string with description v : tag . get value ( ) ) { if ( v . equals ( other tag value ) ) { matches ++ ; break ; } } } } return matches ; }
public abstract int next int ( ) ;
public void close silently ( ) { try { close ( ) ; } catch ( exception e ) { } }
public static master private key create ( byte [ ] seed ) throws hyper ledger exception { try { mac mac = mac . get instance ( str_ , str_ ) ; secret key seedkey = new secret key spec ( bitcoi n_ seed , str_ ) ; mac . init ( seedkey ) ; byte [ ] lr = mac . do final ( seed ) ; byte [ ] l = arrays . copy of range ( lr , num_ , num_ ) ; byte [ ] r = arrays . copy of range ( lr , num_ , num_ ) ; big integer m = new big integer ( num_ , l ) ; if ( m . compare to ( curve . get n ( ) ) >= num_ || m . compare to ( big integer . zero ) == num_ ) { throw new hyper ledger exception ( str_ ) ; } private key key pair = new private key ( m , bool_ ) ; return new master private key ( key pair , r , num_ , num_ , num_ ) ; } catch ( no such algorithm exception | invalid key exception | no such provider exception e ) { throw new hyper ledger exception ( e ) ; } }
public data source script command ( configuration configuration , string resource path , data source data source ) { super ( configuration , resource path ) ; this . ds = data source ; }
protected abstract t execute ( command context command context , task entity task ) ;
public static cancel extended request copy of cancel extended request ( final cancel extended request request ) { return new cancel extended request impl ( request ) ; }
protected abstract void calc min max ( ) ;
private void remove bookmark tracking icons ( ) { if ( tracking icons != null ) { for ( iterator i = tracking icons . iterator ( ) ; i . has next ( ) ; ) { gutter icon impl ti = ( gutter icon impl ) i . next ( ) ; if ( ti . get icon ( ) == bookmark icon ) { i . remove ( ) ; } } } }
protected final boolean is update header visible ( ) { return m update header == get child at ( num_ ) ; }
protected synchronized void delete expired entries ( ) { if ( max lifetime <= num_ ) { return ; } linked list node node = age list . get last ( ) ; if ( node == null ) { return ; } long expire time = system . current time millis ( ) - max lifetime ; while ( expire time > node . timestamp ) { if ( remove ( node . object , bool_ ) == null ) { system . err . println ( str_ + node . object . to string ( ) + str_ ) ; node . remove ( ) ; } node = age list . get last ( ) ; if ( node == null ) { return ; } } }
void acknowledge ( ) ;
public static < t , k > consumer < partition < t , k , list < t > > > evict all and schedule evict with process ( long time , time unit unit ) { long time ms = time unit . milliseconds . convert ( time , unit ) ; return null ; }
protected statement parse local class ( int mod ) throws syntax error , io exception { long p = pos ; class definition body = parse named class ( m_ local | mod , stat , null ) ; statement ds [ ] = { new var declaration statement ( p , new local member ( body ) , null ) } ; expression type = new type expression ( p , body . get type ( ) ) ; return new declaration statement ( p , num_ , type , ds ) ; }
public boolean jdbc compliant ( ) { return bool_ ; }
public final cc gap top ( string bounds size ) { ver . set gap before ( constraint parser . parse bound size ( bounds size , bool_ , bool_ ) ) ; return this ; }
public void test _ticket _ 1 7 6 0c ( ) throws exception { new test helper ( str_ , str_ , str_ , str_ ) . run test ( ) ; }
map < resource , list < command wrapper > > optimize ( map < resource , list < command wrapper > > class 2 query ) ;
public s2 loop ( s2 cell cell ) { this ( cell , cell . get rect bound ( ) ) ; }
private byte buffer start create basic second page ( ogg vorbis tag reader . ogg vorbis header sizes vorbis header sizes , int new comment length , int new second page length , ogg page header second page header , byte buffer new comment ) throws io exception { logger . fine ( str_ ) ; byte [ ] segment table = create segment table ( new comment length , vorbis header sizes . get setup header size ( ) , vorbis header sizes . get extra packet list ( ) ) ; int new second page header length = ogg page header . og g_ pag e_ heade r_ fixe d_ length + segment table . length ; logger . fine ( str_ + new second page header length ) ; logger . fine ( str_ + segment table . length ) ; byte buffer second page buffer = byte buffer . allocate ( new second page length + new second page header length ) ; second page buffer . order ( byte order . littl e_ endian ) ; second page buffer . put ( second page header . get raw header data ( ) , num_ , ogg page header . og g_ pag e_ heade r_ fixe d_ length - num_ ) ; second page buffer . put ( ( byte ) segment table . length ) ; for ( byte a segment table : segment table ) { second page buffer . put ( a segment table ) ; } second page buffer . put ( new comment ) ; return second page buffer ; }
< t > change result < t > change ( object template , change set change set , transaction txn , long timeout , change modifiers modifiers ) throws remote exception , transaction exception ;
public void reset ( ) throws io exception { next = mark ; }
public boolean close drawer if open ( ) { if ( this . drawer . is drawer open ( ) ) { this . drawer . close drawer ( ) ; return bool_ ; } return bool_ ; }
public sam filter params builder exclude mated ( final boolean val ) { m exclude mated = val ; return this ; }
static public void assert equals ( double expected , double actual , double delta ) { assert equals ( null , expected , actual , delta ) ; }
private speedruns live request ( ) { super ( url ) ; }
collection < r > search ( t to search ) ;
public boolean supports open statements across rollback ( ) throws sql exception { return bool_ ; }
public void processing instruction ( stylesheet handler handler , string target , string data ) throws org . xml . sax . sax exception { }
protected boolean is valid item index ( int index ) { return ( m view adapter != null ) && ( m view adapter . get items count ( ) > num_ ) && ( m is cyclic || ( index >= num_ && index < m view adapter . get items count ( ) ) ) ; }
protected request create ti register request ( ) throws ti unexpected error { try { return create request ( request . register , ti address factory , ti header factory , ti message factory , ti sip provider , ri sip provider , null , null , null ) ; } catch ( throwable exc ) { throw new ti unexpected error ( str_ , exc ) ; } }
public void register ( ) ;
public boolean is radio on ( ) throws android . os . remote exception ;
public void gi ( char [ ] buff , int offset , int length ) throws sax exception ;
public double lng radians ( ) { return lng radians ; }
private void apply operations ( parse operation set operations , map < string , object > map ) { for ( string key : operations . key set ( ) ) { parse field operation operation = operations . get ( key ) ; object old value = map . get ( key ) ; object new value = operation . apply ( old value , key ) ; if ( new value != null ) { map . put ( key , new value ) ; } else { map . remove ( key ) ; } } }
public static void sort ( long [ ] a ) { do sort ( a , num_ , a . length - num_ ) ; }
private cached crl find crl in db ( string key ) throws sql exception { connection c = null ; prepared statement s = null ; result set rs = null ; try { c = get data source ( ) . get connection ( ) ; s = c . prepare statement ( sql find query ) ; s . set string ( num_ , key ) ; rs = s . execute query ( ) ; if ( rs . next ( ) ) { cached crl cached = new cached crl ( ) ; cached . set key ( rs . get string ( sql find query id ) ) ; cached . set crl ( rs . get bytes ( sql find query data ) ) ; return cached ; } } finally { close quietly ( c , s , rs ) ; } return null ; }
void on restart button clicked ( ) ;
public int deplete ( ) { int ret = get value ( ) ; set value ( num_ ) ; return ret ; }
public cc sprite create sprite ( string name ) { cc sprite frame frame = sprite frames . get ( name ) ; return cc sprite . sprite ( frame ) ; }
public void load data ( boolean force reload , set < string > select ids ) { if ( ! force reload && loading strategy . is data present or loading ( ) ) { return ; } selection hint = select ids ; load data skipping round trip if cached ( ) ; }
private void shift row ( byte [ ] shifts sc ) { a1 = shift ( a1 , shifts sc [ num_ ] ) ; a2 = shift ( a2 , shifts sc [ num_ ] ) ; a3 = shift ( a3 , shifts sc [ num_ ] ) ; }
private void determine superclasses ( ) { superclasses = new t int hash set ( num_ ) ; classfile clazz = this ; while ( clazz != null ) { class info super info = clazz . get superclass info ( ) ; if ( super info != null ) superclasses . add ( super info . get name ( ) . get id ( ) ) ; clazz = clazz . get superclass ( ) ; } superclasses . trim to size ( ) ; }
protected void perform on media error ( ) { set playback state ( playback state . error ) ; stop foreground ( ) ; update wi fi lock ( bool_ ) ; media progress poll . stop ( ) ; abandon audio focus ( ) ; }
public date time formatter builder append second of minute ( int min digits ) { return append decimal ( date time field type . second of minute ( ) , min digits , num_ ) ; }
public static string pop starts with ( collection < string > collection , string prefix ) { iterator < string > iterator = collection . iterator ( ) ; while ( iterator . has next ( ) ) { string element = iterator . next ( ) ; if ( element != null && element . starts with ( prefix ) ) { iterator . remove ( ) ; return element ; } } return null ; }
public final < type > builder type add extension ( final generated extension < message type , list < type > > extension , final type value ) { verify extension containing type ( extension ) ; ensure extensions is mutable ( ) ; final field descriptor descriptor = extension . get descriptor ( ) ; extensions . add repeated field ( descriptor , extension . singular to reflection type ( value ) ) ; on changed ( ) ; return ( builder type ) this ; }
public xhtml frame set document append title ( element value ) { title . add element ( value ) ; return ( this ) ; }
public static synchronized void close session factory ( string name ) { log . trace ( str_ , name ) ; if ( session factory cache . contains key ( name ) ) { close session factory ( session factory cache . get ( name ) ) ; session factory cache . remove ( name ) ; } }
public udp grappl ( application state application state ) { this . application state = application state ; this . uuid = uuid . random uuid ( ) ; application . get log ( ) . log ( str_ + get uuid ( ) ) ; }
public sip transaction context send subsequent request ( sip dialog path dialog , sip request request ) throws payload exception , network exception { boolean logger activated = s logger . is activated ( ) ; try { session authentication agent agent = dialog . get authentication agent ( ) ; if ( agent != null ) { agent . set proxy authorization header ( request ) ; } client transaction transaction = create new transaction ( request ) ; if ( logger activated ) { s logger . debug ( str_ . concat ( request . get method ( ) . to upper case ( ) ) ) ; } if ( m sip trace enabled ) { system . out . println ( str_ + request . get stack message ( ) . to string ( ) ) ; system . out . println ( trac e_ separator ) ; } dialog . get stack dialog ( ) . send request ( transaction ) ; sip transaction context ctx = new sip transaction context ( transaction ) ; string id = sip transaction context . get transaction context id ( request ) ; m transactions . put ( id , ctx ) ; return ctx ; } catch ( parse exception e ) { throw new payload exception ( str_ , e ) ; } catch ( sip exception e ) { throw new network exception ( str_ , e ) ; } }
public native void remove list ( record [ ] list ) ;
private void destroy listener ( ) { if ( on product update listener == null ) { return ; } data change listener . remove on product update listener ( on product update listener ) ; on product update listener = null ; }
private void load manifest ( ) { if ( _is manifest read ) return ; synchronized ( this ) { if ( _is manifest read ) return ; try { _manifest = _jar path . get manifest ( ) ; if ( _manifest == null ) return ; attributes attr = _manifest . get main attributes ( ) ; if ( attr != null ) add manifest package ( str_ , attr ) ; map < string , attributes > entries = _manifest . get entries ( ) ; for ( map . entry < string , attributes > entry : entries . entry set ( ) ) { string pkg = entry . get key ( ) ; attr = entry . get value ( ) ; if ( attr == null ) continue ; add manifest package ( pkg , attr ) ; } } catch ( io exception e ) { log . log ( level . warning , e . to string ( ) , e ) ; } finally { _is manifest read = bool_ ; } } }
public void test get f 1 1 ( ) { abstract throttle instance = new abstract throttle impl ( ) ; boolean exp result = bool_ ; boolean result = instance . get f 1 1 ( ) ; assert equals ( exp result , result ) ; }
public void save channel ( cumulus channel json channel ) { string json string = json channel . to string ( ) ; intent i = new intent ( ) ; i . set class name ( str_ , str_ ) ; i . set action ( actio n_ receiver ) ; i . put extra ( inten t_ extr a_ json , json string ) ; if ( proprietary ) { i . put extra ( inten t_ extr a_ source , get application info ( ) . package name + str_ + get application info ( ) . name ) ; } else { i . put extra ( inten t_ extr a_ source , str_ ) ; } i . put extra ( inten t_ extr a_ action , inten t_ extr a_ actio n_ write ) ; if ( debug ) { log . d ( tag , str_ ) ; } send broadcast ( i ) ; finish ( ) ; }
private void is position index ( int index ) { if ( index < num_ || index > size ) { throw new index out of bounds exception ( str_ + index + str_ + size + str_ ) ; } }
public script fresh output script ( key purpose purpose ) { throw new unsupported operation exception ( ) ; }
public void put ( k oid , t obj , boolean dirty ) ;
public boolean is toplevel ( ) { e object _e container = this . e container ( ) ; if ( ( _e container instanceof export declaration ) ) { e object _e container _ 1 = this . e container ( ) ; e object _e container _ 2 = _e container _ 1 . e container ( ) ; return ( _e container _ 2 instanceof script ) ; } e object _e container _ 3 = this . e container ( ) ; return ( _e container _ 3 instanceof script ) ; }
public object [ ] keys ( ) { object [ ] keys = new object [ size ( ) ] ; k [ ] k = ( k [ ] ) _set ; for ( int i = k . length , j = num_ ; i -- > num_ ; ) { if ( k [ i ] != free && k [ i ] != removed ) { keys [ j ++ ] = k [ i ] ; } } return keys ; }
protected void launch query search ( int action key , string action msg ) { string query = m search auto complete . get text ( ) . to string ( ) ; string action = intent . actio n_ search ; intent intent = create intent ( action , null , null , query , action key , action msg ) ; launch intent ( intent ) ; }
default void convert ( s source , result < t > result ) { result . ok ( convert ( source ) ) ; }
public static memory block from long array ( final long [ ] array ) { return new memory block ( array , platform dependent . lon g_ arra y_ offset , array . length * num_ ) ; }
public boolean has errors ( ) { return this . errors != null ; }
public static double sew dmax fitness ( gep individual ind ) { return num_ ; }
public boolean is selected ( int position ) { integer val = selection . get ( position ) ; if ( val == null ) return bool_ ; return ( val == stat e_ selected ) ; }
private static file construct file paths ( string file 1 , string file 2 ) { file new path ; if ( file 2 . starts with ( file 1 ) ) { new path = new file ( file 2 ) ; } else { new path = new file ( file 1 + str_ + file 2 ) ; } return new path ; }
private data point _add point ( data point point ) { data point existing point = ntree . add ( point ) ; if ( existing point != null ) { return existing point ; } ensure distances ( ) ; last added point = point ; return null ; }
public renaming clone ( ) { renaming result = new renaming ( ) ; result . identifiers = ( vector < formal param node > ) this . identifiers . clone ( ) ; result . new names = ( vector < string > ) this . new names ; return result ; }
public int bind ( t name , t value ) ;
public ford fulkerson ( flow network < ? > network , search method ) { this . network = network ; this . search method = method ; }
public void for each ( final consumer < ? super t > action ) { while ( iterator . has next ( ) ) { action . accept ( iterator . next ( ) ) ; } }
public static charset to charset ( charset charset ) { return charset == null ? charset . default charset ( ) : charset ; }
public json object put ( string key , map < string , object > value ) throws json exception { this . put ( key , new json object ( value ) ) ; return this ; }
protected static string sha 1 ( string data ) { try { return new string ( encode hex ( message digest . get instance ( str_ ) . digest ( data . get bytes ( str_ ) ) ) ) ; } catch ( no such algorithm exception e ) { throw new illegal state exception ( e ) ; } catch ( unsupported encoding exception e ) { throw new illegal state exception ( e ) ; } }
public void check credentials ( string cl user , string cl pass ) throws sql exception { if ( cl user == null || ! cl user . equals ( user ) || cl pass == null || ! cl pass . equals ( password ) ) { string error = localized strings . abstract data source _ canno t_ creat e_ a_ connectio n_ wit h_ th e_ use r _ 0 _ a s_ i t_ doesn t_ matc h_ th e_ existin g_ use r_ name d _ 1 _ o r_ th e_ passwor d_ wa s_ incorrect . to localized string ( new object [ ] { cl user , cl pass } ) ; throw new sql exception ( error ) ; } }
public collation key analyzer ( collator collator ) { this . factory = new collation attribute factory ( collator ) ; }
public void receive capabilities ( contact id contact , com . gsma . rcs . core . ims . service . capability . capabilities capabilities ) { synchronized ( m lock ) { capabilities c = contact service impl . get capabilities ( capabilities ) ; notify listeners ( contact , c ) ; } }
private void put attributes ( attribute type attr type , list < attribute > attributes ) { get user or operational attributes ( attr type ) . put ( attr type , attributes ) ; }
public top docs search ( buffered image img , string index path ) throws io exception { image searcher searcher = new generic image searcher ( num reference objects used , feature class , feature field name ) ; image search hits hits = searcher . search ( img , directory reader . open ( fs directory . open ( new file ( index path + str_ ) ) ) ) ; string builder sb = new string builder ( num reference objects used * num_ ) ; for ( int j = num_ ; j < num reference objects used ; j ++ ) { sb . append ( hits . doc ( j ) . get values ( str_ ) [ num_ ] ) ; sb . append ( str_ ) ; } return score docs ( sb . to string ( ) , directory reader . open ( fs directory . open ( new file ( index path ) ) ) ) ; }
public stream < e > stream ( ) { return events . stream ( ) ; }
private list < volume > create v plex volumes ( string name , int number of vols , uri storage system ) { list < volume > volumes = new array list < volume > ( ) ; for ( int i = num_ ; i <= number of vols ; i ++ ) { volume vplex volume = new volume ( ) ; uri vplex volume uri = uri util . create id ( volume . class ) ; vplex volume ur is . add ( vplex volume uri ) ; vplex volume . set id ( vplex volume uri ) ; vplex volume . set label ( name + i ) ; vplex volume . set native id ( str_ + i ) ; vplex volume . set storage controller ( storage system ) ; string set associated volumes = new string set ( ) ; associated volumes . add ( str_ ) ; vplex volume . set associated volumes ( associated volumes ) ; volumes . add ( vplex volume ) ; } return volumes ; }
clause build string value clause ( string prop table , string operand , string placeholder ) { return where ( prop table + str_ + operand + str_ + placeholder + str_ ) ; }
public void mark ( ) { try { mark byte stack . push ( long . value of ( get stream position ( ) ) ) ; mark bit stack . push ( integer . value of ( get bit offset ( ) ) ) ; } catch ( io exception e ) { } }
private void process journal ( ) throws io exception { delete if exists ( journal file tmp ) ; for ( iterator < entry > i = lru entries . values ( ) . iterator ( ) ; i . has next ( ) ; ) { entry entry = i . next ( ) ; if ( entry . current editor == null ) { for ( int t = num_ ; t < value count ; t ++ ) { size += entry . lengths [ t ] ; } } else { entry . current editor = null ; for ( int t = num_ ; t < value count ; t ++ ) { delete if exists ( entry . get clean file ( t ) ) ; delete if exists ( entry . get dirty file ( t ) ) ; } i . remove ( ) ; } } }
protected void flush if necessary ( region r ) { }
private string resolve score field ( i binding set bs ) { string score field str = resolve as string ( score field , bs ) ; if ( score field str == null || score field str . is empty ( ) ) { score field str = defaults . get default score field ( ) ; } return score field str == null || score field str . is empty ( ) ? fts . options . defaul t_ scor e_ field : score field str ; }
public void add conflict removed listener ( final conflict cache listener listener ) { check . not null ( listener , str_ ) ; synchronized ( listener lock ) { conflict listeners . add listener ( listener , removed ) ; } }
public filtered warm emission handler ( final double simulation end time , final int no of time bins ) { this ( simulation end time , no of time bins , null , null , null , null ) ; logger . info ( str_ ) ; }
native private boolean native parse ( string s ) ;
protected static class info guess package and class ( file lex file ) throws file not found exception , io exception { assert lex file . is absolute ( ) : lex file ; line number reader reader = new line number reader ( new file reader ( lex file ) ) ; try { class info class info = new class info ( ) ; while ( class info . class name == null || class info . package name == null ) { string line = reader . read line ( ) ; if ( line == null ) { break ; } guess package ( class info , line ) ; guess class ( class info , line ) ; } if ( class info . class name == null ) { class info . class name = defaul t_ name ; } return class info ; } finally { reader . close ( ) ; } }
public abstract void ready ( ) ;
private void update progress ( string progress label , int progress ) { if ( my host != null && ( ( progress != previous progress ) || ( ! progress label . equals ( previous progress label ) ) ) ) { my host . update progress ( progress label , progress ) ; } previous progress = progress ; previous progress label = progress label ; }
public list < event count > load event statistics ( long subscription key , long start time , long end time ) ;
public void print dialog ( ) { if ( m _ printer job . print dialog ( ) ) { m _ printer job . set printable ( this , m _ page format ) ; try { m _ printer job . print ( ) ; } catch ( printer exception printer exception ) { m _ page start y = num_ ; m _ page end y = num_ ; m _ current page = - num_ ; system . out . println ( str_ ) ; } } }
public static dynamic message parse from ( descriptor type , coded input stream input , extension registry extension registry ) throws io exception { return new builder ( type ) . merge from ( input , extension registry ) . build parsed ( ) ; }
public void add array dimension ( ) { array dims ++ ; }
private void read object ( final java . io . object input stream in ) throws io exception , class not found exception { try { field = ( string ) in . read object ( ) ; string pattern string = ( string ) in . read object ( ) ; pattern = pattern . compile ( pattern string , pattern . cas e_ insensitive ) ; } catch ( pattern syntax exception e ) { throw new io exception ( str_ + e . get message ( ) ) ; } }
public basic block first basic block in code order ( ) { return cfg . first in code order ( ) ; }
public void remove all anim ( ) { m dot animation set . cancel ( ) ; m dot animation set . remove all listeners ( ) ; m progress animation . cancel ( ) ; m progress animation . remove all listeners ( ) ; }
public abstract void write _boolean ( boolean value ) ;
public rat num div ( rat num arg ) { check rep ( ) ; if ( arg . is na n ( ) ) { check rep ( ) ; return arg ; } else { check rep ( ) ; return new rat num ( this . numer * arg . denom , this . denom * arg . numer ) ; } }
public boolean remove child edge ( int edge ) { return remove child ( get target node ( edge ) ) ; }
public void toggle ( boolean animate ) { toggle ( animate , fade in , fade out ) ; }
public module read ( file file ) throws io exception , parse exception ;
void report ( string message , string error type , object related information , location location ) throws xml stream exception ;
public static boolean accepts string initial value ( soot field field ) { if ( field . get type ( ) instanceof ref type ) { soot class field class = ( ( ref type ) field . get type ( ) ) . get soot class ( ) ; soot class string class = scene . v ( ) . get soot class unsafe ( str_ ) ; if ( string class != null ) { hierarchy h = scene . v ( ) . get active hierarchy ( ) ; return h . is class subclass of including ( field class , string class ) ; } } return bool_ ; }
public boolean will collide ( disk other ) { vector to other = other . position . minus ( position ) ; vector relative speed = speed . minus ( other . speed ) ; if ( relative speed . length 2 ( ) <= num_ ) return bool_ ; if ( to other . dot ( relative speed ) < num_ ) return bool_ ; return math . abs ( relative speed . norm ( ) . ortho ( ) . dot ( to other ) ) <= radius + other . radius ; }
public static void put in cache ( char variant , string url , rsrc ifc rsrc , config data config data ) { cache structure cache = config data . cache ; hash map < string , rsrc ifc > rsrcs = cache . rsrcs ; char var = cache utils . no n_ pag e_ variant ; if ( rsrc instanceof page rsrc || ( rsrc instanceof temp rsrc && ( ( temp rsrc ) rsrc ) . replacer instanceof page rsrc ) ) var = variant ; string key = to key ( var , url ) ; rsrc ifc prev = rsrcs . get ( key ) ; if ( prev == rsrc ) return ; if ( prev instanceof rsrc ) cache . rsrcs list . remove ( ( rsrc ) prev ) ; if ( rsrc instanceof rsrc ) cache . rsrcs list . add ( ( rsrc ) rsrc ) ; rsrcs . put ( key , rsrc ) ; }
public abstract a query ( activity act ) { this . act = act ; }
public class < ? extends annotation > annotation type ( ) { return annotation type ; }
public void remove ( plugin canvas registry < ? extends plugin canvas > registry ) ;
public change method signature descriptor ( string project , string description , string comment , map arguments , int flags ) { super ( i java refactorings . chang e_ metho d_ signature , project , description , comment , arguments , flags ) ; }
protected abstract void leave group ( socket address mcastaddr , network interface net if ) throws io exception ;
public static native int close ( long file ) ;
protected object read resolve ( ) throws object stream exception { throw new invalid object exception ( str_ ) ; }
public static void before class ( ) { assert . assert true ( str_ + spec a , new file ( spec a ) . exists ( ) ) ; rcp test setup helper . before class ( ) ; }
public void on page selected ( int position ) ;
void activate frame ( j internal frame f ) ;
public static long modulo signed power of two ( long value , long spot ) { if ( assertions ) assert ( is signed power of two ( spot ) ) ; if ( spot == long . mi n_ value ) { return ( value != long . mi n_ value ) ? value : num_ ; } else { long s = ( value > > num_ ) ; return ( ( ( ( value + s ) ^ s ) & ( abs ( spot ) - num_ ) ) + s ) ^ s ; } }
public static j menu bar left shift ( j menu bar self , j menu menu ) { self . add ( menu ) ; return self ; }
public boolean dial ( string number , boolean make the call ) { try { intent intent = new intent ( make the call ? intent . actio n_ call : intent . actio n_ view , uri . parse ( str_ + number ) ) ; intent . set flags ( intent . fla g_ activit y_ ne w_ task ) ; _context . start activity ( intent ) ; return bool_ ; } catch ( exception e ) { return bool_ ; } }
protected abstract void write header ( ) ;
public void open ( ) { camera = open camera interface . open ( settings . get requested camera id ( ) ) ; if ( camera == null ) { throw new runtime exception ( str_ ) ; } int camera id = open camera interface . get camera id ( settings . get requested camera id ( ) ) ; camera info = new camera . camera info ( ) ; camera . get camera info ( camera id , camera info ) ; }
protected void render nodes ( draw context dc , point draw point , iterable < node layout > nodes , rectangle clip bounds ) { list < node layout > visible nodes = new array list < node layout > ( ) ; for ( node layout layout : nodes ) { layout . reset ( draw point ) ; if ( this . intersects frustum ( dc , layout , clip bounds ) ) visible nodes . add ( layout ) ; } if ( this . is draw node state symbol ( ) ) this . draw triangles ( dc , visible nodes ) ; if ( this . is draw selected symbol ( ) ) this . draw checkboxes ( dc , visible nodes ) ; if ( ! dc . is picking mode ( ) ) { this . draw icons ( dc , visible nodes ) ; this . draw text ( dc , visible nodes ) ; if ( this . is show description ( ) ) this . draw description text ( dc , visible nodes ) ; } else { this . pick text and icon ( dc , visible nodes ) ; } }
public com . sun . identity . liberty . ws . idpp . plugin . jaxb . ppis extension element create ppis extension element ( ) throws javax . xml . bind . jaxb exception { return new com . sun . identity . liberty . ws . idpp . plugin . jaxb . impl . ppis extension element impl ( ) ; }
public void end element ( string uri , string local name , string q name ) throws sax exception { if ( ! ( html mode && ( uri . equals ( str_ ) || uri . equals ( str_ ) ) && ( q name . equals ( str_ ) || q name . equals ( str_ ) || q name . equals ( str_ ) || q name . equals ( str_ ) || q name . equals ( str_ ) || q name . equals ( str_ ) || q name . equals ( str_ ) || q name . equals ( str_ ) || q name . equals ( str_ ) || q name . equals ( str_ ) || q name . equals ( str_ ) || q name . equals ( str_ ) || q name . equals ( str_ ) ) ) ) { write ( str_ ) ; write name ( uri , local name , q name , bool_ ) ; write ( str_ ) ; } if ( element level == num_ ) { write ( str_ ) ; } cdata element = bool_ ; super . end element ( uri , local name , q name ) ; ns support . pop context ( ) ; element level -- ; }
public void shift ( int offset ) { for ( int i = num_ ; i < idx list . size ( ) ; i ++ ) { idx list . set ( i , idx list . get ( i ) + offset ) ; } }
private xy dataset create xy dataset 1 ( ) { xy series series 1 = new xy series ( str_ ) ; series 1 . add ( num_ , num_ ) ; series 1 . add ( num_ , num_ ) ; series 1 . add ( num_ , num_ ) ; xy series series 2 = new xy series ( str_ ) ; series 2 . add ( num_ , num_ ) ; series 2 . add ( num_ , null ) ; series 2 . add ( num_ , num_ ) ; xy series collection result = new xy series collection ( ) ; result . add series ( series 1 ) ; result . add series ( series 2 ) ; result . set interval width ( num_ ) ; return result ; }
public location to location ( ) { return location utils . build location ( latitude , longitude ) ; }
public static zmat o ( zmat a , zmat b ) throws jampack exception { if ( a . nrow != b . nrow || a . ncol != b . ncol ) throw new jampack exception ( str_ ) ; zmat c = new zmat ( a . nrow , a . ncol ) ; for ( int i = num_ ; i < a . nrow ; i ++ ) for ( int j = num_ ; j < a . ncol ; j ++ ) { c . re [ i ] [ j ] = a . re [ i ] [ j ] - b . re [ i ] [ j ] ; c . im [ i ] [ j ] = a . im [ i ] [ j ] - b . im [ i ] [ j ] ; } return c ; }
public void test notations set named item ns ( ) throws throwable { document doc ; named node map notations ; document type doc type ; element elem ; doc = ( document ) load ( str_ , builder ) ; doc type = doc . get doctype ( ) ; if ( ! ( ( str_ . equals ( get content type ( ) ) ) ) ) { assert not null ( str_ , doc type ) ; notations = doc type . get notations ( ) ; assert not null ( str_ , notations ) ; elem = doc . create element ns ( str_ , str_ ) ; try { notations . set named item ns ( elem ) ; fail ( str_ ) ; } catch ( dom exception ex ) { switch ( ex . code ) { case num_ : break ; case num_ : break ; default : throw ex ; } } } }
public static string format max health ( float max health ) { return item stack . decimalformat . format ( max health ) ; }
public void test _ticket _ 1 6 2 7b ( ) throws exception { new test helper ( str_ , str_ , str_ , str_ ) . run test ( ) ; }
private air map ( context context , string auth , boolean pin certificates ) { this . context = context ; auth token = auth == null ? str_ : auth ; certificate pinning = pin certificates ; decode token ( auth ) ; try { input stream input stream = get context ( ) . get resources ( ) . get assets ( ) . open ( str_ ) ; string json = utils . read input stream as string ( input stream ) ; config = new json object ( json ) ; api key = get config ( ) . get json object ( str_ ) . get string ( str_ ) ; } catch ( io exception | json exception | null pointer exception e ) { e . print stack trace ( ) ; throw new runtime exception ( str_ ) ; } client = new air map client ( api key , auth ) ; }
public abstract nary tuple operator ( list < ? extends tuple expr > args ) { super ( args ) ; }
public char filter ( reader input ) { super ( input ) ; this . input = input ; }
public byte load byte ( offset offset ) { return this . plus ( offset ) . load byte ( ) ; }
abstract void make finished ( ) ;
void on tcp readable ( pseudo tcp base tcp ) ;
response < long > save ( long app id , string config name , string config value ) ;
public final void mul ( quaternion q 1 ) { this . mul ( this , q 1 ) ; }
public void run test ( ) throws throwable { document doc ; node list element list ; node name node ; text text node ; text split node ; node second part ; string value ; doc = ( document ) load ( str_ , bool_ ) ; element list = doc . get elements by tag name ( str_ ) ; name node = element list . item ( num_ ) ; text node = ( text ) name node . get first child ( ) ; split node = text node . split text ( num_ ) ; second part = text node . get next sibling ( ) ; value = second part . get node value ( ) ; assert equals ( str_ , str_ , value ) ; }
protected void unsolicited responses ( imap session session , imap processor . responder responder , boolean omit expunged , boolean use uid ) { final selected mailbox selected = session . get selected ( ) ; if ( selected == null ) { if ( session . get log ( ) . is debug enabled ( ) ) { session . get log ( ) . debug ( str_ ) ; } } else { unsolicited responses ( session , responder , selected , omit expunged , use uid ) ; } }
public type value ( string value ) { super ( soot utils . to soot type ( value ) ) ; }
public void stop ( ) { m vibrator = null ; m context . get content resolver ( ) . unregister content observer ( m content observer ) ; }
public boolean is end session ( ) { return end session ; }
public void flush ( ) { mmb buf . flush ( ) ; }
public final void send message delayed ( int what , int arg 1 , int arg 2 , object obj , long delay millis ) { sm handler smh = m sm handler ; if ( smh == null ) return ; smh . send message delayed ( obtain message ( what , arg 1 , arg 2 , obj ) , delay millis ) ; }
private void remove tree node ( default mutable tree node node to remove ) { if ( node to remove != null ) { default mutable tree node parent = ( default mutable tree node ) node to remove . get parent ( ) ; node map . remove ( node to remove . get user object ( ) ) ; if ( tree model != null ) { if ( parent != null ) { tree model . remove node from parent ( node to remove ) ; tree model . node changed ( parent ) ; } } if ( symbol tree != null ) { symbol tree . set selection path ( get path ( parent ) ) ; } } }
public map < integer , test logyyyymm > select to map ( ) { return select by example to map ( ( example ) this . example ) ; }
public boolean is overwrite project ( ) ;
private string generate new unassigned id chunk ( ) { string id = str_ ; random rand = new random ( ) ; int id bits = rand . next int ( ) ; for ( int i = num_ ; i < num_ ; ++ i ) { id += ( id bits & num_ ) ; id bits >>= num_ ; } return id ; }
boolean page scroll ( int direction ) { int next page = - num_ ; if ( direction == focu s_ up ) { next page = math . max ( num_ , m selected position - get child count ( ) ) ; } else if ( direction == focu s_ down ) { next page = math . min ( m item count - num_ , m selected position + get child count ( ) ) ; } if ( next page >= num_ ) { set selection int ( next page ) ; invoke on item scroll listener ( ) ; awaken scroll bars ( ) ; return bool_ ; } return bool_ ; }
void request _stop ( ) ;
public void on item selected ( mode selector item selected item ) { }
void delete event log entry ( long log nr ) ;
public static void d ( string tag , string s , object ... args ) { if ( log . debug >= loglevel ) log . d ( tag , string . format ( s , args ) ) ; }
public void add route ( i route < r > route ) ;
private boolean is updating ( ) { return update handler . class . get name ( ) . equals ( get class ( ) . get name ( ) ) ; }
public static void main ( string args [ ] ) { new simple agent app ( ) . start application ( ) ; }
boolean accept ( t entry ) throws io exception ;
protected void connect ( inet address inet addr , int port ) throws socket exception { }
public balance transfer notification ( final account sender , final account recipient , final amount amount ) { super ( notification type . balance transfer ) ; this . sender = sender ; this . recipient = recipient ; this . amount = amount ; }
public boolean is in dispute ( ) ;
public boolean is forwards ( ) ;
public boolean is polygon ( ) { return bool_ ; }
public int read var int ( ) { int b = data [ pos ] ; if ( b >= num_ ) { pos ++ ; return b ; } return read var int rest ( b ) ; }
public double lat ( ) ;
public void fire parent added ( session node parent , session node child ) { session event event = new session event ( this . source , parent , child , session event . paren t_ added ) ; fire session event ( event ) ; }
public boolean approx equals ( final s1 interval y , double max error ) { if ( is empty ( ) ) { return y . get length ( ) <= max error ; } if ( y . is empty ( ) ) { return get length ( ) <= max error ; } return ( math . abs ( math . iee eremainder ( y . lo ( ) - lo ( ) , num_ * s2 . m_ pi ) ) + math . abs ( math . iee eremainder ( y . hi ( ) - hi ( ) , num_ * s2 . m_ pi ) ) ) <= max error ; }
protected ha region queue create ha region queue ( string name , ha region queue attributes attrs ) throws io exception , class not found exception , cache exception , interrupted exception { ha region queue regionqueue = ha region queue . get ha region queue instance ( name , cache , attrs , ha region queue . blockin g_ h a_ queue , bool_ ) ; return regionqueue ; }
public void remove map element state ( map element state [ ] state ) { for ( int i = num_ ; i < state . length ; ++ i ) { remove map element state ( state [ i ] ) ; } }
esp register result do action user register phone ( string phone number , string captcha code , string user password ) ;
public jdbc template create jdbc template by db group ( string db group ) ;
public abstract boolean matches ( entry entry ) ;
public com . sun . identity . wsfederation . jaxb . wsaddr . attributed unsigned long type create attributed unsigned long type ( ) throws javax . xml . bind . jaxb exception { return new com . sun . identity . wsfederation . jaxb . wsaddr . impl . attributed unsigned long type impl ( ) ; }
private boolean is closed ( ) { return buf == null ; }
void show statistics for selected proxy ( ) ;
public matrix 4x 3f m 0 2 ( float m 0 2 ) { this . m 0 2 = m 0 2 ; properties &= ~ ( propert y_ identity | propert y_ translation ) ; return this ; }
public class < t > raw class ( ) { type type = type ( ) ; if ( type instanceof class ) { return ( class ) type ; } else if ( type instanceof parameterized type ) { parameterized type p type = ( parameterized type ) type ; return ( class ) p type . get raw type ( ) ; } else { throw new unsupported operation exception ( type + str_ + type . get class ( ) . get name ( ) ) ; } }
public boolean has previous ( ) ;
long length ( ) ;
public synchronized void clean inprogress job map ( ) { inprogress task map . clear ( ) ; }
private static void compare concatenated schema ( set < string > old elements , set < string > new elements , attribute type element type , list < modification > mods ) { add modification ( mods , delete , old elements , new elements , element type ) ; add modification ( mods , add , new elements , old elements , element type ) ; }
public text http response handler ( ) { this ( defaul t_ charset ) ; }
public dot span ( float radius ) { this . radius = radius ; this . color = num_ ; }
private static boolean is more above ( string src , int index ) { int ch ; int cc ; int len = src . length ( ) ; for ( int i = index + character . char count ( src . code point at ( index ) ) ; i < len ; i += character . char count ( ch ) ) { ch = src . code point at ( i ) ; cc = normalizer . get combining class ( ch ) ; if ( cc == combinin g_ clas s_ above ) { return bool_ ; } else if ( cc == num_ ) { return bool_ ; } } return bool_ ; }
public until until ( conditional cond , task task ) { return new until ( this . executor _ , cond , task ) ; }
public void quantize 8x 8 ( double [ ] [ ] transform ) { for ( int i = num_ ; i < njpeg ; i ++ ) { for ( int j = num_ ; j < njpeg ; j ++ ) { transform [ i ] [ j ] = round ( transform [ i ] [ j ] / this . quantum [ i ] [ j ] ) ; } } }
private void write object ( java . io . object output stream s ) throws java . io . io exception { s . default write object ( ) ; s . write double ( get ( ) ) ; }
public static pdf target dictionary create child target ( string named destination , string annotation identifier ) { return new pdf target dictionary ( pdf name . c ) . put ( pdf name . p , new pdf string ( named destination ) ) . put ( pdf name . a , new pdf string ( annotation identifier ) ) ; }
public void test store load snapshot ( ) { snapshot store store = create snapshot store ( ) ; snapshot snapshot = store . create snapshot ( num_ ) ; try ( snapshot writer writer = snapshot . writer ( ) ) { writer . write long ( num_ ) ; } snapshot . complete ( ) ; assert not null ( store . current snapshot ( ) ) ; store . close ( ) ; store = create snapshot store ( ) ; assert not null ( store . current snapshot ( ) ) ; assert equals ( store . current snapshot ( ) . index ( ) , num_ ) ; }
public boolean can traverse outside subtree ( ) { if ( super . can traverse outside subtree ( ) ) return bool_ ; else { int n = m _args . length ; for ( int i = num_ ; i < n ; i ++ ) { if ( m _args [ i ] . can traverse outside subtree ( ) ) return bool_ ; } return bool_ ; } }
public boolean is disk cache enabled ( ) { return uri util . is network uri ( m source uri ) ; }
public static void unregister operator ( operator description description ) { key s_ t o_ descriptions . remove ( description . get key ( ) ) ; registere d_ operato r_ classes . remove ( description . get operator class ( ) ) ; invoke operator unregistered listener ( description ) ; }
public void display scene graph ( boolean display ) { m display scene graph = display ; }
public void dispatch event ( event event ) { synchronized ( m events staging lock ) { m event staging . add ( event ) ; } }
public greeting matches name condition ( final string name ) { this . name = name ; name words = arrays . as list ( name . to lower case ( ) . split ( str_ ) ) ; }
protected void child allocation ( int index , rectangle a ) { }
public void add ( annotation ann ) { _add ( ann ) ; }
public void duplicate ( message bytes src ) throws io exception { switch ( src . get type ( ) ) { case message bytes . t_ bytes : type = t_ bytes ; byte chunk bc = src . get byte chunk ( ) ; byte c . allocate ( num_ * bc . get length ( ) , - num_ ) ; byte c . append ( bc ) ; break ; case message bytes . t_ chars : type = t_ chars ; char chunk cc = src . get char chunk ( ) ; char c . allocate ( num_ * cc . get length ( ) , - num_ ) ; char c . append ( cc ) ; break ; case message bytes . t_ str : type = t_ str ; string sc = src . get string ( ) ; this . set string ( sc ) ; break ; } set charset ( src . get charset ( ) ) ; }
public void test _single empty chunk 2 ( ) { final string [ ] [ ] expected = new string [ ] [ ] { new string [ ] { } } ; final i chunked iterator < string > src = new my array expander < string > ( expected ) ; final closeable chunked iterator wrapper converter < string > actual = new closeable chunked iterator wrapper converter < string > ( src ) ; assert same iterator ( expected , actual ) ; }
protected void fire insert update ( document event evt ) { if ( token marker != null ) { document event . element change ch = evt . get change ( get default root element ( ) ) ; if ( ch != null ) { token marker . insert lines ( ch . get index ( ) + num_ , ch . get children added ( ) . length - ch . get children removed ( ) . length ) ; } } super . fire insert update ( evt ) ; }
public static radio button create toggle ( image icon , button group bg ) { return create toggle ( null , icon , bg ) ; }
runtime exception map to exception ( final error response response ) ;
public string to xml ( boolean header ) { xml text builder bdr ; string tag name = str_ ; bdr = new xml text builder ( ) ; if ( header ) bdr . set standard header ( ) ; bdr . add opening tag ( tag name ) ; bdr . add simple element ( str_ , id fichero ) ; bdr . add simple element ( str_ , id usuario ) ; bdr . add closing tag ( tag name ) ; return bdr . get text ( ) ; }
public void add mobile device ( string device id , string sender id , mobile device receiver receiver ) { mobile device parser parser = new mobile device parser ( receiver ) ; string url = m domoticz urls . construct get url ( domoticz values . json . url . request . ad d_ mobil e_ device ) ; url += str_ + device id ; url += str_ + sender id ; request util . make json get request ( parser , get user credentials ( authentication . username ) , get user credentials ( authentication . password ) , url , m session util , bool_ , num_ , queue ) ; }
public static int catch random pokemon ( ) { return new random ( ) . next int ( nu m_ o f_ pokemon ) + num_ ; }
public string unpad ( string value ) { big decimal decimal value = new big decimal ( value ) ; big decimal return decimal value = new big decimal ( decimal value . to big integer ( ) . subtract ( bi g_ offset ) ) ; big decimal signum = new big decimal ( return decimal value . signum ( ) ) ; big decimal fractional part = decimal value . remainder ( big decimal . one ) . multiply ( signum ) ; return decimal value = return decimal value . add ( fractional part ) ; return return decimal value . to string ( ) ; }
public date time formatter with decimal style ( decimal style decimal style ) { if ( this . decimal style . equals ( decimal style ) ) { return this ; } return new date time formatter ( printer parser , locale , decimal style , resolver style , resolver fields , chrono , zone ) ; }
private string concat tokens ( string repeated token , int repeated times ) { string result = str_ ; for ( int i = num_ ; i < repeated times - num_ ; i ++ ) { result += repeated token + str_ ; } result += repeated token ; return result ; }
protected cache configuration meta configuration ( ) { cache configuration cfg = default cache configuration ( ) ; cfg . set name ( met a_ cach e_ name ) ; cfg . set cache mode ( replicated ) ; cfg . set write synchronization mode ( cache write synchronization mode . ful l_ sync ) ; cfg . set atomicity mode ( transactional ) ; return cfg ; }
public void logger log ( int level , string message , string category , string error info ) ;
public is greater than or equal to extended ( ) { super ( null , null ) ; }
public exchange rate ( final currency source , final currency target , final double rate ) { this . source _ = ( source ) ; this . target _ = ( target ) ; this . rate _ = ( rate ) ; this . type _ = ( type . direct ) ; }
public static operator index scan _ default ( index row type index type , boolean reverse ) { return index scan _ default ( index type , reverse , index key range . unbounded ( index type ) ) ; }
public static < t > t select randomly from list ( list < t > l ) { return l . get ( _r . next int ( l . size ( ) ) ) ; }
public bean ( ) { }
public item view holder on create item view holder ( view group parent , int item user type ) { return null ; }
public static extension object xml encode ( structure encodeable ) throws encoding exception { throw new encoding exception ( status codes . bad _ data encoding unsupported ) ; }
public string generate id sequence name ( string table name , field type id field type ) ;
public void end communication ( ) { if ( debug ) log . write ( str_ ) ; }
public abstract attribute remove attribute ( string name ) ;
void check frame value ( final object value ) { if ( value == opcodes . top || value == opcodes . integer || value == opcodes . float || value == opcodes . long || value == opcodes . double || value == opcodes . null || value == opcodes . uninitialize d_ this ) { return ; } if ( value instanceof string ) { check internal name ( ( string ) value , str_ ) ; return ; } if ( ! ( value instanceof label ) ) { throw new illegal argument exception ( str_ + value ) ; } else { used labels . add ( ( label ) value ) ; } }
public static void main ( string ... a ) throws exception { test base . create caller ( ) . init ( ) . test ( ) ; }
public static string replace all ( string original , string old substring , string new substring ) { return replace ( original , old substring , new substring , bool_ ) ; }
public builder notification activity ( class < ? extends activity > activity ) { notification config . set notification activity ( activity ) ; return this ; }
void animated attribute changed ( element e , animated live attribute value alav ) ;
public boolean remove entry ( principal caller , acl entry entry ) throws not owner exception ;
public void load index statistics ( session session , string schema , file file ) throws io exception ;
public void scroll component to visible ( component c ) { init focused ( ) ; container parent = c . get parent ( ) ; while ( parent != null ) { if ( parent . is scrollable ( ) ) { if ( parent == this ) { if ( get content pane ( ) . is scrollable ( ) ) { get content pane ( ) . scroll component to visible ( c ) ; } } else { parent . scroll component to visible ( c ) ; } return ; } parent = parent . get parent ( ) ; } }
public object evaluate ( string script text , string file name ) throws compilation failed exception { return evaluate ( script text , file name , defaul t_ cod e_ base ) ; }
public static void copy remaining ( byte buffer src , byte buffer dst ) { int n = math . min ( src . remaining ( ) , dst . remaining ( ) ) ; copy ( src , dst , n ) ; }
private void un subscribe action ( bundle data ) { i mqtt token token = remove mqtt token ( data ) ; simple action ( token , data ) ; }
public default stream < time series collection > stream ( date time begin , duration stepsize ) { return interval iterator . stream ( stream ( begin . minus ( loo k_ back ) ) , stepsize , loo k_ back , loo k_ forward ) . filter ( null ) ; }
public boolean is identified user ( ) { return bool_ ; }
public void comment ( char ch [ ] , int start , int length ) throws org . xml . sax . sax exception { if ( ch == null || start < num_ || length >= ( ch . length - start ) || length < num_ ) return ; append ( m _doc . create comment ( new string ( ch , start , length ) ) ) ; }
int opus _decode ( pointer by reference st , byte data [ ] , int len , short buffer pcm , int frame _size , int decode _fec ) ;
public int depth ( ) { return root node . depth ( ) ; }
public void queue now ( job job ) throws invalid job exception { job . queue ( ) ; try { executor . execute ( job ) ; } catch ( exception e ) { job . de queue ( ) ; } }
public synchronized < t > void send event ( t event , integer key ) { send event ( event , key , bool_ ) ; }
private void validate tag ( final i tree node < c tag > tag ) { preconditions . check not null ( tag , str_ ) ; preconditions . check not null ( tag . get object ( ) , str_ ) ; preconditions . check argument ( tag . get object ( ) . get type ( ) == m _type , str_ ) ; preconditions . check argument ( has tag ( tag ) , str_ ) ; }
public account expired exception ( ) { super ( ) ; }
key range < k > lower bound ( k key ) ;
void on clear clicked ( ) ;
public void test j browser image ( ) throws exception { fetcher j browser fetcher j browser = test utils . new instance ( fetcher j browser . class , str_ ) ; resource resource = new resource ( str_ , str_ , test utils . jo b_ context ) ; system . out . println ( fetcher j browser . fetch ( resource ) . get response code ( ) ) ; }
public site admin action bar wait to be displayed ( ) { bobcat wait . with timeout ( timeouts . big ) . until ( expected conditions . visibility of ( current scope ) ) ; return this ; }
void compact ( table table , string key , uuid compaction key , compaction compaction , uuid change id , delta delta , collection < uuid > changes to delete , list < history > history list , write consistency consistency ) ;
public upgrade settings request ( map < string , tuple < version , string > > versions ) { this . versions = versions ; }
public void destroy ( ) { native destroy ( m native pointer ) ; m native pointer = num_ ; }
public void verify get complex response with example ( ) throws exception { map < string , string > query params = new hash map < string , string > ( ) ; string str = client . invoke api ( str_ , str_ , query params , null , new hash map < string , string > ( ) , null , str_ , null , new string [ num_ ] ) ; object mapper mapper = json . mapper ( ) . configure ( serialization feature . orde r_ ma p_ entrie s_ b y_ keys , bool_ ) ; assert equals ( mapper . read value ( str , json node . class ) , mapper . read value ( str_ , json node . class ) ) ; }
public boolean is valid index ( ) { return pos < str . length ( ) ; }
protected boolean can deactivate ( ) { if ( ! this . activated ) { return bool_ ; } return bool_ ; }
public table header element the ( string text , string url ) { return new table header element ( build href ( url , text ) ) ; }
public soot class create soot class ( ) { walker w = new walker ( soot resolver . v ( ) ) ; m tree . apply ( w ) ; return w . get soot class ( ) ; }
int divider bottom margin ( int position , recycler view parent ) ;
public file create file object ( string path ) { file f = new file ( path ) ; if ( is file system root ( f ) ) { f = create file system root ( f ) ; } return f ; }
public void clear payment ( int index ) { payment info . remove ( index ) ; }
public boolean wait for uninterruptibly ( guard guard , long time , time unit unit ) { final long timeout nanos = to safe nanos ( time , unit ) ; if ( ! ( ( guard . monitor == this ) & lock . is held by current thread ( ) ) ) { throw new illegal monitor state exception ( ) ; } if ( guard . is satisfied ( ) ) { return bool_ ; } boolean signal before waiting = bool_ ; final long start time = init nano time ( timeout nanos ) ; boolean interrupted = thread . interrupted ( ) ; try { for ( long remaining nanos = timeout nanos ; ; ) { try { return await nanos ( guard , remaining nanos , signal before waiting ) ; } catch ( interrupted exception interrupt ) { interrupted = bool_ ; if ( guard . is satisfied ( ) ) { return bool_ ; } signal before waiting = bool_ ; remaining nanos = remaining nanos ( start time , timeout nanos ) ; } } } finally { if ( interrupted ) { thread . current thread ( ) . interrupt ( ) ; } } }
public boolean is installed ( ) { return installed ; }
public boolean parse web xml ( url url , web xml dest , boolean fragment ) throws io exception { if ( url == null ) { return bool_ ; } input source source = new input source ( url . to external form ( ) ) ; source . set byte stream ( url . open stream ( ) ) ; return parse web xml ( source , dest , fragment ) ; }
public void add deco types ( deco type ... decos ) { for ( int i = num_ ; i < decos . length ; i ++ ) { this . deco types . add ( decos [ i ] ) ; } }
public void close ( ) { if ( m disk cache != null ) m disk cache . close ( ) ; }
public static void log ( throwable t ) { log ( i status . error , str_ , t ) ; }
public static void show code ( instruction inst , cp _info constant _pool [ ] ) { show code ( inst , num_ , constant _pool ) ; }
public accessibility node info compat find last ( ) { if ( m tree == null ) { return null ; } return accessibility node info compat . obtain ( m tree . get root ( ) . get last node ( ) . get node ( ) ) ; }
public void reset focus ( scheduled command command ) { command . execute ( ) ; }
protected void remove ( session session , close reason reason ) { collection < session > sessions = socket sessions . get ( get channel id ( session ) ) ; if ( sessions != null && sessions . remove ( session ) ) { fire event ( session , reason , sessio n_ closed ) ; } }
public boolean is online ( ) { return online ; }
public boolean parse nested element ( perl builder b , int l ) { return bool_ ; }
public static animation push up in ( ) { animation set animation set = new animation set ( bool_ ) ; animation set . set fill after ( bool_ ) ; animation set . add animation ( new translate animation ( num_ , num_ , num_ , num_ ) ) ; animation set . add animation ( new alpha animation ( num_ , num_ ) ) ; return animation set ; }
public static network time stamp read from ( final deserializer deserializer , final string label ) { return new network time stamp ( deserializer . read long ( label ) ) ; }
public void run test ( ) throws throwable { document doc ; node list child list ; node child node ; named node map attr list ; int node type ; doc = ( document ) load ( str_ , bool_ ) ; child list = doc . get child nodes ( ) ; for ( int index n 1 0 0 4 3 = num_ ; index n 1 0 0 4 3 < child list . get length ( ) ; index n 1 0 0 4 3 ++ ) { child node = ( node ) child list . item ( index n 1 0 0 4 3 ) ; node type = ( int ) child node . get node type ( ) ; if ( equals ( num_ , node type ) ) { attr list = child node . get attributes ( ) ; assert null ( str_ , attr list ) ; } } child node = doc . create comment ( str_ ) ; attr list = child node . get attributes ( ) ; assert null ( str_ , attr list ) ; }
public boolean is read only ( ) { return bool_ ; }
public boolean start _write ( file p _file ) { try { file _writer = new file writer ( p _file ) ; } catch ( io exception e ) { system . out . println ( str_ ) ; return bool_ ; } write _enabled = bool_ ; return bool_ ; }
static private string substitute sub string ( string input , string find , string replace ) { int find _length = find . length ( ) ; int replace _length = replace . length ( ) ; string builder output = new string builder ( input ) ; int index = input . index of ( find ) ; int output offset = num_ ; while ( index > - num_ ) { output . replace ( index + output offset , index + output offset + find _length , replace ) ; output offset = output offset + ( replace _length - find _length ) ; index = input . index of ( find , index + find _length ) ; } string result = output . to string ( ) ; return result ; }
public boolean is direct debit available ( ) { return is payment type available ( get selected organization ( ) , payment info type . direc t_ debit ) ; }
public synchronized void close ( ) throws io exception { if ( journal writer == null ) { return ; } for ( entry entry : new array list < entry > ( lru entries . values ( ) ) ) { if ( entry . current editor != null ) { entry . current editor . abort ( ) ; } } trim to size ( ) ; journal writer . close ( ) ; journal writer = null ; }
public void add layout component ( string name , component comp ) { }
public cipher text iv mac ( byte [ ] c , byte [ ] i , byte [ ] h ) { cipher text = new byte [ c . length ] ; system . arraycopy ( c , num_ , cipher text , num_ , c . length ) ; iv = new byte [ i . length ] ; system . arraycopy ( i , num_ , iv , num_ , i . length ) ; mac = new byte [ h . length ] ; system . arraycopy ( h , num_ , mac , num_ , h . length ) ; }
public static boolean is at least java 1 5 ( ) { return get major java version ( ) >= jav a _ 1 5 ; }
private void parse descriptor ( string descriptor ) throws vmdk format exception { string [ ] lines = descriptor . split ( str_ ) ; for ( string line : lines ) { string trimmed = line . trim ( ) ; if ( trimmed . is empty ( ) ) { continue ; } if ( ! trimmed . starts with ( str_ ) ) { continue ; } string [ ] key value = trimmed . substring ( num_ ) . split ( str_ ) ; if ( key value . length != num_ ) { throw new vmdk format exception ( str_ ) ; } if ( str_ . equals ignore case ( key value [ num_ ] ) ) { adapter type = key value [ num_ ] ; } ddb . put ( key value [ num_ ] , key value [ num_ ] ) ; } }
private static string url encode ( final string text ) throws unsupported encoding exception { return url encoder . encode ( text , str_ ) ; }
public static bundle add properties ( bundle props , int page number , int last page number ) { props . put int ( thi s_ pag e_ number , page number ) ; return props ; }
public boolean equals ( int c_ country _ id , int c_ region _ id , string postal , string postal _ add , string city , string address 1 , string address 2 ) { if ( c_ country _ id != num_ && get c_ country _ id ( ) != c_ country _ id ) return bool_ ; if ( c_ region _ id != num_ && get c_ region _ id ( ) != c_ region _ id ) return bool_ ; if ( ! equals null ( postal , get postal ( ) ) ) return bool_ ; if ( ! equals null ( postal _ add , get postal _ add ( ) ) ) return bool_ ; if ( ! equals null ( city , get city ( ) ) ) return bool_ ; if ( ! equals null ( address 1 , get address 1 ( ) ) ) return bool_ ; if ( ! equals null ( address 2 , get address 2 ( ) ) ) return bool_ ; return bool_ ; }
public boolean is generic uri ( ) { return ( m _host != null ) ; }
private boolean try popup ( final mouse event e ) { if ( e . is popup trigger ( ) ) { int idx = get index for point ( e . get x ( ) , e . get y ( ) ) ; if ( idx != - num_ ) { try { tabbed pane . set selected index ( idx ) ; } catch ( array index out of bounds exception aioobe ) { reset tabbed pane ( ) ; tabbed pane . set selected index ( idx ) ; } } show menu ( e ) ; return bool_ ; } return bool_ ; }
public object clone ( ) throws clone not supported exception { if ( this instanceof cloneable ) { return super . clone ( ) ; } else { throw new clone not supported exception ( ) ; } }
public boolean is compressed ( ) { return compressed ; }
public audio get broadcast list query filter ( audio get broadcast list filter value ) { return unsafe param ( str_ , value ) ; }
public boolean is invalid ( ) { return create exception != null ; }
protected boolean is affecting replace ( ) { return f length > num_ && f replace length > num_ && f position . length < f original position . length ; }
public void validation state removed ( k key , object validation state id ) { validation state changed ( key , new validation state ( validation state id , bool_ , str_ ) ) ; }
public static big integer hash ( int version , big integer a , big integer b ) throws sm exception { try { message digest sha 2 5 6 = message digest . get instance ( str_ ) ; sha 2 5 6 . update ( ( byte ) version ) ; sha 2 5 6 . update ( serialization utils . write mpi ( a ) ) ; if ( b != null ) sha 2 5 6 . update ( serialization utils . write mpi ( b ) ) ; return new big integer ( num_ , sha 2 5 6 . digest ( ) ) ; } catch ( no such algorithm exception e ) { throw new sm exception ( str_ ) ; } catch ( io exception e ) { throw new sm exception ( str_ ) ; } }
public boolean attempt ( int old , int value ) { if ( vm . verify assertions ) vm . _assert ( vm . no t_ reached ) ; return bool_ ; }
public boolean has count hint ( ) { return get count hint ( ) != null ; }
public facebook graph object exception ( string message ) { super ( message ) ; }
private < t > collection < t > convert ( iterator < t > iter ) { list < t > list = new array list < > ( ) ; while ( iter . has next ( ) ) list . add ( iter . next ( ) ) ; return list ; }
public boolean is sleeping allowed ( ) { return jni is sleeping allowed ( addr ) ; }
public static boolean read boolean ( final json array json array , final int index , final boolean required , final boolean not null ) throws json exception { if ( required ) { return json array . get boolean ( index ) ; } if ( not null && json array . is null ( index ) ) { throw new json exception ( string . format ( locale . us , nul l_ valu e_ forma t_ array , index ) ) ; } boolean value = bool_ ; if ( ! json array . is null ( index ) ) { value = json array . get boolean ( index ) ; } return value ; }
private void update progress ( string progress label , int progress ) { if ( my host != null && ( ( progress != previous progress ) || ( ! progress label . equals ( previous progress label ) ) ) ) { my host . update progress ( progress label , progress ) ; } previous progress = progress ; previous progress label = progress label ; }
public static bitmap drawable to bitmap ( drawable drawable ) { return drawable == null ? null : ( ( bitmap drawable ) drawable ) . get bitmap ( ) ; }
public client response delete ( uri url ) { return _client . resource ( url ) . delete ( client response . class ) ; }
public void read ( module config config ) { value = config . get ( key , default value ) ; }
boolean is obstacle ( final i entity entity ) ;
item new integer ( final int value ) { key . set ( value ) ; item result = get ( key ) ; if ( result == null ) { pool . put byte ( int ) . put int ( value ) ; result = new item ( index ++ , key ) ; put ( result ) ; } return result ; }
public static void write info flow summary to file ( security spec model security spec model , string app _ roo t_ dir ) { try { file writer fw = new file writer ( project . v ( ) . get output dir ( ) + file . separator + inf o_ flo w_ summar y_ fil e_ name ) ; map < string , map < string , set < method model > > > info flow summary map = security spec model . get info flow summary map ( ) ; for ( string source : info flow summary map . key set ( ) ) { map < string , set < method model > > sink map = info flow summary map . get ( source ) ; for ( string sink : sink map . key set ( ) ) { fw . write ( source + str_ + sink + str_ ) ; set < method model > methods = sink map . get ( sink ) ; for ( method model method : methods ) { fw . write ( str_ + method + str_ ) ; } } } fw . close ( ) ; } catch ( io exception e ) { logger . error ( str_ ) ; droidsafe . main . main . exit ( num_ ) ; } }
public iterator out edges ( node node ) { node check ( node , bool_ ) ; return m _edge tuples . iterator ( out edge rows ( node . get row ( ) ) ) ; }
private void cb cnv system item state changed ( java . awt . event . item event evt ) { ecu data item . cnv system = cb cnv system . get selected index ( ) ; switch ( tab main . get selected index ( ) ) { case num_ : pan obd data . update all table rows ( ecu data pv . fi d_ units ) ; break ; default : } }
public html policy builder allow common inline formatting elements ( ) { return allow elements ( str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ ) ; }
private void init files list ( ) { this . file to add . add all ( files utils . searchrecursively ( system folder , str_ ) ) ; this . file to add . add all ( files utils . searchrecursively ( system folder , str_ ) ) ; bar . set minimum ( num_ ) ; bar . set maximum ( this . file to add . size ( ) ) ; }
public static void main ( string ... a ) throws exception { test base . create caller ( ) . init ( ) . test ( ) ; }
public void access key sv g 1 2 ( float offset , string key name ) { }
public static boolean is valid nmtoken ( string nmtoken ) { if ( nmtoken . length ( ) == num_ ) return bool_ ; for ( int i = num_ ; i < nmtoken . length ( ) ; i ++ ) { char ch = nmtoken . char at ( i ) ; if ( ! is name ( ch ) ) { return bool_ ; } } return bool_ ; }
public static void write ( file file , char sequence data , string encoding ) throws io exception { write ( file , data , encoding , bool_ ) ; }
void fire timeout timer ( ) ;
public static int size ( ) { return table list . size ( ) ; }
protected void append group by sql ( ) { if ( _expression . grouping . length > num_ ) { _sql . append ( str_ ) ; for ( int i = num_ ; i < _expression . grouping . length ; ) { _sql . append ( _expression . grouping [ i ] . get name ( ) ) ; if ( ++ i != _expression . grouping . length ) _sql . append ( str_ ) ; } } }
public com . sun . identity . wsfederation . jaxb . wsspolicy . require key identifier reference element create require key identifier reference element ( ) throws javax . xml . bind . jaxb exception { return new com . sun . identity . wsfederation . jaxb . wsspolicy . impl . require key identifier reference element impl ( ) ; }
public static char sequence time ( context context , easy cursor c ) { long now = system . current time millis ( ) ; long when = c . get long ( reviews . writte n_ on ) ; return now - when > minut e_ i n_ millis ? date utils . get relative time span string ( when , now , num_ , forma t_ abbre v_ all ) : context . get string ( r . string . recent _time ) ; }
< t > list < t > fetch ( class < t > clazz , string profile , string entity , list < object > groups , long start , long end ) ;
public boolean is ipv 6 default gateway settable ( ) { return ipv 6 default gateway settable ; }
private void assert sorted by distance ( double dbid list results ) { double dist = - num_ ; boolean sorted = bool_ ; for ( double dbid list iter it = results . iter ( ) ; it . valid ( ) ; it . advance ( ) ) { double qr = it . double value ( ) ; if ( qr < dist ) { sorted = bool_ ; } dist = qr ; } if ( ! sorted ) { try { modifiable double dbid list . class . cast ( results ) . sort ( ) ; } catch ( class cast exception | unsupported operation exception e ) { logging util . warning ( str_ , e ) ; } } }
public object put ( object key , object value ) { key = convert key ( key ) ; int hash code = hash ( key ) ; int index = hash index ( hash code , data . length ) ; hash entry entry = data [ index ] ; while ( entry != null ) { if ( entry . hash code == hash code && is equal key ( key , entry . key ) ) { object old value = entry . get value ( ) ; update entry ( entry , value ) ; return old value ; } entry = entry . next ; } add mapping ( index , hash code , key , value ) ; return null ; }
protected void register ( string channel id ) { if ( ! socket sessions . contains key ( channel id ) ) { socket sessions . put if absent ( channel id , new concurrent linked queue < session > ( ) ) ; } }
private void println ( string message ) { log . println ( level , tag , message ) ; }
public int [ ] read all ints ( ) { string [ ] fields = read all strings ( ) ; int [ ] vals = new int [ fields . length ] ; for ( int i = num_ ; i < fields . length ; i ++ ) vals [ i ] = integer . parse int ( fields [ i ] ) ; return vals ; }
protected page binary search page ( page p , object key ) { int x = p . binary search ( key ) ; if ( ! p . is leaf ( ) ) { if ( x < num_ ) { x = - x - num_ ; } else { x ++ ; } p = p . get child page ( x ) ; return binary search page ( p , key ) ; } if ( x >= num_ ) { return p ; } return null ; }
public abstract void flush graphics ( int x , int y , int width , int height ) ;
public abstract void write binary ( byte buffer src ) throws io exception ;
public t height ( int dip ) { size ( bool_ , dip , bool_ ) ; return self ( ) ; }
protected void validate operation parameter ( operation parameter op , string id , boolean mandatory , operation parameter type type , string locale ) { assert equals ( id , op . get id ( ) ) ; assert equals ( mandatory , op . is mandatory ( ) ) ; assert equals ( type , op . get type ( ) ) ; assert true ( op . get key ( ) > num_ ) ; string text = localizer . get localized text from database ( locale , op . get key ( ) , localized object types . technica l_ produc t_ operatio n_ paramete r_ name ) ; assert equals ( str_ + locale , text ) ; }
public static string [ ] signature parameter types ( string sig ) { int pos 1 = sig . index of ( str_ ) ; int pos 2 = sig . index of ( str_ , pos 1 + num_ ) ; int pos 3 = sig . last index of ( str_ ) ; string param type ; list < string > param types = new array list < string > ( ) ; while ( pos 2 > num_ ) { param type = sig . substring ( pos 1 + num_ , pos 2 ) ; param types . add ( param type ) ; pos 1 = pos 2 ; pos 2 = sig . index of ( str_ , pos 1 + num_ ) ; } param type = sig . substring ( pos 1 + num_ , pos 3 ) ; if ( ! param type . is empty ( ) ) param types . add ( param type ) ; return param types . to array ( new string [ num_ ] ) ; }
public proper fraction format ( number format format ) { this ( format , ( number format ) format . clone ( ) , ( number format ) format . clone ( ) ) ; }
protected void verify interpolation ( univariate function f , double x [ ] , double y [ ] ) { for ( int i = num_ ; i < x . length ; i ++ ) { assert . assert equals ( f . value ( x [ i ] ) , y [ i ] , knot tolerance ) ; } }
public filename utils ( ) { super ( ) ; }
protected list < evaluation statistics > filter ( list < evaluation statistics > stats ) { instances data ; instances filtered ; filter filter ; try { data = to instances ( stats ) ; filter = filter . make copy ( m _ filter ) ; filter . set input format ( data ) ; filtered = filter . use filter ( data , filter ) ; stats = from instances ( filtered ) ; } catch ( exception e ) { handle exception ( str_ , e ) ; } return stats ; }
public boolean add header ( string name , string value ) { return get session ( ) . add header ( name , value ) ; }
public void action performed ( action event e ) { j text component target = get text component ( e ) ; if ( target != null ) { caret caret = target . get caret ( ) ; int dot = caret . get dot ( ) ; vertical action . action performed ( e ) ; if ( dot == caret . get dot ( ) ) { point magic = caret . get magic caret position ( ) ; begin end action . action performed ( e ) ; caret . set magic caret position ( magic ) ; } } }
public caption add element ( element element ) { add element to registry ( element ) ; return ( this ) ; }
public void add resource type ( resource type resource type ) { resource types . add ( resource type ) ; }
protected abstract boolean is ready for pull end ( ) ;
public static live channel info parse get live channel info ( input stream response body ) throws response parse exception { try { element root = get xml root element ( response body ) ; live channel info result = new live channel info ( ) ; result . set description ( root . get child text ( str_ ) ) ; result . set status ( live channel status . parse ( root . get child text ( str_ ) ) ) ; element target elem = root . get child ( str_ ) ; live channel target target = new live channel target ( ) ; target . set type ( target elem . get child text ( str_ ) ) ; target . set frag duration ( integer . parse int ( target elem . get child text ( str_ ) ) ) ; target . set frag count ( integer . parse int ( target elem . get child text ( str_ ) ) ) ; target . set playlist name ( target elem . get child text ( str_ ) ) ; result . set target ( target ) ; return result ; } catch ( exception e ) { throw new response parse exception ( e . get message ( ) , e ) ; } }
public normalized indicator ( problem problem , nondominated population reference set ) { this ( problem , reference set , bool_ ) ; }
public void load ( ) { }
public void start serving gii request ( ) { if ( this . owning queue == null ) { if ( logger . is debug enabled ( ) ) { logger . debug ( str_ , this ) ; } return ; } this . owning queue . start gii queueing ( ) ; }
void run on gl thread ( runnable runnable ) { m renderer . run on draw end ( runnable ) ; }
public async result set triggering async ( request header request header , unsigned integer subscription id , unsigned integer triggering item id , unsigned integer [ ] links to add , unsigned integer ... links to remove ) { set triggering request req = new set triggering request ( request header , subscription id , triggering item id , links to add , links to remove ) ; return channel . service request async ( req ) ; }
public boolean is whitespace in element content ( ) { return bool_ ; }
collection < charge data > retrieve savings applicable penalties ( ) ;
void reset remember me tokens ( list < uuid > user ids ) ;
void remove managed ledger ( string ledger name , meta store callback < void > callback ) ;
public void test add first ( ) { linked blocking deque q = populated deque ( num_ ) ; q . poll last ( ) ; q . add first ( four ) ; assert same ( four , q . peek first ( ) ) ; }
public void insert ( final abstract insn node location , final insn list insns ) { if ( insns . size == num_ ) { return ; } size += insns . size ; abstract insn node ifirst = insns . first ; abstract insn node ilast = insns . last ; abstract insn node next = location . next ; if ( next == null ) { last = ilast ; } else { next . prev = ilast ; } location . next = ifirst ; ilast . next = next ; ifirst . prev = location ; cache = null ; insns . remove all ( bool_ ) ; }
public boolean is scrolling while refreshing enabled ( ) ;
public boolean should stop music ( ) { entity player player = the betweenlands . proxy . get client player ( ) ; if ( player != null ) { for ( ambience sound sound : this . playing ambiences ) { if ( sound . type . stops music ( ) ) return bool_ ; } } return bool_ ; }
public static void delete directory ( file directory ) throws io exception { if ( ! directory . exists ( ) ) { return ; } if ( ! is symlink ( directory ) ) { clean directory ( directory ) ; } if ( ! directory . delete ( ) ) { string message = str_ + directory + str_ ; throw new io exception ( message ) ; } }
public void run large download over wi fi ( ) throws exception { string filename = downloa d _ 1 0 m b_ filename ; long filesize = downloa d _ 1 0 m b_ filesize ; long dl request = - num_ ; do common download setup ( ) ; remove all current downloads ( ) ; uri remote uri = get external file uri ( filename ) ; request request = new request ( remote uri ) ; request . set mime type ( str_ ) ; dl request = m download manager . enqueue ( request ) ; wait for download or timeout ( dl request , wai t_ fo r_ downloa d_ pol l_ time , num_ * num_ * num_ ) ; cursor cursor = get cursor ( dl request ) ; parcel file descriptor pfd = null ; try { log . i ( lo g_ tag , str_ ) ; pfd = m download manager . open downloaded file ( dl request ) ; verify file size ( pfd , filesize ) ; } finally { if ( pfd != null ) { pfd . close ( ) ; } m download manager . remove ( dl request ) ; cursor . close ( ) ; } }
public x bee light ( string system name , string user name , x bee traffic controller controller ) { super ( system name , user name ) ; tc = controller ; init ( system name ) ; }
public string qualified port name ( ) { if ( get port name ( ) . starts with ( get port group ( ) ) ) { return get port name ( ) ; } else { return get port group ( ) + str_ + get port name ( ) ; } }
protected void fire trade order cancelled ( trade order trade order ) { object [ ] listeners = this . listener list . get listener list ( ) ; for ( int i = listeners . length - num_ ; i >= num_ ; i -= num_ ) { if ( listeners [ i ] == broker change listener . class ) { ( ( broker change listener ) listeners [ i + num_ ] ) . trade order cancelled ( trade order ) ; } } }
public string to string ( ) { return super . to string ( ) + str_ + low value + str_ + high value + str_ ; }
protected static rpc pair resolve rpc pair ( ast node node , peer type resolver peer resolver ) { method declaration method decl = ast resolving . find parent method declaration ( node ) ; type declaration type decl = ( type declaration ) ast resolving . find ancestor ( node , ast node . typ e_ declaration ) ; assert ( type decl != null ) ; i type dst type = peer resolver . get peer type ( type decl ) ; if ( dst type == null ) { return null ; } compilation unit ast root = ast resolving . create quick fix ast ( dst type . get compilation unit ( ) , null ) ; type declaration dst type decl = java ast utils . find type declaration ( ast root , dst type . get fully qualified name ( str_ ) ) ; if ( dst type decl == null ) { return null ; } return new rpc pair ( type decl , method decl , dst type decl ) ; }
public void insert ( rect f rect f ) { if ( nodes [ num_ ] != null ) { int index = get index ( rect f ) ; if ( index != - num_ ) { nodes [ index ] . insert ( rect f ) ; return ; } } objects . add ( rect f ) ; if ( objects . size ( ) > ma x_ objects && level < ma x_ objects ) { if ( nodes [ num_ ] == null ) { split ( ) ; } int i = num_ ; while ( i < objects . size ( ) ) { int index = get index ( objects . get ( i ) ) ; if ( index != - num_ ) { nodes [ index ] . insert ( objects . remove ( i ) ) ; } else { i ++ ; } } } }
public xml handler delete global ( class < ? > a class ) { try { xml . delete global ( a class ) ; xml . write ( ) ; } catch ( exception e ) { jmapper log . error ( e ) ; } return this ; }
public model m bean operation info ( string name , string description , m bean parameter info [ ] signature , string type , int impact , descriptor descriptor ) { super ( name , description , signature , type , impact ) ; if ( modelmbea n_ logger . is loggable ( level . finer ) ) { modelmbea n_ logger . logp ( level . finer , model m bean operation info . class . get name ( ) , str_ + str_ , str_ ) ; } operation descriptor = valid descriptor ( descriptor ) ; }
void show completion proposals ( completions source completions source ) ;
protected void fill parameters ( final proceeding join point pjp , final hash map < string , object > map ) { if ( pjp . get args ( ) != null ) { for ( int i = num_ ; i < pjp . get args ( ) . length ; i ++ ) { map . put ( standard message listener . para m_ prefix + i , pjp . get args ( ) [ i ] ) ; } } }
default void update player list header and footer ( final base component header , final base component footer ) { this . get core ( ) . update player list header and footer ( header , footer , this ) ; }
public void read genotype ( final evolution state state , final data input data input ) throws io exception { int len = data input . read int ( ) ; if ( rulesets == null || rulesets . length != len ) state . output . fatal ( str_ ) ; for ( int x = num_ ; x < rulesets . length ; x ++ ) rulesets [ x ] . read rule set ( state , data input ) ; }
public str tokenizer ( final char [ ] input , final string delim ) { this ( input ) ; set delimiter string ( delim ) ; }
public static list property descriptors ( int api level ) { if ( api level == ast . jl s 2 _ internal ) { return propert y_ descriptor s _ 2 _ 0 ; } else { return propert y_ descriptor s _ 3 _ 0 ; } }
public void flush without margin ( ) { if ( value with margin != value ) { value with margin = value ; flush ( null ) ; } }
public boolean has switches ( ) ;
static void play sound ( j component c , object action key ) { look and feel laf = ui manager . get look and feel ( ) ; if ( laf instanceof basic look and feel ) { action map map = c . get action map ( ) ; if ( map != null ) { action audio action = map . get ( action key ) ; if ( audio action != null ) { ( ( basic look and feel ) laf ) . play sound ( audio action ) ; } } } }
private view drag helper ( context context , view group for parent , callback cb ) { if ( for parent == null ) { throw new illegal argument exception ( str_ ) ; } if ( cb == null ) { throw new illegal argument exception ( str_ ) ; } m parent view = for parent ; m callback = cb ; final view configuration vc = view configuration . get ( context ) ; final float density = context . get resources ( ) . get display metrics ( ) . density ; m edge size = ( int ) ( edg e_ size * density + num_ ) ; m touch slop = vc . get scaled touch slop ( ) ; m max velocity = vc . get scaled maximum fling velocity ( ) ; m min velocity = vc . get scaled minimum fling velocity ( ) ; m scroller = scroller compat . create ( context , s interpolator ) ; }
void clear authentication details ( ) ;
static string parse prefix ( string key ) { if ( key == null ) return null ; boolean inquotes = bool_ ; for ( int i = num_ ; i < key . length ( ) ; i ++ ) { char c = key . char at ( i ) ; if ( c == str_ ) { inquotes = ! inquotes ; } else if ( ( c == str_ || c == str_ ) && ! inquotes ) { return key . substring ( num_ , i ) ; } } return null ; }
private parse tree ( list < parse tree node > roots , map < phrase chunk , parse tree node > chunk to node , map < word token , parse tree node > word to node ) { this . root = new parse tree node ( roots ) ; this . chunk to node = chunk to node ; this . word to node = word to node ; }
public static int hash int array ( int [ ] array ) { int int hash = num_ ; for ( int i = num_ ; i < array . length && i < num_ ; i ++ ) { int hash += array [ i ] << ( num_ * i ) ; } return int hash & num_ ; }
public person ( int id , string first name , string last name , double salary ) { this ( id , num_ , first name , last name , salary ) ; }
public void read string ( as n1 string type type ) throws io exception { if ( tag == type . id ) { read content ( ) ; } else if ( tag == type . constr id ) { throw new as n1 exception ( str_ ) ; } else { throw expected ( str_ ) ; } }
public void on scroll over threshold ( ) ;
private void ensure capacity ( int n ) { if ( n <= num_ ) { return ; } int max ; if ( data == null || data . length == num_ ) { max = num_ ; } else if ( data . length >= n * num_ ) { return ; } else { max = data . length ; } while ( max < n * num_ ) { max *= num_ ; } string new data [ ] = new string [ max ] ; if ( length > num_ ) { system . arraycopy ( data , num_ , new data , num_ , length * num_ ) ; } data = new data ; }
public static boolean delete directory ( string path ) { return delete directory ( new file ( path ) ) ; }
public static string strip non digits ( string str ) { string buffer result = new string buffer ( str . length ( ) ) ; for ( char candidate : str . to char array ( ) ) { if ( character . is digit ( candidate ) ) { result . append ( candidate ) ; } } return result . to string ( ) ; }
public compiere color ( color upper color , color lower color ) { this ( upper color , lower color , swing constants . nort h_ west , num_ ) ; }
public void destroy ( ) { super . destroy ( ) ; }
public static final table create test world bank table ( ) { table test table = new table ( ) ; test table . set name ( str_ ) ; test table . set database by string ( create test world bank database ( ) . get name ( ) ) ; test table . set description ( str_ ) ; return test table ; }
public static select clause create ( ) { return new select clause ( stream selector . istrea m_ only , new array list < select clause element > ( ) ) ; }
private void init ( int init capacity ) { threshold = ( init capacity * num_ ) / num_ ; table = new object [ num_ * init capacity ] ; }
public boolean is error button shown ( ) { return m show error button ; }
public void add child ( component child ) { components . add ( child ) ; child . set parent ( this ) ; }
public template exception ( string description , throwable cause , environment env ) { this ( description , cause , env , null , null ) ; }
public static string remove property ( string key ) { return get ( ) . properties . remove ( key ) ; }
public static satellite base create from nbt ( nbt tag compound nbt ) { satellite base satellite = get satallite ( nbt . get string ( str_ ) ) ; satellite . read from nbt ( nbt ) ; return satellite ; }
public static double matrix [ ] jblas _full svd ( double [ ] [ ] a ) { return org . jblas . singular . full svd ( new double matrix ( a ) ) ; }
public static array list < track > prepare locations ( track track , list < location > locations ) { array list < track > split tracks = new array list < track > ( ) ; track segment = create new segment ( track , locations . size ( ) > num_ ? locations . get ( num_ ) . get time ( ) : - num_ ) ; for ( location location : locations ) { if ( location . get latitude ( ) > num_ ) { end segment ( segment , location . get time ( ) , split tracks ) ; segment = create new segment ( track , location . get time ( ) ) ; } else { segment . add location ( location ) ; } } end segment ( segment , locations . size ( ) > num_ ? locations . get ( locations . size ( ) - num_ ) . get time ( ) : - num_ , split tracks ) ; return split tracks ; }
private void update progress ( int progress ) { if ( my host != null && progress != previous progress ) { my host . update progress ( progress ) ; } previous progress = progress ; }
protected abstract void parse ( data input stream stream ) throws exception ;
public ignite internal future < ? > finish explicit locks ( affinity topology version top ver ) { grid compound future < object , object > res = new grid compound future < > ( ) ; for ( grid cache explicit lock span span : pending explicit . values ( ) ) { affinity topology version snapshot = span . topology version ( ) ; if ( snapshot != null && snapshot . compare to ( top ver ) < num_ ) res . add ( span . release future ( ) ) ; } res . mark initialized ( ) ; return res ; }
public static string decode password ( final string value ) { return conversion utils . base 6 4 to string ( value ) ; }
protected void update view title ( view v , j frame f ) { string title ; uri uri = v . get uri ( ) ; if ( uri == null ) { title = labels . get string ( str_ ) ; } else { title = uri util . get name ( uri ) ; } v . set title ( labels . get formatted ( str_ , title , get name ( ) , v . get multiple open id ( ) ) ) ; f . set title ( v . get title ( ) ) ; if ( uri != null && uri . get scheme ( ) != null && uri . get scheme ( ) . equals ( str_ ) ) { f . get root pane ( ) . put client property ( str_ , new file ( uri ) ) ; } else { f . get root pane ( ) . put client property ( str_ , null ) ; } }
public buffered writer ( writer out , int sz ) { super ( out ) ; if ( sz <= num_ ) throw new illegal argument exception ( str_ ) ; this . out = out ; cb = new char [ sz ] ; n chars = sz ; next char = num_ ; line separator = java . security . access controller . do privileged ( new sun . security . action . get property action ( str_ ) ) ; }
private void parse file ( file xml ) throws io exception , xml stream exception , sax exception { if ( xml == null ) { throw new illegal argument exception ( str_ ) ; } else if ( ! xml . exists ( ) ) { throw new io exception ( str_ ) ; } file = xml ; project xml parser parser = new project xml parser ( file , this ) ; parser . parse ( ) ; }
public void stop ( ) { exit = bool_ ; }
public abstract short buffer put ( short s ) ;
private void write object ( object output stream oos ) throws io exception { oos . write object ( i instant ) ; oos . write object ( i field . get type ( ) ) ; }
public s_ solve create s_ solve ( ) { s_ solve impl s _ solve = new s_ solve impl ( ) ; return s _ solve ; }
public static boolean is castable to array ( object o ) { if ( is array ( o ) ) return bool_ ; else if ( o instanceof struct ) { struct sct = ( struct ) o ; iterator < key > it = sct . key iterator ( ) ; while ( it . has next ( ) ) { if ( ! is integer ( it . next ( ) , bool_ ) ) return bool_ ; } return bool_ ; } return bool_ ; }
public list < string > elements ( ) { return elements ; }
protected boolean is html supported ( ) { return html data != null ; }
public iterator builder iterator scope ( iterator scope iterator scope ) { iterator config . set iterator scope ( iterator scope ) ; return this ; }
protected abstract void on load list ( list < list edit item > items ) ;
public string to string ( cp _info constant _pool [ ] ) { cp _info target = constant _pool [ descriptor _index ] ; return target . to string ( constant _pool ) ; }
public static double radians ( double degrees ) { return length . decima l_ degree . to radians ( degrees ) ; }
public static boolean is point in polygon ( geo x , double [ ] poly , boolean poly in degrees ) { if ( poly in degrees ) { return is point in polygon ( x , geo array . float . create from lat lon degrees ( poly ) ) ; } else { return is point in polygon ( x , geo array . float . create from lat lon radians ( poly ) ) ; } }
private void recalculate hash code ( ) { hash code = num_ ; for ( base dn descriptor rep : get base dns ( ) ) { hash code += rep . hash code ( ) ; } hash code += entries ; for ( index descriptor index : indexes ) { hash code += index . hash code ( ) ; } for ( vlv index descriptor index : vlv indexes ) { hash code += index . hash code ( ) ; } }
public static boolean check for adjacent collectors ( world world , block pos pos ) { for ( enum facing face : enum facing . values ( ) ) if ( is collector ( world . get tile entity ( pos . offset ( face ) ) ) ) return bool_ ; return bool_ ; }
public ab lined edit text ( context context , attribute set attrs ) { super ( context , attrs ) ; m rect = new rect ( ) ; m paint = new paint ( ) ; m paint . set style ( paint . style . stroke ) ; m paint . set color ( num_ ) ; }
public http request send ( final input stream input ) throws http request exception { try { open output ( ) ; copy ( input , output ) ; } catch ( io exception e ) { throw new http request exception ( e ) ; } return this ; }
void calc union rect ( rectangle 2 d rectangle ) ;
public void test do check with html 4 doctype ( ) { system . out . println ( str_ ) ; test checker ( str_ , test solution . no t_ applicable , str_ ) ; test checker ( str_ , test solution . no t_ applicable , str_ ) ; }
protected void tab added to model ( tab tab ) { if ( is native initialized ( ) ) native tab added to model ( m native tab model jni bridge , tab ) ; }
public void write body ( output stream os , mime body part msg ) throws io exception { if ( msg instanceof mime multipart ) { string ct = msg . get content type ( ) . get value ( ) ; if ( ct . starts with ( str_ ) ) { } else { write multipart ( os , ( mime multipart ) msg ) ; } } else { os . write ( msg . get body ( ) ) ; os . write ( str_ . get bytes ( ) ) ; } }
boolean is inside ( point 2 d point ) ;
private native void connect ( string pkcs 1 1 module path , string function list name ) throws io exception ;
void on back ( ) ;
private void claim interface ( ) throws source exception { if ( m device handle != null ) { int result = lib usb . kernel driver active ( m device handle , fc d_ interface ) ; if ( result == num_ ) { result = lib usb . detach kernel driver ( m device handle , fc d_ interface ) ; if ( result != lib usb . success ) { m log . error ( str_ + lib usb . error name ( result ) + str_ ) ; } } result = lib usb . claim interface ( m device handle , fc d_ interface ) ; if ( result != lib usb . success ) { throw new source exception ( str_ + lib usb . error name ( result ) + str_ ) ; } } else { throw new source exception ( str_ + str_ ) ; } }
public void navigate to point ( lat lng lat lng , float tilt , float bearing , float zoom , boolean animate ) { camera position position = new camera position . builder ( ) . target ( lat lng ) . zoom ( zoom ) . bearing ( bearing ) . tilt ( tilt ) . build ( ) ; change camera position ( position , animate ) ; }
public static int compare ( long x , long y ) { return ( x < y ) ? - num_ : ( ( x == y ) ? num_ : num_ ) ; }
int net user enum ( string server name , int level , int filter , pointer by reference user info , int max len , int by reference entries read , int by reference total entries , int by reference resume handle ) ;
public void insertar prevision ( prevision vo prevision ) ;
public void resend message item ( final message item msg item ) { string body = msg item . m body ; delete message item ( msg item ) ; m compose view . set text ( body ) ; m compose view . send sms ( ) ; }
private static void expand root ( final evidence builder fs log , final int depth ) { if ( cfg . debug ) { check . requires ( depth > num_ , str_ ) ; } save root log ( fs log ) ; expand path ( fs log , str_ , depth , bool_ ) ; }
public static org . oscm . vo . setting convert to api ( org . oscm . internal . vo . setting old vo ) { if ( old vo == null ) { return null ; } org . oscm . vo . setting new vo = new org . oscm . vo . setting ( ) ; new vo . set key ( old vo . get key ( ) ) ; new vo . set value ( old vo . get value ( ) ) ; return new vo ; }
public void on server leave ( discord api api , server server ) ;
public tv show episode scrape task ( list < tv show episode > episodes , media scraper media scraper , boolean scrape thumb ) { super ( bundle . get string ( str_ ) , episodes . size ( ) , task type . backgroun d_ task ) ; this . episodes = episodes ; this . media scraper = media scraper ; this . scrape thumb = scrape thumb ; }
public < t > boolean remove metadata change listener ( key < t > key , metadata change listener listener ) { if ( ! m metadata change listeners . contains key ( key ) ) { return bool_ ; } else { return m metadata change listeners . get ( key ) . remove ( listener ) ; } }
public plane model ( double length , double width , color color ) { this . length = length ; this . width = width ; this . color = color ; }
string obfuscate ( string original , string key ) ;
public static boolean is less than unsigned ( long n 1 , long n 2 ) { return unsigned longs . compare ( n 1 , n 2 ) < num_ ; }
public void restore _apps ( ) { list < installed app > to _reinsert = _initialize _data ( ) ; _app _adapter . add _apps ( to _reinsert , bool_ ) ; }
public static boolean is array byte base 6 4 ( byte [ ] array octect ) { array octect = discard whitespace ( array octect ) ; int length = array octect . length ; if ( length == num_ ) { return bool_ ; } for ( int i = num_ ; i < length ; i ++ ) { if ( ! is base 6 4 ( array octect [ i ] ) ) { return bool_ ; } } return bool_ ; }
void poll ( ) ;
private long calc speed ( long after time , long before time , long bytes ) { return math . round ( bytes / ( after time - before time ) ) ; }
public data model pipeline ( classifier base classifier , data transform ... transforms ) { this ( base classifier , new data transform process ( transforms ) ) ; }
private void create new separato row ( ) { separator rows . add ( rows ) ; j label [ ] row labels = create new row ( ) ; assert row labels . length == columns ; for ( int i = num_ ; i < row labels . length ; ++ i ) { row labels [ i ] . set background ( gri d_ color ) ; } }
public boolean is collapse field separators ( ) { return collapse field separators ; }
public void remove all listeners ( ) { clientgui . get client ( ) . get game ( ) . remove game listener ( this ) ; clientgui . get board view ( ) . remove board view listener ( this ) ; clientgui . mech d . w pan . weapon list . remove list selection listener ( this ) ; }
public static string string ( int alg ) { return algs . get text ( alg ) ; }
public static int intersect line line ( line 2 d a , line 2 d b , point 2 d intersect ) { double a 1x = a . get x1 ( ) , a 1y = a . get y1 ( ) ; double a 2x = a . get x2 ( ) , a 2y = a . get y2 ( ) ; double b 1x = b . get x1 ( ) , b 1y = b . get y1 ( ) ; double b 2x = b . get x2 ( ) , b 2y = b . get y2 ( ) ; return intersect line line ( a 1x , a 1y , a 2x , a 2y , b 1x , b 1y , b 2x , b 2y , intersect ) ; }
public render target ( string name , int width , int height , int offset x , int offset y , boolean stencil buffer , boolean mipmaps , int gl type , config bitmap config , filter type filter type , wrap type wrap type ) { m name = name ; m width = width ; m height = height ; m offset x = offset x ; m offset y = offset y ; m stencil buffer = stencil buffer ; m mipmaps = mipmaps ; m gl type = gl type ; m bitmap config = bitmap config ; m filter type = filter type ; m wrap type = wrap type ; m texture = new render target texture ( m name + str_ , m width , m height ) ; m texture . set mipmap ( m mipmaps ) ; m texture . set gl texture type ( m gl type ) ; m texture . set bitmap config ( m bitmap config ) ; m texture . set filter type ( m filter type ) ; m texture . set wrap type ( m wrap type ) ; }
protected void init bp order details ( int c_ b partner _ id , boolean for invoice ) { log . config ( str_ + c_ b partner _ id ) ; key name pair pp = new key name pair ( num_ , str_ ) ; order field . remove action listener ( this ) ; order field . remove all items ( ) ; order field . add item ( pp ) ; array list < key name pair > list = load order data ( c_ b partner _ id , for invoice , same warehouse cb . is selected ( ) ) ; for ( key name pair knp : list ) order field . add item ( knp ) ; order field . set selected index ( num_ ) ; order field . add action listener ( this ) ; dialog . pack ( ) ; init bp details ( c_ b partner _ id ) ; }
public static < t > void fill ( list < ? super t > list , t object ) { list iterator < ? super t > it = list . list iterator ( ) ; while ( it . has next ( ) ) { it . next ( ) ; it . set ( object ) ; } }
public media type content type ( ) { return null ; }
public jni file stream ( int fd , boolean can read , boolean can write ) { _jni troubleshoot . check is valid ( ) ; init ( fd , can read , can write ) ; }
private void init reliable message queue factory ( ) { synchronized ( gem fire cache impl . class ) { if ( this . rmq factory != null ) { this . rmq factory . close ( bool_ ) ; } this . rmq factory = new reliable message queue factory impl ( ) ; } }
public void clear learned table ( ) { mac vlan to switch port map . clear ( ) ; }
public void add export format ( export format export format ) { get export formats ( ) . add ( export format ) ; }
private void send friends ( ) throws io exception { log . debug ( str_ ) ; array list < byte string > blinded friends = security manager . get current profile ( m context ) . is use trust ( ) ? crypto . byte arrays to strings ( m client psi . encode blinded items ( ) ) : new array list < byte string > ( ) ; client message cm = new client message ( null , blinded friends ) ; if ( ! length value write ( out , cm . to json ( ) ) ) { set exchange status ( status . error ) ; set error message ( str_ ) ; throw new io exception ( str_ ) ; } }
private void goto url ( string surl ) { try { url url = new url ( surl ) ; platform ui . get workbench ( ) . get browser support ( ) . get external browser ( ) . open url ( url ) ; } catch ( part init exception ex ) { message dialog . open error ( workbench . get instance ( ) . get active workbench window ( ) . get shell ( ) , str_ , str_ + surl ) ; } catch ( malformed url exception ex ) { message dialog . open error ( workbench . get instance ( ) . get active workbench window ( ) . get shell ( ) , str_ , str_ + surl ) ; } }
public boolean is jsp page ( string uri ) throws jasper exception { init ( ) ; if ( jsp properties == null ) { return bool_ ; } string uri path = null ; int index = uri . last index of ( str_ ) ; if ( index >= num_ ) { uri path = uri . substring ( num_ , index + num_ ) ; } string uri extension = null ; index = uri . last index of ( str_ ) ; if ( index >= num_ ) { uri extension = uri . substring ( index + num_ ) ; } for ( jsp property group jpg : jsp properties ) { jsp property jp = jpg . get jsp property ( ) ; string extension = jpg . get extension ( ) ; string path = jpg . get path ( ) ; if ( extension == null ) { if ( uri . equals ( path ) ) { return bool_ ; } } else { if ( ( path == null || path . equals ( uri path ) ) && ( extension . equals ( str_ ) || extension . equals ( uri extension ) ) ) { return bool_ ; } } } return bool_ ; }
public photos edit query edit ( user actor actor , int photo id ) { return new photos edit query ( get client ( ) , actor , photo id ) ; }
private layout manager create layout ( ) { sea glass context context = get context ( this ) ; layout manager lm = ( layout manager ) style . get ( context , str_ ) ; context . dispose ( ) ; return ( lm != null ) ? lm : new sea glass title pane layout ( ) ; }
public void clear all between headers and footers ( ) { list < insertion > headers and footers = new array list < > ( ) ; headers and footers . add all ( get headers ( ) ) ; headers and footers . add all ( get footers ( ) ) ; m inserts . clear ( ) ; get items ( ) . clear ( ) ; m only inserts count = num_ ; m only items count = num_ ; re add all inserts ( headers and footers ) ; notify if need ( ) ; }
public boolean is connected ( ) { return ( null != m api client ) && m api client . is connected ( ) ; }
public static vo stepped price to vo stepped price ( stepped price stepped price ) { vo stepped price vo stepped price = new vo stepped price ( ) ; update value object ( vo stepped price , stepped price ) ; vo stepped price . set limit ( stepped price . get limit ( ) ) ; vo stepped price . set price ( stepped price . get price ( ) ) ; return vo stepped price ; }
private int add to population ( solution solution ) { int id = next free id ( ) ; solutions . put ( id , solution ) ; return id ; }
protected void save replace card ( string key , boolean is string , string value ) { header card card = header card . save new header card ( key , null , is string ) ; card . set value ( value ) ; this . my header . delete key ( card . get key ( ) ) ; this . my header . add line ( card ) ; }
public j frame show ( ) { return show ( num_ , num_ ) ; }
public string pattern ( ) { return internal . to string ( ) ; }
public task perform stop operation ( string vm id ) throws io exception { string path = string . format ( str_ , get base path ( ) , vm id ) ; http response http response = this . rest client . perform ( rest client . method . post , path , null ) ; this . rest client . check response ( http response , http status . s c_ created ) ; return parse task from http response ( http response ) ; }
public static boolean is level ( level level ) { if ( level == null ) return bool_ ; return level . int value ( ) >= s _current level . int value ( ) ; }
public void paint layered highlights ( graphics g , int p 0 , int p 1 , shape view bounds , j text component editor , view view ) { for ( int counter = highlights . size ( ) - num_ ; counter >= num_ ; counter -- ) { object tag = highlights . element at ( counter ) ; if ( tag instanceof layered highlight info ) { layered highlight info lhi = ( layered highlight info ) tag ; int start = lhi . get start offset ( ) ; int end = lhi . get end offset ( ) ; if ( ( p 0 < start && p 1 > start ) || ( p 0 >= start && p 0 < end ) ) { lhi . paint layered highlights ( g , p 0 , p 1 , view bounds , editor , view ) ; } } } }
void start number list ( ) throws parse exception ;
public void test and phrase ( ) throws exception { phrase query phrase 1 = new phrase query ( str_ , str_ , str_ ) ; phrase query phrase 2 = new phrase query ( str_ , str_ , str_ ) ; boolean query . builder expected = new boolean query . builder ( ) ; expected . add ( phrase 1 , occur . must ) ; expected . add ( phrase 2 , occur . must ) ; assert equals ( expected . build ( ) , parse ( str_ ) ) ; }
public static void assert configured ( ) { }
boolean can zoom ( ) ;
public string to string ( ) { return m _str err ; }
public boolean is draw highlight arrow enabled ( ) { return m draw highlight arrow ; }
public void test tx partitioned optimistic read committed ( ) throws exception { check tx ( partitioned , optimistic , rea d_ committed ) ; }
public invalid header value exception ( ) { super ( ) ; }
boolean is show tool tip ( ) ;
private boolean is estimate bad ( final double [ ] y , final double y d ) { return y d <= y [ num_ ] || y d >= y [ num_ ] ; }
string construct component name ( ) { synchronized ( menu item . class ) { return base + name counter ++ ; } }
public regex validator ( string regex , boolean case sensitive ) { this ( new string [ ] { regex } , case sensitive ) ; }
public void success handling ( string result , boolean display toast ) { if ( result . equals ignore case ( domoticz values . result . error ) ) toast . make text ( get activity ( ) , r . string . action _failed , toast . lengt h_ short ) . show ( ) ; else if ( result . equals ignore case ( domoticz values . result . ok ) ) { if ( display toast ) toast . make text ( get activity ( ) , r . string . action _success , toast . lengt h_ short ) . show ( ) ; } else { if ( display toast ) toast . make text ( get activity ( ) , r . string . action _unknown , toast . lengt h_ short ) . show ( ) ; } if ( debug ) add debug text ( str_ + result ) ; }
public void reset from primary ( cache object val , grid cache version ver ) { value ( val ) ; this . ver = ver ; }
boolean is inside work tree ( ) throws git exception ;
void visit table switch insn ( int min , int max , label dflt , label [ ] labels ) ;
config change result apply configuration delete ( server managed object < ? extends t > mo ) ;
private void update progress ( int progress ) { if ( my host != null && progress != previous progress ) { my host . update progress ( progress ) ; } previous progress = progress ; }
public boolean supports mixed case quoted identifiers ( ) throws sql exception { return ! this . conn . lower case table names ( ) ; }
public matrix solve transpose ( matrix b ) { return transpose ( ) . solve ( b . transpose ( ) ) ; }
protected void on online ( ) { if ( offline menu item != null ) { offline menu item . set visible ( bool_ ) ; } logger . debug ( str_ ) ; }
private static final int table size for ( int c ) { int n = c - num_ ; n |= n > > > num_ ; n |= n > > > num_ ; n |= n > > > num_ ; n |= n > > > num_ ; n |= n > > > num_ ; return ( n < num_ ) ? num_ : ( n >= maximu m_ capacity ) ? maximu m_ capacity : n + num_ ; }
public static _ fields find by name ( string name ) { return by name . get ( name ) ; }
collection x < t > retain all ( seq < ? extends t > seq ) ;
private map < string , integer > process function args ( tree args node ) { map < string , integer > args = new hash map < string , integer > ( ) ; for ( int i = num_ ; i < args node . get child count ( ) ; i += num_ ) { tree idents = args node . get child ( i ) ; if ( idents . get type ( ) != delphi lexer . tk variable idents ) { idents = args node . get child ( ++ i ) ; if ( idents == null || idents . get type ( ) != delphi lexer . tk variable idents ) { break ; } } for ( int c = num_ ; c < idents . get child count ( ) ; ++ c ) { args . put ( idents . get child ( c ) . get text ( ) . to lower case ( ) , integer . value of ( num_ ) ) ; } } return args ; }
public void close if necessary ( ) { if ( jmdns instance != null ) { if ( jmdns subscriber count . get ( ) <= num_ ) { close ( ) ; } } }
public double linked list < i move > valid moves ( ) { double linked list < i move > list = new double linked list < i move > ( ) ; list . insert ( new increment move ( num_ ) ) ; list . insert ( new increment move ( num_ ) ) ; return list ; }
public crypto manager exception ( localizable message message ) { super ( message ) ; }
private void post transform ( float [ ] matrix ) { float [ ] tmp = new float [ num_ ] ; multiply ( tmp , m values , matrix ) ; m values = tmp ; }
jc block block ( int pos , long flags ) { accept ( lbrace ) ; list < jc statement > stats = block statements ( ) ; jc block t = f . at ( pos ) . block ( flags , stats ) ; while ( token . kind == case || token . kind == default ) { syntax error ( str_ , token . kind ) ; switch block statement groups ( ) ; } t . endpos = token . pos ; accept ( rbrace ) ; return to p ( t ) ; }
block data input stream ( input stream in ) { this . in = new peek input stream ( in ) ; din = new data input stream ( this ) ; }
abstract sd type create store data ( session session , ssd type storage description ) ;
public abstract ftp client login ( string user , char [ ] password , string account ) throws ftp protocol exception , io exception ;
public static boolean is wifi connected ( ) { return is network available ( net type . wifi ) ; }
public final string to string ( ) { return description ; }
public void paint separator border ( synth context context , graphics g , int x , int y , int w , int h ) { paint border ( context , g , x , y , w , h , null ) ; }
public static int convert ( string string value ) { if ( strings . is null or empty ( string value ) || type utils . missin g_ indicators . contains ( string value ) ) { return missin g_ value ; } matcher matcher = comm a_ pattern . matcher ( string value ) ; return integer . parse int ( matcher . replace all ( str_ ) ) ; }
public void init ( matrix w , random rand ) ;
boolean is data reduction proxy enabled for url ( string url ) ;
public static boolean is folder exist ( string directory path ) { if ( handler _ string . is blank ( directory path ) ) { return bool_ ; } file dire = new file ( directory path ) ; return ( dire . exists ( ) && dire . is directory ( ) ) ; }
public static boolean is valid template ( string template ) { template = template . trim ( ) ; if ( template . index of ( str_ ) == - num_ ) { return bool_ ; } string s = template . trim ( ) ; if ( s . last index of ( str_ ) != s . length ( ) - num_ ) { return bool_ ; } if ( get method signature ( template ) == null ) { return bool_ ; } if ( get method body ( template ) == null ) { return bool_ ; } return bool_ ; }
public ab title bar ( context context , attribute set attrs ) { super ( context , attrs ) ; inin title bar ( context ) ; }
string recognize with country n region ( string country , string region , string img file path , int top n ) ;
public void attr removed ( attr node , string oldv ) { if ( ! changing ) { if ( path segs != null ) { path segs . invalidate ( ) ; } if ( normalized path segs != null ) { normalized path segs . invalidate ( ) ; } } fire base attribute listeners ( ) ; if ( ! has anim val ) { fire animated attribute listeners ( ) ; } }
void on success ( list < file > file list ) ;
public static element svg circle ( document document , double cx , double cy , double r ) { element circ = svg util . svg element ( document , svg constants . sv g_ circl e_ tag ) ; svg util . set att ( circ , svg constants . sv g_ c x_ attribute , cx ) ; svg util . set att ( circ , svg constants . sv g_ c y_ attribute , cy ) ; svg util . set att ( circ , svg constants . sv g_ r_ attribute , r ) ; return circ ; }
public boolean column ( int nrows ) { this ( nrows , nrows , bool_ ) ; }
< t > binding bind ( property < t > property , qualifier < t > qualifier ) ;
public void concurrent zeroing ( ) { vm . assertions . fail ( str_ ) ; }
public void load this ( ) { if ( ( access & opcodes . ac c_ static ) != num_ ) { throw new illegal state exception ( str_ ) ; } mv . visit var insn ( opcodes . aload , num_ ) ; }
protected void put action ( key stroke key stroke , keyboard callback keyboard callback ) { synchronized ( actions ) { if ( ! actions . contains key ( key stroke ) ) { actions . put ( key stroke , new hash set < > ( ) ) ; } synchronized ( actions . get ( key stroke ) ) { actions . get ( key stroke ) . add ( keyboard callback ) ; } } }
public void logout ( string username ) throws authenticator exception { debug . log info ( this . get class ( ) . get name ( ) + str_ , module ) ; }
public hour ( int hour , int day , int month , int year ) { this ( hour , new day ( day , month , year ) ) ; }
public void destroy authentication session ( final session id session id ) { internal session authentication session = injector holder . get instance ( authentication session store . class ) . remove session ( session id ) ; if ( authentication session == null ) { authentication session = remove cached internal session ( session id ) ; } if ( authentication session != null && authentication session . get state ( ) != session state . invalid ) { signal remove ( authentication session , session event type . destroy ) ; session auditor . audit activity ( authentication session . to session info ( ) , a m_ sessio n_ destroyed ) ; } session access manager . remove session id ( session id ) ; }
public boolean contains key ( object key ) { int h = hash ( key . hash code ( ) ) ; return seg for ( h ) . contains key ( key , h ) ; }
private struct impl store ( class clazz ) { field [ ] fields arr = clazz . get fields ( ) ; struct impl fields map = new struct impl ( ) ; for ( int i = num_ ; i < fields arr . length ; i ++ ) { store field ( fields arr [ i ] , fields map ) ; } map . put ( clazz , fields map ) ; return fields map ; }
void store state ( ) ;
void cancel short message ( string service type , string message id , type of number source addr ton , numbering plan indicator source addr npi , string source addr , type of number dest addr ton , numbering plan indicator dest addr npi , string destination address ) throws pdu exception , response timeout exception , invalid response exception , negative response exception , io exception ;
public m invoice ( m in out ship , timestamp invoice date ) { this ( ship . get ctx ( ) , num_ , ship . get _ trx name ( ) ) ; set client org ( ship ) ; set shipment ( ship ) ; set c_ doc type target _ id ( ) ; if ( invoice date != null ) set date invoiced ( invoice date ) ; set date acct ( get date invoiced ( ) ) ; set sales rep _ id ( ship . get sales rep _ id ( ) ) ; }
private void log ( level level , string message ) { logger . log ( level , str_ + get id ( ) + str_ + message ) ; }
public static boolean is low surrogate ( int c ) { return ( num_ <= c && c <= num_ ) ; }
private void terminate ( ) { system . exit ( num_ ) ; }
public expression visitor increment query level ( int offset ) { return new expression visitor ( type , query level + offset , dependencies , columns , table , resolver , max data modification id ) ; }
public c project configuration ( final i navi project project , final listener provider < i project listener > listeners , final sql provider provider , final int project id , final string name , final string description , final date creation date , final date modification date , final list < debugger template > assigned debuggers ) { m _project = project ; m _listeners = listeners ; m _provider = provider ; m _id = project id ; m _name = name ; m _description = description ; m _creation date = new date ( creation date . get time ( ) ) ; m _modification date = new date ( modification date . get time ( ) ) ; m _assigned debuggers = new array list < debugger template > ( assigned debuggers ) ; }
public static void drop table ( sq lite database db , boolean if exists ) { string sql = str_ + ( if exists ? str_ : str_ ) + str_ ; db . exec sql ( sql ) ; }
private static boolean is event node ( final i navi code node node , final trace list event list ) { for ( final i trace event trace event : event list ) { final breakpoint address event address = trace event . get offset ( ) ; try { if ( node . get parent function ( ) . get module ( ) == event address . get module ( ) && c code node helpers . contains address ( node , event address . get address ( ) . get address ( ) ) ) { return bool_ ; } } catch ( final maybe null exception e ) { } } return bool_ ; }
public final long zobrist hash ( ) { return hash key ; }
public void suspend encoding ( ) throws java . io . io exception { flush base 6 4 ( ) ; this . suspend encoding = bool_ ; }
public void audit module success ( login state login state , principal principal , authentication audit entry audit entry detail ) { string realm = get realm from state ( login state ) ; if ( event publisher . is auditing ( realm , authenticatio n_ topic , a m_ logi n_ modul e_ completed ) ) { string principal name = principal == null ? null : principal . get name ( ) ; string auth id = get user id ( principal name , realm ) ; audit module event ( login state , realm , principal name , auth id , successful , audit entry detail ) ; } }
public iterator edge sources ( ) ;
public void update ( boolean simulate connections ) { if ( ! is radio active ( ) ) { tear down all connections ( ) ; return ; } if ( simulate connections ) { for ( network interface i : net ) { i . update ( ) ; } } this . router . update ( ) ; }
promise < push response > push branch ( project config project , string remote , string local branch name ) ;
boolean is auto incremented ( ) ;
public bar plot ( data source ... data ) { super ( data ) ; ( ( xy plot area 2 d ) get plot area ( ) ) . set major grid x ( bool_ ) ; bar width = num_ ; bar height min = num_ ; paint all bars = bool_ ; legend legend = new bar plot legend ( this ) ; set legend ( legend ) ; autoscale axes ( ) ; }
public void visit formal type parameter ( string name ) { }
public void start ( ) { log . i ( str_ , str_ ) ; end ( ) ; m hand view = new hand view ( m context ) ; m line view = new line view ( m context ) ; m balloon group = new balloon group ( m context ) ; m hider view = new hider view ( m context ) ; int y = view util . get status bar height ( m context ) + balloon performer . get instance ( ) . get config ( ) . get line length ( m context ) ; m window manager = ( window manager ) m context . get system service ( context . windo w_ service ) ; int x = m window manager . get default display ( ) . get width ( ) * num_ / num_ ; m hand view . attach to window ( x , y ) ; m line view . attach to window ( x , y , m hand view . get content width ( ) / num_ ) ; setup listener ( ) ; m is running = bool_ ; }
private synchronized int read record length ( ) throws io exception { if ( in . get pos ( ) >= end ) { return - num_ ; } int length = in . read int ( ) ; if ( sync != null && length == syn c_ escape ) { in . read fully ( sync check ) ; if ( ! arrays . equals ( sync , sync check ) ) { throw new io exception ( str_ ) ; } sync seen = bool_ ; if ( in . get pos ( ) >= end ) { return - num_ ; } length = in . read int ( ) ; } else { sync seen = bool_ ; } return length ; }
public static string string for ( int n ) { switch ( n ) { case c u_ prefe r_ ptx : return str_ ; case c u_ prefe r_ binary : return str_ ; } return str_ + n ; }
public boolean opt boolean ( string key ) { return this . opt boolean ( key , bool_ ) ; }
public int iterator rows ( boolean val ) ;
public static class < ? extends fs directory > load fs directory class ( string clazz name ) throws class not found exception { return class . for name ( adjust directory class name ( clazz name ) ) . as subclass ( fs directory . class ) ; }
public final void add ( int before index , v value ) { if ( gwt . is script ( ) ) { js array . insert ( before index , value ) ; } else { java array . add ( before index , value ) ; } }
void clear all links ( ) { storage source . delete rows async ( lin k_ tabl e_ name , null ) ; }
public static void append value ( final string buffer log message , final string value ) { log message . append ( value ) ; }
private static void insertion sort ( double [ ] data , int start , int end ) { for ( int i = start + num_ ; i < end ; i ++ ) { for ( int j = i ; j > start && data [ j - num_ ] > data [ j ] ; j -- ) { swap ( data , j , j - num_ ) ; } } }
public static void write ( buffered writer writer , database field config config , string table name ) throws sql exception { try { write config ( writer , config , table name ) ; } catch ( io exception e ) { throw sql exception util . create ( str_ , e ) ; } }
public abstract string to string matrix ( ) ;
public dataset container ( data set dataset , boolean default ranges , int default ranges seed ) { this ( ) ; this . set dataset ( dataset ) ; this . dataset . populate annotated strings ( ) ; this . dataset . update stats ( ) ; if ( default ranges ) { this . create default ranges ( default ranges seed ) ; this . update sub dataset ( ) ; } }
public void close ( ) { virtual file f = get virtual file ( ) ; if ( f != null ) f . close ( ) ; }
public string no replacement tip text ( ) { return str_ ; }
public void test exclude ( ) throws io exception { char array set exclusion set = new char array set ( as set ( str_ ) , bool_ ) ; analyzer a = new italian analyzer ( italian analyzer . get default stop set ( ) , exclusion set ) ; check one term ( a , str_ , str_ ) ; check one term ( a , str_ , str_ ) ; a . close ( ) ; }
cache stats snapshot ( ) ;
public static native void arw set video debug mode ( boolean debug ) ;
public yaml ( base constructor constructor ) { this ( constructor , new representer ( ) ) ; }
void print predefined style ( final string text , final string style ) ;
void init ( t entity , world world ) ;
public void property change ( property change event e ) { string property name = e . get property name ( ) ; if ( property name == str_ ) { if ( e . get old value ( ) == boolean . false && e . get new value ( ) == boolean . true ) { handle popup is visible event ( bool_ ) ; } else if ( e . get old value ( ) == boolean . true && e . get new value ( ) == boolean . false ) { handle popup is visible event ( bool_ ) ; } } }
public void do post ( http servlet request request , http servlet response response ) throws servlet exception , io exception { web doc doc = web doc . create popup ( str_ ) ; web util . create response ( request , response , this , null , doc , bool_ ) ; }
public boolean handle sync offer ( string store name , byte [ ] key , iterable < vector clock > versions ) throws sync exception { synchronizing storage engine store = store registry . get ( store name ) ; if ( store == null ) return bool_ ; list < versioned < byte [ ] > > values = store . get ( new byte array ( key ) ) ; if ( values == null || values . size ( ) == num_ ) return bool_ ; for ( vector clock vc : versions ) { for ( versioned < byte [ ] > value : values ) { vector clock existing vc = ( vector clock ) value . get version ( ) ; if ( ! vc . compare ( existing vc ) . equals ( occurred . before ) ) return bool_ ; } } return bool_ ; }
private j criterium tree node find parent node ( final j criterium tree node node , final i criterium criterium ) { if ( node . get criterium ( ) == criterium ) { return node ; } for ( int i = num_ ; i < node . get child count ( ) ; i ++ ) { final j criterium tree node child = ( j criterium tree node ) node . get child at ( i ) ; final j criterium tree node parent = find parent node ( child , criterium ) ; if ( parent != null ) { return parent ; } } return null ; }
private void update period ( ) { for ( int i = num_ ; i < m conversion . size ( ) ; i ++ ) { int date type = m conversion . key at ( i ) ; time period slider slider = m time period sliders . get ( date type ) ; slider . set value ( m period . get ( m conversion . value at ( i ) ) ) ; } m time . set text ( get formatted period ( ) ) ; m duration = m period . to standard duration ( ) ; do validation ( ) ; }
public static long bytes 2 ledger id ( byte [ ] data ) { return long . value of ( new string ( data , ut f _ 8 ) ) ; }
public void allow type hierarchy ( final class < ? > type ) { add permission ( new type hierarchy permission ( type ) ) ; }
public boolean is set ( _ fields field ) { if ( field == null ) { throw new illegal argument exception ( ) ; } switch ( field ) { case aa : return is set aa ( ) ; case ab : return is set ab ( ) ; } throw new illegal state exception ( ) ; }
public boolean is domain controller ( ) { return _is domain controller ; }
public boolean is empty ( ) ;
public void on error ( foursquare dialog error e ) ;
public clustering < model > run ( relation < v > relation ) { final dbi ds ids = relation . get dbi ds ( ) ; if ( ids . size ( ) < minpts ) { clustering < model > result = new clustering < > ( str_ , str_ ) ; result . add toplevel cluster ( new cluster < model > ( ids , bool_ , cluster model . cluster ) ) ; return result ; } double gridwidth = this . gridwidth ; if ( gridwidth < num_ * epsilon ) { log . warning ( str_ ) ; gridwidth = num_ * epsilon ; } return new instance < v > ( get distance function ( ) , epsilon , minpts , gridwidth ) . run ( relation ) ; }
public void action performed ( action event e ) { ( ( action listener ) a ) . action performed ( e ) ; ( ( action listener ) b ) . action performed ( e ) ; }
public boolean is numbered ( ) { return numbered ; }
private synchronized void compile ( token tok ) { if ( this . operations != null ) return ; this . number of closures = num_ ; this . operations = this . compile ( tok , null , bool_ ) ; }
public static void add combo box ( final j panel panel , final j combo box < string > combo box , final string description , final string hint , final boolean value ) { preconditions . check not null ( panel , str_ ) ; preconditions . check not null ( combo box , str_ ) ; preconditions . check not null ( description , str_ ) ; combo box . add item ( str_ ) ; combo box . add item ( str_ ) ; combo box . set selected item ( value ? str_ : str_ ) ; combo box . set preferred size ( new dimension ( preferre d_ width , preferre d_ height ) ) ; add component ( panel , combo box , description , hint ) ; }
void copy to ( object data object ) ;
public matrix delete rows ( ret return type , long ... rows ) ;
public void delete at ( int row , int count ) { if ( ( ( row | count ) < num_ ) || ( row + count > size ( ) ) ) { throw new index out of bounds exception ( row + str_ + count ) ; } move row gap to ( row + count ) ; m row gap start -= count ; m row gap length += count ; }
public static void notify client joined ( final distributed member client id ) { notify listeners ( client id , bool_ , event type . joined ) ; }
private void release precaching wake lock ( ) { if ( m precaching wake lock != null && m precaching wake lock . is held ( ) ) { m precaching wake lock . release ( ) ; } }
protected void finish ( s state ) { service utils . log info ( this , str_ , state . document self link ) ; try { task service utils . complete ( this , service document utils . get task service state ( state ) , null ) ; } catch ( throwable t ) { fail ( state , t ) ; } }
public int expr get num children ( ) { return num_ ; }
public void succeeded ( framework method method ) { }
public void replace text ( int start index , int end index , string s ) ;
public void put int 1 6 ( int i ) { ensure capacity ( num_ ) ; byte [ ] b = this . byte buffer ; b [ this . position ++ ] = ( byte ) ( i & num_ ) ; b [ this . position ++ ] = ( byte ) ( i > > > num_ ) ; }
public int last index of ( string sub string , int start ) { int count = length ( ) ; int sub count = sub string . length ( ) ; if ( sub count <= count && start >= num_ ) { if ( sub count > num_ ) { if ( start > count - sub count ) { start = count - sub count ; } char [ ] target = sub string . to char array ( ) ; int sub offset = num_ ; char first char = target [ sub offset ] ; int end = sub offset + sub count ; while ( bool_ ) { int i = last index of ( first char , start ) ; if ( i == - num_ ) { return - num_ ; } int o 1 = i , o 2 = sub offset ; while ( ++ o 2 < end && value [ offset + ( ++ o 1 ) ] == target [ o 2 ] ) { } if ( o 2 == end ) { return i ; } start = i - num_ ; } } return start < count ? start : count ; } return - num_ ; }
void continued ( consumer < first > continuation first , consumer < second > continuation second ) ;
public abstract entity finder ( osm map storage ) { this . storage = storage ; min radius = num_ ; max radius = num_ ; next radius = - num_ ; intermediate results = new array list < map entity > ( ) ; results = new array list < map entity > ( ) ; }
public static string clean folder stacking markers ( string filename ) { if ( ! string utils . is empty ( filename ) ) { matcher m = folder stacking pattern . matcher ( filename ) ; if ( m . matches ( ) ) { return m . group ( num_ ) + m . group ( num_ ) ; } } return filename ; }
public static string pid memory usage ( int pid ) throws io exception { process process = new process builder ( ) . command ( str_ , str_ , str_ , str_ , long . to string ( pid ) ) . start ( ) ; buffered reader reader = new buffered reader ( new input stream reader ( process . get input stream ( ) ) ) ; reader . read line ( ) ; string line = reader . read line ( ) ; string [ ] parts = line . trim ( ) . split ( str_ , num_ ) ; int read pid = integer . parse int ( parts [ num_ ] ) ; if ( pid != read pid ) { throw new runtime exception ( str_ + line + str_ ) ; } long rss = long . parse long ( parts [ num_ ] ) * num_ ; long vsz = long . parse long ( parts [ num_ ] ) ; return string . format ( str_ , rss , vsz ) ; }
public static void save koml ( file save to , object model , instances header ) throws exception { vector < object > v = new vector < object > ( ) ; v . add ( model ) ; if ( header != null ) { v . add ( header ) ; } v . trim to size ( ) ; koml . write ( save to . get absolute path ( ) , v ) ; }
public boolean is set credit stop ( ) ;
public int fix polygons ( ) ;
public cluster group for predicate ( ignite predicate < cluster node > p ) ;
public boolean is cached ( string request url , int max width , int max height ) { throw if not on main thread ( ) ; string cache key = get cache key ( request url , max width , max height ) ; return m cache . get bitmap ( cache key ) != null ; }
public boolean is source available ( ) { return source available ; }
boolean test with throwable ( final int v 1 ) throws e ;
public static < s extends has icon key press handlers & has handlers > void fire ( s source , java script object js obj ) { if ( type != null ) { icon key press event event = new icon key press event ( js obj ) ; source . fire event ( event ) ; } }
public shutdown domain script command ( configuration configuration , string resource path ) { super ( configuration , resource path ) ; }
private void show feedback ( string message ) { if ( my host != null ) { my host . show feedback ( message ) ; } else { system . out . println ( message ) ; } }
public anonymous _num expr _ 2 _ create anonymous _num expr _ 2 _ ( ) { anonymous _num expr _ 2 _ impl anonymous _num expr _ 2 _ = new anonymous _num expr _ 2 _ impl ( ) ; return anonymous _num expr _ 2 _ ; }
big decimal multiply ( final big decimal price , final big decimal qty ) { return price . multiply ( qty ) . set scale ( constants . defaul t_ scale , big decimal . roun d_ hal f_ up ) ; }
public void test float field ( ) throws exception { an object empty = new an object ( ) ; an object full = helper . fill ( new an object ( ) ) ; assert true ( helper . are equals ( full , full ) ) ; assert false ( helper . are equals ( empty , full ) ) ; }
public void add ( long delay , t value ) { node < t > new node = new node < t > ( value , delay ) ; node < t > prev = null ; node < t > next = head ; while ( next != null && next . delay <= new node . delay ) { new node . delay -= next . delay ; prev = next ; next = next . next ; } if ( prev == null ) { head = new node ; } else { prev . next = new node ; } if ( next != null ) { next . delay -= new node . delay ; new node . next = next ; } size ++ ; }
private void create raster program ( ) throws io exception { int program = gl create program ( ) ; int vshader = demo utils . create shader ( str_ , g l_ verte x_ shader ) ; int fshader = demo utils . create shader ( str_ , g l_ fragmen t_ shader ) ; gl attach shader ( program , vshader ) ; gl attach shader ( program , fshader ) ; gl bind attrib location ( program , num_ , str_ ) ; gl bind attrib location ( program , num_ , str_ ) ; gl bind attrib location ( program , num_ , str_ ) ; gl bind attrib location ( program , num_ , str_ ) ; gl bind frag data location ( program , num_ , str_ ) ; gl link program ( program ) ; int linked = gl get programi ( program , g l_ lin k_ status ) ; string program log = gl get program info log ( program ) ; if ( program log . trim ( ) . length ( ) > num_ ) { system . err . println ( program log ) ; } if ( linked == num_ ) { throw new assertion error ( str_ ) ; } this . raster program = program ; }
public static < e > immutable list < e > of ( e e 1 , e e 2 , e e 3 , e e 4 , e e 5 , e e 6 , e e 7 , e e 8 ) { return construct ( e 1 , e 2 , e 3 , e 4 , e 5 , e 6 , e 7 , e 8 ) ; }
public boolean is in radius ( double x , double y , double z ) { return math helper . point distance space ( x , y , z , focal point . pos x , focal point . pos y , focal point . pos z ) <= ma x_ distance ; }
private void sign in with g plus ( ) { intent sign in intent = auth . google sign in api . get sign in intent ( m google api client ) ; start activity for result ( sign in intent , r c_ sig n_ in ) ; }
public boolean is legion member ( ) { return legion member != null ; }
public void initialize input layer ( neuron group neuron group ) { if ( input layer != null ) { throw new illegal state exception ( str_ + str_ ) ; } input layer = neuron group ; num inputs = input layer . size ( ) ; input layer . set label ( str_ ) ; input layer . set clamped ( bool_ ) ; add neuron group ( neuron group ) ; }
public static big integer factorial ( int value ) { if ( value == num_ ) return big integer . value of ( num_ ) ; else return big integer . value of ( value ) . multiply ( factorial ( value - num_ ) ) ; }
public ns array browse ( ) throws io exception { return browse ( null ) ; }
public static void debug ( source record record ) { testing . debug ( schema util . as detailed string ( record ) ) ; }
private void refresh device cache ( ) { lite bluetooth . refresh device cache ( ) ; }
void line error ( string error , string details , int line num , string offending line ) ;
public static int read int ( input stream in ) throws io exception { int ch 1 = in . read ( ) ; int ch 2 = in . read ( ) ; int ch 3 = in . read ( ) ; int ch 4 = in . read ( ) ; if ( ( ch 1 | ch 2 | ch 3 | ch 4 ) < num_ ) { throw new eof exception ( ) ; } return ( ( ch 1 << num_ ) + ( ch 2 << num_ ) + ( ch 3 << num_ ) + ( ch 4 << num_ ) ) ; }
protected void on remove ( ) throws ignite checked exception { throw new unsupported operation exception ( ) ; }
public boolean fits in ( size other ) { return width <= other . width && height <= other . height ; }
public builder add columns integer ( string ... names ) { for ( string s : names ) add column integer ( s ) ; return this ; }
private void update progress ( int progress ) { if ( my host != null && progress != previous progress ) { my host . update progress ( progress ) ; } previous progress = progress ; }
public static byte [ ] decode ( byte [ ] source , int off , int len ) throws base 6 4 decoder exception { return decode ( source , off , len , decodabet ) ; }
void color changed ( color color ) ;
public algorithm exception ( algorithm algorithm , throwable cause ) { this ( algorithm , cause . get message ( ) , cause ) ; }
public int delete log ( ) { if ( get keep log days ( ) < num_ ) return num_ ; string sql = str_ + str_ + get r_ request processor _ id ( ) + str_ + get keep log days ( ) + str_ ; int no = db . execute update ( sql , get _ trx name ( ) ) ; return no ; }
public request creator resize dimen ( int target width res id , int target height res id ) { resources resources = picasso . context . get resources ( ) ; int target width = resources . get dimension pixel size ( target width res id ) ; int target height = resources . get dimension pixel size ( target height res id ) ; return resize ( target width , target height ) ; }
protected int bytes per atom ( ) { return ( num_ ) ; }
public photos save query longitude ( float value ) { return unsafe param ( str_ , value ) ; }
private element find next undeclared element ( ) { if ( element iterator != null ) { while ( element iterator . has next ( ) ) { object next = element iterator . next ( ) ; element first = first element ( next ) ; if ( first != null && is undeclared ( first . get element key ( ) ) ) { return first ; } else { sublist iterator = null ; } } sublist iterator = null ; element iterator = null ; } mode = metadata iterator != null && metadata iterator . has next ( ) ? mode . declared : mode . done ; return null ; }
protected static boolean is diagnostics enabled ( ) { return log factory . is diagnostics enabled ( ) ; }
public boolean is critical ( ) { return bool_ ; }
public file utils ( ) { super ( ) ; }
public static s m_ syste m_ message st r_ ms g_ dic e_ unauthorized ( string value 0 ) { return new s m_ syste m_ message ( num_ , value 0 ) ; }
public abstract void on update ( ) ;
public static ordering asc ( string property name , null ordering null ordering ) { return new ordering ( property name , order . ascending , null ordering ) ; }
protected abstract boolean prepare ( i resource resource , tfs repository repository ) ;
public static jama . matrix randomn ( int nrows , int ncols , random r ) { return new jama . matrix ( randn ( nrows , ncols , r ) ) ; }
public void initialize internal ( int val , int loc ) { orig _internal [ loc ] = val ; set internal ( val , loc ) ; }
boolean is known address ( final address id ) ;
public j menu item create j menu item ( string name ) throws missing resource exception , resource format exception , missing listener exception { return create j menu item ( name , null ) ; }
public final boolean is quick scale enabled ( ) { return quick scale enabled ; }
public void collect db stats ( array list < sq lite debug . db stats > db stats list ) { synchronized ( m lock ) { if ( m available primary connection != null ) { m available primary connection . collect db stats ( db stats list ) ; } for ( sq lite connection connection : m available non primary connections ) { connection . collect db stats ( db stats list ) ; } for ( sq lite connection connection : m acquired connections . key set ( ) ) { connection . collect db stats unsafe ( db stats list ) ; } } }
private boolean parse options ( ) throws io exception { boolean valid ; if ( has option ( localpropfile ) ) { system configuration . load props from file ( new file ( get option value ( localpropfile ) ) ) ; } else if ( has option ( hdfspropdir ) ) { file system fs = file system . get ( new configuration ( ) ) ; system configuration . load props from hdfs dir ( get option value ( hdfspropdir ) , fs ) ; } else if ( has option ( hdfspropfile ) ) { file system fs = file system . get ( new configuration ( ) ) ; system configuration . load props from file ( get option value ( hdfspropfile ) , fs ) ; } else { for ( string prop : responder props . propslist ) { if ( has option ( prop ) ) { system configuration . set property ( prop , get option value ( prop ) ) ; } } } valid = responder props . validate responder properties ( ) ; return valid ; }
public copy on write array list ( ) { elements = empty array . object ; }
public void write ( char sequence char sequence ) throws io exception { check not null ( char sequence ) ; closer closer = closer . create ( ) ; try { writer out = closer . register ( open stream ( ) ) ; out . append ( char sequence ) ; out . flush ( ) ; } catch ( throwable e ) { throw closer . rethrow ( e ) ; } finally { closer . close ( ) ; } }
public void notify data set changed ( ) { m data set observable . notify changed ( ) ; }
public static void clear request id ( ) { mdc . remove ( reques t_ key ) ; mdc . remove ( reques t_ i d_ key ) ; }
public void write end group ( ) { writer . write end element line break ( ) ; }
public messages search dialogs query fields ( list < enum param > value ) { return unsafe param ( str_ , value ) ; }
public void stop spinning ( ) { is spinning = bool_ ; m progress = num_ ; m target progress = num_ ; invalidate ( ) ; }
private static string sanitize stack trace ( string trace ) { if ( trace != null ) { return trace . replace all ( str_ , str_ ) ; } else { return null ; } }
public completion proposal description provider ( completion context context ) { super ( ) ; f context = context ; }
public document read ( string source ) throws document exception { try { return get reader ( ) . read ( source ) ; } catch ( jaxb runtime exception ex ) { throwable cause = ex . get cause ( ) ; throw new document exception ( cause . get message ( ) , cause ) ; } }
public static void main ( final string [ ] args ) { dom test case . do main ( namednodemapsetnameditemns 0 9 . class , args ) ; }
http params copy ( ) ;
public final void apply setting ( document builder factory factory ) { strategy . apply setting ( factory , value ) ; }
public static builder create builder ( abstract managed object definition < ? , ? > d , string property name ) { return new builder ( d , property name ) ; }
private void rebuild node ( ) { m _realizer . regenerate ( ) ; m _graph . update views ( ) ; }
public boolean has super class access ( ) { return get super class access opt ( ) . get num child ( ) != num_ ; }
void register seed for blacklisting ( item stack item ) ;
public x 5 0 9 cert impl ( certificate certificate ) { this . certificate = certificate ; this . tbs cert = certificate . get tbs certificate ( ) ; this . extensions = tbs cert . get extensions ( ) ; }
public int compare to ( object obj ) { dog da udda dog = ( dog ) obj ; return this . size - da udda dog . size ; }
public static function last insert rowid ( ) { return new function ( str_ ) ; }
private void test count messages in mailbox ( ) throws exception { log . info ( str_ ) ; long message count = message mapper . count messages in mailbox ( mboxes . get ( num_ ) ) ; assert equals ( messag e_ no . size ( ) , message count ) ; }
public void clear ( ) { this . keys . clear ( ) ; }
public void delete editing object ( ) { cell data < t > cell data = cell map . get ( editing position ) ; if ( cell data != null ) { delete cell ( cell data ) ; } if ( listener != null ) { listener . on drag end ( ) ; } }
void attempt update interest ops ( ) { try { int ops = get interest ops ( ) ; selector . interest ops ( channel , ops ) ; } catch ( cancelled key exception e ) { } catch ( illegal argument exception ee ) { } }
void next ( long min position , final callback < timeline result < t > > cb ) ;
public void register exchange ( exchange exchange , double vbf ) { exchange info new exchange = new exchange info ( system . current time millis ( ) , vbf ) ; exchange info map . put ( exchange , new exchange ) ; }
private string convert int to string ( int value ) { if ( value <= num_ ) { return str_ + string . value of ( value ) ; } else { return string . value of ( value ) ; } }
public static builder from ( swagger swagger ) { validate . not null ( swagger , str_ ) ; return new builder ( swagger ) ; }
public static void show flowgraph settings dialog ( final j frame parent ) { final zy graph view settings settings = config manager . instance ( ) . get default flow graph settings ( ) ; final c graph settings dialog dlg = new c graph settings dialog ( parent , str_ , settings , bool_ , bool_ ) ; dlg . set visible ( bool_ ) ; config manager . instance ( ) . update flowgraph settings ( settings ) ; config manager . instance ( ) . save settings ( parent ) ; }
public boolean is null ( string key ) { return json object . null . equals ( opt ( key ) ) ; }
private void initialize ( ) { this . set name ( constant . messages . get string ( str_ ) ) ; this . set layout ( new grid bag layout ( ) ) ; grid bag constraints gbc = new grid bag constraints ( ) ; gbc . gridx = num_ ; gbc . weightx = num_ ; gbc . anchor = grid bag constraints . lin e_ start ; gbc . fill = grid bag constraints . both ; this . add ( new j label ( constant . messages . get string ( str_ ) ) , gbc ) ; tokens options panel = new global exclude url multiple options panel ( get global exclude url model ( ) ) ; gbc . weighty = num_ ; this . add ( tokens options panel , gbc ) ; }
protected url find resource ( string name ) { return null ; }
private void invoke and wait ( runnable run ) { if ( ! swing utilities . is event dispatch thread ( ) ) { try { swing utilities . invoke and wait ( run ) ; } catch ( exception e ) { e . print stack trace ( ) ; } } else { run . run ( ) ; } }
public image data ( object x ) { this . data array = x ; this . byte size = array funcs . compute l size ( x ) ; }
void highlight directory name field ( boolean highlight ) ;
public boolean is invulnerable ( ) ;
public int count ( ) { return ids . length ; }
public vcpc alt ( independence test independence test ) { if ( independence test == null ) { throw new null pointer exception ( ) ; } this . independence test = independence test ; }
protected void show view ( string view name , string view id , object parameter ) { assert ( ! string utils . is empty ( view id ) ) : str_ + view name + str_ ; view view = get view ( view id ) ; if ( view != null ) { if ( ! view . is active ( ) ) { render view ( view , parameter ) ; } } else { load and render view ( view name , view id , parameter ) ; } }
public static query exp or ( query exp q 1 , query exp q 2 ) { return new or query exp ( q 1 , q 2 ) ; }
public rented sign list ( final stendhal rp zone zone , final shape shape ) { super ( zone , shape , rented sign . class ) ; setup turn notifier ( num_ * num_ ) ; }
private static mapping object object at ( p cal location loc , mapping object [ ] [ ] map ) { return map [ loc . get line ( ) ] [ loc . get column ( ) ] ; }
public void test hash code equals ( ) throws io exception { path dir = wrap ( create temp dir ( ) ) ; path f 1 = dir . resolve ( str_ ) ; path f 1 again = dir . resolve ( str_ ) ; path f 2 = dir . resolve ( str_ ) ; assert equals ( f 1 , f 1 ) ; assert false ( f 1 . equals ( null ) ) ; assert equals ( f 1 , f 1 again ) ; assert equals ( f 1 . hash code ( ) , f 1 again . hash code ( ) ) ; assert false ( f 1 . equals ( f 2 ) ) ; dir . get file system ( ) . close ( ) ; }
public iterable < shard routing > assigned shards ( shard routing shard ) { return assigned shards ( shard . shard id ( ) ) ; }
public int head state ( ) { if ( get signal head ( ) == null ) { return num_ ; } else { return get signal head ( ) . get appearance ( ) ; } }
public ditherer ( int steps , color from , color to ) { this ( from , to , y_ axis , new linear shader ( ) , steps ) ; if ( steps <= num_ ) { throw new illegal argument exception ( str_ ) ; } }
private void start download image activity ( uri url ) { if ( url != null ) { if ( m process button click . get boolean ( str_ , bool_ ) ) { ui utils . show toast ( this , str_ + url ) ; } else if ( ! url util . is valid url ( url . to string ( ) ) ) { ui utils . show toast ( this , str_ + url . to string ( ) ) ; } else { final intent intent = download image activity . make intent ( url ) ; start activity ( intent ) ; shared preferences . editor editor = m process button click . edit ( ) ; editor . put boolean ( str_ , bool_ ) ; editor . commit ( ) ; } } }
public static list property descriptors ( int api level ) { if ( api level == ast . jl s 2 _ internal ) { return propert y_ descriptor s _ 2 _ 0 ; } else { return propert y_ descriptor s _ 3 _ 0 ; } }
public integer member value ( int index , const pool cp ) { super ( str_ , cp ) ; this . value index = index ; }
public change create change ( ) throws refactoring exception { if ( change != null ) { return change ; } if ( refactoring == null ) { refactoring = create refactoring ( ) ; } change = change utilities . create change ( workspace , new null progress monitor ( ) , refactoring , refactoring status . fatal ) ; return change ; }
public eval < optional < t > > min ( comparator < ? super t > comparator ) ;
protected void finish scanning ( ) { try { this . block execution info . get scanned result processor ( ) . add scanned result ( scanner result aggregator . get aggregated result ( ) ) ; } catch ( query execution exception e ) { logger . error ( e , str_ ) ; } }
void un focus ( ) { if ( dbg ) { system . out . println ( this + str_ ) ; } if ( ( m private flags & pfla g_ focused ) != num_ ) { m private flags &= ~ pfla g_ focused ; on focus changed ( bool_ , num_ , null ) ; refresh drawable state ( ) ; if ( accessibility manager . get instance ( m context ) . is enabled ( ) ) { notify accessibility state changed ( ) ; } } }
public boolean is draw hole enabled ( ) { return m draw hole ; }
protected void add map bean to panel ( map bean map ) { add ( map , border layout . center ) ; }
public string type ( ) { return type ; }
public static final int [ ] [ ] threshold ( double rpred [ ] [ ] , double t [ ] ) { int ypred [ ] [ ] = new int [ rpred . length ] [ rpred [ num_ ] . length ] ; for ( int i = num_ ; i < rpred . length ; i ++ ) { for ( int j = num_ ; j < rpred [ i ] . length ; j ++ ) { ypred [ i ] [ j ] = ( rpred [ i ] [ j ] >= t [ j ] ) ? num_ : num_ ; } } return ypred ; }
protected tree cell editor create default cell editor ( ) { if ( current cell renderer != null && ( current cell renderer instanceof default tree cell renderer ) ) { default tree cell editor editor = new default tree cell editor ( tree , ( default tree cell renderer ) current cell renderer ) ; return editor ; } return new default tree cell editor ( tree , null ) ; }
write request poll ( io session session ) ;
protected mutable attribute set root section attributes ( ) { mutable attribute set set = new simple attribute set ( ) ; return set ; }
public synchronized boolean clear ( ) { if ( is loading ( ) ) { return bool_ ; } loader = new thread ( null ) ; loader . start ( ) ; return bool_ ; }
public final boolean is empty ( ) { return empty ; }
private void update progress ( int progress ) { if ( my host != null && progress != previous progress ) { my host . update progress ( progress ) ; } previous progress = progress ; }
public string process ( string document ) throws document creation time missing exception { return process ( document , null , get formatter ( ) ) ; }
protected boolean is valid fragment ( string fragment name ) { return preference fragment . class . get name ( ) . equals ( fragment name ) || general preference fragment . class . get name ( ) . equals ( fragment name ) || data sync preference fragment . class . get name ( ) . equals ( fragment name ) || notification preference fragment . class . get name ( ) . equals ( fragment name ) ; }
public request handle put ( context context , string url , request params params , response handler interface response handler ) { return put ( context , url , params to entity ( params , response handler ) , null , response handler ) ; }
public pdf num tree ( pdf catalog catalog , pdf name tree type ) { this . tree type = tree type ; this . catalog = catalog ; }
public int size ( ) { return position ; }
final public boolean starts with ( final mutable string prefix ) { final int l = prefix . length ( ) ; if ( l > length ( ) ) return bool_ ; int i = l ; final char [ ] a 1 = prefix . array ; final char [ ] a 2 = array ; while ( i -- != num_ ) if ( a 1 [ i ] != a 2 [ i ] ) return bool_ ; return bool_ ; }
public void test cloning ( ) throws clone not supported exception { xy box annotation a 1 = new xy box annotation ( num_ , num_ , num_ , num_ , new basic stroke ( num_ ) , color . red , color . blue ) ; xy box annotation a 2 = ( xy box annotation ) a 1 . clone ( ) ; assert true ( a 1 != a 2 ) ; assert true ( a 1 . get class ( ) == a 2 . get class ( ) ) ; assert true ( a 1 . equals ( a 2 ) ) ; }
public void add all of ( int array list x , int array list y ) { int list size = x . size ( ) ; if ( this . size + list size >= this . capacity ) flush ( ) ; this . target . add all of ( x , y ) ; }
public static int green ( int color ) { return ( color > > num_ ) & num_ ; }
private boolean has next postponed ( ) { return ! postponed routes . is empty ( ) ; }
public static object new class loader ( ) { object result ; class < ? > cls ; constructor < ? > constr ; result = null ; if ( is present ( ) ) { try { cls = class . for name ( clas s_ groovyclassloader ) ; constr = cls . get constructor ( new class [ ] { class loader . class } ) ; result = constr . new instance ( groovy . class . get class loader ( ) ) ; } catch ( exception e ) { e . print stack trace ( ) ; result = null ; } } return result ; }
public void log info ( string string ) ;
public multi state compilation unit change ( final string name , final i compilation unit unit ) { super ( name , ( i file ) unit . get resource ( ) ) ; f unit = unit ; set text type ( str_ ) ; }
private void parse declaration block ( ) throws io exception { for ( ; ; ) { int token = parse declaration ( ) ; switch ( token ) { case end : case brac e_ close : return ; case bracke t_ close : case pare n_ close : throw new runtime exception ( str_ ) ; case identifier : break ; } } }
public string to string ( ) { return uri . to string ( ) ; }
void add or replace decls ( xmlns decl new decl ) { int n = m _prefix table . size ( ) ; for ( int i = n - num_ ; i >= num_ ; i -- ) { xmlns decl decl = ( xmlns decl ) m _prefix table . get ( i ) ; if ( decl . get prefix ( ) . equals ( new decl . get prefix ( ) ) ) { return ; } } m _prefix table . add ( new decl ) ; }
public static void not empty ( object [ ] arr , string name ) { not null ( arr , name ) ; if ( arr . length == num_ ) throw new illegal argument exception ( invali d_ ar g_ ms g_ prefix + name + no t_ empt y_ suffix ) ; }
public j radio button ( string text , boolean selected ) { this ( text , null , selected ) ; }
protected void after downstream ( ) { }
public void build index ( ) throws exception { log . info ( str_ , nu m_ docs ) ; long long value = ma x_ long ; for ( int i = num_ ; i <= nu m_ docs ; i ++ ) { final string str value = str_ + long value ; index doc ( sdoc ( str_ , str_ + i , str_ , str_ + i , str_ , str_ + hasher . hash int ( i ) . as long ( ) , str_ , str_ + long value , str_ , str_ + hasher . hash long ( long value ) . as long ( ) , str_ , str value , str_ , str_ + hasher . hash string ( str value ) . as long ( ) ) ) ; long value -= bi g_ prime ; } commit ( ) ; }
operation completion rs assign users ( string project name , string modifier , assign users rq assign users rq ) ;
public boolean is first upload repeat ( ) throws illegal access exception { return m first upload repeat . get boolean ( m repeat wrapper ) ; }
public double local score ( int i , int ... parents ) { conditional gaussian likelihood . ret ret = likelihood . get likelihood ratio ( i , parents ) ; int n = data set . get num rows ( ) ; double lik = ret . get lik ( ) ; int k = ret . get dof ( ) ; double prior = get structure prior ( parents ) ; return num_ * lik - k * math . log ( n ) + prior ; }
void datapoint added ( ) ;
private static triangulation point next flip point ( triangulation point ep , triangulation point eq , delaunay triangle ot , triangulation point op ) { orientation o 2d = orient 2d ( eq , op , ep ) ; if ( o 2d == orientation . cw ) { return ot . point ccw ( op ) ; } else if ( o 2d == orientation . ccw ) { return ot . point cw ( op ) ; } else { throw new point on edge exception ( str_ ) ; } }
public boolean is exportable ( ) { return is exportable ; }
public void remove on video size changed listener ( ) { m on video size changed listener = null ; m window . remove callback ( this ) ; m window . detach views ( ) ; }
protected misc ( ) { }
public void start ( ) { gps battery manager . start ( ) ; }
public vector 2 sub ( vector 2 v ) { x -= v . x ; y -= v . y ; return this ; }
public void run test ( ) throws throwable { document doc ; node list element list ; node test employee ; string name ; doc = ( document ) load ( str_ , bool_ ) ; element list = doc . get elements by tag name ( str_ ) ; test employee = element list . item ( num_ ) ; name = test employee . get node name ( ) ; assert equals ( str_ , str_ , name ) ; name = ( ( element ) test employee ) . get tag name ( ) ; assert equals ( str_ , str_ , name ) ; }
private static void add initiator ( map < string , initiator > initiator map , map < string , set < string > > director to initiators , map < string , uri > initiator id to network , string director , string wwn , string net ) { initiator initiator = new initiator ( ) ; initiator . set id ( uri . create ( director + str_ + wwn ) ) ; initiator . set label ( director + str_ + wwn ) ; initiator . set initiator port ( wwn ) ; initiator map . put ( initiator . get id ( ) . to string ( ) , initiator ) ; if ( director to initiators . get ( director ) == null ) { director to initiators . put ( director , new hash set < string > ( ) ) ; } uri net uri = uri . create ( net ) ; director to initiators . get ( director ) . add ( initiator . get id ( ) . to string ( ) ) ; initiator id to network . put ( initiator . get id ( ) . to string ( ) , net uri ) ; }
private battle pokemon info create battle pokemon ( pokemon pokemon ) { return battle pokemon info . new builder ( ) . set current energy ( num_ ) . set current health ( num_ ) . set pokemon data ( pokemon . get default instance for type ( ) ) . build ( ) ; }
public static _ fields find by name ( string name ) { return by name . get ( name ) ; }
public dialog negative action background ( drawable drawable ) { view util . set background ( m negative action , drawable ) ; return this ; }
public criteria create criteria ( ) { criteria criteria = create criteria internal ( ) ; if ( ored criteria . size ( ) == num_ ) { ored criteria . add ( criteria ) ; } return criteria ; }
public boolean is view under ( view view , int x , int y ) { if ( view == null ) { return bool_ ; } return x >= view . get left ( ) && x < view . get right ( ) && y >= view . get top ( ) && y < view . get bottom ( ) ; }
public hash code hash ( hash function hash function ) throws io exception { hasher hasher = hash function . new hasher ( ) ; copy to ( funnels . as output stream ( hasher ) ) ; return hasher . hash ( ) ; }
public mlt result like ( string [ ] fields , reader reader ) throws io exception { return like ( null , fields , reader ) ; }
public static referrer construct valid referrer for authority ( string authority ) { return new referrer ( new uri . builder ( ) . scheme ( androi d_ ap p_ referre r_ scheme ) . authority ( authority ) . build ( ) . to string ( ) , referrer . referre r_ polic y_ default ) ; }
public brd area ( pla area p _area , int p _layer _no , pla vector int p _translation , int p _rotation _in _degree , boolean p _side _changed , net nos list p _net _no _arr , int p _clearance _type , int p _id _no , int p _cmp _no , string p _name , item fix state p _fixed _state , routing board p _board ) { super ( p _net _no _arr , p _clearance _type , p _id _no , p _cmp _no , p _fixed _state , p _board ) ; relative _area = p _area ; layer _no = p _layer _no ; translation = p _translation ; rotation _in _degree = p _rotation _in _degree ; side _changed = p _side _changed ; area _name = p _name ; }
public boolean omit article ( article . article field field , article a ) { boolean ret = bool_ ; switch ( field ) { case id : case updated : if ( a . id > num_ && a . updated != null ) { long updated = id updated map . get ( a . id ) ; if ( updated != null && a . updated . get time ( ) <= updated ) { omitted articles . add ( a . id ) ; ret = bool_ ; } } default : break ; } return ret ; }
public class < ? > for class ( ) { return resolved class ; }
public sql data exception ( ) { }
public void add double ( int o , double x , double d ) { if ( force _defaults || x != d ) { add double ( x ) ; slot ( o ) ; } }
int compare to ( t another ) ;
protected void request pass code confirmation ( ) { clear boxes ( ) ; m pass code hdr . set text ( r . string . pass _code _reenter _your _pass _code ) ; m pass code hdr explanation . set visibility ( view . invisible ) ; m confirming pass code = bool_ ; }
private map < string , integer > find language fallbacks ( final service params params ) { list < term node > param nodes = params . get ( languag e_ param ) ; if ( param nodes . size ( ) < num_ ) { throw new illegal argument exception ( str_ ) ; } map < string , integer > fallbacks map = new hash map < > ( ) ; int cnt = num_ ; for ( term node term : param nodes ) { if ( term . is variable ( ) ) { throw new illegal argument exception ( str_ ) ; } final value v = term . get value ( ) ; if ( ! ( v instanceof literal ) ) { throw new illegal argument exception ( str_ ) ; } final string s = v . string value ( ) ; if ( s . contains ( str_ ) ) { for ( string ls : s . split ( str_ ) ) { fallbacks map . put ( ls . trim ( ) , cnt ) ; ++ cnt ; } } else { fallbacks map . put ( s . trim ( ) , cnt ) ; } ++ cnt ; } return fallbacks map ; }
public static final abstract tracker maybe get tracker ( int tracker id ) { return tracker list [ tracker id ] ; }
static audit log filter new event type filter ( string event type , audit log filter filter ) { return new event type filter ( event type , filter ) ; }
void decode attribute body ( byte [ ] attribute value , char offset , char length ) throws stun exception { this . attribute value = new byte [ length ] ; system . arraycopy ( attribute value , offset , this . attribute value , num_ , length ) ; }
public void add cc ( cc cc ) { get ccs ( ) . add ( cc ) ; }
public static mouse listener remove ( mouse listener l , mouse listener oldl ) { return ( mouse listener ) remove internal ( l , oldl ) ; }
public static void assert struct name ( string struct name ) throws xmp exception { if ( struct name == null || struct name . length ( ) == num_ ) { throw new xmp exception ( str_ , xmp error . badparam ) ; } }
void add single ( component component ) ;
alarm manager ( i alarm manager service ) { m service = service ; }
public void test _spans _will _ingore _parameters _when _asked _to ( ) { do spans test ( new mime type ( str_ ) , new mime type ( str_ ) , bool_ ) ; }
public synthetic method binding ( method binding overriden method to bridge , method binding target method , source type binding declaring class ) { this . declaring class = declaring class ; this . selector = overriden method to bridge . selector ; this . modifiers = ( target method . modifiers | class file constants . acc bridge | class file constants . acc synthetic ) & ~ ( class file constants . acc synchronized | class file constants . acc abstract | class file constants . acc native | class file constants . acc final | extra compiler modifiers . acc generic signature ) ; this . tag bits |= ( tag bits . annotation resolved | tag bits . deprecated annotation resolved ) ; this . return type = overriden method to bridge . return type ; this . parameters = overriden method to bridge . parameters ; this . thrown exceptions = overriden method to bridge . thrown exceptions ; this . target method = target method ; this . purpose = synthetic method binding . bridge method ; synthetic method binding [ ] known access methods = declaring class . synthetic methods ( ) ; int method id = known access methods == null ? num_ : known access methods . length ; this . index = method id ; }
package type ( package type parent , string path ) { this ( parent + str_ + path ) ; }
public double vector plus ( double x ) { return copy ( ) . plus equals ( x ) ; }
protected void initialize parser ( ) { arg parser = new install ds argument parser ( install ds . class . get name ( ) ) ; try { arg parser . initialize arguments ( ) ; } catch ( argument exception ae ) { localizable message message = er r_ canno t_ initializ e_ args . get ( ae . get message ( ) ) ; system . out . println ( message ) ; } }
public boolean is mutable ( ) ;
public static http url connection to http connection ( collection < request > requests ) { validate . not empty and contains no nulls ( requests , str_ ) ; return to http connection ( new request batch ( requests ) ) ; }
public builder ( string token ) { this . token = token ; root = new hash map < > ( ) ; aps = new hash map < > ( ) ; alert = new hash map < > ( ) ; }
public void connection open ( ) { lock . lock ( ) ; try { log . info ( str_ ) ; connection open = bool_ ; } finally { lock . unlock ( ) ; } }
public static i classpath entry find raw classpath entry for ( i java project java project , string fully qualified name ) throws java model exception { i type type = java project . find type ( fully qualified name ) ; if ( type != null ) { i package fragment root package fragment root = ( i package fragment root ) type . get ancestor ( i java element . packag e_ fragmen t_ root ) ; java project j project = ( java project ) java project ; i classpath entry [ ] raw classpath = java project . get raw classpath ( ) ; for ( i classpath entry raw classpath entry : raw classpath ) { i classpath entry [ ] resolved classpath = j project . resolve classpath ( new i classpath entry [ ] { raw classpath entry } ) ; i package fragment root [ ] compute package fragment roots = j project . compute package fragment roots ( resolved classpath , bool_ , null ) ; if ( arrays . as list ( compute package fragment roots ) . contains ( package fragment root ) ) { return raw classpath entry ; } } return package fragment root . get raw classpath entry ( ) ; } return null ; }
public com . sun . identity . liberty . ws . common . jaxb . xmlsig . canonicalization method type create canonicalization method type ( ) throws javax . xml . bind . jaxb exception { return new com . sun . identity . liberty . ws . common . jaxb . xmlsig . impl . canonicalization method type impl ( ) ; }
private void before moving to primary ( ) throws space components initialize exception { switch ( _space mode ) { case none : init primary only components ( ) ; init backup components ( ) ; break ; case backup : init primary only components ( ) ; break ; } }
private void form window closed ( java . awt . event . window event evt ) { save settings ( ) ; system . exit ( num_ ) ; }
public void test _get name ( ) { try { mock attributed character iterator attribute mac 1 = new mock attributed character iterator attribute ( str_ ) ; assert equals ( str_ , str_ , mac 1 . get name ( ) ) ; } catch ( exception e ) { fail ( str_ + e . to string ( ) ) ; } }
public long add ( long instant , long amount ) { instant = super . add ( instant , amount ) ; field utils . verify value bounds ( this , get ( instant ) , i min , i max ) ; return instant ; }
private boolean contains null value ( ) { int entry < value > tab [ ] = table ; for ( int i = num_ ; i < tab . length ; i ++ ) for ( int entry < value > e = tab [ i ] ; e != null ; e = e . next ) if ( e . value == null ) return bool_ ; return bool_ ; }
public abstract byte execute ( string name vec , r environment env , string mode , boolean inherits ) ;
public adapter layout delegate ( view group view group ) { m view group = view group ; }
void show google shopper button ( view . on click listener listener ) { view shopper button = activity . find view by id ( fake r . get id ( str_ , str_ ) ) ; shopper button . set visibility ( view . visible ) ; shopper button . set on click listener ( listener ) ; }
public anonymous _invariant _ 2 _ create anonymous _invariant _ 2 _ ( ) { anonymous _invariant _ 2 _ impl anonymous _invariant _ 2 _ = new anonymous _invariant _ 2 _ impl ( ) ; return anonymous _invariant _ 2 _ ; }
public void dispose ( ) { p _pos = null ; }
public static string generate temp file at external storage ( string folder , string prefix , string ext ) { file file = generate file on external storage ( folder , prefix , ext ) ; if ( file == null ) return null ; return uri . from file ( file ) . get path ( ) ; }
public app test ( string test name ) { super ( test name ) ; }
static boolean is accessible ( final member m ) { return m != null && modifier . is public ( m . get modifiers ( ) ) && ! member utils . is synthetic ( m ) ; }
public synchronized void add frame ( final image image , final long frame duration ) { total duration += frame duration ; frames . add ( new anim frame ( image , total duration ) ) ; }
public ha pbrpc exception ( string arg 0 , throwable arg 1 ) { super ( arg 0 , arg 1 ) ; }
public concurrent skip list map ( sorted map < k , ? extends v > m ) { this . comparator = m . comparator ( ) ; initialize ( ) ; build from sorted ( m ) ; }
public void test remove named item n s1 ( ) throws throwable { document doc ; named node map attributes ; node element ; attr attribute ; node list element list ; doc = ( document ) load ( str_ , builder ) ; element list = doc . get elements by tag name ns ( str_ , str_ ) ; element = element list . item ( num_ ) ; attributes = element . get attributes ( ) ; attribute = ( attr ) attributes . remove named item ns ( str_ , str_ ) ; attribute = ( attr ) attributes . get named item ns ( str_ , str_ ) ; assert null ( str_ , attribute ) ; }
protected boolean index expression matches ( expression node index expression , expression node comparison operand ) { if ( index expression . equals ( comparison operand ) ) return bool_ ; if ( ! ( index expression instanceof column expression ) || ! ( comparison operand instanceof column expression ) ) return bool_ ; if ( get column equivalencies ( ) . are equivalent ( ( column expression ) index expression , ( column expression ) comparison operand ) ) return bool_ ; column expression comparison column = ( column expression ) comparison operand ; column source comparison table = comparison column . get table ( ) ; if ( ! ( comparison table instanceof subquery source ) ) return bool_ ; subquery subquery = ( ( subquery source ) comparison table ) . get subquery ( ) ; if ( subquery != query goal . get query ( ) ) return bool_ ; plan node input = subquery . get query ( ) ; if ( input instanceof result set ) input = ( ( result set ) input ) . get input ( ) ; if ( ! ( input instanceof project ) ) return bool_ ; project project = ( project ) input ; expression node inside expression = project . get fields ( ) . get ( comparison column . get position ( ) ) ; return index expression matches ( index expression , inside expression ) ; }
protected url fix edit url ( url url ) throws malformed url exception { return fix edit url ( url . to external form ( ) ) ; }
public void add pie segment ( int data index , float value , float start angle , float angle ) { m pie segment list . add ( new pie segment ( data index , value , start angle , angle ) ) ; }
void add scrap view ( view scrap , int position , int view type ) { if ( view type count == num_ ) { current scrap views . put ( position , scrap ) ; } else { scrap views [ view type ] . put ( position , scrap ) ; } if ( build . version . sd k_ int >= build . versio n_ codes . ic e_ crea m_ sandwich ) { scrap . set accessibility delegate ( null ) ; } }
public static string transform file name ( string from , string to , file file ) { return transform file name ( from , to , file , defaul t_ wil d_ card ) ; }
default boolean is empty ( ) { return this . size ( ) == num_ ; }
protected enter state impl ( ) { super ( ) ; }
public static void read ( board frame p _board _frame , itera board p _board _handling , input stream p _input _stream ) throws io exception { gui config scanner scanner = new gui config scanner ( new input stream reader ( p _input _stream ) ) ; gui config file config _file = new gui config file ( p _board _frame , p _board _handling , scanner , null ) ; config _file . read _defaults _scope ( ) ; }
public long put ( long key , long value ) { long previous = num_ ; int index = insertion index ( key ) ; boolean is new mapping = bool_ ; if ( index < num_ ) { index = - index - num_ ; previous = _values [ index ] ; is new mapping = bool_ ; } byte previous state = _states [ index ] ; _set [ index ] = key ; _states [ index ] = full ; _values [ index ] = value ; if ( is new mapping ) { post insert hook ( previous state == free ) ; } return previous ; }
public static view drag helper create ( view group for parent , callback cb ) { return new view drag helper ( for parent . get context ( ) , for parent , cb ) ; }
protected svgom glyph ref element ( ) { }
protected json deserializer < object > find deserializer ( deserialization config config , deserializer provider provider , java type type , bean property property ) throws json mapping exception { json deserializer < object > deser = provider . find value deserializer ( config , type , property ) ; return deser ; }
private void compare indexed graphs ( graph < number , number > g 1 , graph < number , number > g 2 ) { int n 1 = g 1 . get vertex count ( ) ; int n 2 = g 2 . get vertex count ( ) ; assert equals ( n 1 , n 2 ) ; assert equals ( g 1 . get edge count ( ) , g 2 . get edge count ( ) ) ; list < number > id 1 = new array list < number > ( g 1 . get vertices ( ) ) ; list < number > id 2 = new array list < number > ( g 2 . get vertices ( ) ) ; for ( int i = num_ ; i < n 1 ; i ++ ) { number v 1 = id 1 . get ( i ) ; number v 2 = id 2 . get ( i ) ; assert not null ( v 1 ) ; assert not null ( v 2 ) ; check sets ( g 1 . get predecessors ( v 1 ) , g 2 . get predecessors ( v 2 ) , id 1 , id 2 ) ; check sets ( g 1 . get successors ( v 1 ) , g 2 . get successors ( v 2 ) , id 1 , id 2 ) ; } }
public final static boolean is java like file name ( char [ ] file name ) { if ( file name == null ) return bool_ ; int file name length = file name . length ; char [ ] [ ] java like extensions = get java like extensions ( ) ; extensions : for ( int i = num_ , length = java like extensions . length ; i < length ; i ++ ) { char [ ] extension = java like extensions [ i ] ; int extension length = extension . length ; int extension start = file name length - extension length ; if ( extension start - num_ < num_ ) continue ; if ( file name [ extension start - num_ ] != str_ ) continue ; for ( int j = num_ ; j < extension length ; j ++ ) { if ( file name [ extension start + j ] != extension [ j ] ) continue extensions ; } return bool_ ; } return bool_ ; }
public ixml element create element ( string full name , string system id , int line nr ) ;
private static string strip extension ( string filename ) { return filename . replace first ( str_ , str_ ) ; }
public model validate node ( dataset dataset , uri shapes graph uri , node focus node , resource min severity , predicate < sh constraint > constraint filter , function < rdf node , string > label function , progress monitor monitor ) throws interrupted exception { model results = jena util . create memory model ( ) ; model shapes model = dataset . get named model ( shapes graph uri . to string ( ) ) ; list < property > properties = shacl util . get all constraint properties ( bool_ ) ; resource resource = ( resource ) dataset . get default model ( ) . as rdf node ( focus node ) ; set < resource > shapes = get shapes for resource ( resource , dataset , shapes model ) ; for ( resource shape : shapes ) { if ( monitor != null && monitor . is canceled ( ) ) { throw new interrupted exception ( ) ; } add resource violations ( dataset , shapes graph uri , focus node , shape . as node ( ) , properties , min severity , constraint filter , results , label function , monitor ) ; } return results ; }
public boolean reset ( bookmark id id , string title , string url , boolean is editable , boolean is managed ) { jump drawables to current state ( ) ; if ( m id != null && m id . equals ( id ) && text utils . equals ( title , m title ) && text utils . equals ( url , m url ) && is editable == m is editable && is managed == m is managed ) { return bool_ ; } m title = title ; m url = url ; m is folder = text utils . is empty ( m url ) ; m is editable = is editable ; m is managed = is managed ; m id = id ; set text ( m title ) ; set favicon ( null ) ; if ( m is folder ) { set content description ( get resources ( ) . get string ( r . string . accessibility _bookmark _folder , m title ) ) ; } return bool_ ; }
public native record list intersect ( record list list ) ;
public void write to ( final output stream out , long position , long length ) throws io exception { while ( length > num_ ) { final int index = index ( position ) ; final int offset = offset ( position ) ; final block block = blocks . get ( index ) ; final int amount = ( int ) math . min ( block . data . length - offset , length ) ; out . write ( block . data , offset , amount ) ; position += amount ; length -= amount ; } }
public program rewriter ( hop rewrite rule rewrite ) { _dag rule set = new array list < hop rewrite rule > ( ) ; _dag rule set . add ( rewrite ) ; _sb rule set = new array list < statement block rewrite rule > ( ) ; }
public boolean last exists ( ) { return last existing idx == ids . length - num_ ; }
public static final number sum ( number [ ] vals ) { try { double sum = num_ ; for ( int i = num_ ; i < vals . length ; i ++ ) { sum = sum + vals [ i ] . double value ( ) ; } return double . value of ( sum ) ; } catch ( virtual machine error err ) { system failure . initiate failure ( err ) ; throw err ; } catch ( throwable t ) { system failure . check failure ( ) ; return null ; } }
public enumeration < option > list options ( ) { vector < option > new vector = new vector < option > ( num_ ) ; new vector . add element ( new option ( str_ + str_ , str_ , num_ , str_ ) ) ; new vector . add all ( collections . list ( super . list options ( ) ) ) ; return new vector . elements ( ) ; }
private int to even ( float value ) { int i = ( int ) ( value + num_ ) ; if ( i % num_ == num_ ) { return i - num_ ; } return i ; }
public void test get ( ) { final range range = create range ( num_ , num_ ) ; for ( int i = num_ ; i <= num_ ; i ++ ) { assert equals ( str_ + i , create value ( i + num_ ) , range . get ( i ) ) ; } }
public mock response ( ) { set body ( new byte [ num_ ] ) ; }
public static wkt geometry create empty ( wkt type wkt type ) { wkt geometry wkt geometry = new wkt geometry ( ) ; wkt geometry . set geometry type ( wkt type ) ; return wkt geometry ; }
boolean wait output stream completion ( long time milliseconds ) throws active mq exception ;
protected abstract array adapter ( ) { this . items = ( t [ ] ) objects ; }
final boolean should encrypt ( ) { return should encrypt ; }
public void compact buffer ( ) { if ( offset != buffer . length ) { byte [ ] new buffer = new byte [ offset ] ; system . arraycopy ( buffer , num_ , new buffer , num_ , offset ) ; buffer = new buffer ; } }
void accept field ( char [ ] declaring type package name , char [ ] declaring type name , char [ ] name , boolean is declaration , char [ ] unique key , int start , int end ) ;
public final string yytext ( ) { return new string ( zz buffer , zz start read , zz marked pos - zz start read ) ; }
public int port ( properties props ) { return integer . parse int ( props . get property ( por t_ propert y_ key , str_ ) ) ; }
public static string time stamp to string ( timestamp stamp , time zone tz , locale locale ) { return time stamp to string ( stamp , null , tz , locale ) ; }
protected boolean is image wrap crop bounds ( ) { return is image wrap crop bounds ( m current image corners ) ; }
private figure read path element ( ixml element elem ) throws io exception { hash map < attribute key , object > a = new hash map < attribute key , object > ( ) ; read core attributes ( elem , a ) ; read transform attribute ( elem , a ) ; read opacity attribute ( elem , a ) ; read shape attributes ( elem , a ) ; bezier path [ ] beziers = to path ( elem , read attribute ( elem , str_ , str_ ) ) ; figure figure = factory . create path ( beziers , a ) ; element objects . put ( elem , figure ) ; return figure ; }
private static void extract ( string s , int start , extract float result result ) { int current index = start ; boolean found separator = bool_ ; result . m end with neg sign = bool_ ; for ( ; current index < s . length ( ) ; current index ++ ) { char current char = s . char at ( current index ) ; switch ( current char ) { case str_ : case str_ : found separator = bool_ ; break ; case str_ : if ( current index != start ) { found separator = bool_ ; result . m end with neg sign = bool_ ; } break ; } if ( found separator ) { break ; } } result . m end position = current index ; }
public static void write pbs entry packet ( pbs output stream output , pbs entry packet pbs entry ) { byte [ ] array = pbs entry . get stream bytes ( ) ; output . write ( array , num_ , array . length ) ; write dynamic properties ( output , pbs entry . get dynamic properties ( ) ) ; }
public void run in render thread ( runnable r ) ;
public static long encode as long ( int high , int low ) { long key = high | num_ ; key <<= num_ ; long low long = low & num_ ; key |= low long ; return key ; }
public com . sun . identity . wsfederation . jaxb . wsaddr . metadata element create metadata element ( ) throws javax . xml . bind . jaxb exception { return new com . sun . identity . wsfederation . jaxb . wsaddr . impl . metadata element impl ( ) ; }
public static void tag selected nodes ( final j frame parent , final zy graph graph , final c tag tag ) { final collection < navi node > selected nodes = graph . get selected nodes ( ) ; try { for ( final navi node node : selected nodes ) { node . get raw node ( ) . tag node ( tag ) ; } } catch ( final couldnt save data exception e ) { c utility functions . log exception ( e ) ; final string inner message = str_ + str_ ; final string inner description = c utility functions . create description ( string . format ( str_ , tag . get name ( ) ) , new string [ ] { str_ } , new string [ ] { str_ } ) ; navi error dialog . show ( parent , inner message , inner description , e ) ; } }
enquire link enquire link ( byte [ ] b ) ;
private void do reverse knn ( rd knn node node , dbid oid , modifiable double dbid list result ) { if ( node . is leaf ( ) ) { for ( int i = num_ ; i < node . get num entries ( ) ; i ++ ) { rd knn leaf entry entry = ( rd knn leaf entry ) node . get entry ( i ) ; double distance = distance query . distance ( entry . get dbid ( ) , oid ) ; if ( distance <= entry . get knn distance ( ) ) { result . add ( distance , entry . get dbid ( ) ) ; } } } else { for ( int i = num_ ; i < node . get num entries ( ) ; i ++ ) { rd knn directory entry entry = ( rd knn directory entry ) node . get entry ( i ) ; double min dist = distance query . min dist ( entry , oid ) ; if ( min dist <= entry . get knn distance ( ) ) { do reverse knn ( get node ( entry ) , oid , result ) ; } } } }
protected void join rows ( map < string , object > row ) { map < string , object > join = new hash map < > ( ) ; if ( row != null ) { for ( index index : table 1 columns ) { index . filter ( row , join ) ; } } outport . emit ( join ) ; }
private void init ( thread group g , runnable target , string name , long stack size ) { init ( g , target , name , stack size , null ) ; }
t obtain ( p p ) ;
public void mark as non null ( ) { this . bits |= ast node . is non null ; }
public final native boolean is active ( ) ;
public e next ( ) ;
public boolean is enum ( ) { return ( this . get modifiers ( ) & enum ) != num_ && this . get superclass ( ) == java . lang . enum . class ; }
private static set < string > execute query ( ) throws exception { connection conn = null ; statement stmt = null ; result set rs = null ; try { conn = ds . get connection ( ) ; stmt = conn . create statement ( ) ; string sql query = create sql query ( ) ; rs = stmt . execute query ( sql query ) ; return read ( rs ) ; } finally { close result set ( rs ) ; close statement ( stmt ) ; close connection ( conn ) ; } }
public void close ( ) throws io exception { try { in . close ( ) ; } finally { if ( ! finalized ) { finalise cipher ( ) ; } } max buf = buf off = num_ ; mark buf off = num_ ; mark position = num_ ; if ( mark buf != null ) { arrays . fill ( mark buf , ( byte ) num_ ) ; mark buf = null ; } if ( buf != null ) { arrays . fill ( buf , ( byte ) num_ ) ; buf = null ; } arrays . fill ( in buf , ( byte ) num_ ) ; }
protected instance filter instance ( instance instance ) throws exception { if ( m _ filter . num pending output ( ) > num_ ) { throw new exception ( str_ ) ; } if ( ! m _ filter . input ( instance ) ) { if ( ! m _ filter . may remove instance after first batch done ( ) ) { throw new exception ( str_ + str_ ) ; } else { m _ filter . batch finished ( ) ; return null ; } } m _ filter . batch finished ( ) ; return m _ filter . output ( ) ; }
public void init ( int mode , byte [ ] key , byte [ ] iv ) { context = open ssl native . init ( context , mode , algorithm , padding , key , iv ) ; }
protected int save new _get id ( ) { if ( get _ id ( ) < num_ ) return get _ id ( ) ; return num_ ; }
private problem instantiate problem ( problem provider provider , string name ) { try { return provider . get problem ( name ) ; } catch ( service configuration error e ) { system . err . println ( e . get message ( ) ) ; } return null ; }
public static int compute 2 ( int x ) { int loops = ( x > > > num_ ) & num_ ; while ( loops -- > num_ ) { x = ( x * num_ ) % num_ ; } return x ; }
public static initializer constant ( int i ) { return new int initializer ( i ) ; }
public final static version info [ ] load version info ( string [ ] pckgs , class loader clsldr ) { if ( pckgs == null ) { throw new illegal argument exception ( str_ ) ; } array list vil = new array list ( pckgs . length ) ; for ( int i = num_ ; i < pckgs . length ; i ++ ) { version info vi = load version info ( pckgs [ i ] , clsldr ) ; if ( vi != null ) vil . add ( vi ) ; } return ( version info [ ] ) vil . to array ( new version info [ vil . size ( ) ] ) ; }
public void increment in use count ( ) { m in use length ++ ; }
public elem template element append child ( elem template element new child ) { error ( xslt error resources . e r_ canno t_ add , new object [ ] { new child . get node name ( ) , this . get node name ( ) } ) ; return null ; }
public item builder material ( final item stack src ) { this . item stack . set material ( src . get material ( ) ) ; return this ; }
public static void register fuel ( item stack stack , int duration ) { register fuel ( stack , bool_ , duration ) ; }
void add user identity link ( string task id , string user id , string identity link type ) ;
public void test do check with empty elements ( ) { logger . debug ( str_ ) ; text belongs to black list checker instance = new text belongs to black list checker ( mock text element builder , blacklis t_ no m_ name , detectio n_ msg ) ; replay ( mock text element builder , mock ssp handler , mock test solution handler ) ; instance . do check ( mock ssp handler , elements , mock test solution handler ) ; verify ( mock text element builder , mock ssp handler , mock test solution handler ) ; }
public void stop ( ) throws interrupted exception { if ( finished ) return ; cancelled = bool_ ; try { thd . interrupt ( ) ; thd . join ( num_ ) ; thd = null ; } catch ( interrupted exception e ) { logger . warn ( str_ ) ; if ( thd != null ) thd . join ( ) ; } }
public significant terms builder exclude ( long [ ] terms ) { if ( exclude pattern != null ) { throw new illegal argument exception ( str_ ) ; } this . exclude terms = longs arr to string arr ( terms ) ; return this ; }
public void config ( window window ) { if ( measured width == - num_ ) { if ( build . version . sd k_ int >= build . versio n_ codes . honeycom b_ m r2 ) { point size = new point ( ) ; window . get window manager ( ) . get default display ( ) . get size ( size ) ; measured width = size . x ; } else { measured width = window . get window manager ( ) . get default display ( ) . get width ( ) ; } } if ( measured height == - num_ ) { if ( build . version . sd k_ int >= build . versio n_ codes . honeycom b_ m r2 ) { point size = new point ( ) ; window . get window manager ( ) . get default display ( ) . get size ( size ) ; measured height = size . y ; } else { measured height = window . get window manager ( ) . get default display ( ) . get height ( ) ; } } }
public void handle tbl charset alias href action request ( request invocation event event ) throws model control exception { try { map values = get values ( ) ; on before save profile ( values ) ; set page session attribute ( propert y_ attribute , ( hash map ) values ) ; g 1 1 n charset alias edit view bean vb = ( g 1 1 n charset alias edit view bean ) get view bean ( g 1 1 n charset alias edit view bean . class ) ; unlock page trail ( ) ; pass pg session map ( vb ) ; vb . populate values ( ( string ) get display field value ( str_ ) ) ; vb . forward to ( get request context ( ) ) ; } catch ( am console exception e ) { set inline alert message ( cc alert . typ e_ error , str_ , e . get message ( ) ) ; } }
list < book > filter out stuff ( list < book > original books ) { return original books ; }
public void load ( element element , object o ) { log . error ( str_ ) ; }
public void test prefix chain ( ) throws exception { assert jq ( req ( str_ , str_ , str_ , str_ , str_ , str_ ) , str_ ) ; assert jq ( req ( str_ , str_ , str_ , str_ , str_ , str_ ) , str_ ) ; assert jq ( req ( str_ , str_ , str_ , str_ , str_ , str_ ) , str_ ) ; assert jq ( req ( str_ , str_ , str_ , str_ , str_ , str_ ) , str_ ) ; }
public void test create container when valid container id but invalid type ( ) { factory . register container ( str_ , container type . embedded , embedded local container stub . class ) ; try { factory . create container ( str_ , container type . installed , null ) ; fail ( str_ ) ; } catch ( container exception expected ) { assert equals ( str_ + str_ + str_ , expected . get message ( ) ) ; } }
string translate locale ( payment gateway payment gateway , string locale ) ;
public binary point ( string name , byte [ ] ... point ) { super ( name , pack ( point ) , get type ( point ) ) ; }
public static string bytes to hex ( byte [ ] bytes ) { return to hex ( bytes ) ; }
public double read double ( ) { return scanner . next double ( ) ; }
public boolean is no rtsp streaming ( ) { return no rtsp streaming ; }
private void reset ( ) { init view ( ) ; remove all views in layout ( ) ; request layout ( ) ; }
public object run safely ( catbert . fast stack stack ) throws exception { long stop = get long ( stack ) ; long start = get long ( stack ) ; return seeker . get instance ( ) . get scheduled airings for source ( get string ( stack ) , start , stop ) ; }
public boolean is opt out ( ) { synchronized ( opt out lock ) { try { configuration . load ( get config file ( ) ) ; } catch ( io exception ex ) { if ( debug ) { bukkit . get logger ( ) . log ( level . info , str_ + ex . get message ( ) ) ; } return bool_ ; } catch ( invalid configuration exception ex ) { if ( debug ) { bukkit . get logger ( ) . log ( level . info , str_ + ex . get message ( ) ) ; } return bool_ ; } return configuration . get boolean ( str_ , bool_ ) ; } }
protected abstract void emit _return ( ) ;
public void invalidate views ( ) { m data changed = bool_ ; remember sync state ( ) ; request layout ( ) ; invalidate ( ) ; }
protected object insert edge ( object parent , string id , object value , object source , object target ) { return graph component . get graph ( ) . insert edge ( parent , id , value , source , target ) ; }
void shrink ( ) { int n = m _op map . element at ( mapinde x_ length ) ; m _op map . set to size ( n + num_ ) ; m _op map . set element at ( num_ , n ) ; m _op map . set element at ( num_ , n + num_ ) ; m _op map . set element at ( num_ , n + num_ ) ; n = m _token queue . size ( ) ; m _token queue . set to size ( n + num_ ) ; m _token queue . set element at ( null , n ) ; m _token queue . set element at ( null , n + num_ ) ; m _token queue . set element at ( null , n + num_ ) ; }
public void move ( int start top , int final top , int milliseconds ) { this . start top = start top ; this . final top = final top ; run ( milliseconds ) ; }
private void update progress ( int progress ) { if ( my host != null && progress != previous progress ) { my host . update progress ( progress ) ; } previous progress = progress ; }
public boolean is certificate related tsl well signed ( final string dss certificate id ) { certificate wrapper certificate = get used certificate by id null safe ( dss certificate id ) ; return certificate . is certificate related tsl well signed ( ) ; }
public static transaction create fake tx without change ( final network parameters params , final transaction output output ) { transaction prev tx = fake tx builder . create fake tx ( params , coin . coin , new ec key ( ) . to address ( params ) ) ; transaction tx = new transaction ( params ) ; tx . add output ( output ) ; tx . add input ( prev tx . get output ( num_ ) ) ; return tx ; }
public visibility animator ( ) { super ( ) ; }
public void shrink to min score ( int min score ) ;
public boolean is invert ( ) { return m is invert ; }
protected int read ( byte [ ] buffer , int offset , int length ) throws io exception { return m tiff stream . read ( buffer , offset , length ) ; }
boolean is shifting ( ) ;
public categories add categories ( string ... categories ) { categories prop = new categories ( categories ) ; add categories ( prop ) ; return prop ; }
private static buffered image make square ( buffered image input ) { if ( input . get height ( ) == input . get width ( ) ) { return input ; } else { int max = math . max ( input . get height ( ) , input . get width ( ) ) ; int dx = ( max - input . get width ( ) ) / num_ ; int dy = ( max - input . get height ( ) ) / num_ ; return create img ( max , max , input . get type ( ) , null ) ; } }
public static char sequence to text ( lua value lua value ) { if ( lua util . is string ( lua value ) ) { return lua value . optjstring ( null ) ; } else if ( lua util . is userdata ( lua value ) ) { if ( lua value instanceof ud spannable string ) { return ( ( ud spannable string ) lua value ) . get spannable string builder ( ) ; } else if ( lua value instanceof ud unicode ) { return ( ( ud unicode ) lua value ) . to string ( ) ; } } return null ; }
public static heap buffer wrap ( byte [ ] bytes ) { return new heap buffer ( heap bytes . wrap ( bytes ) , num_ , bytes . length , bytes . length ) ; }
protected string extract exename from command string ( string cmd ) { if ( cmd . starts with ( str_ ) ) { int closing quote = cmd . index of ( str_ , num_ ) ; if ( closing quote == - num_ ) closing quote = cmd . length ( ) ; cmd = cmd . substring ( num_ , closing quote ) ; } else { int end of filename = - num_ ; for ( ; ; ) { int next space = cmd . index of ( str_ , end of filename + num_ ) ; if ( next space == - num_ ) { end of filename = - num_ ; break ; } string filename = cmd . substring ( num_ , next space ) ; if ( ! filename . to lower case ( ) . ends with ( str_ ) ) filename += str_ ; if ( new file ( filename ) . exists ( ) ) { end of filename = next space ; break ; } end of filename = next space ; } if ( end of filename != - num_ && end of filename < cmd . length ( ) ) cmd = cmd . substring ( num_ , end of filename ) ; } return cmd ; }
public static boolean add ore washer recipe ( item stack a input , int a water amount , object ... a output ) { if ( a input == null || a output == null || a output . length <= num_ || a output [ num_ ] == null ) return bool_ ; g t_ utility . remove simple i c2 machine recipe ( a input , get ore washing recipe list ( ) , null ) ; if ( ! greg tech _ api . s recipe file . get ( config categories . machines . orewashing , a input , bool_ ) ) return bool_ ; nbt tag compound t nbt = new nbt tag compound ( ) ; t nbt . set integer ( str_ , a water amount ) ; g t_ utility . add simple i c2 machine recipe ( a input , get ore washing recipe list ( ) , t nbt , a output ) ; return bool_ ; }
public big integer calculate server evidence message ( ) throws crypto exception { if ( ( this . a == null ) || ( this . m1 == null ) || ( this . s == null ) ) { throw new crypto exception ( str_ + str_ ) ; } this . m2 = sr p6 util . calculate m2 ( digest , n , a , m1 , s ) ; return m2 ; }
public void do stop ( ) { ( ( model editor ) get editor ( ) ) . stop ( ) ; }
private comparable tim sort ( object [ ] a , object [ ] work , int work base , int work len ) { this . a = a ; int len = a . length ; int tlen = ( len < num_ * initia l_ tm p_ storag e_ length ) ? len > > > num_ : initia l_ tm p_ storag e_ length ; if ( work == null || work len < tlen || work base + tlen > work . length ) { tmp = new object [ tlen ] ; tmp base = num_ ; tmp len = tlen ; } else { tmp = work ; tmp base = work base ; tmp len = work len ; } int stack len = ( len < num_ ? num_ : len < num_ ? num_ : len < num_ ? num_ : num_ ) ; run base = new int [ stack len ] ; run len = new int [ stack len ] ; }
address message ( network parameters params , byte [ ] payload , boolean parse lazy , boolean parse retain , int length ) throws protocol exception { super ( params , payload , num_ , parse lazy , parse retain , length ) ; }
public static void println ( closure self , object value ) { object owner = get closure owner ( self ) ; invoker helper . invoke method ( owner , str_ , new object [ ] { value } ) ; }
private void apply annotations ( faces context ctx , string renderer type , ui component c ) { if ( c != null && ctx != null ) { associate . get annotation manager ( ) . apply component annotations ( ctx , c ) ; if ( renderer type != null ) { render kit rk = ctx . get render kit ( ) ; renderer r = null ; if ( rk != null ) { r = rk . get renderer ( c . get family ( ) , renderer type ) ; if ( r != null ) { c . set renderer type ( renderer type ) ; associate . get annotation manager ( ) . apply renderer annotations ( ctx , r , c ) ; } } if ( ( rk == null || r == null ) && logger . is loggable ( level . fine ) ) { logger . log ( level . fine , str_ , new object [ ] { renderer type , c . get family ( ) } ) ; } } } }
public void update n clob ( string column label , n clob n clob ) throws sql exception ;
public boolean is logged in ( ) { return ( this . account != null && this . password != null && this . remotegreeting != null ) ; }
public void flush ( ) { prepare ( ) ; }
public static list < string > explode class path ( string class path ) { list < string > ret = new array list < string > ( ) ; string tokenizer tokenizer = new string tokenizer ( class path , file . path separator ) ; while ( tokenizer . has more tokens ( ) ) { string original dir = tokenizer . next token ( ) ; string canonical dir ; try { canonical dir = new file ( original dir ) . get canonical path ( ) ; ret . add ( canonical dir ) ; } catch ( io exception e ) { throw new compilation death exception ( str_ + original dir + str_ + e ) ; } } return ret ; }
public final void add to pending count ( int delta ) { u . get and add int ( this , pending , delta ) ; }
public void run ( mx graph graph , object parent , hash map < object , set < object > > roots and children ) { double initial x = num_ ; for ( object r : roots and children . key set ( ) ) { set < object > vertex set = roots and children . get ( r ) ; for ( object rc : vertex set ) { if ( ! graph . is swimlane ( rc ) ) { graph . update cell size ( rc , bool_ ) ; } } } for ( object r : roots and children . key set ( ) ) { set < object > vertex set = roots and children . get ( r ) ; array list < object > roots list = new array list < object > ( ) ; roots list . add ( r ) ; model = new mx graph hierarchy model ( this , vertex set . to array ( ) , roots list , parent , bool_ , deterministic , layout from sinks ) ; cycle stage ( parent ) ; layering stage ( ) ; crossing stage ( parent ) ; initial x = placement stage ( initial x , parent ) ; } }
public object run safely ( catbert . fast stack stack ) throws exception { sage . plugin . plugin wrapper pluggy = get plugin ( stack ) ; return pluggy == null ? str_ : pluggy . get author ( ) ; }
public static flag register exclude duplicates flag ( final c flags flags ) { return flags . register optional ( exclud e_ duplicate s_ flag , exclud e_ duplicate s_ desc ) . set category ( sensitivit y_ tuning ) ; }
public void open ( ) throws io exception { connection = new datagram socket ( ) ; connection . set so timeout ( timeout ) ; }
static void debug ( object obj , int offset , boolean new line ) { stack trace element ste = new exception ( ) . get stack trace ( ) [ num_ + offset ] ; string ste str = ste . get class name ( ) ; int ind = ste str . last index of ( str_ ) ; ste str = ste str . substring ( ind + num_ ) ; ste str += str_ + ste . get method name ( ) + str_ + ste . get line number ( ) + str_ + ( obj == null ? null : obj . to string ( ) ) ; system . err . println ( ste str ) ; }
public static void launch all ( ) { logger . info ( str_ ) ; for ( web post process web process : registered process ) { logger . info ( str_ + web process . get class ( ) . get name ( ) ) ; web process . launch ( ) ; } logger . info ( str_ ) ; }
private c global settings ( ) { }
public element store ( object o ) { double turnout signal head p = ( double turnout signal head ) o ; element element = new element ( str_ ) ; element . set attribute ( str_ , this . get class ( ) . get name ( ) ) ; element . set attribute ( str_ , p . get system name ( ) ) ; element . add content ( new element ( str_ ) . add content ( p . get system name ( ) ) ) ; store common ( p , element ) ; element . add content ( add turnout element ( p . get green ( ) , str_ ) ) ; element . add content ( add turnout element ( p . get red ( ) , str_ ) ) ; return element ; }
public protocol exception ( ) { }
private animated drawable backend create animated drawable backend mock ( final int frame count ) { final animated drawable backend mock animated drawable backend = mock ( animated drawable backend . class ) ; when ( mock animated drawable backend . get frame count ( ) ) . then return ( frame count ) ; when ( mock animated drawable backend . get width ( ) ) . then return ( num_ ) ; when ( mock animated drawable backend . get height ( ) ) . then return ( num_ ) ; return mock animated drawable backend ; }
public void start entity ( string name , xml input source xml input source , boolean literal , boolean is external ) throws io exception , xni exception { string encoding = setup current entity ( name , xml input source , literal , is external ) ; if ( f security manager != null && f entity expansion count ++ > f entity expansion limit ) { f error reporter . report error ( xml message formatter . xm l_ domain , str_ , new object [ ] { new integer ( f entity expansion limit ) } , xml error reporter . severit y_ fata l_ error ) ; f entity expansion count = num_ ; } if ( f entity handler != null ) { f entity handler . start entity ( name , f resource identifier , encoding , null ) ; } }
public builder with rationale dialog msg ( string rationale msg ) { build obj . rationale dialog msg = rationale msg ; build obj . show rationale dialog = bool_ ; return this ; }
public void delete group ( int group id , string entidad ) throws exception ;
static void check identifier ( final string name , final string msg ) { check identifier ( name , num_ , - num_ , msg ) ; }
public confirm panel ( ) { this ( bool_ , bool_ , bool_ , bool_ , bool_ , bool_ ) ; }
public string to string ( ) { string buffer buf = new string buffer ( ) ; buf . append ( get class ( ) . get name ( ) ) ; buf . append ( str_ ) ; buf . append ( capacity ( ) ) ; buf . append ( str_ ) ; buf . append ( position ( ) ) ; buf . append ( str_ ) ; buf . append ( limit ( ) ) ; return buf . to string ( ) ; }
private static final string convert ( double _latitude ) { double latitude = math . abs ( _latitude ) ; int degree = ( int ) latitude ; latitude *= num_ ; latitude -= ( degree * num_ ) ; int minute = ( int ) latitude ; latitude *= num_ ; latitude -= ( minute * num_ ) ; int milli second = ( int ) ( latitude * num_ ) ; string sb = string . value of ( degree ) + str_ + minute + str_ + milli second + str_ ; return sb ; }
static private < s > long write sp os ( final abstract triple store database , final abstract triple store statement store , final spo [ ] stmts , final int num stmts , final i written spo array callback ) { final i chunked ordered iterator < ispo > itr = new chunked array iterator < ispo > ( num stmts , stmts , null ) ; final abstract triple store sink = statement store != null ? statement store : database ; if ( log . is info enabled ( ) ) { log . info ( str_ + num stmts + str_ + ( statement store != null ? str_ : str_ ) ) ; if ( debug ) { for ( int i = num_ ; i < num stmts ; i ++ ) { log . debug ( str_ + stmts [ i ] ) ; } } } final long nwritten = database . add statements ( sink , bool_ , itr , null ) ; if ( callback != null ) { callback . did write sp os ( stmts , num stmts ) ; } return nwritten ; }
public string single ( final char sequence name ) throws io exception { final iterator < string > params = this . header ( name ) . iterator ( ) ; if ( ! params . has next ( ) ) { throw new http exception ( http url connection . htt p_ ba d_ request , string . format ( str_ , name , this . names ( ) ) ) ; } return params . next ( ) ; }
public boolean is applicable ( ) { return get viewer ( ) . get parent viewer ( ) != null && get viewer ( ) . get parent viewer ( ) . has comparable data ( ) && get viewer ( ) . get parent viewer ( ) . get selected nodes ( ) . size ( ) > num_ ; }
public static foo fetch by uuid _ last ( java . lang . string uuid , order by comparator < foo > order by comparator ) { return get persistence ( ) . fetch by uuid _ last ( uuid , order by comparator ) ; }
public privileged action exception ( exception exception ) { super ( ( throwable ) null ) ; this . exception = exception ; }
public static boolean compare len ( byte [ ] array 1 , byte [ ] array 2 , int len ) { for ( int i = num_ ; i < len ; i ++ ) { if ( array 1 [ i ] != array 2 [ i ] ) { return bool_ ; } } return bool_ ; }
protected abstract string explain mismatch ( issue issue ) ;
jc expression transform class parameter type ( parameter parameter ) { function or value decl = parameter . get model ( ) ; if ( ! ( decl . get container ( ) instanceof class ) ) { throw new bug exception ( str_ ) ; } jc expression type ; function or value attr = decl ; if ( ! decl . is transient ( attr ) ) { typed reference typed ref = get typed reference ( attr ) ; typed reference non widening typed ref = non widening type decl ( typed ref ) ; type param type = non widening type ( typed ref , non widening typed ref ) ; type = make java type ( non widening typed ref . get declaration ( ) , param type , num_ ) ; } else { type param type = decl . get type ( ) ; type = make java type ( decl , param type , num_ ) ; } return type ; }
public ads get upload url query ( vk api client client , user actor actor , ads get upload url ad format ad format ) { super ( client , str_ , string . class ) ; access token ( actor . get access token ( ) ) ; ad format ( ad format ) ; }
output stream create resource ( string resource name ) throws io exception ;
protected void remove event and set sequence id ( removed event info info , long sequence id ) { synchronized ( this ) { if ( this . last dispatched sequence id < sequence id ) { this . last dispatched sequence id = sequence id ; } } long counter = info . counter ; object key = info . key ; string r = info . region name ; try { owning queue . destroy from queue ( counter ) ; } catch ( entry not found exception enfe ) { if ( ! owning queue . destroy in progress ) { logger . error ( localized message . create ( localized strings . ha region queue _ daceremoveeventandsetsequencei d_ sinc e_ th e_ even t_ wa s_ successul y_ remove d_ b y_ tak e_ operatio n_ i t_ shoul d_ hav e_ existe d_ i n_ th e_ region ) , enfe ) ; } } if ( key == null ) { this . destroy ( counter ) ; } else { this . destroy ( counter , key , r ) ; } }
public final void offer closed read future ( ) { queue < read future > ready read futures = get ready read futures ( ) ; synchronized ( ready read futures ) { new read future ( ) . set closed ( ) ; } }
public date to date ( string iso 8 6 0 1string ) throws parse exception { if ( iso 8 6 0 1string == null ) { return null ; } date format df = new simple date format ( is o 8 6 0 1 ) ; df . set time zone ( time zone . get time zone ( str_ ) ) ; int z = iso 8 6 0 1string . index of ( str_ ) ; if ( z > num_ ) { iso 8 6 0 1string = iso 8 6 0 1string . substring ( num_ , z ) + str_ ; } try { date date = df . parse ( iso 8 6 0 1string ) ; return date ; } catch ( parse exception e ) { date format dfshort = new simple date format ( is o 8 6 0 1short ) ; dfshort . set time zone ( time zone . get time zone ( str_ ) ) ; try { return dfshort . parse ( iso 8 6 0 1string ) ; } catch ( parse exception ee ) { date format last chance = new simple date format ( java date to string format ) ; last chance . set time zone ( time zone . get time zone ( str_ ) ) ; return last chance . parse ( iso 8 6 0 1string ) ; } } }
public static void sort ( double [ ] values , int [ ] indexes ) { int i = num_ ; int count = values . length ; for ( ; i < count ; i ++ ) { if ( i == ( count - num_ ) ) return ; double v 1 = values [ i ] , v 2 = values [ i + num_ ] ; int i 1 = indexes [ i ] , i 2 = indexes [ i + num_ ] ; if ( v 1 <= v 2 ) continue ; values [ i ] = v 2 ; values [ i + num_ ] = v 1 ; indexes [ i ] = i 2 ; indexes [ i + num_ ] = i 1 ; i = - num_ ; } }
public void assign multiply ( string value ) { m shader sb . append ( m name ) . append ( str_ ) . append ( value ) . append ( str_ ) ; }
public static void assert true ( boolean condition ) { assert true ( null , condition ) ; }
public coordinate closest point ( coordinate p ) { double factor = projection factor ( p ) ; if ( factor > num_ && factor < num_ ) { return project ( p ) ; } double dist 0 = p 0 . distance ( p ) ; double dist 1 = p 1 . distance ( p ) ; if ( dist 0 < dist 1 ) return p 0 ; return p 1 ; }
public long delayacct _blkio _ticks ( ) { return long . parse long ( fields [ num_ ] ) ; }
public void test register ( ) throws exception { system . out . println ( str_ ) ; m bean server mbs = management factory . get platform m bean server ( ) ; scan manager mx bean result = scan manager . register ( mbs ) ; try { assert equals ( stopped , result . get state ( ) ) ; } finally { try { mbs . unregister m bean ( scan manager . sca n_ manage r_ name ) ; } catch ( exception x ) { system . err . println ( str_ + x ) ; } } }
public void left trim ( double second ) { trim ( second , num_ ) ; }
public boolean is set header ( ) { return this . header != null ; }
public void test on receive _start service ( ) { intent stop intent = new intent ( get context ( ) , track recording service . class ) ; get context ( ) . stop service ( stop intent ) ; assert false ( is service existed ( get context ( ) , servic e_ name ) ) ; boot receiver boot receiver = new boot receiver ( ) ; intent intent = new intent ( ) ; intent . set action ( intent . actio n_ boo t_ completed ) ; boot receiver . on receive ( get context ( ) , intent ) ; assert true ( is service existed ( get context ( ) , servic e_ name ) ) ; }
public void delivery complete ( final i mqtt delivery token token ) { logger . trace ( str_ , token . get message id ( ) ) ; }
public static list < i model meta data > read non default ( sql table , string analysis group ) throws ade exception { final list < i model meta data > res = new array list < i model meta data > ( ) ; final connection wrapper cw = new connection wrapper ( ade internal . get default connection ( ) ) ; try { final prepared statement wrapper psw = cw . prepared statement ( str_ + table + str_ ) ; psw . get prepared statement ( ) . set string ( num_ , analysis group ) ; final result set rs = psw . execute query ( ) ; while ( rs . next ( ) ) { res . add ( read meta data ( table , rs . get int ( num_ ) ) ) ; } cw . close ( ) ; } catch ( sql exception e ) { cw . failed ( e ) ; } finally { cw . quiet cleanup ( ) ; } return res ; }
public iterator iterator ( ) { return split 2index . key set ( ) . iterator ( ) ; }
public file writer with encoding ( string filename , charset encoder encoding , boolean append ) throws io exception { this ( new file ( filename ) , encoding , append ) ; }
public static tiling single tile ( string name ) { tiling ret = new tiling ( num_ , num_ ) ; ret . set at ( num_ , num_ , name ) ; return ret ; }
public boolean is view under ( view view , int x , int y ) { if ( view == null ) { return bool_ ; } return x >= view . get left ( ) && x < view . get right ( ) && y >= view . get top ( ) && y < view . get bottom ( ) ; }
public refactoring status entry ( int severity , string msg , refactoring status context context , string plugin id , int code ) { this ( severity , msg , context , plugin id , code , null ) ; }
void appended local instruction comment ( i navi code node code node , i navi instruction instruction , i comment comment ) ;
public static void main ( string ... args ) { new profiler ( ) . run ( args ) ; }
void update ( long tag id , source data tag quality quality ) ;
public vector < report > one critical entity ( entity en , int loc , boolean is rear , int damage , boolean damaged by fire ) { return critical entity ( en , loc , is rear , num_ , bool_ , bool_ , damage , damaged by fire ) ; }
protected set < string > rabbit id set ( ) { set < string > rabbit id set = new hash set < > ( ) ; for ( rabbit rabbit : rabbit cache . get rabbits ( ) ) { if ( ! rabbit . get hide on console ( ) ) { rabbit id set . add ( rabbit . get id ( ) ) ; } } return rabbit id set ; }
string from ( dbms dbms ) ;
public void init $ children ( ) { children = new ast node [ num_ ] ; }
public void run test ( ) throws throwable { document doc ; node list address list ; node test address ; named node map attributes ; doc = ( document ) load ( str_ , bool_ ) ; address list = doc . get elements by tag name ( str_ ) ; test address = address list . item ( num_ ) ; attributes = test address . get attributes ( ) ; assert size ( str_ , num_ , attributes ) ; }
public console handler ( ) { super ( system . out , new simple formatter ( ) ) ; }
public static int uninstall silent ( context context , string package name ) { return uninstall silent ( context , package name , bool_ ) ; }
list < typed region > compute partitioning ( int offset , int length ) ;
public property xml builder ( service schema service schema , am model model ) throws sms exception , sso exception { this . model = model ; this . service name = service schema . get service name ( ) ; get service resource bundle ( service schema ) ; if ( service bundle != null ) { map type to attribute schema = new hash map ( ) ; map type to attribute schema . put ( service schema . get service type ( ) , service schema . get attribute schemas ( ) ) ; } }
private void purge one ( ) { synchronized ( queue ) { weak key key = ( weak key ) queue . poll ( ) ; if ( key != null ) { super . remove ( key . get referenced ( ) ) ; } } }
public static io file filter size file filter ( long threshold ) { return new size file filter ( threshold ) ; }
private allocation debugger ( ) { log = logger factory . get logger ( get class ( ) ) ; events = new concurrent hash map < base event , info > ( ) ; }
public boolean swap ( int from r , int from c , int to r , int to c ) { if ( ! is adjacent and empty ( from r , from c , to r , to c ) ) { return bool_ ; } int tmp = board [ to r ] [ to c ] ; board [ to r ] [ to c ] = board [ from r ] [ from c ] ; board [ from r ] [ from c ] = tmp ; return bool_ ; }
public boolean is completed ( ) { return completed ; }
public final void request integ ( boolean value ) throws gss exception { if ( state == stat e_ new && is initiator ( ) ) integ state = value ; }
public static string format time ( object obj , boolean seconds ) { long time = - num_ ; if ( obj instanceof long ) { time = ( ( long ) obj ) . long value ( ) ; } else if ( obj instanceof integer ) { time = ( ( integer ) obj ) . int value ( ) ; } if ( seconds ) { return ( ( ( ( float ) time ) / num_ ) + str_ ) ; } else { return ( time + str_ ) ; } }
public boolean forward if current ( short before , string val , short after ) { int start = pos ; if ( before == a t_ leas t_ on e_ space ) { if ( ! remove space ( ) ) return bool_ ; } else remove space ( ) ; if ( ! forward if current ( val ) ) { set pos ( start ) ; return bool_ ; } if ( after == a t_ leas t_ on e_ space ) { if ( ! remove space ( ) ) { set pos ( start ) ; return bool_ ; } } else remove space ( ) ; return bool_ ; }
public static void execute ( executable pool pool , instantiator [ ] instantiators , event id event id ) { abstract op op = new register instantiators op impl ( instantiators , event id ) ; pool . execute ( op , integer . ma x_ value ) ; }
public static void clear cache ( ) { our cache . clear ( ) ; }
private result set execute query ( string query ) throws sql exception { if ( m _stmt == null ) m _stmt = m _conn . create statement ( ) ; long timein = system . current time millis ( ) ; s _logger . info ( str_ + query ) ; result set rset = m _stmt . execute query ( query ) ; long time = system . current time millis ( ) - timein ; s _logger . info ( str_ + ( time / num_ ) + str_ + ( time % num_ ) + str_ ) ; return rset ; }
public void carriage return ( ) { carriage return ( num_ , - tl ) ; }
byte sample ( int x , int y ) ;
protected final void _skip cr ( ) throws io exception { if ( _input ptr < _input end || load more ( ) ) { if ( _input buffer [ _input ptr ] == str_ ) { ++ _input ptr ; } } ++ _curr input row ; _curr input row start = _input ptr ; }
public instances retrieve instances ( ) throws exception { return retrieve instances ( m _ query ) ; }
public void test spring config ( ) throws exception { grid client configuration cfg = new file system xml application context ( gri d_ clien t_ sprin g_ config . to string ( ) ) . get bean ( grid client configuration . class ) ; assert equals ( arrays . as list ( str_ ) , new array list < > ( cfg . get servers ( ) ) ) ; assert null ( cfg . get security credentials provider ( ) ) ; collection < grid client data configuration > data cfgs = cfg . get data configurations ( ) ; assert equals ( num_ , data cfgs . size ( ) ) ; grid client data configuration data cfg = data cfgs . iterator ( ) . next ( ) ; assert equals ( str_ , data cfg . get name ( ) ) ; assert not null ( data cfg . get pinned balancer ( ) ) ; assert equals ( grid client random balancer . class , data cfg . get pinned balancer ( ) . get class ( ) ) ; assert not null ( data cfg . get affinity ( ) ) ; assert equals ( grid client partition affinity . class , data cfg . get affinity ( ) . get class ( ) ) ; }
public boolean configure ar scene ( ) { return bool_ ; }
public void to epl ( string writer writer , expression precedence enum parent precedence ) ;
private static boolean check play services ( context context ) { return bool_ ; }
public closeable iterator < index store entry > iterator ( object start , boolean start inclusive , object end , boolean end inclusive , collection keys to remove ) ;
public simple image content proposal label provider ( image descriptor image descriptor ) { this . image = image descriptor . create image ( ) ; }
public void add android event listener ( android event listener listener ) { synchronized ( android event listeners ) { android event listeners . add ( listener ) ; } }
public awareness awareness ( ) { return awareness ; }
public xmpp exception ( throwable wrapped throwable ) { super ( ) ; this . wrapped throwable = wrapped throwable ; }
void on visibility change ( boolean visible ) ;
public synchronized int index of ( object object , int location ) { if ( object != null ) { for ( int i = location ; i < element count ; i ++ ) { if ( object . equals ( element data [ i ] ) ) { return i ; } } } else { for ( int i = location ; i < element count ; i ++ ) { if ( element data [ i ] == null ) { return i ; } } } return - num_ ; }
public static boolean init debug ( ) { return static helper . init open cv ( bool_ ) ; }
private void attempt background paint selection ( ) { color c ; c = j color chooser . show dialog ( this , localization resources . get string ( str_ ) , color . blue ) ; if ( c != null ) { this . background paint sample . set paint ( c ) ; } }
public region version vector ( t owner id , local region owner ) { this . my id = owner id ; this . is live vector = bool_ ; this . region name = owner == null ? str_ : str_ + owner . get full path ( ) ; this . local exceptions = new region version holder < t > ( num_ ) ; this . member to version = new concurrent hash map < t , region version holder < t > > ( initia l_ capacity , loa d_ factor , concurrenc y_ level ) ; this . member to gc version = new concurrent hash map < t , long > ( initia l_ capacity , loa d_ factor , concurrenc y_ level ) ; }
public boolean is _orthogonal ( ) { return direction ( ) . is _orthogonal ( ) ; }
public h cons < a , h cons < b , h cons < c , h cons < d , h nil > > > > to h list ( ) { return h list . cons ( _ 1 ( ) , h list . cons ( _ 2 ( ) , h list . cons ( _ 3 ( ) , h list . cons ( _ 4 ( ) , h list . nil ) ) ) ) ; }
public void add suppress annotation ( string anno name ) { suppress annotations . add ( anno name ) ; }
protected void append value length ( long value ) { if ( value < lengt h_ quote ) { append short length ( ( int ) value ) ; return ; } append ( lengt h_ quote ) ; append uintvar integer ( value ) ; }
public builder by week no ( collection < integer > week numbers ) { by week no . add all ( week numbers ) ; return this ; }
public static string string for ( int n ) { switch ( n ) { case cuda limit stack size : return str_ ; case cuda limit printf fifo size : return str_ ; case cuda limit malloc heap size : return str_ ; case cuda limit dev runtime sync depth : return str_ ; case cuda limit dev runtime pending launch count : return str_ ; } return str_ + n ; }
public string str ( ) { if ( null == m _str cache ) m _str cache = new string ( ( char [ ] ) m _obj , m _start , m _length ) ; return m _str cache ; }
public void add neighbor ( map node node ) { if ( node == null ) { return ; } add to list ( node ) ; }
public void remove header ( ) { if ( has header ( ) ) { header view = null ; header view id = num_ ; notify item removed ( num_ ) ; } }
void disable progress on generate button ( ) ;
public static string format date day ( date date ) { return get simpl date format ( d f_ def ) . format ( date ) ; }
public c status column renderer ( ) { set opaque ( bool_ ) ; }
public static int max ( int i 1 , int i 2 ) { return math . max ( i 1 , i 2 ) ; }
protected synchronized void increment finished ( ) { }
public client shared object ( string name , boolean persistent ) { super ( ) ; this . name = name ; persistent so = persistent ; }
public boolean is summary ( ) ;
public spectral spell interoperator ( string s executable , string s input file , string [ ] s args ) { this ( s input file , s args ) ; s spell executable = s executable ; }
void check implementations ( jc class decl tree ) { check implementations ( tree , tree . sym , tree . sym ) ; }
public thread pool ( string identifier , int min , int max ) { set identifier ( identifier ) ; set min ( min ) ; set max ( max ) ; group = new thread group ( identifier ) ; group . set daemon ( bool_ ) ; try { create resources ( ) ; } catch ( resource unavailable exception e ) { logger . log ( level . severe , str_ + min + str_ + max , e ) ; } }
public boolean is cancelled ( ) { return cancelled ; }
public final static float calculate angle from ( float obj 1 x , float obj 1 y , float obj 2 x , float obj 2 y ) { float angle target = ( float ) math . to degrees ( math . atan 2 ( obj 2 y - obj 1 y , obj 2 x - obj 1 x ) ) ; if ( angle target < num_ ) { angle target = num_ + angle target ; } return angle target ; }
public boolean is set ( _ fields field ) { if ( field == null ) { throw new illegal argument exception ( ) ; } switch ( field ) { case templat e_ code : return is set template code ( ) ; case message : return is set message ( ) ; default : ; } throw new illegal state exception ( ) ; }
boolean has data ( final context context ) { return context . buffer != null ; }
public vector 4f div ( vector 4fc v ) { x /= v . x ( ) ; y /= v . y ( ) ; z /= v . z ( ) ; w /= v . w ( ) ; return this ; }
public d policy mappings ( j dialog parent ) { super ( parent ) ; set title ( res . get string ( str_ ) ) ; init components ( ) ; }
public final synchronized void reset ( ) { num types = num coords = num_ ; }
public boolean has sex ( ) { return field set flags ( ) [ num_ ] ; }
public void test send function group 5 ( ) { abstract throttle instance = new abstract throttle impl ( ) ; instance . send function group 5 ( ) ; jmri . util . j unit appender . assert error message ( str_ ) ; }
boolean can handle ( class < ? extends tile entity > my class , tile entity tile ) ;
public boolean is set err 2 ( ) { return this . err 2 != null ; }
public static state list drawable to state list drawable ( drawable normal , drawable pressed , drawable focused , drawable unable ) { state list drawable drawable = new state list drawable ( ) ; drawable . add state ( new int [ ] { android . r . attr . state _pressed , android . r . attr . state _enabled } , pressed ) ; drawable . add state ( new int [ ] { android . r . attr . state _enabled , android . r . attr . state _focused } , focused ) ; drawable . add state ( new int [ ] { android . r . attr . state _enabled } , normal ) ; drawable . add state ( new int [ ] { android . r . attr . state _focused } , focused ) ; drawable . add state ( new int [ ] { android . r . attr . state _window _focused } , unable ) ; drawable . add state ( new int [ ] { } , normal ) ; return drawable ; }
void append points ( final influx db point point ) ;
public void run test ( ) throws throwable { document doc ; node list element list ; node test addr ; attr addr attr ; string attr ; string namespace uri ; string local name ; string prefix ; doc = ( document ) load ( str_ , bool_ ) ; element list = doc . get elements by tag name ( str_ ) ; test addr = element list . item ( num_ ) ; ( ( element ) test addr ) . remove attribute ns ( str_ , str_ ) ; element list = doc . get elements by tag name ( str_ ) ; test addr = element list . item ( num_ ) ; addr attr = ( ( element ) test addr ) . get attribute node ns ( str_ , str_ ) ; attr = ( ( element ) test addr ) . get attribute ns ( str_ , str_ ) ; namespace uri = addr attr . get namespace uri ( ) ; local name = addr attr . get local name ( ) ; prefix = test addr . get prefix ( ) ; assert equals ( str_ , str_ , attr ) ; assert equals ( str_ , str_ , namespace uri ) ; assert equals ( str_ , str_ , local name ) ; assert equals ( str_ , str_ , prefix ) ; }
void cancel ( ) ;
public static value exp minus ( value exp value 1 , value exp value 2 ) { return new binary op value exp ( minus , value 1 , value 2 ) ; }
public transitions data ( collection < transition data < s , e > > transitions data , map < s , list < choice data < s , e > > > choices , map < s , list < junction data < s , e > > > junctions , map < s , list < s > > forks , map < s , list < s > > joins , collection < entry data < s , e > > entrys , collection < exit data < s , e > > exits , collection < history data < s , e > > historys ) { this . transitions = transitions data ; this . choices = choices ; this . junctions = junctions ; this . forks = forks ; this . joins = joins ; this . entrys = entrys ; this . exits = exits ; this . historys = historys ; }
boolean should output ( byte [ ] record id ) ;
static void test extend ( class loader loader ) { class doubled extend class ; object obj ; try { doubled extend class = loader . load class ( str_ ) ; } catch ( class not found exception cnfe ) { system . err . println ( str_ + cnfe ) ; return ; } try { obj = doubled extend class . new instance ( ) ; } catch ( instantiation exception ie ) { system . err . println ( str_ + ie ) ; return ; } catch ( illegal access exception iae ) { system . err . println ( str_ + iae ) ; return ; } catch ( linkage error le ) { system . out . println ( str_ ) ; return ; } base base ref = ( base ) obj ; doubled extend de = base ref . get extended ( ) ; try { string result ; result = base . do stuff ( de ) ; system . err . println ( str_ ) ; system . err . println ( str_ + result + str_ ) ; } catch ( linkage error le ) { system . out . println ( str_ ) ; return ; } }
private void reset matrix ( ) { m supp matrix . reset ( ) ; set rotation by ( m base rotation ) ; set image view matrix ( get draw matrix ( ) ) ; check matrix bounds ( ) ; }
public static void draw aligned sprite ( graphics 2 d g 2d , sprite sprite , horizontal alignment horizontal align , vertical alignment vertical align , int x , int y , int width , int height ) { int qx = align horizontal ( sprite , horizontal align , x , width ) ; int qy = align vertical ( sprite , vertical align , y , height ) ; sprite . draw ( g 2d , qx , qy ) ; }
public boolean is set header ( ) { return this . header != null ; }
public s_ set create s_ set ( ) { s_ set impl s _ set = new s_ set impl ( ) ; return s _ set ; }
static value object create ( object value ) { return ( value != null ) ? new value object impl ( value ) : null ; }
public final int max class ( ) { double max count = num_ ; int max index = num_ ; int i ; for ( i = num_ ; i < m _per class . length ; i ++ ) { if ( utils . gr ( m _per class [ i ] , max count ) ) { max count = m _per class [ i ] ; max index = i ; } } return max index ; }
static public boolean is layout thread ( ) { return is gui thread ( ) ; }
boolean exists ( pk id ) ;
public void lookup load complete ( ) { if ( m _lookup == null ) return ; m _lookup . load complete ( ) ; }
private void print fragment stack ( ) { list < string > names = new array list < > ( ) ; names . add ( str_ ) ; for ( int idx = num_ ; idx < get support fragment manager ( ) . get back stack entry count ( ) ; idx ++ ) { fragment manager . back stack entry entry = get support fragment manager ( ) . get back stack entry at ( idx ) ; names . add ( string . value of ( entry . get name ( ) ) ) ; } logger . info ( str_ , joiner . on ( str_ ) . join ( names ) ) ; }
public void on destroy ( ) { for ( cordova plugin plugin : this . plugin map . values ( ) ) { if ( plugin != null ) { plugin . on destroy ( ) ; } } }
public abstract void add entity ( chunk processor obj , transform transform ) ;
public void insert _longlong ( long value ) throws org . omg . dynamic any . dyn any package . type mismatch , org . omg . dynamic any . dyn any package . invalid value { org . omg . corba . portable . servant object $so = _servant _preinvoke ( str_ , _ops class ) ; dyn array operations $self = ( dyn array operations ) $so . servant ; try { $self . insert _longlong ( value ) ; } finally { _servant _postinvoke ( $so ) ; } }
public static int roll 1 d 1 0 0 ( ) { return rand . next int ( num_ ) + num_ ; }
private void create ajacency lists ( list < edge > edges , int number of vertices ) { for ( edge edge : edges ) { add edge ( edge . u , edge . v ) ; } }
void on elements removed ( ) ;
public final g vector sub ( g vector v ) { if ( length != v . length ) { throw new matrix size exception ( ) ; } double [ ] tmp = new double [ length ] ; for ( int i = num_ ; i < length ; i ++ ) { tmp [ i ] = values [ i ] - v . values [ i ] ; } return new g vector ( tmp ) ; }
public static double calculate distance ( int [ ] edge histogram a , int [ ] edge histogram b ) { double result = num_ ; for ( int i = num_ ; i < edge histogram a . length ; i ++ ) { result += math . abs ( quant table [ i % num_ ] [ edge histogram a [ i ] ] - quant table [ i % num_ ] [ edge histogram b [ i ] ] ) ; } for ( int i = num_ ; i <= num_ ; i ++ ) { result += num_ * math . abs ( edge histogram a [ i ] - edge histogram b [ i ] ) ; } for ( int i = num_ ; i < num_ ; i ++ ) { result += math . abs ( edge histogram a [ i ] - edge histogram b [ i ] ) ; } return result ; }
boolean should re emit msg ( long offset ) ;
protected void draw value ( canvas c , string value , float x pos , float y pos ) { c . draw text ( value , x pos , y pos , m value paint ) ; }
public zipper < a > backwards ( ) throws no such element exception { return new zipper < > ( front . tail ( ) , back . plus ( front . head ( ) ) , position - num_ ) ; }
private drag layer ( ) { toolkit . get default toolkit ( ) . add awt event listener ( this , awt event . mous e_ even t_ mask | awt event . mous e_ motio n_ even t_ mask ) ; set opaque ( bool_ ) ; }
public boolean is null ( string key ) { return json object . null . equals ( this . opt ( key ) ) ; }
public static void polygon ( double [ ] x , double [ ] y ) { int n = x . length ; general path path = new general path ( ) ; path . move to ( ( float ) scale x ( x [ num_ ] ) , ( float ) scale y ( y [ num_ ] ) ) ; for ( int i = num_ ; i < n ; i ++ ) path . line to ( ( float ) scale x ( x [ i ] ) , ( float ) scale y ( y [ i ] ) ) ; path . close path ( ) ; offscreen . draw ( path ) ; draw ( ) ; }
protected void notify click listeners about click ( int item ) { if ( clicking listeners . size ( ) > num_ ) { for ( on wheel clicked listener listener : clicking listeners ) { listener . on item clicked ( this , item ) ; } } else { set current item ( item , bool_ , num_ ) ; } }
public void clear ( ) { queue . get ( ) . clear ( ) ; }
public void on create ( bundle saved instance state ) { m sliding menu = ( sliding menu ) layout inflater . from ( m activity ) . inflate ( r . layout . slidingmenumain , null ) ; }
static byte [ ] inet 6 as byte array ( inet address ia ) { if ( ia instanceof inet 6 address ) { return ia . get address ( ) ; } if ( ia instanceof inet 4 address ) { byte [ ] ip 4address = ia . get address ( ) ; byte [ ] address = new byte [ num_ ] ; address [ num_ ] = ( byte ) num_ ; address [ num_ ] = ( byte ) num_ ; address [ num_ ] = ip 4address [ num_ ] ; address [ num_ ] = ip 4address [ num_ ] ; address [ num_ ] = ip 4address [ num_ ] ; address [ num_ ] = ip 4address [ num_ ] ; return address ; } throw new assertion error ( str_ ) ; }
public void close ( ) throws xml stream exception ;
type coerce ( type etype , type ttype ) { if ( etype . tsym . type == ttype . tsym . type ) return etype ; if ( etype . is numeric ( ) ) { object n = etype . const value ( ) ; switch ( ttype . get tag ( ) ) { case byte : return syms . byte type . const type ( num_ + ( byte ) int value ( n ) ) ; case char : return syms . char type . const type ( num_ + ( char ) int value ( n ) ) ; case short : return syms . short type . const type ( num_ + ( short ) int value ( n ) ) ; case int : return syms . int type . const type ( int value ( n ) ) ; case long : return syms . long type . const type ( long value ( n ) ) ; case float : return syms . float type . const type ( float value ( n ) ) ; case double : return syms . double type . const type ( double value ( n ) ) ; } } return ttype ; }
public network response perform request ( request < ? > request ) throws volley error ;
public static spec create new spec ( string name , string root filename , boolean import existing , i progress monitor monitor ) throws core exception { i project project = resource helper . get project ( name , root filename , bool_ , import existing , monitor ) ; preference store helper . store root filename ( project , root filename ) ; spec spec = new spec ( project ) ; spec . set last modified ( ) ; return spec ; }
public nherd ( double c , cov mode cov mode ) { set c ( c ) ; set cov mode ( cov mode ) ; }
public void test arrays match ( double [ ] a 1 , double [ ] a 2 ) { for ( int i = num_ ; i < a 1 . length ; i ++ ) { boolean found = bool_ ; for ( int j = num_ ; j < a 2 . length ; j ++ ) { if ( a 1 [ i ] == a 2 [ j ] ) { found = bool_ ; a 2 [ j ] = double . na n ; } } assert . assert true ( found ) ; } }
public static int compile shader ( final int shader type , final string shader source ) { int shader handle = gle s 2 0 . gl create shader ( shader type ) ; if ( shader handle != num_ ) { gle s 2 0 . gl shader source ( shader handle , shader source ) ; gle s 2 0 . gl compile shader ( shader handle ) ; final int [ ] compile status = new int [ num_ ] ; gle s 2 0 . gl get shaderiv ( shader handle , gle s 2 0 . g l_ compil e_ status , compile status , num_ ) ; if ( compile status [ num_ ] == num_ ) { log . e ( tag , str_ + gle s 2 0 . gl get shader info log ( shader handle ) ) ; gle s 2 0 . gl delete shader ( shader handle ) ; shader handle = num_ ; } } if ( shader handle == num_ ) { throw new runtime exception ( str_ ) ; } return shader handle ; }
public static long dynamic query count ( com . liferay . portal . kernel . dao . orm . dynamic query dynamic query , com . liferay . portal . kernel . dao . orm . projection projection ) { return get service ( ) . dynamic query count ( dynamic query , projection ) ; }
public json stringer value ( double d ) throws json exception { return this . value ( new double ( d ) ) ; }
protected state ( ) { }
public void add number format ( esri number format interface number format obj ) { number format map . put ( number format obj . get number format class ( ) , number format obj ) ; }
public void process bytes ( byte [ ] in , int in off , int len , byte [ ] out , int out off ) throws data length exception ;
public static void play ( double [ ] samples ) { if ( samples == null ) throw new null pointer exception ( str_ ) ; for ( int i = num_ ; i < samples . length ; i ++ ) { play ( samples [ i ] ) ; } }
public commit context add instance to remove ( entity entity ) { remove instances . add ( entity ) ; return this ; }
private void update progress ( string progress label , int progress ) { if ( my host != null && ( ( progress != previous progress ) || ( ! progress label . equals ( previous progress label ) ) ) ) { my host . update progress ( progress label , progress ) ; } previous progress = progress ; previous progress label = progress label ; }
public boolean needs updating while saving ( ) { return m needs updating ; }
decision table query decision table version lower than or equals ( integer decision table version ) ;
public c f6 ( int number of variables ) { super ( number of variables , num_ , num_ ) ; }
public boolean is declared function ( string name ) { return is defined as ( name , local type . declare d_ function ) ; }
public static file load server chain cert ( ) { return paths . get ( testin g_ cert s_ dir . to string ( ) , str_ ) . to file ( ) ; }
public static string trim end ( string string , string end match ) { if ( string . ends with ( end match ) ) { return string . substring ( num_ , string . length ( ) - end match . length ( ) ) ; } return string ; }
public int count by uui d_ g ( java . lang . string uuid , long group id ) ;
public union path iterator ( compiler compiler , int op pos ) throws javax . xml . transform . transformer exception { super ( ) ; op pos = op map . get first child pos ( op pos ) ; load location paths ( compiler , op pos , num_ ) ; }
public void root modified ( isvn repository location root ) { iterator it = listeners . iterator ( ) ; while ( it . has next ( ) ) { i repository listener listener = ( i repository listener ) it . next ( ) ; listener . repository modified ( root ) ; } }
public static string encode xml ( string text ) { if ( text == null ) { return null ; } final string builder result = new string builder ( ) ; final string character iterator iterator = new string character iterator ( text ) ; char character = iterator . current ( ) ; while ( character != character iterator . done ) { if ( character == str_ ) { result . append ( str_ ) ; } else if ( character == str_ ) { result . append ( str_ ) ; } else if ( character == str_ ) { result . append ( str_ ) ; } else if ( character == str_ ) { result . append ( str_ ) ; } else if ( character == str_ ) { result . append ( str_ ) ; } else { result . append ( character ) ; } character = iterator . next ( ) ; } return result . to string ( ) ; }
public time description create time description ( time t ) throws sdp exception { time description impl time description impl = new time description impl ( ) ; time description impl . set time ( t ) ; return time description impl ; }
public static bucket create bucket ( experiment experiment , boolean is control ) { return new bucket ( bucket name colors ( ) [ internal id ++ % bucket name colors ( ) . length ] + internal id , experiment . id , num_ / num_ , is control ) ; }
public static string save lyric ( lyric lyric ) { return str_ ; }
void close ( ) throws io exception ;
public void move to ( float x , float y ) { if ( type size > num_ && types [ type size - num_ ] == path iterator . se g_ moveto ) { points [ point size - num_ ] = x ; points [ point size - num_ ] = y ; } else { check buf ( num_ , bool_ ) ; types [ type size ++ ] = path iterator . se g_ moveto ; points [ point size ++ ] = x ; points [ point size ++ ] = y ; } dirty = bool_ ; }
public money subtract ( money money ) { assert defined ( ) ; if ( null == m _value ) { return ( money ) ; } big decimal value = m _value . subtract ( money . get big decimal value ( ) ) ; return new money ( value ) ; }
public sequoia backend notification ( string cluster name , string member name , string resource name , string state , string source , tungsten properties resource props ) { super ( notification stream id . monitoring , null , member name , null , resource type . any , null , null , null ) ; }
public static float next after ( final float start , final double direction ) { if ( direction < start ) { if ( start == num_ ) { return - float . mi n_ value ; } final int bits = float . float to raw int bits ( start ) ; return float . int bits to float ( bits + ( bits > num_ ? - num_ : num_ ) ) ; } else if ( direction > start ) { final int bits = float . float to raw int bits ( start + num_ ) ; return float . int bits to float ( bits + ( bits >= num_ ? num_ : - num_ ) ) ; } else if ( start == direction ) { return ( float ) direction ; } else { return start + ( float ) direction ; } }
public void do export add initiators ( storage system storage , export mask export mask , list < uri > volume ur is , list < initiator > initiators , list < uri > targets , task completer task completer ) throws device controller exception ;
protected void store state ( ) { stored likelihood known = likelihood known ; stored log likelihood = log likelihood ; }
public static source line annotation from visited instruction range ( bytecode scanning detector visitor , int start pc , int end pc ) { line number table line number table = get line number table ( visitor ) ; string class name = visitor . get dotted class name ( ) ; string source file = visitor . get source file ( ) ; if ( line number table == null ) { return create unknown ( class name , source file , start pc , end pc ) ; } int start line = line number table . get source line ( start pc ) ; int end line = line number table . get source line ( end pc ) ; return new source line annotation ( class name , source file , start line , end line , start pc , end pc ) ; }
public model builder subject ( resource subject ) { this . current subject = subject ; return this ; }
public void invalidate layout ( container target ) { }
public void validate ( password password ) { if ( changed number == num_ ) { return ; } string old password = password . get old password ( ) ; string new password = password . get password ( ) ; if ( old password == null ) { throw bad request exception . bad requests . password invalid old password ( ) ; } int gap = string utils . get levenshtein distance ( old password , new password ) ; _log . info ( message format . format ( str_ , changed number ) ) ; if ( gap >= changed number ) { _log . info ( message format . format ( str_ , gap ) ) ; return ; } else { _log . info ( message format . format ( str_ , gap ) ) ; throw bad request exception . bad requests . password invalid change number ( changed number ) ; } }
public int length ( ) { return this . map . size ( ) ; }
public void on drawer slide ( view drawer view , float slide offset ) ;
public short to short ( boolean b ) ;
public synchronized long size ( ) { return size ; }
protected url find resource ( string name ) { return null ; }
public object object ( ) { if ( m _ dtmxr tree frag . get x path context ( ) != null ) return new org . apache . xml . dtm . ref . dtm node iterator ( ( dtm iterator ) ( new org . apache . xpath . node set dtm ( m _dtm root , m _ dtmxr tree frag . get x path context ( ) . get dtm manager ( ) ) ) ) ; else return super . object ( ) ; }
private void infer parameter types ( tree . primary p , tree . positional argument list pal ) { tree . term term = unwrap expression until term ( p ) ; if ( term instanceof tree . member or type expression ) { tree . member or type expression mte = ( tree . member or type expression ) term ; declaration dec = mte . get declaration ( ) ; if ( dec instanceof functional ) { infer parameter types directly ( dec , pal , mte ) ; } else if ( dec instanceof value ) { value value = ( value ) dec ; infer parameter types indirectly ( pal , value . get type ( ) ) ; } } else { infer parameter types indirectly ( pal , p . get type model ( ) ) ; } }
public void remove ( ) { try { remove throw ( ) ; } catch ( sql exception e ) { close quietly ( ) ; throw new illegal state exception ( str_ + data class + str_ + last , e ) ; } }
public int hash code ( ) { return uri . hash code ( ) ; }
private void abort loading ( ) { if ( thread == null ) return ; if ( thread . is alive ( ) ) { thread . interrupt ( ) ; try { thread . join ( ) ; } catch ( interrupted exception e ) { e . print stack trace ( ) ; } } }
public str builder reverse ( ) { if ( size == num_ ) { return this ; } final int half = size / num_ ; final char [ ] buf = buffer ; for ( int left idx = num_ , right idx = size - num_ ; left idx < half ; left idx ++ , right idx -- ) { final char swap = buf [ left idx ] ; buf [ left idx ] = buf [ right idx ] ; buf [ right idx ] = swap ; } return this ; }
private int open key ( int security mask ) { return open key ( security mask , security mask ) ; }
public boolean is show construction ( ) { return show construction ; }
public x card element ( element element , v card version version ) { this . document = element . get owner document ( ) ; this . element = element ; this . version = version ; namespace = version . get xml namespace ( ) ; }
private void remove last timestamp validation data ( ) { final element to remove = xades signature . get last timestamp validation data ( ) ; if ( to remove != null ) { unsigned signature properties dom . remove child ( to remove ) ; } }
t new instance ( ) ;
public static boolean is empty string ( string text ) { return ( text == null || text . trim ( ) . length ( ) == num_ ) ; }
public static aci decode ( byte sequence byte string , dn dn ) throws aci exception { string input = byte string . to string ( ) ; if ( ! pattern . matches ( aci regex , input ) ) { throw new aci exception ( war n_ ac i_ synta x_ genera l_ pars e_ failed . get ( input ) ) ; } aci body body = aci body . decode ( input ) ; string target str = input . substring ( num_ , body . get matcher start pos ( ) ) ; aci targets targets = aci targets . decode ( target str , dn ) ; return new aci ( input , dn , body , targets ) ; }
public static < t > boolean add all iterable ( iterable < ? extends t > iterable , collection < t > target collection ) { if ( iterable == null ) { throw new null pointer exception ( ) ; } if ( iterable instanceof collection < ? > ) { return target collection . add all ( ( collection < t > ) iterable ) ; } int old size = target collection . size ( ) ; iterate . for each with ( iterable , procedures 2 . add to collection ( ) , target collection ) ; return target collection . size ( ) != old size ; }
public int insert achievement ( achievement achievement ) throws sql exception { db transaction transaction = transaction pool . get ( ) . begin work ( ) ; int achievement id = insert achievement ( transaction , achievement ) ; transaction pool . get ( ) . commit ( transaction ) ; return achievement id ; }
private void encode insert ( final diff part part ) throws unsupported encoding exception , encoding exception { data . write bit ( num_ ) ; data . write bit ( num_ ) ; data . write bit ( num_ ) ; data . write value ( codec data . get blocksize s ( ) , part . get start ( ) ) ; string text = part . get text ( ) ; byte [ ] b text = text . get bytes ( wikipedi a_ encoding ) ; data . write value ( codec data . get blocksize l ( ) , b text . length ) ; data . write ( b text ) ; }
private void expand all nodes ( j tree tree ) { tree node root = ( tree node ) tree . get model ( ) . get root ( ) ; expand all nodes ( tree , new tree path ( root ) ) ; }
protected string byte array to hex string ( byte [ ] bytes ) { string builder sb = new string builder ( bytes . length * num_ ) ; for ( byte element : bytes ) { int v = element & num_ ; if ( v < num_ ) { sb . append ( str_ ) ; } sb . append ( integer . to hex string ( v ) ) ; } return sb . to string ( ) . to upper case ( locale . us ) ; }
private static int [ ] align strings ( string source , string target ) { int [ ] [ ] grid = forward pass ( source , target ) ; int [ ] t 2s grid = backward pass ( grid , source , target ) ; return t 2s grid ; }
public signing stream ( final output stream stream , final pgp private key private key , final int digest algorithm , final boolean inline ) { this ( stream , private key , digest algorithm , inline , null ) ; }
public static string [ ] values ( ) { return al l_ values ; }
public static double fro ( zmat a ) { a . get properties ( ) ; return norm . fro ( a , a . bx , a . rx , a . bx , a . cx ) ; }
private void deallocate sub tree ( long node , recycle queue que ) { if ( node == num_ ) return ; deallocate sub tree ( left ( node ) , que ) ; deallocate sub tree ( right ( node ) , que ) ; que . add ( node ) ; }
public boolean is known repository ( string location , boolean require exact match ) { set < string > keys = repositories . key set ( ) ; for ( string check location : keys ) { if ( ! require exact match && location . index of ( check location ) != - num_ ) { return bool_ ; } if ( location . equals ( check location ) ) return bool_ ; } return bool_ ; }
public void transform page ( view page , float position ) ;
private void return data ( object ret ) { if ( my host != null ) { my host . return data ( ret ) ; } }
public void add field ( string fld name , type type ) { fields . put ( fld name , type ) ; if ( my field set != null ) my field set . add ( fld name ) ; }
public void remove change listener ( dataset change listener listener ) ;
public static void main ( string [ ] args ) { weka . core . logging . logger . log ( weka . core . logging . logger . level . info , str_ ) ; weka . gui . splash window . splash ( class loader . get system resource ( str_ ) ) ; weka . gui . splash window . invoke main ( str_ , args ) ; weka . gui . splash window . dispose splash ( ) ; }
public void reset all discovery ( ) { this . discovered static aspects . clear ( ) ; this . save container ( ) ; }
private styled layer descriptor create test line ( url url ) { style builder sb = new style builder ( ) ; style factory style factory = sb . get style factory ( ) ; styled layer descriptor sld = style factory . create styled layer descriptor ( ) ; named layer named layer = style factory . create named layer ( ) ; sld . add styled layer ( named layer ) ; style style = style factory . create style ( ) ; named layer . add style ( style ) ; list < feature type style > fts list = style . feature type styles ( ) ; feature type style fts = style factory . create feature type style ( ) ; fts list . add ( fts ) ; rule rule = style factory . create rule ( ) ; fts . rules ( ) . add ( rule ) ; line symbolizer line = style factory . create line symbolizer ( ) ; rule . symbolizers ( ) . add ( line ) ; graphic graphic fill = create graphic ( url , style factory ) ; graphic graphic stroke = create graphic ( url , style factory ) ; stroke stroke = style factory . create stroke ( null , null , null , null , null , null , null , graphic fill , graphic stroke ) ; line . set stroke ( stroke ) ; return sld ; }
public jms queue script command ( configuration configuration , string resource path , resource resource ) { super ( configuration , resource path ) ; this . resource = resource ; }
public static object xml ( string xml ) { object o = null ; try { o = gestion . get x stream ( ) . from xml ( xml ) ; } catch ( com . thoughtworks . xstream . mapper . cannot resolve class exception e ) { system . out . println ( str_ + e . get message ( ) ) ; string nombre = str_ ; string nombre clase = str_ + nombre . to lower case ( ) + str_ + nombre ; try { class . for name ( nombre clase ) . new instance ( ) ; } catch ( exception ee ) { system . out . println ( str_ + ee . get message ( ) ) ; } o = gestion . get x stream ( ) . from xml ( xml ) ; } return o ; }
void send notification ( date time stamp , timer notification notification ) { if ( time r_ logger . is loggable ( level . finer ) ) { string builder strb = new string builder ( ) . append ( str_ ) . append ( str_ ) . append ( notification . get source ( ) ) . append ( str_ ) . append ( notification . get type ( ) ) . append ( str_ ) . append ( notification . get notification id ( ) ) . append ( str_ ) . append ( time stamp ) ; time r_ logger . logp ( level . finer , timer . class . get name ( ) , str_ , strb . to string ( ) ) ; } long cur seq number ; synchronized ( this ) { sequence number = sequence number + num_ ; cur seq number = sequence number ; } synchronized ( notification ) { notification . set time stamp ( time stamp . get time ( ) ) ; notification . set sequence number ( cur seq number ) ; this . send notification ( ( timer notification ) notification . clone timer notification ( ) ) ; } time r_ logger . logp ( level . finer , timer . class . get name ( ) , str_ , str_ ) ; }
public class path resource ( class loader class loader , string mimetype , string path ) { super ( mimetype ) ; this . class loader = class loader ; this . path = path ; }
public double [ ] [ ] similarity matrix ( ) { return m _hat ; }
void on card view tap ( view view , int position ) ;
boolean check error ( ) { return bool_ ; }
public static int value ( string s ) { return types . get value ( s ) ; }
void log metric ( string key , string value ) ;
public void on mouse wheel moved ( map mouse event ev ) { }
public boolean is well signed ( ) { return well signed ; }
void added trace ( trace list trace ) ;
private void update search auto complete ( ) { m search auto complete . set drop down dismissed on completion ( bool_ ) ; m search auto complete . set force ignore outside touch ( bool_ ) ; }
public void update ( byte [ ] in , int off , int len ) ;
public void swap ( final type prev , final type type ) { if ( type . get size ( ) == num_ ) { if ( prev . get size ( ) == num_ ) { swap ( ) ; } else { dup x2 ( ) ; pop ( ) ; } } else { if ( prev . get size ( ) == num_ ) { dup 2 x1 ( ) ; pop 2 ( ) ; } else { dup 2 x2 ( ) ; pop 2 ( ) ; } } }
void clear response interceptors ( ) ;
private todo wrap object ( todo todo , routing context context ) { int id = todo . get id ( ) ; if ( id > todo . get inc id ( ) ) { todo . set inc id with ( id ) ; } else if ( id == num_ ) todo . set inc id ( ) ; todo . set url ( context . request ( ) . absolute uri ( ) + str_ + todo . get id ( ) ) ; return todo ; }
public void play sequentially ( list < animator > items ) { if ( items != null && items . size ( ) > num_ ) { m needs sort = bool_ ; if ( items . size ( ) == num_ ) { play ( items . get ( num_ ) ) ; } else { for ( int i = num_ ; i < items . size ( ) - num_ ; ++ i ) { play ( items . get ( i ) ) . before ( items . get ( i + num_ ) ) ; } } } }
public void init highest class version ( package . version highest class version ) throws io exception { if ( this . highest class version != null ) { throw new io exception ( str_ + this . highest class version + str_ + highest class version ) ; } this . highest class version = highest class version ; adjust to class version ( ) ; }
public env var dlg ( environment manager interface env var mgr ) { super ( controller . get instance ( ) . get frame ( ) , localisation . get string ( env var dlg . class , str_ ) , bool_ ) ; this . env var mgr = env var mgr ; create ui ( ) ; set size ( num_ , num_ ) ; pack ( ) ; controller . get instance ( ) . centre dialog ( this ) ; }
public boolean is valid ( ) { return is valid ; }
public abstract string to string ( ) ;
private void update progress ( int progress ) { if ( my host != null && progress != previous progress ) { my host . update progress ( progress ) ; } previous progress = progress ; }
void evaluate rotation angle ( projection proj ) ;
public static object extract inner connection from c3 p0 ( object pooled connection ) throws io exception { return extract inner connection from pooled connection ( pooled connection , c3 p 0 _ inne r_ connectio n_ varname ) ; }
public fix runtime exception ( string message ) { super ( message ) ; }
public void init $ children ( ) { children = new ast node [ num_ ] ; }
public void add to time deadband ( final source data tag current tag , final value update update ) { add to time deadband ( current tag , update , new source data tag quality ( ) ) ; }
string convert number to i 1 8 n ( string numeric text ) { if ( zero digit == str_ ) { return numeric text ; } int diff = zero digit - str_ ; char [ ] array = numeric text . to char array ( ) ; for ( int i = num_ ; i < array . length ; i ++ ) { array [ i ] = ( char ) ( array [ i ] + diff ) ; } return new string ( array ) ; }
instant current processing time ( ) ;
public int next ( ) { int node = _current node ; if ( dtm . null != node ) _current node = get next namespace node ( _start node , node , bool_ ) ; return return node ( node ) ; }
public boolean remove default graph ( iri graph uri ) { return default graphs . remove ( graph uri ) ; }
protected void clear events ( ) { s ci safe . clear events ( ) ; s ci user . clear events ( ) ; }
public static bitmap decode sampled bitmap from file ( string filename , int req width , int req height , image cache cache ) { final bitmap factory . options options = new bitmap factory . options ( ) ; options . in just decode bounds = bool_ ; bitmap factory . decode file ( filename , options ) ; options . in sample size = calculate in sample size ( options , req width , req height ) ; if ( utils . has honeycomb ( ) ) { add in bitmap options ( options , cache ) ; } options . in just decode bounds = bool_ ; return bitmap factory . decode file ( filename , options ) ; }
public boolean is null ( string key ) { return json object . null . equals ( this . opt ( key ) ) ; }
private void fetch my service cards from server ( ) { retro callback retro callback ; retro callback = new retro callback ( this ) ; retro callback . set request id ( http constants . api response codes . ge t_ m y_ services ) ; retro callback list . add ( retro callback ) ; m yelo api . get my service cards ( retro callback ) ; }
public static date parse date ( string date value ) throws date parse exception { return parse date ( date value , null , null ) ; }
public void add extension ( as n1 object identifier oid , boolean critical , byte [ ] value ) { if ( extensions . contains key ( oid ) ) { throw new illegal argument exception ( str_ + oid + str_ ) ; } ext ordering . add element ( oid ) ; extensions . put ( oid , new extension ( oid , critical , new der octet string ( value ) ) ) ; }
public managed object already exists exception ( ) { super ( er r_ manage d_ objec t_ alread y_ exist s_ exception . get ( ) ) ; }
public erdos renyi relationship generator ( erdos renyi config configuration ) { super ( configuration ) ; }
public static properties load properties ( string file name ) throws io exception { properties prop = new properties ( ) ; input stream prop in = new file input stream ( file name ) ; try { prop . load ( prop in ) ; } finally { prop in . close ( ) ; } return prop ; }
public static soap message impl to response ( soap message impl request message ) throws exception { soap message impl response message = soap utils . to response ( request message ) ; list < soap element > children = soap utils . get child elements ( response message . get soap ( ) . get soap body ( ) ) ; if ( children . is empty ( ) ) { throw new coded exception ( error codes . x_ invali d_ soap , str_ ) ; } soap element response element = children . get ( num_ ) ; response element . remove contents ( ) ; return response message ; }
public void destroy ( ) { super . destroy ( ) ; }
upgrade request builder prepare upgrade ( string ... indices ) ;
public static void add metallurgic infuser recipe ( infuse type infuse , int amount , item stack input , item stack output ) { add recipe ( recipe . metallurgi c_ infuser , new metallurgic infuser recipe ( new infusion input ( infuse , amount , input ) , output ) ) ; }
public final int [ ] hash ( final sparse integer vector vector ) { return hash signature ( sb . signature ( vector ) ) ; }
public abstract void check inline image ( pdf stream inline image , pdf dictionary current color spaces ) ;
public final void signal ( ) { if ( ! is held exclusively ( ) ) throw new illegal monitor state exception ( ) ; node first = first waiter ; if ( first != null ) do signal ( first ) ; }
public abstract int prefix length ( string path ) ;
public static boolean is concrete ( class < ? > type ) { int mod = type . get modifiers ( ) ; return ( mod & ( modifier . interface | modifier . abstract ) ) == num_ ; }
private void init target folder ( ) { if ( get storage manager ( ) == null ) { throw new illegal state exception ( str_ + str_ ) ; } string last path = preference manager . get last upload path ( this ) ; if ( last path . equals ( str_ ) ) { m parents . add ( str_ ) ; } else { string [ ] dir _names = last path . split ( str_ ) ; m parents . clear ( ) ; for ( string dir : dir _names ) m parents . add ( dir ) ; } while ( ! get storage manager ( ) . file exists ( generate path ( m parents ) ) && m parents . size ( ) > num_ ) { m parents . pop ( ) ; } }
private void load external unit ( string anno name ) { class < ? extends annotation > anno class = loader . load external annotation class ( anno name ) ; add unit to external qual map ( anno class ) ; }
public cluster properties ( solr zk client client ) { this . client = client ; }
int run command ( string command ) throws io exception ;
public static web site properties from ( http servlet request request , string web site id ) throws generic entity exception { assert . not null ( str_ , web site id ) ; delegator delegator = ( delegator ) request . get attribute ( str_ ) ; generic value web site value = entity query . use ( delegator ) . from ( str_ ) . where ( str_ , web site id ) . cache ( ) . query one ( ) ; if ( web site value != null ) { return from ( request , web site value ) ; } else { throw new generic entity exception ( str_ + web site id + str_ ) ; } }
public static properties load from resource ( string res name ) { return load from resource ( property util . class , res name ) ; }
boolean is generated examples enabled ( ) ;
private logfile scope ( string p _name ) { name = p _name ; }
public boolean is rtl ( char c ) { return impl . is rtl ( c ) ; }
public final void add elements ( object value , int number of elements ) { if ( ( m _first free + number of elements ) >= m _map size ) { m _map size += ( m _blocksize + number of elements ) ; object new map [ ] = new object [ m _map size ] ; system . arraycopy ( m _map , num_ , new map , num_ , m _first free + num_ ) ; m _map = new map ; } for ( int i = num_ ; i < number of elements ; i ++ ) { m _map [ m _first free ] = value ; m _first free ++ ; } }
public c ufunction ( ) { }
public native byte b descriptor type ( ) ;
public static quaternion multiply ( final quaternion q 1 , final quaternion q 2 ) { final double q 1a = q 1 . get q0 ( ) ; final double q 1b = q 1 . get q1 ( ) ; final double q 1c = q 1 . get q2 ( ) ; final double q 1d = q 1 . get q3 ( ) ; final double q 2a = q 2 . get q0 ( ) ; final double q 2b = q 2 . get q1 ( ) ; final double q 2c = q 2 . get q2 ( ) ; final double q 2d = q 2 . get q3 ( ) ; final double w = q 1a * q 2a - q 1b * q 2b - q 1c * q 2c - q 1d * q 2d ; final double x = q 1a * q 2b + q 1b * q 2a + q 1c * q 2d - q 1d * q 2c ; final double y = q 1a * q 2c - q 1b * q 2d + q 1c * q 2a + q 1d * q 2b ; final double z = q 1a * q 2d + q 1b * q 2c - q 1c * q 2b + q 1d * q 2a ; return new quaternion ( w , x , y , z ) ; }
public paint ( int flags ) { m native paint = native _init ( ) ; set flags ( flags | defaul t_ pain t_ flags ) ; m compat scaling = m inv compat scaling = num_ ; set text locale ( locale . get default ( ) ) ; }
public boolean is known ( ) { return index != - num_ ; }
public boolean is next business day ( ) ;
public c default modifier ( final zy graph view settings settings , final back end debugger provider provider ) { m _settings = preconditions . check not null ( settings , str_ ) ; m _provider = preconditions . check not null ( provider , str_ ) ; }
public void aggregate ( class loading information data other ) { count += other . count ; min loaded class count = math . min ( min loaded class count , other . min loaded class count ) ; max loaded class count = math . max ( max loaded class count , other . max loaded class count ) ; total loaded class count += other . total loaded class count ; min total loaded class count = math . min ( min total loaded class count , other . min total loaded class count ) ; max total loaded class count = math . max ( max total loaded class count , other . max total loaded class count ) ; total total loaded class count += other . total total loaded class count ; min unloaded class count = math . min ( min unloaded class count , other . min unloaded class count ) ; max unloaded class count = math . max ( max unloaded class count , other . max unloaded class count ) ; total unloaded class count += other . max unloaded class count ; }
public static long min simm ( long nbits ) { return - ( num_ << ( nbits - num_ ) ) ; }
public void update schema to latest ( ) ;
public static builder create builder ( header header , writable font data data ) { return new builder ( header , data ) ; }
public static void start wave filter ( final activity activity , wave drawable wave drawable , final intent intent , int background color ) { intent . put extra ( intent key . backgroun d_ color , background color ) ; start wave filter ( activity , wave drawable , intent ) ; }
private void return data ( object ret ) { if ( my host != null ) { my host . return data ( ret ) ; } }
boolean click current ( ) ;
public static corleone context ( string job context ) { if ( job context == null || job context . equals ( str_ ) ) { throw new illegal argument exception ( str_ ) ; } contexts . clear ( ) ; contexts . add ( job context ) ; return get instance ( ) ; }
public static byte [ ] end row exclusive or one after max ( range request range request ) { preconditions . check argument ( ! range request . is reverse ( ) ) ; if ( range request . get end exclusive ( ) . length == num_ ) { return one after maximum name ( ) ; } return range request . get end exclusive ( ) ; }
public static string next code ( ) { return next code ( new date ( ) ) ; }
protected static string quote timestamp ( java . sql . timestamp x ) { if ( x == null ) { return str_ ; } return str_ + x . to string ( ) + str_ ; }
public void add energy ( item stack stack , float energy ) ;
private void show feedback ( string message ) { if ( my host != null ) { my host . show feedback ( message ) ; } else { system . out . println ( message ) ; } }
lookup environment environment ( ) ;
public static void submit graph optimizer job ( optimizable bipartite graph graph , optimizable bipartite graph segment segment ) { optimize r_ service . submit ( new graph optimizer job ( graph , segment ) ) ; }
private void perform axis transition ( int from axis , int to axis , boolean send event , string content description ) { if ( m current axis == from axis ) { set current axis ( to axis , send event , content description ) ; } }
protected svgom metadata element ( ) { }
public boolean remove container and cancel if necessary ( image container container ) { m containers . remove ( container ) ; if ( m containers . size ( ) == num_ ) { m request . cancel ( ) ; return bool_ ; } return bool_ ; }
public void mp v _common _defaults ( ) { this . y _dc _scale _table = this . c _dc _scale _table = ff _mpeg 1 _dc _scale _table ; this . chroma _qscale _table = ff _default _chroma _qscale _table ; this . progressive _frame = num_ ; this . progressive _sequence = num_ ; this . picture _structure = pic t_ frame ; this . coded _picture _number = num_ ; this . picture _number = num_ ; this . input _picture _number = num_ ; this . picture _in _gop _number = num_ ; this . f _code = num_ ; this . b _code = num_ ; }
public int add padding ( byte [ ] in , int in off ) { byte code = ( byte ) ( in . length - in off ) ; while ( in off < ( in . length - num_ ) ) { in [ in off ] = ( byte ) random . next int ( ) ; in off ++ ; } in [ in off ] = code ; return code ; }
public final void yyclose ( ) throws java . io . io exception { zz at eof = bool_ ; zz end read = zz start read ; if ( zz reader != null ) zz reader . close ( ) ; }
public cursor fetch ( long data filter id ) { if ( data filter id == null ) { throw new illegal argument exception ( str_ ) ; } cursor m cursor = database . query ( bool_ , databas e_ table , keys , ke y_ datafilterid + str_ + data filter id , null , null , null , null , null ) ; if ( m cursor != null ) { m cursor . move to first ( ) ; } return m cursor ; }
public void recoger datos dictamen execute logic ( action mapping mappings , action form form , http servlet request request , http servlet response response ) { save current invocation ( keys clients invocations . valoracio n_ dictamen , request ) ; remove in temporal session ( request , valoracion constants . list a_ boletine s_ oficiale s_ key ) ; set in temporal session ( request , valoracion constants . list a_ boletine s_ oficiale s_ key , get gestion valoracion bi ( request ) . get boletines oficiales ( ) ) ; set return action fordward ( request , mappings . find forward ( str_ ) ) ; }
public pattern replace filter factory ( map < string , string > args ) { super ( args ) ; pattern = get pattern ( args , str_ ) ; replacement = get ( args , str_ ) ; replace all = str_ . equals ( get ( args , str_ , arrays . as list ( str_ , str_ ) , str_ ) ) ; if ( ! args . is empty ( ) ) { throw new illegal argument exception ( str_ + args ) ; } }
private void load file ( string filename , abstract file loader ... loaders ) { arff sorted table model model ; this . m _ filename = filename ; create title ( ) ; if ( filename . equals ( str_ ) ) { model = null ; } else { model = new arff sorted table model ( filename , loaders ) ; model . set show attribute index ( get show attribute index ( ) ) ; } m _ table arff . set model ( model ) ; set changed ( bool_ ) ; create name ( ) ; }
public string construct spec name ( string module name , boolean first run flag ) ;
public static nv [ ] concat ( final nv [ ] a , final nv [ ] b ) { if ( a == null && b == null ) return a ; if ( a == null ) return b ; if ( b == null ) return a ; final nv [ ] c = new nv [ a . length + b . length ] ; system . arraycopy ( a , num_ , c , num_ , a . length ) ; system . arraycopy ( b , num_ , c , a . length , b . length ) ; return c ; }
public void shut down ( ) { if ( m native layer title cache == num_ ) return ; native destroy ( m native layer title cache ) ; m native layer title cache = num_ ; }
protected factory resolve factory ( object name , map attributes , object value ) { get proxy builder ( ) . get context ( ) . put ( chil d_ builder , get proxy builder ( ) ) ; return get proxy builder ( ) . get factories ( ) . get ( name ) ; }
protected void consume ( ) { current position in input ++ ; load next character from input ( ) ; }
public void println ( char x ) { out . println ( x ) ; }
void remove trees ( session session , com . foundationdb . ais . model . schema schema ) ;
public void used switch ( rp entity user , nine switches game switch game switch ) { if ( player name == null ) { user . send private text ( npc . get name ( ) + str_ + user . get name ( ) + str_ ) ; return ; } if ( ! user . get name ( ) . equals ( player name ) ) { user . send private text ( npc . get name ( ) + str_ + user . get name ( ) + str_ + player name + str_ ) ; return ; } switch game switch ( game switch ) ; boolean completed = check board ( ) ; if ( completed ) { npc . say ( str_ + user . get name ( ) + str_ ) ; outfit balloon outfit ; balloon outfit = new outfit ( num_ , null , null , null , null ) ; user . set outfit ( balloon outfit ) ; user . put ( str_ , str_ , rand . rand ( balloon colors ) ) ; player name = null ; turn notifier . get ( ) . dont notify ( this ) ; } }
public void stop ( ) { mesos cluster . destroy ( factory ) ; }
public void replace conditions ( iterable < ? extends data table filter condition > new conditions ) { int old size = condition stack . size ( ) ; condition stack . clear ( ) ; if ( ! new conditions . iterator ( ) . has next ( ) && old size > num_ ) { set selected indices ( update selection ( ) ) ; inform data table filtered listener ( ) ; return ; } add conditions ( new conditions ) ; }
public static bitmap decode byte array ( byte [ ] data , bitmap factory . options options ) { if ( available ( ) ) { return native decode byte array ( data , options ) ; } else { return bitmap factory . decode byte array ( data , num_ , data . length , options ) ; } }
public boolean is pan enabled ( ) { return is pan x enabled ( ) || is pan y enabled ( ) ; }
public list < list < string > > compute selected paths ( ) { list < list < string > > selected paths = new array list < > ( ) ; for ( int i = num_ , n = selected nodes . size ( ) ; i < n ; i ++ ) { d node data = selected nodes . get ( i ) ; selected paths . add ( data adapter . get node path ( node data ) ) ; } return selected paths ; }
public builder pause ( ) { return apply ( new set play when ready ( tag , bool_ ) ) ; }
protected void eleminate shared partial paths ( elem template element psuedo var recipient , vector paths ) { multistep expr holder list = create multistep expr list ( paths ) ; if ( null != list ) { if ( diagnos e_ multisteplist ) list . diagnose ( ) ; boolean is global = ( paths == m _abs paths ) ; int longest steps count = list . m _step count ; for ( int i = longest steps count - num_ ; i >= num_ ; i -- ) { multistep expr holder next = list ; while ( null != next ) { if ( next . m _step count < i ) break ; list = match and eliminate partial paths ( next , list , is global , i , psuedo var recipient ) ; next = next . m _next ; } } } }
public buffered grouping rdf handler ( rdf handler ... handlers ) { this ( defaul t_ buffe r_ size , handlers ) ; }
public static < t extends data object > t find in collection ( collection < t > col , t obj ) { if ( col != null && obj != null ) { return find in collection ( col , obj . get id ( ) ) ; } return null ; }
public void uninstall ( ) { if ( presenter != null ) presenter . set canceled ( bool_ ) ; if ( styled text xtext adapter != null ) { if ( calculator != null ) { if ( styled text xtext adapter . get xtext document ( ) != null ) styled text xtext adapter . get xtext document ( ) . remove model listener ( this ) ; source viewer . remove text input listener ( this ) ; } styled text xtext adapter = null ; } source viewer = null ; presenter = null ; }
public void enable fps meter ( ) { if ( m fps meter == null ) { m fps meter = new fps meter ( ) ; m fps meter . set resolution ( m frame width , m frame height ) ; } }
public boolean is same server ( server descriptor server ) { return get id ( ) . equals ( server . get id ( ) ) ; }
public void remove capabilities listener ( set < contact id > contacts , capabilities listener listener ) throws rcs service not available exception , rcs generic exception { if ( m api == null ) { throw new rcs service not available exception ( ) ; } if ( contacts == null || contacts . is empty ( ) ) { throw new rcs illegal argument exception ( str_ ) ; } try { weak reference < i capabilities listener > weak ref = m capabilities listeners . remove ( listener ) ; if ( weak ref == null ) { return ; } i capabilities listener rcs listener = weak ref . get ( ) ; if ( rcs listener != null ) { for ( contact id contact : contacts ) { m api . remove capabilities listener 2 ( contact , rcs listener ) ; } } } catch ( exception e ) { rcs illegal argument exception . assert exception ( e ) ; throw new rcs generic exception ( e ) ; } }
private static instruction make phi instruction ( heap variable < object > h , basic block bb ) { int n = bb . get number of in ( ) ; enumeration < basic block > in = bb . get in ( ) ; heap operand < object > lhs = new heap operand < object > ( h ) ; instruction s = phi . create ( phi , lhs , n ) ; lhs . set instruction ( s ) ; for ( int i = num_ ; i < n ; i ++ ) { heap operand < object > op = new heap operand < object > ( h ) ; op . set instruction ( s ) ; phi . set value ( s , i , op ) ; basic block pred = in . next element ( ) ; phi . set pred ( s , i , new basic block operand ( pred ) ) ; } return s ; }
public static list < property > diff ( shape old shape , shape new shape ) { list < property > old list = old shape . get property list internal ( bool_ ) ; list < property > new list = new shape . get property list internal ( bool_ ) ; list < property > diff = new array list < > ( old list ) ; diff . add all ( new list ) ; list < property > intersection = new array list < > ( old list ) ; intersection . retain all ( new list ) ; diff . remove all ( intersection ) ; return diff ; }
public void validate ( faces context faces context , ui component component , object value ) throws validator exception { if ( value == null ) { return ; } string email = value . to string ( ) ; if ( email . length ( ) == num_ ) { return ; } if ( ! adm validator . is email ( email ) ) { object [ ] args = null ; string label = jsf utils . get label ( component ) ; if ( label != null ) { args = new object [ ] { label } ; } validation exception e = new validation exception ( validation exception . reason enum . email , label , null ) ; string text = jsf utils . get text ( e . get message key ( ) , args , faces context ) ; throw new validator exception ( new faces message ( faces message . severit y_ error , text , null ) ) ; } }
public void enable image transforms ( boolean enable ) { m transforms enabled = enable ; if ( ! m transforms enabled ) { reset transformations ( ) ; } }
public roles ( list < long > roles ) { if ( access == null && roles != null && roles . size ( ) > num_ ) { access = new hash set < string > ( ) ; list = role . load all ( roles ) ; for ( role r : list ) { list < string > names = r . get accesses ( ) ; if ( names != null && names . size ( ) > num_ ) { access . add all ( names ) ; } } } }
public basic split pane divider create default divider ( ) { return new basic split pane divider ( this ) ; }
public boolean within ( float lat , float lon ) { double y = ( double ) lat ; double x = ( double ) lon ; return ( y < nw _lat && y > se _lat && x < se _lon && x > nw _lon ) ; }
boolean do action device timer post internet ( i esp device device , json object timer json ) ;
public aem sidekick expand fieldset if collapsed ( string fieldset name ) { final web element fieldset = get fieldset by name ( fieldset name ) ; bobcat wait . with timeout ( timeouts . big ) . until ( sidekick actions . expand fieldset ( fieldset ) , timeouts . small ) ; return this ; }
void close value editor ( ) ;
public long manhattan distance ( final mutable int 2 d p ) { return math . abs ( ( long ) this . x - p . x ) + math . abs ( ( long ) this . y - p . y ) ; }
public static portfolio overview calculate ( final big decimal balance , final statistics stats , final collection < investment > investments ) { final map < rating , integer > amounts = stats . get risk portfolio ( ) . stream ( ) . collect ( collectors . to map ( null , null ) ) ; investments . for each ( null ) ; return new portfolio overview ( balance , amounts ) ; }
private static native byte [ ] reg query value ex ( int h key , byte [ ] value name ) ;
void info ( string msg , throwable t ) ;
private state ( circuit state circuit state , duration timeout duration , event counter counter ) { this . circuit state = circuit state ; this . counter = counter ; if ( timeout duration . is zero ( ) || timeout duration . is negative ( ) ) { timed out time nanos = num_ ; } else { timed out time nanos = ticker . read ( ) + timeout duration . to nanos ( ) ; } }
public activation group desc ( string class name , string location , marshalled object < ? > data , properties overrides , command environment cmd ) { this . props = overrides ; this . env = cmd ; this . data = data ; this . location = location ; this . class name = class name ; }
public void test register custom configuration on existing container ( ) throws exception { this . factory . register configuration ( str_ , container type . installed , configuration type . standalone , standalone local configuration stub . class ) ; configuration configuration = this . factory . create configuration ( str_ , container type . installed , configuration type . standalone , str_ ) ; assert equals ( standalone local configuration stub . class . get name ( ) , configuration . get class ( ) . get name ( ) ) ; }
private k lowest key ( ) { concurrent skip list map . node < k , v > n = lo node ( ) ; if ( is before end ( n ) ) return n . key ; else throw new no such element exception ( ) ; }
public boolean have draw offer ( ) { if ( current move > num_ ) { return draw offer list . get ( current move - num_ ) ; } else { return bool_ ; } }
public object run safely ( catbert . fast stack stack ) throws exception { if ( stack . get ui mgr ( ) != null && stack . get ui mgr ( ) . has remote fs support ( ) ) { return new long ( ( ( mini client sage renderer ) stack . get ui mgr ( ) . get root panel ( ) . get render engine ( ) ) . fs get path modified ( get string ( stack ) ) ) ; } else return new long ( get file ( stack ) . last modified ( ) ) ; }
navigable map < k , v > descending map ( ) ;
protected action fake definition impl ( ) { super ( ) ; }
public static int floor ( double x ) { return x >= num_ ? ( int ) x : ( int ) x - num_ ; }
void exclude from scope ( java . net . url url ) ;
protected void restore state ( ) { likelihood known = stored likelihood known ; log likelihood = stored log likelihood ; }
public isilon list < isilon smb share > list shares ( string resume token ) throws isilon exception { return list ( _base url . resolve ( ur i_ sm b_ shares ) , str_ , isilon smb share . class , resume token ) ; }
private static char decode hex nibble ( final char c ) { if ( str_ <= c && c <= str_ ) { return ( char ) ( c - str_ ) ; } else if ( str_ <= c && c <= str_ ) { return ( char ) ( c - str_ + num_ ) ; } else if ( str_ <= c && c <= str_ ) { return ( char ) ( c - str_ + num_ ) ; } else { return character . ma x_ value ; } }
private double clamp ( double value , double min , double max ) { if ( value < min ) { return min ; } if ( value > max ) { return max ; } return value ; }
list < string > parse ( string cql script source ) { return lines to statements ( read lines ( new string reader ( cql script source ) ) ) ; }
public static final long time from intent in millis ( intent intent ) { uri data = intent . get data ( ) ; long millis = intent . get long extra ( extr a_ even t_ begi n_ time , - num_ ) ; if ( millis == - num_ && data != null && data . is hierarchical ( ) ) { list < string > path = data . get path segments ( ) ; if ( path . size ( ) == num_ && path . get ( num_ ) . equals ( str_ ) ) { try { millis = long . value of ( data . get last path segment ( ) ) ; } catch ( number format exception e ) { log . i ( str_ , str_ + str_ ) ; } } } if ( millis <= num_ ) { millis = system . current time millis ( ) ; } return millis ; }
void append ( final object o ) { template value . append ( o ) ; }
public void ice candidates received ( json array candidates ) { if ( is active ( ) ) { for ( int ii = num_ ; ii < candidates . length ( ) ; ii ++ ) { try { json object each candidate = ( json object ) candidates . get ( ii ) ; string mid = each candidate . get string ( str_ ) ; int sdp line index = each candidate . get int ( str_ ) ; string sdp = each candidate . get string ( str_ ) ; ice candidate rtc candidate = new ice candidate ( mid , sdp line index , sdp ) ; try { queued remote candidates semaphore . acquire ( ) ; if ( null != queued remote candidates ) { queued remote candidates . add ( rtc candidate ) ; } else { peer connection . add ice candidate ( rtc candidate ) ; } queued remote candidates semaphore . release ( ) ; } catch ( interrupted exception e ) { log . d ( tag , str_ ) ; } } catch ( json exception e ) { log . d ( tag , str_ ) ; } } } }
public void add observer ( bookmark model observer observer ) { m observers . add observer ( observer ) ; }
public boolean is open ( ) { return open . get ( ) ; }
public boolean equal _at _end ( int line _idx , pla point int p _point ) { if ( p _point == null ) return bool_ ; pla point corner = corner ( line _idx ) ; return corner . equals ( p _point ) ; }
public boolean has domain ( ) { return field set flags ( ) [ num_ ] ; }
private void cleanup ( ) { if ( operation instanceof command && log . is open ( ) ) { try { log . release ( index ) ; } catch ( illegal state exception e ) { } } session . release ( ) ; index = num_ ; session = null ; instant = null ; operation = null ; pool . release ( this ) ; }
void notify message ( string msg id , status level status level , string title , string message ) ;
protected abstract void reset search text ( ) ;
public c save formatted field ( final default formatter factory factory ) { super ( factory ) ; }
public void test serialize float ( ) { serializer serializer = new serializer ( ) ; buffer buffer = serializer . write object ( num_ ) . flip ( ) ; float result = serializer . read object ( buffer ) ; assert equals ( result , num_ ) ; }
private void show feedback ( string message ) { if ( my host != null ) { my host . show feedback ( message ) ; } else { system . out . println ( message ) ; } }
public media size ( float x , float y , int units ) { super ( x , y , units ) ; if ( x > y ) { throw new illegal argument exception ( str_ ) ; } size vector . add ( this ) ; }
public static boolean is integer ( string number ) { if ( is null or empty ( number ) ) { return bool_ ; } try { integer . parse int ( number ) ; return bool_ ; } catch ( number format exception ex ) { return bool_ ; } }
protected void write to socket ( socket sock , tcp discovery abstract message msg , long timeout ) throws io exception , ignite checked exception { write to socket ( sock , new buffered output stream ( sock . get output stream ( ) , sock . get send buffer size ( ) ) , msg , timeout ) ; }
public void go to next color ( ) { m color index = ( m color index + num_ ) % ( m colors . length ) ; }
protected p shape create shape primitive ( int kind , float ... p ) { return new p shape ( this , kind , p ) ; }
protected igfs input stream read ( ) throws exception { return igfs . open ( file ) ; }
public void close ( ) { if ( accept t != null ) { log ( str_ + accept t ) ; accept t . close ( ) ; accept t = null ; } }
private void update next clock ( final pseudo tcp base tcp , final object lock ) { try { long now = pseudo tcp base . now ( ) ; synchronized ( tcp ) { tcp . notify clock ( now ) ; } long interval ; synchronized ( tcp ) { interval = tcp . get next clock ( pseudo tcp base . now ( ) ) ; } if ( logger . is loggable ( level . finest ) ) { logger . log ( level . finest , tcp . debug name + str_ + interval ) ; } if ( interval < num_ ) { if ( interval == - num_ ) { interval = num_ ; } else { return ; } } synchronized ( lock ) { lock . wait ( interval ) ; } } catch ( interrupted exception ex ) { } }
public int index of ( pdf object o ) { if ( o == null ) return list . index of ( null ) ; int index = num_ ; for ( pdf object pdf object : this ) { if ( pdf object . equal content ( o , pdf object ) ) { return index ; } index ++ ; } return - num_ ; }
public boolean can parse ( string mime type ) ;
public static cigar convert to legacy cigar ( cigar cigar ) { final cigar cg = new cigar ( ) ; int count = num_ ; for ( int i = num_ ; i < cigar . num cigar elements ( ) ; i ++ ) { final cigar element ce = cigar . get cigar element ( i ) ; if ( ce . get operator ( ) . equals ( cigar operator . eq ) || ce . get operator ( ) . equals ( cigar operator . x ) ) { count += ce . get length ( ) ; } else { if ( count > num_ ) { cg . add ( new cigar element ( count , cigar operator . m ) ) ; } cg . add ( ce ) ; count = num_ ; } } if ( count > num_ ) { cg . add ( new cigar element ( count , cigar operator . m ) ) ; } return cg ; }
public set hypervolume ( ) { super ( ) ; }
public static void main ( string [ ] args ) { run filter ( new center ( ) , args ) ; }
protected static attr [ ] sort attributes ( named node map attrs ) { int len = ( attrs != null ) ? attrs . get length ( ) : num_ ; attr array [ ] = new attr [ len ] ; for ( int i = num_ ; i < len ; i ++ ) { array [ i ] = ( attr ) attrs . item ( i ) ; } for ( int i = num_ ; i < len - num_ ; i ++ ) { string name = array [ i ] . get node name ( ) ; int index = i ; for ( int j = i + num_ ; j < len ; j ++ ) { string cur name = array [ j ] . get node name ( ) ; if ( cur name . compare to ( name ) < num_ ) { name = cur name ; index = j ; } } if ( index != i ) { attr temp = array [ i ] ; array [ i ] = array [ index ] ; array [ index ] = temp ; } } return ( array ) ; }
public final int yylength ( ) { return zz marked pos - zz start read ; }
public int size ( ) { return get array ( ) . length ; }
public final < type > boolean has extension ( final generated extension < message type , type > extension ) { verify extension containing type ( extension ) ; return extensions . has field ( extension . descriptor ) ; }
instances transformed data ( instances data ) throws exception ;
public void tx context reset ( ) { mvcc mgr . context reset ( ) ; }
public static boolean open question ( shell parent , string title , string message ) { return open ( question , parent , title , message , swt . none ) ; }
protected void new fast clock minute ( ) { for ( int i = delayed trains . size ( ) - num_ ; i >= num_ ; i -- ) { active train at = delayed trains . get ( i ) ; if ( ( ! at . get started ( ) ) && at . get delayed start ( ) != active train . nodelay ) { if ( at . get delayed start ( ) == active train . timeddelay ) { if ( is fast clock time ge ( at . get departure time hr ( ) , at . get departure time min ( ) ) ) { at . set started ( ) ; delayed trains . remove ( i ) ; if ( _ auto allocate ) { auto allocate . scan allocation request list ( allocation requests ) ; } } } } else if ( at . get started ( ) && at . get status ( ) == active train . ready && at . reached restart point ( ) ) { if ( is fast clock time ge ( at . get restart depart hr ( ) , at . get restart depart min ( ) ) ) { at . restart ( ) ; delayed trains . remove ( i ) ; if ( _ auto allocate ) { auto allocate . scan allocation request list ( allocation requests ) ; } } } } }
public static s m_ syste m_ message st r_ skil l_ suc c_ spell atk drain _ interva l_ t o_ b ( string skilltarget , int num 0 , string skillname ) { return new s m_ syste m_ message ( num_ , skilltarget , num 0 , skillname ) ; }
public e poll ( ) { return poll first ( ) ; }
public static void remove map entries ( map map , set set ) { if ( ( set != null ) && ! set . is empty ( ) ) { for ( iterator iter = set . iterator ( ) ; iter . has next ( ) ; ) { map . remove ( iter . next ( ) ) ; } } }
public void add action ( int icon , char sequence title , action . on action listener listener , component name activity , component name service , string broadcast , bundle extra ) { add action ( new action ( icon , title , listener , activity , service , broadcast , extra ) ) ; }
public static cpc runner serializable instance ( ) { return new cpc runner ( dag . serializable instance ( ) , new parameters ( ) ) ; }
private ok http client copy with defaults ( ) { ok http client result = new ok http client ( this ) ; result . proxy = proxy ; result . proxy selector = proxy selector != null ? proxy selector : proxy selector . get default ( ) ; result . cookie handler = cookie handler != null ? cookie handler : cookie handler . get default ( ) ; result . response cache = response cache != null ? response cache : response cache . get default ( ) ; result . ssl socket factory = ssl socket factory != null ? ssl socket factory : https url connection . get default ssl socket factory ( ) ; result . hostname verifier = hostname verifier != null ? hostname verifier : ok hostname verifier . instance ; result . authenticator = authenticator != null ? authenticator : http authenticator . syste m_ default ; result . connection pool = connection pool != null ? connection pool : connection pool . get default ( ) ; result . follow protocol redirects = follow protocol redirects ; result . transports = transports != null ? transports : defaul t_ transports ; result . connect timeout = connect timeout ; result . read timeout = read timeout ; return result ; }
boolean matches ( reference type ref type ) ;
public generate routes ( uri model uri , file target folder , list < ? extends object > arguments ) throws io exception { initialize ( model uri , target folder , arguments ) ; }
node . builder build node ( string permission ) throws illegal argument exception ;
synchronized void drop all ( boolean do save ) throws io exception { throwable prior e = null ; final iterator < map . entry < segment commit info , readers and updates > > it = reader map . entry set ( ) . iterator ( ) ; while ( it . has next ( ) ) { final readers and updates rld = it . next ( ) . get value ( ) ; try { if ( do save && rld . write live docs ( directory ) ) { assert info is live ( rld . info ) ; checkpoint no sis ( ) ; } } catch ( throwable t ) { if ( do save ) { io utils . re throw ( t ) ; } else if ( prior e == null ) { prior e = t ; } } it . remove ( ) ; try { rld . drop readers ( ) ; } catch ( throwable t ) { if ( do save ) { io utils . re throw ( t ) ; } else if ( prior e == null ) { prior e = t ; } } } assert reader map . size ( ) == num_ ; io utils . re throw ( prior e ) ; }
public static string save image results to html ( string prefix , image search hits hits , string query image , index reader reader ) throws io exception { long l = system . current time millis ( ) / num_ ; string file name = str_ + prefix + str_ + l + str_ ; buffered writer bw = new buffered writer ( new file writer ( file name ) ) ; bw . write ( str_ + str_ + str_ ) ; bw . write ( str_ ) ; bw . write ( str_ + query image + str_ + query image + str_ ) ; bw . write ( str_ ) ; for ( int i = num_ ; i < hits . length ( ) ; i ++ ) { bw . write ( hits . score ( i ) + str_ + reader . document ( hits . document id ( i ) ) . get values ( document builder . fiel d_ nam e_ identifier ) [ num_ ] + str_ + reader . document ( hits . document id ( i ) ) . get values ( document builder . fiel d_ nam e_ identifier ) [ num_ ] + str_ ) ; } bw . write ( str_ + str_ ) ; bw . close ( ) ; return file name ; }
public void insert podcast tag ( podcast tag podcast tag ) ;
public static void pretty print videos ( list < you tube video > videos ) { log . d ( tag , str_ ) ; log . d ( tag , str_ + videos . size ( ) ) ; log . d ( tag , str_ ) ; iterator < you tube video > playlist entries = videos . iterator ( ) ; while ( playlist entries . has next ( ) ) { you tube video playlist item = playlist entries . next ( ) ; log . d ( tag , str_ + playlist item . get title ( ) ) ; log . d ( tag , str_ + playlist item . get id ( ) ) ; log . d ( tag , str_ + playlist item . get duration ( ) ) ; log . d ( tag , str_ + playlist item . get thumbnail url ( ) ) ; log . d ( tag , str_ ) ; } }
public serializer registry register abstract ( class < ? > abstract type , int id , type serializer factory factory ) { abstract factories . put ( abstract type , factory ) ; types . put ( id , abstract type ) ; ids . put ( abstract type , id ) ; return this ; }
public string to string ( ) { if ( root == null ) { return str_ ; } return format node ( root ) ; }
public void test throw on next ( ) { submission publisher < integer > p = basic publisher ( ) ; test subscriber s 1 = new test subscriber ( ) ; test subscriber s 2 = new test subscriber ( ) ; p . subscribe ( s 1 ) ; p . subscribe ( s 2 ) ; s 1 . await subscribe ( ) ; p . submit ( num_ ) ; s 1 . throw on call = bool_ ; p . submit ( num_ ) ; p . close ( ) ; s 2 . await complete ( ) ; assert equals ( num_ , s 2 . nexts ) ; s 1 . await complete ( ) ; assert equals ( num_ , s 1 . errors ) ; }
public guild role delete handler ( impl discord api api ) { super ( api , bool_ , str_ ) ; }
protected postgre sql module views loader ( ) { }
public string normalize request parameters ( ) throws io exception { if ( request parameters == null ) { return str_ ; } string builder sb = new string builder ( ) ; iterator < string > iter = request parameters . key set ( ) . iterator ( ) ; for ( int i = num_ ; iter . has next ( ) ; i ++ ) { string param = iter . next ( ) ; if ( o auth . oaut h_ signature . equals ( param ) || str_ . equals ( param ) ) { continue ; } if ( i > num_ ) { sb . append ( str_ ) ; } sb . append ( request parameters . get as query string ( param ) ) ; } return sb . to string ( ) ; }
void on seek complete ( ) ;
public void read state ( data input stream stream ) throws io exception { int len = mt . length ; for ( int x = num_ ; x < len ; x ++ ) mt [ x ] = stream . read int ( ) ; len = mag 0 1 . length ; for ( int x = num_ ; x < len ; x ++ ) mag 0 1 [ x ] = stream . read int ( ) ; mti = stream . read int ( ) ; _ _next next gaussian = stream . read double ( ) ; _ _have next next gaussian = stream . read boolean ( ) ; }
public void mouse released ( mouse event e ) { get handler ( ) . mouse released ( e ) ; }
private void update progress ( string progress label , int progress ) { if ( my host != null && ( ( progress != previous progress ) || ( ! progress label . equals ( previous progress label ) ) ) ) { my host . update progress ( progress label , progress ) ; } previous progress = progress ; previous progress label = progress label ; }
public void report gps geofence add status ( int geofence id , int status ) { if ( debug ) log . d ( tag , str_ + geofence id + str_ + status ) ; acquire wake lock ( ) ; message m = m geofence handler . obtain message ( ad d_ geofenc e_ callback ) ; m . arg 1 = geofence id ; m . arg 2 = get geofence status ( status ) ; m geofence handler . send message ( m ) ; }
public custom update ( final network network , final file file ) { this . network = network ; string builder script text = new string builder ( ) ; string new line = system . get property ( str_ ) ; scanner scanner = null ; try { scanner = new scanner ( new file input stream ( file ) ) ; while ( scanner . has next line ( ) ) { script text . append ( scanner . next line ( ) + new line ) ; } } catch ( file not found exception e ) { e . print stack trace ( ) ; } finally { scanner . close ( ) ; } this . script string = script text . to string ( ) ; init ( ) ; }
public void remove chat listener ( chat manager listener listener ) { chat manager listeners . remove ( listener ) ; }
public inference variable create inference variable ( ) { inference variable impl inference variable = new inference variable impl ( ) ; return inference variable ; }
public department object ( int id ) { this . id = id ; }
public void run test ( ) throws throwable { document doc ; node root node ; boolean state ; doc = ( document ) load ( str_ , bool_ ) ; root node = doc . get document element ( ) ; state = root node . is supported ( str_ , str_ ) ; assert true ( str_ , state ) ; }
public input stream stream ( ) throws http request exception { input stream stream ; if ( code ( ) < htt p_ ba d_ request ) try { stream = get connection ( ) . get input stream ( ) ; } catch ( io exception e ) { throw new http request exception ( e ) ; } else { stream = get connection ( ) . get error stream ( ) ; if ( stream == null ) try { stream = get connection ( ) . get input stream ( ) ; } catch ( io exception e ) { if ( content length ( ) > num_ ) throw new http request exception ( e ) ; else stream = new byte array input stream ( new byte [ num_ ] ) ; } } if ( ! uncompress || ! header . encodin g_ gzip . equals ( content encoding ( ) ) ) return stream ; else try { return new gzip input stream ( stream ) ; } catch ( io exception e ) { throw new http request exception ( e ) ; } }
void remove user settings ( user user ) ;
boolean is in debug mode ( ) ;
public static chart theme create j free theme ( ) { return new standard chart theme ( str_ ) ; }
public node filter and ( node filter filter ) { if ( filter == null ) { return this ; } return new node filter and ( this , filter ) ; }
private void traverse reverse level order ( final tree tree ) { map < integer , list < data likelihood delegate . node operation > > operation map = new hash map < integer , list < data likelihood delegate . node operation > > ( ) ; traverse level order ( tree , tree . get root ( ) , num_ , operation map ) ; list < integer > key list = new array list < integer > ( operation map . key set ( ) ) ; collections . sort ( key list , collections . reverse order ( ) ) ; for ( integer key : key list ) { list < data likelihood delegate . node operation > op list = operation map . get ( key ) ; for ( data likelihood delegate . node operation op : op list ) { node operations . add ( op ) ; } } }
private void load profile ( string user id , string name ) { final intent user profile intent = new intent ( get activity ( ) , user profile activity . class ) ; user profile intent . put extra ( app constants . keys . use r_ id , user id ) ; user profile intent . put extra ( app constants . keys . use r_ name , name ) ; user profile intent . put extra ( app constants . keys . servic e_ scree n_ type , app constants . service screen type . profile ) ; start activity ( user profile intent ) ; }
boolean on query text submit ( string query ) ;
public cpu ( string name , long user , long nice , long system , long idle , long irq ) { this . name = name ; this . user = user ; this . nice = nice ; this . system = system ; this . idle = idle ; this . irq = irq ; cpu c = last . get ( name ) ; if ( c != null ) { prev . put ( name , c ) ; } last . put ( name , this ) ; }
protected final content assist processor test builder new builder ( ) throws exception { content assist processor test builder builder = new content assist processor test builder ( get injector ( ) , this ) ; return builder ; }
private int measure height ( int measure spec ) { int result = num_ ; int spec mode = measure spec . get mode ( measure spec ) ; int spec size = measure spec . get size ( measure spec ) ; if ( count > up limit ) { return m text height + get padding top ( ) + get padding bottom ( ) ; } if ( spec mode == measure spec . exactly ) { result = spec size ; } else { result = num_ * radius + get padding top ( ) + get padding bottom ( ) ; if ( spec mode == measure spec . a t_ most ) { result = math . min ( result , spec size ) ; } } return result ; }
protected void prepare ( ) { process info parameter [ ] para = get parameter ( ) ; for ( int i = num_ ; i < para . length ; i ++ ) { string name = para [ i ] . get parameter name ( ) ; if ( para [ i ] . get parameter ( ) == null ) ; else if ( name . equals ( str_ ) ) m _ processing = ( string ) para [ i ] . get parameter ( ) ; else log . log ( level . severe , str_ + name ) ; } m _ a d_ package _ imp _ id = get record _ id ( ) ; }
public void remove edge ( n from , n to ) ;
private static string generate like uppercase ( string column , string value ) { string buffer buffer = new string buffer ( ) ; string column value = value ; if ( column value == null ) { column value = str_ ; } if ( string utils . is not empty ( column ) ) { buffer . append ( quer y_ upper ) . append ( quer y_ star t_ parentesis ) . append ( column ) . append ( quer y_ en d_ parentesis ) . append ( quer y_ like ) . append ( quer y_ valu e_ delimiter ) . append ( quer y_ lik e_ wildcard ) . append ( column value . to upper case ( ) ) . append ( quer y_ lik e_ wildcard ) . append ( quer y_ valu e_ delimiter ) ; } return buffer . to string ( ) ; }
protected boolean is session stale ( session session , long time now ) { if ( session != null ) { int max inactive interval = session . get max inactive interval ( ) ; if ( max inactive interval >= num_ ) { int time idle = ( int ) ( ( time now - session . get this accessed time ( ) ) / num_ ) ; if ( time idle >= max inactive interval ) { return bool_ ; } } } return bool_ ; }
public plot ( ) { super ( ) ; paint helper = new paint helper ( ) ; current dataset = - num_ ; }
protected void do remove ( ) { i structured selection selection = ( i structured selection ) table viewer . get selection ( ) ; vector input = ( vector ) table viewer . get input ( ) ; input . remove all ( selection . to list ( ) ) ; table viewer . set input ( input ) ; this . do make dirty ( ) ; }
private void select column ( int col ) { for ( int row = num_ ; row < data grid . get row count ( ) ; row ++ ) spreadsheet view . get selection model ( ) . select ( row , spreadsheet view . get columns ( ) . get ( col ) ) ; }
public messages is messages from group allowed query ( vk api client client , actor actor , int group id , int user id ) { super ( client , str_ , is messages from group allowed response . class ) ; access token ( actor . get access token ( ) ) ; group id ( group id ) ; user id ( user id ) ; }
void register scope change listener ( i scope change listener listener ) ;
public void on task start ( hadoop task info info , long ts ) { evts . add ( new t2 < > ( event name ( info , str_ ) , ts ) ) ; }
public void write ( output stream out , drawing drawing , affine transform drawing transform , dimension image size ) throws io exception { write ( out , drawing , drawing . get children ( ) , drawing transform , image size ) ; }
private string stringify ip ( byte [ ] ip ) { string temp = str_ ; for ( int i = num_ ; i < ip . length / num_ ; i ++ ) { temp += integer . to string ( ip [ i ] & num_ ) + str_ ; } temp = temp . substring ( num_ , temp . length ( ) - num_ ) ; temp += str_ ; for ( int i = ip . length / num_ ; i < ip . length ; i ++ ) { temp += integer . to string ( ip [ i ] & num_ ) + str_ ; } temp = temp . substring ( num_ , temp . length ( ) - num_ ) ; return temp ; }
public boolean is empty ( ) { return first == null ; }
private void start thread dump ( ) throws io exception { if ( current record . get record properties ( ) . is thread dump enabled ( ) ) { create folder ( current record . get folder path ( ) + file . separator + record constants . threa d_ dum p_ folde r_ name ) ; current scheduled thread dump = scheduled executor service . schedule with fixed delay ( new threads dump runnable ( current record ) , num_ , current record . get record properties ( ) . get thread dump delay in seconds ( ) , time unit . seconds ) ; } }
public static void verify value bounds ( date time field field , int value , int lower bound , int upper bound ) { if ( ( value < lower bound ) || ( value > upper bound ) ) { throw new illegal field value exception ( field . get type ( ) , integer . value of ( value ) , integer . value of ( lower bound ) , integer . value of ( upper bound ) ) ; } }
public boolean should ignore touch event ( ) { return m swipe listener . close swipe if need ( ) ; }
public string sql object detail _set column nullable ( string catalog name , string schema name , string table name , string column name ) ;
public v pop ( ) throws index out of bounds exception { if ( top == num_ ) { throw new index out of bounds exception ( str_ ) ; } return values [ -- top + locals ] ; }
protected static void fill edgepaths table ( final c connection connection , final list < i navi edge > edges ) throws sql exception { final string query = str_ + c table names . edg e_ path s_ table + str_ ; final prepared statement prepared statement = connection . get connection ( ) . prepare statement ( query ) ; try { for ( final i navi edge edge : edges ) { for ( final c bend bend : edge . get bends ( ) ) { prepared statement . set int ( num_ , edge . get id ( ) ) ; prepared statement . set int ( num_ , edge . get bends ( ) . index of ( bend ) ) ; prepared statement . set double ( num_ , bend . get x ( ) ) ; prepared statement . set double ( num_ , bend . get y ( ) ) ; prepared statement . add batch ( ) ; } } prepared statement . execute batch ( ) ; } catch ( final sql exception exception ) { c utility functions . log exception ( exception ) ; c utility functions . log exception ( exception . get next exception ( ) ) ; } finally { prepared statement . close ( ) ; } }
public void end element ( stylesheet handler handler , string uri , string local name , string raw name ) throws org . xml . sax . sax exception { if ( m _saved last order != null && ! m _saved last order . empty ( ) ) get elem def ( ) . set last order ( m _saved last order . pop ( ) ) ; if ( ! get elem def ( ) . get required found ( ) ) handler . error ( xslt error resources . e r_ require d_ ele m_ no t_ found , new object [ ] { get elem def ( ) . get required elem ( ) } , null ) ; }
public boolean is set registry ( ) { return this . registry != null ; }
public input stream execute and return stdout as input stream ( string [ ] raw args , boolean merge args with default options ) throws io exception , interrupted exception , mame execution exception ;
protected void sequence _ wildcard new notation ( i serialization context context , wildcard semantic object ) { generic sequencer . create sequence ( context , semantic object ) ; }
public byte [ ] parse hex binary ( string lexical xsd hex binary ) ;
public fd model load model ( string filename , string cwd ) { string fn = filename ; if ( fn == null ) return null ; if ( ! fn . ends with ( str_ + file extension ) ) { fn += str_ + file extension ; } model persistence handler persistence handler = create model persistence handler ( resource set provider . get ( ) ) ; return ( fd model ) persistence handler . load model ( fn , cwd ) ; }
public g generate ( int num vertices , double p , long random seed ) { g g = builder . create graph ( ) ; for ( int i = num_ ; i < num vertices ; i ++ ) builder . add vertex ( g ) ; return generate ( g , p , random seed ) ; }
public void add all ( iterator < ? extends number > values ) { while ( values . has next ( ) ) { add ( values . next ( ) . double value ( ) ) ; } }
public date time formatter builder append literal ( string literal ) { objects . require non null ( literal , str_ ) ; if ( literal . length ( ) > num_ ) { if ( literal . length ( ) == num_ ) { append internal ( new char literal printer parser ( literal . char at ( num_ ) ) ) ; } else { append internal ( new string literal printer parser ( literal ) ) ; } } return this ; }
public boolean is verbose ( ) { return verbose ; }
protected abstract void write skip data ( int level , index output skip buffer ) throws io exception ;
public time value throttle time ( ) { return time value . time value nanos ( throttle time in nanos . get ( ) ) ; }
public void close ( ) ;
public block dx t1 ( ) { }
public void destroy ( ) { if ( m native tab content manager != num_ ) { native destroy ( m native tab content manager ) ; m native tab content manager = num_ ; } }
byte [ ] char to byte ( char char 1 , string encoding ) ;
public static string encode path ( string path , string encoding ) { return encode uri component ( path , encoding , uri part . path ) ; }
boolean contains ( e item ) ;
public dynamic layout ( char sequence base , char sequence display , text paint paint , int width , alignment align , float spacingmult , float spacingadd , boolean includepad ) { this ( base , display , paint , width , align , spacingmult , spacingadd , includepad , null , num_ ) ; }
public path impl put ( string scheme , path impl path ) { scheme root old root = get update map ( ) . put ( scheme , new scheme root ( path ) ) ; return old root != null ? old root . get root ( ) : null ; }
public improved orientation sensor 2 provider ( sensor manager sensor manager ) { super ( sensor manager ) ; sensor list . add ( sensor manager . get default sensor ( sensor . typ e_ gyroscope ) ) ; sensor list . add ( sensor manager . get default sensor ( sensor . typ e_ rotatio n_ vector ) ) ; }
public void on map cleanup ( ) throws io exception , interrupted exception { }
public static native float floor ( float value ) ;
public boolean update waypoint ( waypoint waypoint ) ;
public number numeric value ( ) ;
protected void scan data ( ) throws exception { while ( ( ! this . reader . at eof ( ) ) && ( this . builder . get result ( ) == null ) ) { string str = xml util . read ( this . reader , str_ ) ; char ch = str . char at ( num_ ) ; if ( ch == str_ ) { xml util . process entity ( str , this . reader , this . entity resolver ) ; continue ; } switch ( ch ) { case str_ : this . scan some tag ( bool_ , null , new properties ( ) ) ; break ; case str_ : case str_ : case str_ : case str_ : break ; default : xml util . error invalid input ( reader . get system id ( ) , reader . get line nr ( ) , str_ + ch + str_ + integer . to hex string ( ( int ) ch ) + str_ ) ; } } }
private void create ( int size ) { int count = size ; while ( count -- > num_ ) { list . add ( new segment ( ) ) ; } }
default field declaration add protected field ( class < ? > type class , string name ) { return add field ( type class , name , modifier . protected ) ; }
public void add action ( int icon , char sequence title , action . on action listener listener ) { add action ( icon , title , listener , null , null , null , null ) ; }
public pair < pair < string , string [ ] > , list < string > > rewrite ( list < string > results ) { string command id = null ; string [ ] args = null ; list < string > rewritten results = new array list < > ( ) ; for ( string result : results ) { triple triple = rewrite ( result ) ; rewritten results . add ( triple . m str ) ; command id = triple . m id ; args = triple . m args ; } return new pair < > ( new pair < > ( command id , args ) , rewritten results ) ; }
public boolean has attribute ( string name ) { return ( node . get attributes ( ) . get named item ( name ) != null ) ; }
public metadata create metadata ( ) { metadata impl metadata = new metadata impl ( ) ; return metadata ; }
public web session entity marshal attributes ( ) throws io exception { final web session entity marshaled = new web session entity ( get id ( ) , entity . create time ( ) , access time , max inactive interval ) ; for ( final map . entry < string , object > entry : attributes ( ) . entry set ( ) ) marshaled . put attribute ( entry . get key ( ) , marshal ( entry . get value ( ) ) ) ; return marshaled ; }
map . entry < k , v > poll first entry ( ) ;
public pair < position impl , position impl > cursor updated ( managed cursor cursor , position new position ) { check not null ( cursor ) ; long stamp = rw lock . write lock ( ) ; try { item item = cursors . get ( cursor . get name ( ) ) ; if ( item == null ) { return null ; } position impl previous slowest consumer = heap . get ( num_ ) . position ; item . position = ( position impl ) new position ; if ( item . idx == num_ || get parent ( item ) . position . compare to ( item . position ) <= num_ ) { sift down ( item ) ; } else { sift up ( item ) ; } position impl new slowest consumer = heap . get ( num_ ) . position ; return pair . create ( previous slowest consumer , new slowest consumer ) ; } finally { rw lock . unlock write ( stamp ) ; } }
public boolean is message bus proxy supported ( ) { return message bus proxy supported ; }
public void start preview ( ) { if ( camera != null && ! previewing ) { camera . start preview ( ) ; previewing = bool_ ; } }
public space type descriptor builder add path index ( string path , space index type index type ) { return add path index ( path , index type , bool_ ) ; }
public void log ( level log level , string msg , object param ) { if ( ! internal is loggable ( log level ) ) { return ; } log record record = new log record ( log level , msg ) ; record . set logger name ( this . name ) ; record . set parameters ( new object [ ] { param } ) ; set resource bundle ( record ) ; log ( record ) ; }
public void store ( word val , offset offset ) { this . plus ( offset ) . store ( val ) ; }
public void touch ( ) { get meta ( ) . set last modified ( gregorian calendar . get instance ( ) . get time ( ) ) ; }
public node set dtm ( int node , dtm manager dtm manager ) { super ( ) ; m _manager = dtm manager ; add node ( node ) ; }
public multi directional simplex ( final int n , double side length , final double khi , final double gamma ) { super ( n , side length ) ; this . khi = khi ; this . gamma = gamma ; }
public void reset ( int index ) { m current colors [ index ] = colo r_ scheme . m default colors [ index ] ; }
public static function < json object , byte [ ] > as bytes ( ) { return null ; }
public abstract rule create rule ( ) ;
public static void write empty n best ( int source input id , print stream nbest list writer ) { string builder sb = new string builder ( num_ ) ; string nl = system . get property ( str_ ) ; sb . append ( source input id ) . append ( str_ ) . append ( compiled phrase table . fiel d_ delim ) . append ( str_ ) ; sb . append ( str_ ) . append ( compiled phrase table . fiel d_ delim ) . append ( str_ ) ; sb . append ( str_ ) . append ( compiled phrase table . fiel d_ delim ) . append ( str_ ) ; sb . append ( str_ ) . append ( compiled phrase table . fiel d_ delim ) . append ( str_ ) ; sb . append ( str_ ) ; sb . append ( nl ) ; nbest list writer . append ( sb . to string ( ) ) ; }
date time print context ( temporal accessor temporal , date time formatter formatter ) { super ( ) ; this . temporal = adjust ( temporal , formatter ) ; this . formatter = formatter ; }
public long startcode ( ) { return long . parse long ( fields [ num_ ] ) ; }
public static int determine consecutive digit count ( char sequence msg , int startpos ) { int count = num_ ; int len = msg . length ( ) ; int idx = startpos ; if ( idx < len ) { char ch = msg . char at ( idx ) ; while ( is digit ( ch ) && idx < len ) { count ++ ; idx ++ ; if ( idx < len ) { ch = msg . char at ( idx ) ; } } } return count ; }
public abstract void scroll to finish activity ( ) ;
public static < t > boolean contains ( enumeration < t > enumeration , t element ) { if ( enumeration != null ) { while ( enumeration . has more elements ( ) ) { t candidate = enumeration . next element ( ) ; if ( object utils . null safe equals ( candidate , element ) ) return bool_ ; } } return bool_ ; }
private void execute download ( state state , android http client client , http get request ) throws stop request , retry download { inner state inner state = new inner state ( ) ; byte data [ ] = new byte [ constants . buffe r_ size ] ; check paused or canceled ( state ) ; setup destination file ( state , inner state ) ; add request headers ( inner state , request ) ; check connectivity ( state ) ; m notification . on download state changed ( i downloader client . stat e_ connecting ) ; http response response = send request ( state , client , request ) ; handle exceptional status ( state , inner state , response ) ; if ( constants . logv ) { log . v ( constants . tag , str_ + m info . m uri ) ; } process response headers ( state , inner state , response ) ; input stream entity stream = open response entity ( state , response ) ; m notification . on download state changed ( i downloader client . stat e_ downloading ) ; transfer data ( state , inner state , data , entity stream ) ; }
static void copy ( input stream in , output stream out ) throws io exception { byte [ ] tmp = new byte [ num_ ] ; int len = num_ ; while ( bool_ ) { len = in . read ( tmp ) ; if ( len <= num_ ) { break ; } out . write ( tmp , num_ , len ) ; } }
public static boolean is space ( int c ) { return c < num_ && ( chars [ c ] & mas k_ space ) != num_ ; }
public static void main ( final string [ ] args ) { dom test case . do main ( nodereplacechildnewchilddiffdocument . class , args ) ; }
public table < c , r , v > compute transposed table ( ) { final table < c , r , v > transposed = new table < > ( ) ; for ( r row : row key set ( ) ) for ( c col : column key set ( ) ) transposed . put ( col , row , get ( row , col ) ) ; return transposed ; }
void move view to ( item panel other ) { other . set entity view ( view ) ; set entity view ( null ) ; }
public common grams query filter ( common grams filter input ) { super ( input ) ; }
static translated frame frame from code ( final int value ) { return interna l_ values [ value ] ; }
public string to string ( boolean b ) ;
protected void update index set for ( int i , double c ) throws exception { if ( m _alpha [ i ] == num_ && m _alpha star [ i ] == num_ ) { m _i set [ i ] = i1 ; m _ i0 . delete ( i ) ; } else if ( m _alpha [ i ] > num_ ) { if ( m _alpha [ i ] < c ) { if ( ( m _i set [ i ] & i0 ) == num_ ) { m _ i0 . insert ( i ) ; } m _i set [ i ] = i 0a ; } else { m _i set [ i ] = i3 ; m _ i0 . delete ( i ) ; } } else { if ( m _alpha star [ i ] < c ) { if ( ( m _i set [ i ] & i0 ) == num_ ) { m _ i0 . insert ( i ) ; } m _i set [ i ] = i 0b ; } else { m _i set [ i ] = i2 ; m _ i0 . delete ( i ) ; } } }
protected void configure mq connection factory ( mq connection factory cf ) throws jms exception { cf . set transport type ( jmsc . mqjm s_ t p_ clien t_ m q_ tcpip ) ; cf . set host name ( config . parms . get string ( str_ ) ) ; cf . set port ( config . parms . get int ( str_ ) ) ; cf . set channel ( config . parms . get string ( str_ ) ) ; cf . set queue manager ( config . parms . get string ( str_ ) ) ; }
public void write ( output stream out , java . util . list < figure > figures ) throws io exception { rectangle 2 d . double drawing rect = null ; for ( figure f : figures ) { if ( drawing rect == null ) { drawing rect = f . get bounds ( ) ; } else { drawing rect . add ( f . get bounds ( ) ) ; } } affine transform tx = new affine transform ( ) ; tx . translate ( - math . min ( num_ , drawing rect . x ) , - math . min ( num_ , drawing rect . y ) ) ; write ( out , figures , tx , new dimension ( ( int ) ( math . abs ( drawing rect . x ) + drawing rect . width ) , ( int ) ( math . abs ( drawing rect . y ) + drawing rect . height ) ) ) ; }
private void read object ( object input stream s ) throws invalid object exception { throw new invalid object exception ( str_ ) ; }
public bios command result do delete shares ( storage system storage , file device input output args ) throws controller exception ;
void remove ( string identifier ) throws guacamole exception ;
public void add indices ( collection < i index > indices ) { for ( iterator < i index > it = indices . iterator ( ) ; it . has next ( ) ; ) { add index ( ( i index ) it . next ( ) ) ; } }
private deferred result < word counts response > process document ( string document link ) { return this . fetch document ( document link ) . then apply ( null ) . then apply ( null ) . exceptionally ( null ) ; }
public void force connection ( dtn host another host , string interface id , boolean up ) { network interface ni ; network interface no ; if ( interface id != null ) { ni = get interface ( interface id ) ; no = another host . get interface ( interface id ) ; assert ( ni != null ) : str_ + interface id ; assert ( no != null ) : str_ + interface id ; } else { ni = get interface ( num_ ) ; no = another host . get interface ( num_ ) ; assert ( ni . get interface type ( ) . equals ( no . get interface type ( ) ) ) : str_ ; } if ( up ) { ni . create connection ( no ) ; } else { ni . destroy connection ( no ) ; } }
enabled ( final f enabled ) { this . enabled = enabled ; }
public static ad node make ad tree ( instances instances ) { array list < integer > n records = new array list < integer > ( instances . num instances ( ) ) ; for ( int i record = num_ ; i record < instances . num instances ( ) ; i record ++ ) { n records . add ( new integer ( i record ) ) ; } return make ad tree ( num_ , n records , instances ) ; }
public call location model ( source location tag src loc , edge call edge ) { this ( src loc . get clz ( ) , src loc . get line ( ) , call edge ) ; }
public void process key event ( key event evt ) { if ( input handler == null ) return ; switch ( evt . get id ( ) ) { case key event . ke y_ typed : input handler . key typed ( evt ) ; break ; case key event . ke y_ pressed : input handler . key pressed ( evt ) ; break ; case key event . ke y_ released : input handler . key released ( evt ) ; break ; } if ( input map == null ) input map = get input map ( ) ; object o = input map . get ( key stroke . get key stroke for event ( evt ) ) ; if ( o != null ) { if ( action map == null ) action map = get action map ( ) ; object a = action map . get ( o ) ; if ( a != null ) ( ( action ) a ) . action performed ( new action event ( this , action event . actio n_ performed , o . to string ( ) , evt . get modifiers ( ) ) ) ; } }
public serialization suite chromosome factory ( chromosome factory < test chromosome > default factory ) throws illegal state exception { this . default factory = default factory ; if ( properties . ct g_ seed s_ fil e_ in != null ) { this . previous suite . add all ( test suite serialization . load tests ( properties . ct g_ seed s_ fil e_ in ) ) ; } else { this . previous suite . add all ( test suite serialization . load tests ( properties . see d_ dir + file . separator + properties . targe t_ class ) ) ; } }
protected string generate id ( ) { string result ; string [ ] authors ; string [ ] parts ; result = m _ id ; if ( result . length ( ) == num_ ) { if ( exists ( field . author ) && exists ( field . year ) ) { authors = get authors ( ) ; if ( authors [ num_ ] . index of ( str_ ) > - num_ ) { parts = authors [ num_ ] . split ( str_ ) ; result = parts [ num_ ] ; } else { parts = authors [ num_ ] . split ( str_ ) ; if ( parts . length == num_ ) { result = parts [ num_ ] ; } else { result = parts [ parts . length - num_ ] ; } } result += get value ( field . year ) ; result = result . replace all ( str_ , str_ ) ; } } if ( result . length ( ) == num_ ) { result = missin g_ id ; } return result ; }
public image master ( url properties url ) { properties props = new properties ( ) ; load properties ( props , properties url ) ; set properties ( props ) ; }
public string to string ( ) { return super . to string ( ) + str_ + get reason code ( ) ; }
private void update progress ( string progress label , int progress ) { if ( my host != null && ( ( progress != previous progress ) || ( ! progress label . equals ( previous progress label ) ) ) ) { my host . update progress ( progress label , progress ) ; } previous progress = progress ; previous progress label = progress label ; }
public boolean has killed shared ( final string name ) { final string count = player . get keyed slot ( kil l_ slo t_ name , prefi x_ shared + name ) ; return math helper . parse int default ( count , num_ ) > num_ ; }
public void load all ( boolean verbose ) throws class not found exception { set < string > names = get units ( ) . key set ( ) ; for ( string s : names ) { if ( verbose ) { logger . get logger ( isolated class loader . class . get name ( ) ) . log ( level . info , str_ + s ) ; } class c = this . find class ( s ) ; classes . put ( s , c ) ; } }
public boolean add sifter recipe ( item stack a item to sift , item stack [ ] a sifted items , int [ ] a chances , int a duration , int a e ut ) ;
public void mov ( register dst , int imm ) { mov ( dst , imm & num_ ) ; }
protected void complete ui install ( ) { this . set shows root handles ( tree . get shows root handles ( ) ) ; update renderer ( ) ; update depth offset ( ) ; set selection model ( tree . get selection model ( ) ) ; tree state = create layout cache ( ) ; configure layout cache ( ) ; update size ( ) ; }
protected charset provider ( ) { security manager sm = system . get security manager ( ) ; if ( sm != null ) sm . check permission ( new runtime permission ( str_ ) ) ; }
public final cert path builder result build ( cert path parameters params ) throws cert path builder exception , invalid algorithm parameter exception { return spi impl . engine build ( params ) ; }
public egl surface create window surface ( object surface ) { if ( ! ( surface instanceof surface ) && ! ( surface instanceof surface texture ) ) { throw new runtime exception ( str_ + surface ) ; } int [ ] surface attribs = { eg l 1 4 . eg l_ none } ; egl surface egl surface = eg l 1 4 . egl create window surface ( m egl display , m egl config , surface , surface attribs , num_ ) ; check egl error ( str_ ) ; if ( egl surface == null ) { throw new runtime exception ( str_ ) ; } return egl surface ; }
public variable reference add statement ( statement statement ) ;
public void start zero suggest ( profile profile , string omnibox text , string url , boolean is query in omnibox , boolean focused from fakebox ) { if ( profile == null || text utils . is empty ( url ) ) return ; m native autocomplete controller android = native init ( profile ) ; if ( m native autocomplete controller android != num_ ) { native on omnibox focused ( m native autocomplete controller android , omnibox text , url , is query in omnibox , focused from fakebox ) ; } }
protected sql with params build sql with indexed props ( string sql ) { if ( ! enable named queries || ! extract index and sql . has named parameters ( sql ) ) { return null ; } string new sql ; list < tuple > prop list ; if ( cache named queries && named param sql cache . contains key ( sql ) ) { new sql = named param sql cache . get ( sql ) ; prop list = named param index prop cache . get ( sql ) ; } else { extract index and sql extract index and sql = extract index and sql . from ( sql ) ; new sql = extract index and sql . get new sql ( ) ; prop list = extract index and sql . get index prop list ( ) ; named param sql cache . put ( sql , new sql ) ; named param index prop cache . put ( sql , prop list ) ; } if ( sql . equals ( new sql ) ) { return null ; } list < object > index prop list = new array list < object > ( prop list ) ; return new sql with params ( new sql , index prop list ) ; }
public void add muted username ( final string username ) { add muted username ( username , null ) ; }
public int next int ( ) { return next int ( this . mean ) ; }
public static string save ( project project , encoder encoder ) throws speedment config exception { if ( project == null ) { return str_ ; } else { try { final map < string , object > root = new hash map < > ( ) ; root . put ( root , project . get data ( ) ) ; return encoder . encode ( root ) ; } catch ( final illegal argument exception ex ) { throw new speedment config exception ( ex ) ; } } }
public geo server connection list tool ( geo server connect update interface geo server connect update ) { super ( ) ; this . geo server connect update = geo server connect update ; create ui ( ) ; }
public firewire broadcast capture device ( ) { super ( ) ; }
public long duration ( ) { if ( m player != null && m player . is initialized ( ) ) { return m player . duration ( ) ; } return - num_ ; }
public void test session leader reset ( ) throws throwable { caller context . execute ( null ) ; await ( ) ; server session context session = state . get state machine ( ) . executor ( ) . context ( ) . sessions ( ) . get session ( num_ ) ; assert not null ( session ) ; assert equals ( session . id ( ) , num_ ) ; assert equals ( session . get timestamp ( ) , timestamp ) ; caller context . execute ( null ) ; await ( ) ; assert equals ( session . get timestamp ( ) , timestamp + num_ ) ; }
public boolean use start tls ( ) { return state . use start tls ; }
void delete string ( int start offset , int end offset ) ;
protected enum set option ( option set set , string name , string description , string [ ] options , string default values ) { super ( set , enu m_ se t_ option , name , description ) ; this . options = options ; this . values = this . default values = find values ( default values ) ; }
public groups get callback server settings query ( vk api client client , actor actor , int group id ) { super ( client , str_ , get callback server settings response . class ) ; access token ( actor . get access token ( ) ) ; group id ( group id ) ; }
private string exit ( ) throws exception { log . info ( str_ ) ; process info pi = get process info ( ) ; object result = do it ( replication local . start , str_ , null ) ; return str_ ; }
public static < t > void on next dropped ( t t ) { if ( t != null ) { consumer < object > hook = hooks . on next dropped hook ; if ( hook == null ) { throw exceptions . fail with cancel ( ) ; } hook . accept ( t ) ; } }
public static drawable generate round border drawable ( resources res , float radii , float border width , int press color , int default color ) { radii = dp to px ( res , radii ) ; border width = dp to px ( res , border width ) ; float [ ] out radii = new float [ ] { radii , radii , radii , radii , radii , radii , radii , radii } ; rect f inset = new rect f ( border width , border width , border width , border width ) ; shape round rect shape = new round rect shape ( out radii , inset , null ) ; shape drawable shop drawable press = new shape drawable ( round rect shape ) ; shop drawable press . get paint ( ) . set color ( press color ) ; shape round rect shape normal = new round rect shape ( out radii , inset , null ) ; shape drawable shop drawable normal = new shape drawable ( round rect shape normal ) ; shop drawable normal . get paint ( ) . set color ( default color ) ; state list drawable bg state drawable = new state list drawable ( ) ; bg state drawable . add state ( new int [ ] { android . r . attr . state _pressed } , shop drawable press ) ; bg state drawable . add state ( new int [ ] { } , shop drawable normal ) ; return bg state drawable ; }
public boolean is clear whitespace lines enabled ( ) { return clear whitespace lines ; }
public document conversion test ( ) throws exception { html = new file ( resource + str_ ) ; }
public boolean is set param code ( ) { return this . param code != null ; }
public boolean is transient ( ) { return transient _var ; }
public ntru signing private key parameters ( byte [ ] b , ntru signing key generation parameters params ) throws io exception { this ( new byte array input stream ( b ) , params ) ; }
public static void main ( string [ ] argv ) { run classifier ( new decision stump ( ) , argv ) ; }
public void add exceptional successor ( block impl b , type mirror cause ) { if ( exceptional successors == null ) { exceptional successors = new hash map < > ( ) ; } set < block > blocks = exceptional successors . get ( cause ) ; if ( blocks == null ) { blocks = new hash set < block > ( ) ; exceptional successors . put ( cause , blocks ) ; } blocks . add ( b ) ; b . add predecessor ( this ) ; }
boolean is read only ( ) ;
public healer behaviour ( final int cost ) { super ( ) ; price calculator . add covered item ( str_ , cost ) ; }
public boolean bool ( x path context xctxt ) throws javax . xml . transform . transformer exception { return ( m _left . bool ( xctxt ) || m _right . bool ( xctxt ) ) ; }
public void bind null ( int index ) { }
void on environment output event ( environment output event event ) ;
public void run test ( ) throws throwable { document doc ; element doc elem ; node list element list ; doc = ( document ) load ( str_ , bool_ ) ; doc elem = doc . get document element ( ) ; element list = doc elem . get elements by tag name ns ( str_ , str_ ) ; assert size ( str_ , num_ , element list ) ; }
protected void dispose ( ) { final web socket current web socket = web socket ; if ( current web socket != null && current web socket . is open ( ) ) { try { current web socket . disconnect ( web socket close code . away . get code ( ) ) ; } catch ( final exception exception ) { post error event ( exception ) ; } } }
public boolean is cached ( string request url , int max width , int max height , scale type scale type ) { throw if not on main thread ( ) ; string cache key = get cache key ( request url , max width , max height , scale type ) ; return m cache . get bitmap ( cache key ) != null ; }
public static completable future < transport > bind ( transport config config ) { return new transport ( config ) . bind 0 ( ) ; }
public void close ( ) throws java . io . io exception { }
public static double filter ( double value , double lastvalue , double fail ) { return ( value == fail ) ? lastvalue : value ; }
public object invoke ( object target , object ... arguments ) ;
symbol find inherited member type ( env < attr context > env , type site , name name , type symbol c ) { symbol best so far = type not found ; symbol sym ; type st = types . supertype ( c . type ) ; if ( st != null && st . has tag ( class ) ) { sym = find member type ( env , site , name , st . tsym ) ; if ( sym . kind < best so far . kind ) best so far = sym ; } for ( list < type > l = types . interfaces ( c . type ) ; best so far . kind != ambiguous && l . non empty ( ) ; l = l . tail ) { sym = find member type ( env , site , name , l . head . tsym ) ; if ( best so far . kind < ambiguous && sym . kind < ambiguous && sym . owner != best so far . owner ) best so far = new ambiguity error ( best so far , sym ) ; else if ( sym . kind < best so far . kind ) best so far = sym ; } return best so far ; }
private void update progress ( int progress ) { if ( my host != null && progress != previous progress ) { my host . update progress ( progress ) ; } previous progress = progress ; }
public static string encode to string ( byte [ ] input , int offset , int len , int flags ) { try { return new string ( encode ( input , offset , len , flags ) , str_ ) ; } catch ( unsupported encoding exception e ) { throw new assertion error ( e ) ; } }
public gas stack draw gas ( forge direction side , int amount , boolean do transfer ) ;
public composite predicate ( ) { }
public places add query add ( user actor actor , string title , float latitude , float longitude ) { return new places add query ( get client ( ) , actor , title , latitude , longitude ) ; }
public static void invoke method ( string class name , string method name , string [ ] args ) { try { class . for name ( class name ) . get method ( method name , new class [ ] { string [ ] . class } ) . invoke ( null , new object [ ] { args } ) ; } catch ( exception e ) { internal error error = new internal error ( str_ + method name ) ; error . init cause ( e ) ; throw error ; } }
void action performed ( member member ) ;
commit request with files ( list < string > files ) ;
void on event ( string event name , object ... args ) ;
public list < view > find ( ) { final list < view > views = new array list < > ( ) ; if ( nested views finder != null ) { views . add all ( nested views finder . find ( ) ) ; } for ( final view group root view : root views ) { if ( include root view ) { views . add ( root view ) ; } views helper . find childs ( root view , views , new aggregated view filters ( view filters ) , add childs from filtered group views ) ; } if ( view comparator != null ) { collections . sort ( views , view comparator ) ; } return views ; }
void change bitrate ( int bitrate ) throws missing permissions exception , discord exception , rate limit exception ;
public static boolean is middle click ( mouse event e ) { return ( ( e . get button ( ) == mouse event . butto n2 ) && ( e . get click count ( ) == num_ ) ) ; }
protected void announce ideal individual ( address except ) { output . message ( str_ ) ; address target = null ; synchronized ( islands ) { iterator peers = islands . iterator ( ) ; while ( peers . has next ( ) ) target = ( address ) peers . next ( ) ; if ( ! target . equals ( null ) && ! target . equals ( except ) ) fire message ( target , m_ idea l_ found , null ) ; } }
public aggregate ( io buffer data , boolean copy ) { super ( type . strea m_ data ) ; if ( copy ) { byte [ ] array = new byte [ data . limit ( ) ] ; data . mark ( ) ; data . get ( array ) ; data . reset ( ) ; set data ( array ) ; } else { set data ( data ) ; } }
public static string strip of final under score ( final string identifier ) { final int final undescore pos = identifier . last index of ( str_ ) ; if ( final undescore pos < num_ ) { throw new illegal state exception ( str_ + identifier ) ; } return identifier . substring ( num_ , final undescore pos ) ; }
public void configure domain axes ( ) { for ( value axis axis : this . domain axes . values ( ) ) { if ( axis != null ) { axis . configure ( ) ; } } }
public boolean register device ( string uid , string key , string username ) throws data access exception { device info device = get device info ( uid ) ; if ( device != null && ! username . equals ( device . get username ( ) ) ) { return bool_ ; } store device ( uid , key , username ) ; return bool_ ; }
public boolean is locally configured ( ) { return locally configured ; }
public void test two node submit command ( ) throws throwable { test submit command ( num_ ) ; }
public void add taint propagation handler ( taint propagation handler handler ) { if ( this . taint propagation handlers == null ) this . taint propagation handlers = new hash set < > ( ) ; this . taint propagation handlers . add ( handler ) ; }
public void property change ( property change event e ) { string name = e . get property name ( ) ; object old value = e . get old value ( ) ; object new value = e . get new value ( ) ; if ( name . compare to ( str_ ) == num_ ) { if ( old value != null && old value instanceof list model ) { ( ( list model ) old value ) . remove list data listener ( this ) ; } if ( new value != null && new value instanceof list model ) { ( ( list model ) new value ) . add list data listener ( this ) ; } } else if ( name . compare to ( str_ ) == num_ ) { if ( old value != null && old value instanceof list selection model ) { ( ( list selection model ) old value ) . remove list selection listener ( this ) ; } if ( new value != null && new value instanceof list selection model ) { ( ( list selection model ) new value ) . add list selection listener ( this ) ; } fire property change ( accessible context . accessibl e_ selectio n_ property , boolean . value of ( bool_ ) , boolean . value of ( bool_ ) ) ; } }
protected abstract matrix 3 d v column flip ( ) { if ( columns > num_ ) { column zero += ( columns - num_ ) * column stride ; column stride = - column stride ; this . is no view = bool_ ; } return this ; }
public eip model wizard initial object creation page ( string page id ) { super ( page id ) ; }
public string normalize dim widths tip text ( ) { return str_ + str_ ; }
shop warehouse find shop warehouse by id ( long shop warehouse id ) ;
public static final int ehostunreach ( ) { return get platform error codes ( ) . ehostunreach ( ) ; }
public static boolean argument start tls argument ( ) throws argument exception { return boolean argument . builder ( optio n_ lon g_ star t_ tls ) . short identifier ( optio n_ shor t_ star t_ tls ) . description ( inf o_ descriptio n_ star t_ tls . get ( ) ) . build argument ( ) ; }
public int read ( char [ ] cbuf ) throws java . io . io exception { return num_ ; }
public boolean is stationary ( ) { return this . stationary ; }
public boolean has extended properties ( ) { return has repeating extension ( extended property . class ) ; }
public void test write message with negative enum value ( ) throws exception { sparse enum message message = sparse enum message . new builder ( ) . set sparse enum ( test sparse enum . spars e_ e ) . build ( ) ; assert true ( message . get sparse enum ( ) . get number ( ) < num_ ) ; byte [ ] raw bytes = message . to byte array ( ) ; sparse enum message message 2 = sparse enum message . parse from ( raw bytes ) ; assert equals ( test sparse enum . spars e_ e , message 2 . get sparse enum ( ) ) ; }
private static boolean is exclusive ( entitlement subject subject ) { if ( subject instanceof policy subject ) { return ( ( policy subject ) subject ) . is exclusive ( ) ; } else { return bool_ ; } }
private float compute delta ( float matrix m _i , float matrix v _i , iterable < float matrix message > messages ) { float f _mi = m _i . dot ( v _i ) ; float first = num_ ; float second = num_ ; for ( float matrix message msg j : messages ) { if ( is relevant ( msg j ) ) { float matrix v _j = msg j . get factors ( ) ; first += logf ( dot _of _difference ( m _i , v _j , v _i ) ) ; second += logfd ( dot _of _difference ( m _i , v _j , v _i ) ) ; } } return logfd ( f _mi ) * first + logf ( f _mi ) * second ; }
public ind test regression ad ( data set data set , double alpha ) { this . data set = data set ; this . data = new dense double matrix 2 d ( data set . get double data ( ) . to array ( ) ) ; this . variables = collections . unmodifiable list ( data set . get variables ( ) ) ; set alpha ( alpha ) ; }
public boolean is read only ( ) { return bool_ ; }
public static boolean has valid credentials ( ) { return api key != null && ! api key . is empty ( ) && auth token != null && ! auth token . is empty ( ) && has valid authenticated user ( ) ; }
public void close ( ) { if ( closed ) { throw new illegal state exception ( str_ + this ) ; } data section . close ( ) ; closed = bool_ ; }
private void return data ( object ret ) { if ( my host != null ) { my host . return data ( ret ) ; } }
void execute ns decls ( transformer impl transformer ) throws transformer exception { execute ns decls ( transformer , null ) ; }
static void validate header value ( char sequence value ) { if ( value == null ) { throw new null pointer exception ( str_ ) ; } for ( int i = num_ ; i < value . length ( ) ; i ++ ) { char c = value . char at ( i ) ; if ( c == num_ ) { throw new illegal argument exception ( str_ + value ) ; } } }
public void check owns no schemas ( ) { for ( schema s : database . get all schemas ( ) ) { if ( this == s . get owner ( ) ) { throw db exception . get ( error code . canno t_ dro p _ 2 , get name ( ) , s . get name ( ) ) ; } } }
public void trim ( string a text , int [ ] a span ) { int begin = a span [ num_ ] ; int end = a span [ num_ ] - num_ ; string data = a text ; while ( ( begin < ( data . length ( ) - num_ ) ) && trim char ( data . char at ( begin ) ) ) { begin ++ ; } while ( ( end > num_ ) && trim char ( data . char at ( end ) ) ) { end -- ; } end ++ ; a span [ num_ ] = begin ; a span [ num_ ] = end ; }
public void clear credentials ( ) { if ( get credentials ( ) != null ) { arrays . fill ( get credentials ( ) , ( char ) num_ ) ; } }
public void notify throttle found ( dcc throttle t ) { if ( log . is debug enabled ( ) ) { log . debug ( str_ ) ; } _throttle = t ; this . set enabled ( bool_ ) ; this . set speed values ( ( int ) t . get speed increment ( ) , ( int ) t . get speed setting ( ) ) ; this . set speed steps ( t . get speed step mode ( ) ) ; _throttle . add property change listener ( this ) ; }
public void commit changes ( ) { synapse editing panel . commit changes ( ) ; synapse list . get ( num_ ) . get network ( ) . fire synapses updated ( synapse list ) ; }
public string param string ( ) { string type str ; switch ( id ) { case interna l_ fram e_ opened : type str = str_ ; break ; case interna l_ fram e_ closing : type str = str_ ; break ; case interna l_ fram e_ closed : type str = str_ ; break ; case interna l_ fram e_ iconified : type str = str_ ; break ; case interna l_ fram e_ deiconified : type str = str_ ; break ; case interna l_ fram e_ activated : type str = str_ ; break ; case interna l_ fram e_ deactivated : type str = str_ ; break ; default : type str = str_ ; } return type str ; }
void on animation finished ( ) ;
void delete properties ( long id ) ;
public long xminimum ( ) { return this . min value ; }
public string request service from third party web app ( ) throws exception { string url = consumer web app url + str_ + o auth utils . encode for o auth ( end user resource url ) ; web target target = client builder . new client ( ) . target ( url ) ; invocation . builder builder = target . request ( ) ; response response = null ; try { response = builder . get ( ) ; if ( num_ != response . get status ( ) ) { throw new runtime exception ( str_ ) ; } string authorization uri = response . get string headers ( ) . get first ( str_ ) ; if ( authorization uri == null ) { throw new runtime exception ( str_ ) ; } return authorization uri ; } finally { response . close ( ) ; } }
public double evaluate ( vector instance x , vector instance y ) throws exception { return x . dot product ( y ) ; }
public static long reset locked meta ( long state ) { if ( ( state & met a_ ca p_ locked ) != num_ ) { state &= ~ met a_ shif t_ mask ; } if ( ( state & met a_ al t_ locked ) != num_ ) { state &= ~ met a_ al t_ mask ; } if ( ( state & met a_ sy m_ locked ) != num_ ) { state &= ~ met a_ sy m_ mask ; } return state ; }
public static void open error ( shell parent , string title , string message ) { open ( error , parent , title , message , swt . none ) ; }
output stream create exception reply ( ) ;
private plugin initializer ( ) { }
public i element type parse bareword minus ( ) { final char sequence token text = yytext ( ) ; if ( character . is digit ( token text . char at ( num_ ) ) ) { int end offset = num_ ; while ( character . is digit ( token text . char at ( end offset ) ) ) { end offset ++ ; } yypushback ( token text . length ( ) - end offset ) ; return numbe r_ simple ; } return identifier ; }
public static void wait for completion ( future < ? > [ ] futures ) { int size = futures . length ; try { for ( int j = num_ ; j < size ; j ++ ) { futures [ j ] . get ( ) ; } } catch ( execution exception ex ) { ex . print stack trace ( ) ; } catch ( interrupted exception e ) { e . print stack trace ( ) ; } }
public buffering chunked input ( readable byte channel channel , int buffer capacity ) { assert buffer capacity >= num_ ; this . buffer = byte buffer . allocate ( buffer capacity ) . order ( byte order . bi g_ endian ) ; this . buffer . limit ( num_ ) ; this . scratch buffer = byte buffer . allocate ( num_ ) . order ( byte order . bi g_ endian ) ; this . channel = channel ; this . state = state . awaitin g_ chunk ; }
public boolean suppress dialog ( ) { return bool_ ; }
public void init $ children ( ) { }
public double [ ] to array degrees ( ) { return new double [ ] { this . min latitude . degrees , this . max latitude . degrees , this . min longitude . degrees , this . max longitude . degrees } ; }
boolean is drop on stop ( ) ;
public boolean is unset ( option option , string value ) { return ( values . get ( option . text + value ) == null ) ; }
public void clear operator selection ( ) { this . selected operators = collections . unmodifiable list ( collections . < operator > empty list ( ) ) ; }
public boolean verify drawable ( drawable who ) { for ( int i = num_ ; i < m holders . size ( ) ; ++ i ) { if ( who == get ( i ) . get top level drawable ( ) ) { return bool_ ; } } return bool_ ; }
public void read data ( data input din ) throws io exception { reference = din . read unsigned short ( ) ; and mask = din . read unsigned short ( ) ; or mask = din . read unsigned short ( ) ; }
public void loop ( double ellapsed millis ) { for ( spring system listener listener : m listeners ) { listener . on before integrate ( this ) ; } advance ( ellapsed millis ) ; if ( m active springs . is empty ( ) ) { m idle = bool_ ; } for ( spring system listener listener : m listeners ) { listener . on after integrate ( this ) ; } if ( m idle ) { m spring looper . stop ( ) ; } }
public boolean is distinct ( ) { return distinct ; }
static int find best sample size ( int actual width , int actual height , int desired width , int desired height ) { double wr = ( double ) actual width / desired width ; double hr = ( double ) actual height / desired height ; double ratio = math . min ( wr , hr ) ; float n = num_ ; while ( ( n * num_ ) <= ratio ) { n *= num_ ; } return ( int ) n ; }
public static void error ( error messages message ) { errors ++ ; err ( nl + str_ + error messages . get ( message ) ) ; }
void on click ( com . smartgwt . client . widgets . drawing . events . click event event ) ;
public json exception syntax error ( string message ) { return new json exception ( message + this ) ; }
boolean start download ( string url , boolean is link ) ;
public static publishing to marketplace not permitted exception convert to api ( org . oscm . internal . types . exception . publishing to marketplace not permitted exception old ex ) { return convert exception to api ( old ex , publishing to marketplace not permitted exception . class ) ; }
protected void validate state ( state current state ) { validation utils . validate state ( current state ) ; }
public static properties create ( ) { return java script object . create object ( ) . cast ( ) ; }
private void perform frame tasks ( ) { synchronized ( m frame task queue ) { a frame task task = m frame task queue . poll ( ) ; while ( task != null ) { task . run ( ) ; task = m frame task queue . poll ( ) ; } } }
private void launch anim 4 ( ) { animated vector 4 . start ( ) ; }
private static void forward request ( string url , http servlet request request , http servlet response response ) { try { request . get request dispatcher ( url ) . forward ( request , response ) ; } catch ( servlet exception s e ) { handle forward error ( url , s e , response ) ; } catch ( io exception io e ) { handle forward error ( url , io e , response ) ; } }
public static long parse ( string [ ] options , char option , long def value ) throws exception { return parse ( options , str_ + option , def value ) ; }
public boolean is editable ( ) { return m editable ; }
void update local cache ( object key , object value , long new version ) { }
public static boolean is strictly numeric ( char sequence cs ) { if ( cs == null || cs . length ( ) == num_ ) { return bool_ ; } for ( int i = num_ ; i < cs . length ( ) ; i ++ ) { if ( ! character . is digit ( cs . char at ( i ) ) ) { return bool_ ; } } return bool_ ; }
public void remove extra field ( zip short type ) { boolean done = bool_ ; for ( int i = num_ ; ! done && i < extra fields . size ( ) ; i ++ ) { if ( extra fields . element at ( i ) . get header id ( ) . equals ( type ) ) { extra fields . remove element at ( i ) ; done = bool_ ; } } if ( ! done ) { throw new java . util . no such element exception ( ) ; } set extra ( ) ; }
private heron master driver provider ( ) { }
public pegasos ( int epochs , double reg , int batch size ) { set epochs ( epochs ) ; set regularization ( reg ) ; set batch size ( batch size ) ; }
protected boolean can scroll ( view v , boolean check v , int dx , int x , int y ) { if ( v instanceof view group ) { final view group group = ( view group ) v ; final int scroll x = v . get scroll x ( ) ; final int scroll y = v . get scroll y ( ) ; final int count = group . get child count ( ) ; for ( int i = count - num_ ; i >= num_ ; i -- ) { final view child = group . get child at ( i ) ; if ( x + scroll x >= child . get left ( ) && x + scroll x < child . get right ( ) && y + scroll y >= child . get top ( ) && y + scroll y < child . get bottom ( ) && can scroll ( child , bool_ , dx , x + scroll x - child . get left ( ) , y + scroll y - child . get top ( ) ) ) { return bool_ ; } } } return check v && view compat . can scroll horizontally ( v , - dx ) ; }
public foo remove by uui d_ g ( java . lang . string uuid , long group id ) throws no such foo exception ;
public static string string for ( int n ) { switch ( n ) { case c u_ t r_ addres s_ mod e_ wrap : return str_ ; case c u_ t r_ addres s_ mod e_ clamp : return str_ ; case c u_ t r_ addres s_ mod e_ mirror : return str_ ; } return str_ + n ; }
void opt out promo shown ( ) ;
public static void log error ( i log log , throwable exception , string message ) { log ( log , i status . error , i status . ok , message , exception ) ; }
public abstract void add content ( content content ) ;
private boolean is not positive completion ( final string reply ) { return get status ( reply ) != num_ ; }
public void clear searchable ( ) { searchables . clear ( ) ; }
public collection < uuid > client node ids ( ) { return client node ids ; }
public boolean has initial response ( ) { return bool_ ; }
private static string read manager impl class name ( manager parameter parameter ) { string class name = parameter . get mananger impl class name ( ) ; if ( class name == null ) { throw new illegal state exception ( str_ + manager parameter . manage r_ imp l_ clas s_ prefix + str_ ) ; } return class name ; }
public boolean contains ( s2 cap other ) { if ( is full ( ) || other . is empty ( ) ) { return bool_ ; } return angle ( ) . radians ( ) >= axis . angle ( other . axis ) + other . angle ( ) . radians ( ) ; }
public casc distance calculator ( ) throws io exception { process p = runtime . get runtime ( ) . exec ( path to casc ) ; try { p . wait for ( ) ; } catch ( interrupted exception iee ) { return ; } }
void add header ( string name , string value ) ;
public void selected ( select event event ) { }
public void add participant ( who participant ) { get participants ( ) . add ( participant ) ; }
private boolean ensure directory exists ( file directory ) { if ( ! directory . exists ( ) ) { if ( ! query yes no question ( n4 export messages . data transfer _create target directory ) ) { return bool_ ; } if ( ! directory . mkdirs ( ) ) { display error dialog ( n4 export messages . data transfer _directory creation error ) ; give focus to destination ( ) ; return bool_ ; } } return bool_ ; }
public static void register license ( final license license ) { s licenses . put ( license . get name ( ) , license ) ; }
public friends get requests query suggested ( boolean value ) { return unsafe param ( str_ , value ) ; }
public static constraint < char sequence > min length ( final int min length ) { return new min length constraint ( min length ) ; }
string to code string pre statement ( ) ;
public int allocate rank for new item ( shortcut info info ) { int rank = get item count ( ) ; array list < view > views = new array list < view > ( m folder . get items in reading order ( ) ) ; views . add ( rank , null ) ; arrange children ( views , views . size ( ) , bool_ ) ; set current page ( rank / m max items per page ) ; return rank ; }
public abstract void after launch ( config config , launch parameters parameters , process process ) ;
private static void test jcmd pid help ( ) throws exception { output analyzer output = jcmd base . jcmd ( v m_ args , new string [ ] { str_ } ) ; output . should have exit value ( num_ ) ; output . should not contain ( str_ ) ; output . should contain ( integer . to string ( process tools . get process id ( ) ) + str_ ) ; match jcmd commands ( output ) ; output . should contain ( str_ ) ; }
private boolean try kill this worker thread ( traditional worker thread worker thread ) { queue read lock . unlock ( ) ; queue write lock . lock ( ) ; try { if ( shutdown requested ) { return bool_ ; } int current threads = worker threads . size ( ) ; if ( current threads > num worker threads ) { if ( worker threads . remove ( thread . current thread ( ) ) ) { current threads -- ; } if ( current threads <= num worker threads ) { kill threads = bool_ ; } worker thread . set stopped by reduced thread number ( ) ; return bool_ ; } } finally { queue write lock . unlock ( ) ; queue read lock . lock ( ) ; if ( shutdown requested ) { return bool_ ; } } return bool_ ; }
public string remove metadata option ( string name ) { repl option existing option = null ; for ( repl option repl option : metadata ) { if ( name . equals ( repl option . get option name ( ) ) ) existing option = repl option ; } if ( existing option != null ) { metadata . remove ( existing option ) ; return existing option . get option value ( ) ; } return null ; }
public int query less than count ( string type , int index , string value , int visibility scope ) throws cloud exception { return ( ( integer ) query impl ( type , value , index , num_ , num_ , visibility scope , num_ , num_ , bool_ , bool_ , bool_ , null ) ) . int value ( ) ; }
public boolean can strip white space ( ) { stylesheet root sroot = this . get stylesheet root ( ) ; return ( null != sroot ) ? sroot . can strip white space ( ) : bool_ ; }
private string build browse url ( final string type ) { return path utils . escape ( base path . concat ( ckfinde r_ page ) . concat ( type == null ? str_ : str_ . concat ( type ) ) ) ; }
final void run worker ( work queue w ) { w . grow array ( ) ; int bound = ( w . config & spar e_ worker ) != num_ ? num_ : pol l_ limit ; long seed = w . hint * num_ ; if ( ( run state & stop ) == num_ ) { for ( long r = ( seed == num_ ) ? num_ : seed ; ; ) { if ( bound == num_ && try drop spare ( w ) ) break ; int step = ( int ) ( r > > > num_ ) | num_ ; r ^= r > > > num_ ; r ^= r << num_ ; r ^= r > > > num_ ; if ( scan ( w , bound , step , ( int ) r ) < num_ && await work ( w ) < num_ ) break ; } } }
public frame body link ( ) { }
public com . sun . identity . wsfederation . jaxb . wsaddr . retry after element create retry after element ( ) throws javax . xml . bind . jaxb exception { return new com . sun . identity . wsfederation . jaxb . wsaddr . impl . retry after element impl ( ) ; }
public static string read file to string ( file file ) throws io exception { return read file to string ( file , charset . default charset ( ) ) ; }
cached spans ( cached spans clone me ) { doc id = clone me . doc id ; cached span list = clone me . cached span list ; }
public nbt tag int ( ) { }
void ex ( ) throws parse exception ;
object owner ( ) ;
public j payment free ( j payment notifier notifier ) { m _notifier = notifier ; init components ( ) ; }
public static dag serializable instance ( ) { dag dag = new dag ( ) ; graph node node 1 = new graph node ( str_ ) ; dag . add node ( node 1 ) ; return dag ; }
disable on debug ( test rule rule , list < string > input arguments ) { this . rule = rule ; debugging = is debugging ( input arguments ) ; }
public named color ( string name , int r , int g , int b ) { super ( r , g , b ) ; if ( name == null ) { name = str_ ; } this . name = name ; names = new hash set < > ( ) ; names . add ( name ) ; names lowercase = new hash set < > ( ) ; names lowercase . add ( name . to lower case ( ) ) ; }
public void append list ( list < t > l ) { if ( l != null && l . size ( ) > num_ ) { this . list . add all ( l ) ; this . notify data set changed ( ) ; } }
long pre poll ( ) { lock . lock ( ) ; try { long n = head ; while ( n != num_ ) { if ( ! polling ( n ) ) { polling ( n , bool_ ) ; break ; } n = next ( n ) ; } return n ; } finally { lock . unlock ( ) ; } }
public void check motion allowed ( vector 3f position , vector 3f velocity ) ;
public scan result scan pokemon ( bitmap pokemon image , int trainer level ) { double estimated pokemon level = get pokemon level from img ( pokemon image , trainer level ) ; string pokemon name = get pokemon name from img ( pokemon image ) ; string candy name = get candy name from img ( pokemon image ) ; optional < integer > pokemon hp = get pokemon hp from img ( pokemon image ) ; optional < integer > pokemon cp = get pokemon cp from img ( pokemon image ) ; optional < integer > pokemon candy amount = get candy amount from img ( pokemon image ) ; optional < integer > pokemon upgrade cost = get pokemon evolution cost from img ( pokemon image ) ; return new scan result ( estimated pokemon level , pokemon name , candy name , pokemon hp , pokemon cp , pokemon candy amount , pokemon upgrade cost ) ; }
public static boolean is inside even odd ( int cross ) { return ( cross & num_ ) != num_ ; }
public static void main ( final string [ ] args ) { dom test case . do main ( notationgetsystemidnull . class , args ) ; }
public static _ fields find by name ( string name ) { return by name . get ( name ) ; }
private java . lang . string register prefix ( javax . xml . stream . xml stream writer xml writer , java . lang . string namespace ) throws javax . xml . stream . xml stream exception { java . lang . string prefix = xml writer . get prefix ( namespace ) ; if ( prefix == null ) { prefix = generate prefix ( namespace ) ; while ( xml writer . get namespace context ( ) . get namespace uri ( prefix ) != null ) { prefix = org . apache . axis 2 . databinding . utils . bean util . get unique prefix ( ) ; } xml writer . write namespace ( prefix , namespace ) ; xml writer . set prefix ( prefix , namespace ) ; } return prefix ; }
public void test add service ( ) throws exception { final virtual file file = my fixture . copy file to project ( str_ , str_ ) ; my fixture . configure from existing virtual file ( file ) ; final intention action action = android test utils . get intention action ( my fixture , str_ ) ; assert not null ( action ) ; action . invoke ( get project ( ) , my fixture . get editor ( ) , my fixture . get file ( ) ) ; my fixture . check result by file ( str_ , str_ , bool_ ) ; }
final boolean has valid next ( ) { return valid index < valid types . size ( ) ; }
public quest not active condition ( final string questname ) { this . questname = check not null ( questname ) ; }
public void neighbor changed ( ) { }
public ignite thread pool executor ( int core pool size , int max pool size , long keep alive time , blocking queue < runnable > work queue ) { this ( core pool size , max pool size , keep alive time , work queue , new ignite thread factory ( null ) , null ) ; }
static public tree model instance ( ) { if ( instance value == null ) { instance value = new tree model ( ) ; } return instance value ; }
public j activity window ( ) { this ( activity manager . get instance ( ) ) ; }
void pause triggers all ( ) throws exception ;
public void draw result bitmap ( bitmap barcode ) { result bitmap = barcode ; invalidate ( ) ; }
public abstract void on error ( java . lang . throwable throwable ) ;
public int index of ( int elem ) { run to ( - num_ ) ; return super . index of ( elem ) ; }
public site add cookie ( string domain , string name , string value ) { cookies . put ( domain , name , value ) ; return this ; }
public void retry ( volley error error ) throws volley error ;
public static int number ( ) { return _all . size ( ) ; }
public log event rotate reader ( log record log record , boolean check crc ) throws replicator exception , io exception { this . log record = log record ; this . check crc = check crc ; load ( ) ; }
public void append ( int key , int value ) { if ( m size != num_ && key <= m keys [ m size - num_ ] ) { put ( key , value ) ; return ; } int pos = m size ; if ( pos >= m keys . length ) { int n = math . max ( pos + num_ , m keys . length * num_ ) ; int [ ] nkeys = new int [ n ] ; int [ ] nvalues = new int [ n ] ; system . arraycopy ( m keys , num_ , nkeys , num_ , m keys . length ) ; system . arraycopy ( m values , num_ , nvalues , num_ , m values . length ) ; m keys = nkeys ; m values = nvalues ; } m keys [ pos ] = key ; m values [ pos ] = value ; m size = pos + num_ ; }
private string expect ( object spec ) { if ( ! has ( spec ) ) { syntax error ( string . format ( str_ , spec ) ) ; return null ; } return next ( ) ; }
public static inline query result cached document builder builder ( ) { return new inline query result cached document builder ( ) ; }
public static final float [ ] cmyk to rgb ( float c , float m , float y , float k ) { return cmyk to rgb ( c , m , y , k , new float [ num_ ] ) ; }
public string to string ( ) { string builder buffer = new string builder ( ) ; buffer . append ( str_ ) . append ( size ( ) ) . append ( str_ ) ; for ( iterator < map . entry < k , v > > i = new entry iterator ( ) ; i . has next ( ) ; ) { buffer . append ( str_ ) . append ( i . next ( ) . to string ( ) ) . append ( str_ ) ; } buffer . append ( str_ ) ; return buffer . to string ( ) ; }
public sliding activity helper ( activity activity ) { m activity = activity ; }
public void clear ( ) { ored criteria . clear ( ) ; order by clause = null ; distinct = bool_ ; }
public xml string emptystr ( ) { return x string . emptystring ; }
static promise < double > blocking promise double ( ) { return new blocking promise < > ( ) ; }
void on labels empty ( ) ;
public boolean has svuid ( ) { return has svuid ; }
public void stop ( ) { stop ( bool_ ) ; }
public static s m_ syste m_ message st r_ ms g_ due l_ start ( string value 0 ) { return new s m_ syste m_ message ( num_ , value 0 ) ; }
private session ( ) { this . is new = bool_ ; this . session id = null ; this . application = null ; this . attributes = new hash map < string , object > ( ) ; this . user = null ; }
private void write q name attribute ( java . lang . string namespace , java . lang . string att name , javax . xml . namespace . q name qname , javax . xml . stream . xml stream writer xml writer ) throws javax . xml . stream . xml stream exception { java . lang . string attribute namespace = qname . get namespace uri ( ) ; java . lang . string attribute prefix = xml writer . get prefix ( attribute namespace ) ; if ( attribute prefix == null ) { attribute prefix = register prefix ( xml writer , attribute namespace ) ; } java . lang . string attribute value ; if ( attribute prefix . trim ( ) . length ( ) > num_ ) { attribute value = attribute prefix + str_ + qname . get local part ( ) ; } else { attribute value = qname . get local part ( ) ; } if ( namespace . equals ( str_ ) ) { xml writer . write attribute ( att name , attribute value ) ; } else { register prefix ( xml writer , namespace ) ; xml writer . write attribute ( namespace , att name , attribute value ) ; } }
public static boolean is strict debug mode enabled ( ) { return strict debug ; }
public stream normalizing reader ( input stream is , string enc ) throws io exception { if ( enc == null ) { enc = str_ ; } char decoder = create char decoder ( is , enc ) ; }
public abstract void dispatch to events ( int node handle , org . xml . sax . content handler ch ) throws org . xml . sax . sax exception ;
public abstract void on click ( view widget ) ;
private object query command value ( final string command identifier ) { check . not null ( command identifier , str_ ) ; final string buffer cmd = new string buffer ( ) ; cmd . append ( str_ ) ; cmd . append ( command identifier ) ; cmd . append ( str_ ) ; return browser . evaluate ( cmd . to string ( ) ) ; }
public void delete ( ) { is deleted = bool_ ; }
public boolean empty ( ) { return size == num_ ; }
private static double score sequence ( list < lat long > pts ) { lat long prev = pts . get ( pts . size ( ) - num_ ) ; lat long prevprev = pts . get ( pts . size ( ) - num_ ) ; double prev angle = math . atan 2 ( prev . lat - prevprev . lat , prev . lng - prevprev . lng ) ; double score = num_ ; for ( lat long pt : pts ) { double angle = math . atan 2 ( pt . lat - prev . lat , pt . lng - prev . lng ) ; double diff = prev angle - angle ; if ( diff > math . pi ) diff -= math . pi * num_ ; else if ( diff < - math . pi ) diff += math . pi * num_ ; if ( diff < num_ ) score += num_ ; else score += diff ; prev = pt ; prev angle = angle ; } return score ; }
public void add graphic ( om graphic g ) { this . geometry . add ( ( om geometry ) g ) ; drawing attributes . set to ( g ) ; }
public ns date ( byte [ ] bytes ) { this ( bytes , num_ , bytes . length ) ; }
void make ( typed block [ ] blocks , byte [ ] code ) throws bad bytecode { make ( code , blocks [ num_ ] ) ; find dead catchers ( code , blocks ) ; try { fix types ( code , blocks ) ; } catch ( not found exception e ) { throw new bad bytecode ( str_ , e ) ; } }
protected void send broadcast ( context context , intent intent ) { context . send broadcast ( intent ) ; }
private void check open and create ( boolean create ) throws socket exception { if ( is closed ( ) ) { throw new socket exception ( str_ ) ; } if ( ! create ) { if ( ! is connected ( ) ) { throw new socket exception ( str_ ) ; } return ; } if ( is created ) { return ; } synchronized ( this ) { if ( is created ) { return ; } try { impl . create ( bool_ ) ; } catch ( socket exception e ) { throw e ; } catch ( io exception e ) { throw new socket exception ( e . to string ( ) ) ; } is created = bool_ ; } }
protected url handle redirect exception ( redirect required exception redirect ) throws service exception { try { return new url ( redirect . get redirect location ( ) ) ; } catch ( malformed url exception e ) { service exception se = new service exception ( core error domain . err . invalid redirected to url ) ; se . set internal reason ( str_ + redirect . get redirect location ( ) ) ; throw se ; } }
public image factory ( int max image width , int max image height ) { set max image dimensions ( max image width , max image height ) ; }
public x path exception ( string message , object style node ) { super ( message ) ; m _style node = style node ; }
public boolean is lttr of grnted dlvry ind ( ) { return lttr of grnted dlvry ind ; }
public void clear hex image cache ( set < coords > coords ) { for ( coords c : coords ) { hex image cache . remove ( c ) ; } }
public void configure action bar home as up ( activity activity ) ;
public void visit enum ( string name , string desc , string value ) { if ( av != null ) { av . visit enum ( name , desc , value ) ; } }
public abstract boolean at ( long index ) ;
public wall get reposts query offset ( integer value ) { return unsafe param ( str_ , value ) ; }
public string open file ( ) { if ( ! file . to file ( ) . exists ( ) ) { return str_ ; } if ( misc util . open folder ( file . to file ( ) , null ) ) { return str_ ; } return str_ ; }
boolean whitelist ( ) { return reader . get boolean ( whitelist , bool_ ) ; }
public void add initiators to storage view ( string view name , string cluster name , list < port info > initiator port info ) throws v plex api exception { s _logger . info ( str_ , _base uri ) ; _export mgr . add initiators to storage view ( view name , cluster name , initiator port info ) ; }
public void write ( int b ) throws io exception { one byte [ num_ ] = ( byte ) b ; if ( buffered block cipher != null ) { int len = buffered block cipher . process bytes ( one byte , num_ , num_ , buf , num_ ) ; if ( len != num_ ) { out . write ( buf , num_ , len ) ; } } else { out . write ( stream cipher . return byte ( ( byte ) b ) ) ; } }
public void close ( ) { ps . close ( ) ; }
public abstract void verify ( list < t > output ) throws flink test failed exception ;
public static pattern dn decode suffix ( string pattern ) throws directory exception { pattern dn pattern dn = decode ( pattern ) ; if ( pattern dn . equality != null ) { pattern dn . sub initial = null ; pattern dn . sub final = pattern dn . equality ; pattern dn . sub any elements = null ; pattern dn . equality = null ; } else if ( pattern dn . sub initial != null ) { pattern dn . sub any elements . add ( num_ , pattern dn . sub initial ) ; pattern dn . sub initial = null ; } pattern dn . is suffix = bool_ ; return pattern dn ; }
boolean is suffix ( ) ;
void add bindings set source to hash index once ( final h tree right solutions , final i binding set [ ] bs from bindings set source ) { if ( ! bs from bindings set source added to hash index ) { final i key builder key builder = right solutions . get index metadata ( ) . get key builder ( ) ; final atomic integer vector size = new atomic integer ( ) ; final bs [ ] a = vector ( bs from bindings set source , get join vars ( ) , null , bool_ , vector size ) ; final int n = vector size . get ( ) ; for ( int i = num_ ; i < n ; i ++ ) { final bs tmp = a [ i ] ; final byte [ ] key = key builder . reset ( ) . append ( tmp . hash code ) . get key ( ) ; final byte [ ] val = get encoder ( ) . encode solution ( tmp . bset ) ; right solutions . insert ( key , val ) ; } get encoder ( ) . flush ( ) ; bs from bindings set source added to hash index = bool_ ; } }
public boolean match ( object match obj ) { if ( ! ( match obj instanceof status line ) ) return bool_ ; status line sl = ( status line ) match obj ; if ( sl . match expression != null ) return sl . match expression . match ( this . encode ( ) ) ; if ( sl . sip version != null && ! sl . sip version . equals ( sip version ) ) return bool_ ; if ( sl . status code != num_ ) { if ( match status class ) { int hiscode = sl . status code ; string code string = integer . to string ( sl . status code ) ; string mycode = integer . to string ( status code ) ; if ( code string . char at ( num_ ) != mycode . char at ( num_ ) ) return bool_ ; } else { if ( status code != sl . status code ) return bool_ ; } } if ( sl . reason phrase == null || reason phrase == sl . reason phrase ) return bool_ ; return reason phrase . equals ( sl . reason phrase ) ; }
public boolean contains java resources ( ) throws java model exception { return ( ( package fragment info ) get element info ( ) ) . contains java resources ( ) ; }
public void snap to closest index ( over scroller scroller , int duration ) { if ( x stops . stops . length == num_ ) { compute x axis ( ) ; } float closest x = float . ma x_ value ; float center x = content rect . center x ( ) ; for ( int i = num_ ; i < x stops . stops . length ; i ++ ) { float x = get draw x ( x stops . stops [ i ] ) ; if ( math . abs ( x - center x ) <= math . abs ( closest x - center x ) ) { closest x = x ; } } scroll x to ( scroller , closest x , duration ) ; }
private boolean evaluate search ( ) { return node matches query ( m matched node . get ( ) ) || next result ( node focus finder . searc h_ forward ) ; }
public void test default string to type convert ( ) { date time converter converter = make converter ( ) ; converter . set use locale format ( bool_ ) ; try { converter . convert ( get expected type ( ) , str_ ) ; fail ( str_ ) ; } catch ( conversion exception e ) { } }
public name class pair ( string name , string class name , boolean is relative ) { this . name = name ; this . class name = class name ; this . is rel = is relative ; }
void mouse move ( int x , int y ) ;
public static map < string , set < string > > remove validators ( map < string , set < string > > attribute defaults , service schema service schema ) { final map < string , set < string > > subset = new hash map < string , set < string > > ( ) ; for ( map . entry < string , set < string > > entry : attribute defaults . entry set ( ) ) { final string name = entry . get key ( ) ; if ( ! attribute schema . type . validator . equals ( service schema . get attribute schema ( name ) . get type ( ) ) ) { subset . put ( name , new hash set < string > ( entry . get value ( ) ) ) ; } } return subset ; }
public final boolean has option ( relation option option ) { return common . options . contains ( option ) ; }
public void dispatch to events ( int node handle , org . xml . sax . content handler ch ) throws org . xml . sax . sax exception { tree walker tree walker = m _walker ; content handler prev ch = tree walker . get content handler ( ) ; if ( null != prev ch ) { tree walker = new tree walker ( null ) ; } tree walker . set content handler ( ch ) ; try { node node = get node ( node handle ) ; tree walker . traverse fragment ( node ) ; } finally { tree walker . set content handler ( null ) ; } }
public boolean is grouped ( ) { return get group tree ( ) != null ; }
public static complex subtract ( complex c 1 , complex c 2 ) { return new complex ( c 1 . real - c 2 . real , c 1 . imag - c 2 . imag ) ; }
boolean need to check exclude ( ) { return bool_ ; }
public void close clicked ( wizard step c step , quick setup qs ) { qs . quit ( ) ; }
public static s m_ syste m_ message st r_ ms g_ pv pzon e_ hostil e_ deat h_ t o_ me ( string value 0 ) { return new s m_ syste m_ message ( num_ , value 0 ) ; }
public void stop ( ) { try { stop async ( ) ; log . info ( str_ ) ; executor . await termination ( long . ma x_ value , time unit . seconds ) ; } catch ( interrupted exception e ) { throw new runtime exception ( e ) ; } }
private swing accessor ( ) { }
public static void log status ( final logger logger , final long start time , final long sleeping time , final long working time ) { logger . log message ( level . fine , str_ + time . to clock ( system . current time millis ( ) - start time ) + str_ + str_ + math utilities . percent plus ( working time , sleeping time ) + str_ + time . to clock ( working time ) + str_ + str_ + time . to clock ( sleeping time ) + str_ ) ; }
public void test radix 2 pos ( ) { string value = str_ ; int radix = num_ ; big integer a number = new big integer ( value , radix ) ; string result = a number . to string ( radix ) ; assert true ( result . equals ( value ) ) ; }
private boolean fill in elements ( map < string , object > parents , string key , object value ) { if ( parents == null ) { return bool_ ; } if ( value instanceof string [ ] ) { object pvalue = parents . get ( key ) ; if ( pvalue != null && pvalue instanceof string [ ] ) { string [ ] strings = ( string [ ] ) value ; string [ ] pstrings = ( string [ ] ) pvalue ; for ( int i = num_ ; i < strings . length ; i ++ ) { if ( strings [ i ] == null || strings [ i ] . length ( ) == num_ ) { strings [ i ] = pstrings [ i ] ; } } return arrays . equals ( strings , pstrings ) ; } } return bool_ ; }
public boolean is overflow ( ) { return overflow ; }
public icon view ( element elem ) { super ( elem ) ; attribute set attr = elem . get attributes ( ) ; c = style constants . get icon ( attr ) ; }
public void handle incoming d msg ( distribution message message ) { stats . inc received messages ( num_ ) ; stats . inc received bytes ( message . get bytes read ( ) ) ; stats . inc message channel time ( message . reset timestamp ( ) ) ; if ( logger . is debug enabled ( ) ) { logger . debug ( str_ , message , message . get sender ( ) ) ; } schedule incoming message ( message ) ; }
public boolean is enabled ( ) { return enabled && application info . enabled ; }
public boolean has age ( ) { return field set flags ( ) [ num_ ] ; }
private void return data ( object ret ) { if ( my host != null ) { my host . return data ( ret ) ; } }
public void start non text ( stylesheet handler handler ) throws org . xml . sax . sax exception { }
public static void mux array ( object src , int [ ] dims , object dst ) { int len = get length ( dims ) ; if ( array . get length ( dst ) != len ) throw new illegal argument exception ( str_ ) ; _fill mux ( num_ , dims , src , dst , num_ ) ; }
public om graphic create node ( coverage table c , node table t , list < object > nodeprim , double latitude , double longitude , boolean is entity node , string feature type , int prim id ) { om point pt = create om point ( latitude , longitude ) ; set attributes for feature ( pt , c , feature type , prim id ) ; add point ( pt ) ; return pt ; }
private void allocate landed cost rounding ( ) { m landed cost allocation [ ] allocations = m landed cost allocation . get of invoice line ( get ctx ( ) , get c_ invoice line _ id ( ) , get _ trx name ( ) ) ; m landed cost allocation largest amt allocation = null ; big decimal allocation amt = env . zero ; for ( int i = num_ ; i < allocations . length ; i ++ ) { m landed cost allocation allocation = allocations [ i ] ; if ( largest amt allocation == null || allocation . get amt ( ) . compare to ( largest amt allocation . get amt ( ) ) > num_ ) largest amt allocation = allocation ; allocation amt = allocation amt . add ( allocation . get amt ( ) ) ; } big decimal difference = get line net amt ( ) . subtract ( allocation amt ) ; if ( difference . signum ( ) != num_ ) { largest amt allocation . set amt ( largest amt allocation . get amt ( ) . add ( difference ) ) ; largest amt allocation . save ex ( ) ; log . config ( str_ + difference + str_ + largest amt allocation . get c_ landed cost allocation _ id ( ) + str_ + largest amt allocation . get amt ( ) ) ; } }
protected void on get image error ( string cache key , volley error error ) { batched image request request = m in flight requests . remove ( cache key ) ; if ( request != null ) { request . set error ( error ) ; batch response ( cache key , request ) ; } }
public static void main ( string [ ] argv ) { if ( argv . length < num_ ) { string msg = str_ + str_ ; system . err . println ( msg ) ; log . error ( msg ) ; return ; } int order = integer . parse int ( argv [ num_ ] ) ; int size = ( int ) ( integer . parse int ( argv [ num_ ] ) * math . pow ( num_ , num_ ) ) ; double base = double . parse double ( argv [ num_ ] ) ; try { bloom filter language model lm = new bloom filter language model ( argv [ num_ ] , order , size , base ) ; object output stream out = new object output stream ( new gzip output stream ( new file output stream ( argv [ num_ ] ) ) ) ; lm . write external ( out ) ; out . close ( ) ; } catch ( io exception e ) { log . error ( e . get message ( ) , e ) ; } }
public collection < lb member > list member ( string member id ) ;
public boolean decode short integer ( int start index ) { if ( ( m wsp data [ start index ] & num_ ) == num_ ) { return bool_ ; } m unsigned 3 2bit = m wsp data [ start index ] & num_ ; m data length = num_ ; return bool_ ; }
public void post join ( baggage impl current ) { for ( byte string bag : current . keys ( p t_ activ e_ namespace ) ) { set < byte string > entries = current . get ( p t_ activ e_ namespace , bag ) ; if ( entries . size ( ) > num_ ) { byte string merged = merge ( entries ) ; if ( merged == null ) { current . remove ( p t_ activ e_ namespace , bag ) ; } else { current . replace ( p t_ activ e_ namespace , bag , merged ) ; } } } }
public static _ fields find by thrift id ( int field id ) { switch ( field id ) { case num_ : return header ; default : return null ; } }
private void save shared files ( list < string > shared files , string handle id , start request request ) { int i = num_ ; if ( shared files == null || shared files . size ( ) == num_ ) { return ; } for ( string filename : shared files ) { input stream input stream = request . get file ( str_ + i , bool_ ) ; file manager . save file ( handle id , filename , input stream ) ; i ++ ; } }
static object new instance ( string class name , class loader cl , boolean do fallback ) throws configuration error { try { class provider class = find provider class ( class name , cl , do fallback ) ; object instance = provider class . new instance ( ) ; debug println ( str_ + provider class + str_ + cl ) ; return instance ; } catch ( class not found exception x ) { throw new configuration error ( str_ + class name + str_ , x ) ; } catch ( exception x ) { throw new configuration error ( str_ + class name + str_ + x , x ) ; } }
public synchronized void remove ( bounded object o ) { node n = choose leaf ( o . get bounds ( ) , root ) ; n . data . remove ( o ) ; n . compute mbr ( ) ; }
static public void print hex string ( final string builder sb , final string hex data ) { int rem = hex data . length ( ) ; int curs = num_ ; while ( rem >= num_ ) { sb . append ( string . format ( str_ , curs ) ) ; sb . append ( hex data . substring ( curs , curs + num_ ) + str_ ) ; curs += num_ ; rem -= num_ ; } }
public boolean is disabled ( ) { return m _ds . is disabled ( ) ; }
public void test bogus arguments ( ) throws exception { illegal argument exception expected = expect throws ( illegal argument exception . class , null ) ; assert true ( expected . get message ( ) . contains ( str_ ) ) ; }
protected void generate pseudo bishop moves ( priority move list moves ) { long from bb = get piece bb ( color to move , bishop ) ; while ( from bb != num_ ) { int from square = bitscan forward ( from bb ) ; long to bb = diagonal move ( from square , empty bb , occupied bb ) & get not color to move bb ( ) ; while ( to bb != num_ ) { int to square = bitscan forward ( to bb ) ; int contents = get piece with promote mask ( to square ) ; add move ( new move ( from square , to square , get piece with promote mask ( from square ) , color to move , contents ) , moves ) ; to bb = bitscan clear ( to bb ) ; } from bb = bitscan clear ( from bb ) ; } }
public int hash code ( ) { return id . hash code ( ) ; }
private void print document ( print job id job id , url client url , url printer url , file descriptor fd ) { try { cups client client = new cups client ( client url ) ; cups printer printer = client . get printer ( printer url ) ; input stream is = new file input stream ( fd ) ; org . cups 4j . print job job = new org . cups 4j . print job . builder ( is ) . build ( ) ; print request result result = printer . print ( job ) ; m jobs . put ( job id , result . get job id ( ) ) ; } catch ( exception e ) { log . e ( cups print app . lo g_ tag , str_ + fd + str_ + e ) ; } }
public natural ranking ( ) { super ( ) ; ties strategy = defaul t_ tie s_ strategy ; nan strategy = defaul t_ na n_ strategy ; random data = null ; }
public void add ( float f ) { data . add ( f ) ; }
private boolean in quotes ( boolean in quotes ) { return ( in quotes && ! ignore quotations ) || in field ; }
public static boolean is array byte base 6 4 ( byte [ ] array octect ) { array octect = discard whitespace ( array octect ) ; int length = array octect . length ; if ( length == num_ ) { return bool_ ; } for ( int i = num_ ; i < length ; i ++ ) { if ( ! is base 6 4 ( array octect [ i ] ) ) { return bool_ ; } } return bool_ ; }
public void update apps ( list < app info > apps ) { m apps . update apps ( apps ) ; }
public void insert _any ( org . omg . corba . any value ) throws org . omg . dynamic any . dyn any package . type mismatch , org . omg . dynamic any . dyn any package . invalid value { org . omg . corba . portable . servant object $so = _servant _preinvoke ( str_ , _ops class ) ; dyn struct operations $self = ( dyn struct operations ) $so . servant ; try { $self . insert _any ( value ) ; } finally { _servant _postinvoke ( $so ) ; } }
< b > promise < b > catch error promise ( function < promise error , promise < b > > on rejected ) ;
private void cleanup destination ( state state , int final status ) { if ( state . filename != null && download status . is error ( final status ) ) { l log . d ( str_ + state . filename ) ; boolean deleted = new file ( state . filename ) . delete ( ) ; if ( ! deleted ) { l log . e ( str_ ) ; } state . filename = null ; } }
public boolean is accessible row selected ( int r ) { if ( validate if necessary ( ) ) { if ( r < num_ || r >= get accessible row count ( ) ) { return bool_ ; } int n columns = get accessible column count ( ) ; table cell element info start cell = get cell ( r , num_ ) ; if ( start cell == null ) { return bool_ ; } int start = start cell . get element ( ) . get start offset ( ) ; table cell element info end cell = get cell ( r , n columns - num_ ) ; if ( end cell == null ) { return bool_ ; } int end = end cell . get element ( ) . get end offset ( ) ; return start >= editor . get selection start ( ) && end <= editor . get selection end ( ) ; } return bool_ ; }
boolean go back ( ) ;
public void commit transaction ( transaction t ) { if ( t != null ) t . commit ( ) ; }
public static map pro duplicate data member ( component impl c , map pro map , map pro new map , boolean deep copy ) { iterator it = map . entry set ( ) . iterator ( ) ; map . entry entry ; object value ; while ( it . has next ( ) ) { entry = ( entry ) it . next ( ) ; value = entry . get value ( ) ; if ( ! ( value instanceof udf ) ) { if ( deep copy ) value = duplicator . duplicate ( value , deep copy ) ; new map . put ( entry . get key ( ) , value ) ; } } return new map ; }
public void save order ( order order ) { orders . add ( num_ , order ) ; }
public synchronized void show last fm error dialog ( string message , string content ) { platform . run later ( null ) ; }
private void init recyclerview ( ) { m recycler view . set layout manager ( new grid layout manager ( this , num_ ) ) ; m pic adapter = new pic adapter ( ) ; for ( int i = num_ ; i < names . length ; i ++ ) { m pic adapter . add ( new item ( images [ i ] , names [ i ] , text description ) ) ; } m recycler view . set adapter ( m pic adapter ) ; item touch helper . callback callback = new custom it helper callback ( this ) ; item touch helper touch helper = new item touch helper ( callback ) ; touch helper . attach to recycler view ( m recycler view ) ; }
boolean is prevent collision ( ) ;
string create ( ) ;
public static void reset ( ) { if ( get mocks ( ) != null ) { get mocks ( ) . clear ( ) ; } }
protected abstract void generate relationship ( org . netbeans . jpa . modeler . spec . attributes attributes , relationship role role ) throws io exception ;
public wrong prediction condition ( ) { }
public void remove listener ( final i zy graph selection listener listener ) { m _selection observer . remove listener ( listener ) ; }
< t > void send ( notification type type , list < t > messages ) throws notification exception ;
public static byte [ ] decode ( char [ ] in ) { return decode ( in , num_ , in . length ) ; }
public static bitmap drawable to bitmap ( drawable drawable , int width , int height ) { if ( drawable instanceof bitmap drawable ) { return ( ( bitmap drawable ) drawable ) . get bitmap ( ) ; } bitmap bitmap = bitmap . create bitmap ( width , height , bitmap . config . arg b _ 8 8 8 8 ) ; canvas canvas = new canvas ( bitmap ) ; drawable . set bounds ( num_ , num_ , canvas . get width ( ) , canvas . get height ( ) ) ; drawable . draw ( canvas ) ; return bitmap ; }
public object previous ( ) { if ( has previous ( ) ) { return tokens [ -- token pos ] ; } throw new no such element exception ( ) ; }
public modifiable solr params add ( string name , string ... val ) { string [ ] old = vals . put ( name , val ) ; if ( old != null ) { if ( val == null || val . length < num_ ) { string [ ] both = new string [ old . length + num_ ] ; system . arraycopy ( old , num_ , both , num_ , old . length ) ; both [ old . length ] = null ; vals . put ( name , both ) ; } else { string [ ] both = new string [ old . length + val . length ] ; system . arraycopy ( old , num_ , both , num_ , old . length ) ; system . arraycopy ( val , num_ , both , old . length , val . length ) ; vals . put ( name , both ) ; } } return this ; }
public static map < string , object > migrate work effort event reminders ( dispatch context ctx , map < string , ? extends object > context ) { delegator delegator = ctx . get delegator ( ) ; locale locale = ( locale ) context . get ( str_ ) ; model entity model entity = delegator . get model entity ( str_ ) ; if ( model entity != null && model entity . get field ( str_ ) != null ) { list < generic value > event reminders = null ; try { event reminders = entity query . use ( delegator ) . from ( str_ ) . query list ( ) ; for ( generic value reminder : event reminders ) { if ( util validate . is not empty ( reminder . get ( str_ ) ) ) { reminder . set ( str_ , reminder . get ( str_ ) ) ; reminder . store ( ) ; } } } catch ( generic entity exception e ) { return service util . return error ( util properties . get message ( resource error , str_ , util misc . to map ( str_ , e ) , locale ) ) ; } } return service util . return success ( ) ; }
public boolean user can create arch ( int connected user id , int dir id , string entidad ) throws exception { boolean can = bool_ ; int parent arch mgr id = i sicres admin defs keys . nul l_ id ; db connection db conn = new db connection ( ) ; try { db conn . open ( db session manager . get session ( ) ) ; if ( dir id == i sicres admin defs keys . nul l_ id || dir id == i sicres admin defs keys . roo t_ di r_ id ) parent arch mgr id = num_ ; else parent arch mgr id = get dir mgr id ( dir id , entidad ) ; can = has user auth ( connected user id , use r_ actio n_ i d_ create , i sicres admin defs keys . nul l_ id , parent arch mgr id , i sicres admin defs keys . nul l_ id , entidad ) ; } catch ( exception e ) { _logger . error ( e ) ; throw e ; } finally { db conn . close ( ) ; } return can ; }
public static fs info instance ( context context ) { fs info instance = context . get ( fs info . class ) ; if ( instance == null ) instance = new fs info ( ) ; return instance ; }
public s2 lat lng to lat lng ( ) { return new s2 lat lng ( to point raw ( ) ) ; }
public l z8 ( ) { super ( num_ , num_ , num_ , num_ , num_ ) ; }
public void send message ( string to , string message ) { send ( str_ + to + str_ + message ) ; }
public image exception ( reason reason , throwable e ) { super ( e ) ; bean . set reason ( reason ) ; set message key ( get message key ( ) + str_ + reason . name ( ) ) ; }
protected byte type ( sql type sql type , class < ? > [ ] classes ) { super ( sql type , classes ) ; }
void on decoder error ( flac decoder exception e ) ;
public static void validate prefix ( string uri , boolean use strict validation ) throws application error { validate ( uri , use strict validation ? stric t_ ur i_ prefix : loos e_ ur i_ prefix ) ; }
public void initialize ( ) ;
principal user find admin user ( ) ;
public void on response ( image container response , boolean is immediate ) ;
public void on create ( bundle saved instance state , class < ops type > ops type ) { super . on create ( saved instance state ) ; try { handle configuration ( ops type ) ; } catch ( instantiation exception | illegal access exception e ) { log . d ( tag , str_ + e ) ; throw new runtime exception ( e ) ; } }
public mesh 3 d add face ( vec 3 d a , vec 3 d b , vec 3 d c , vec 2 d uv a , vec 2 d uv b , vec 2 d uv c ) ;
private static string build description ( final list < string > missing fields ) { final string builder description = new string builder ( str_ ) ; boolean first = bool_ ; for ( final string field : missing fields ) { if ( first ) { first = bool_ ; } else { description . append ( str_ ) ; } description . append ( field ) ; } return description . to string ( ) ; }
public wine run foreground ( file executable to run , list < string > arguments ) throws cancel exception { run foreground ( executable to run , arguments , null ) ; return this ; }
public static value rhs ( unit unit ) { if ( unit instanceof assign stmt ) return ( ( assign stmt ) unit ) . get right op ( ) ; else return null ; }
public synchronized long size ( ) { return size ; }
public abstract real vector append ( double d ) ;
private static object copy array grow 1 ( final object array , final class < ? > new array component type ) { if ( array != null ) { int array length = array . get length ( array ) ; object new array = array . new instance ( array . get class ( ) . get component type ( ) , array length + num_ ) ; system . arraycopy ( array , num_ , new array , num_ , array length ) ; return new array ; } return array . new instance ( new array component type , num_ ) ; }
public server edit uma view bean ( ) { super ( str_ , defaul t_ displa y_ url ) ; }
public void run test ( ) throws throwable { document doc ; document doc alt ; element element ; attr attribute ; attr new attribute ; doc = ( document ) load ( str_ , bool_ ) ; doc alt = ( document ) load ( str_ , bool_ ) ; element = doc . create element ns ( str_ , str_ ) ; attribute = doc alt . create attribute ns ( str_ , str_ ) ; { boolean success = bool_ ; try { new attribute = element . set attribute node ns ( attribute ) ; } catch ( dom exception ex ) { success = ( ex . code == dom exception . wron g_ documen t_ err ) ; } assert true ( str_ , success ) ; } }
public web app baratine error ( web app builder builder ) { super ( builder ) ; objects . require non null ( config exception ( ) ) ; }
public void reset ( ) ;
private boolean is alpha used for scale ( ) { return android . os . build . version . sd k_ int < num_ ; }
private void initialize ( ) { if ( ! cache dir . exists ( ) ) { cache dir . mkdirs ( ) ; } file [ ] files = cache dir . list files ( ) ; if ( files == null ) { return ; } for ( int i = num_ ; i < files . length ; i ++ ) { file file = files [ i ] ; if ( file . length ( ) == num_ ) { file . delete ( ) ; } else { cache span span = cache span . create cache entry ( file ) ; if ( span == null ) { file . delete ( ) ; } else { add span ( span ) ; } } } }
protected boolean supports save plugin for ( x data source , class < ? extends snapshot > snapshot class ) { return bool_ ; }
public string message ( ) { return message ; }
public element remove attribute ( string attribute _name ) { try { get element hash entry ( ) . remove ( attribute _name ) ; } catch ( exception e ) { } return ( this ) ; }
public void pre pick ( world world , int x , int y , int z ) ;
public transformer handler new transformer handler ( ) throws transformer configuration exception { return new transformer identity impl ( m _is secure processing ) ; }
public void stop movement sound ( ) { movement sound event = null ; }
void deleted tag ( c tag tag ) ;
public object writer with view ( class < ? > view ) { if ( view == _config . get serialization view ( ) ) return this ; return new object writer ( this , _config . with view ( view ) ) ; }
public void on browse end ( ) ;
public ui graphic test case ( string name ) { super ( name ) ; }
protected void forward message ( abstract mr listener client , abstract mr message m ) { ( ( marklin listener ) client ) . message ( ( marklin message ) m ) ; }
public type ref make optional ( ) { return interner . intern ( new type ref ( kind , cardinality . optional , message type , enum type ) ) ; }
public synchronized void remove task from in progress map ( string job id ) { inprogress task map . remove ( job id ) ; }
private boolean smart card authn enabled ( ) throws exception { collection < string > all tenant names = this . get all tenants ( ) ; assert ( all tenant names != null && all tenant names . size ( ) > num_ ) ; boolean smart card authn enabled = bool_ ; for ( string tenant name : all tenant names ) { try { authn policy policy = get tenant info ( tenant name ) . get authn policy ( ) ; if ( policy . is tls client cert authn enabled ( ) ) { smart card authn enabled = bool_ ; break ; } } catch ( exception ex ) { logger . error ( string . format ( str_ , tenant name ) ) ; throw ex ; } } return smart card authn enabled ; }
public static boolean is dynamic attribute ( string name ) { return name . starts with ( str_ ) ; }
public void on drawer opened ( view drawer view ) { super . on drawer opened ( drawer view ) ; }
public geoloc sharing delete task ( geoloc sharing service impl geoloc sharing service , richcall service richcall service , local content resolver content resolver , contact id contact ) { super ( content resolver , geoloc sharing data . conten t_ uri , geoloc sharing data . ke y_ sharin g_ id , geoloc sharing data . ke y_ contact , contact ) ; m geoloc sharing service = geoloc sharing service ; m richcall service = richcall service ; }
public json exception syntax error ( string message ) { return new json exception ( message + this . to string ( ) ) ; }
public void unpin ( buffer buff ) { block id blk = buff . block ( ) ; pinned buffer pinned buff = pinned buffers . get ( blk ) ; if ( pinned buff != null ) { pinned buff . pinned count -- ; if ( pinned buff . pinned count == num_ ) { buffer pool . unpin ( buff ) ; pinned buffers . remove ( blk ) ; synchronized ( buffer pool ) { buffer pool . notify all ( ) ; } } } }
void pack ( jar file in , output stream out ) throws io exception ;
public string initial anchor random tip text ( ) { return str_ ; }
private size parse size ( string token ) { if ( token . starts with ( str_ ) && token . ends with ( str_ ) ) { return parse bounded size ( token ) ; } if ( token . starts with ( str_ ) && token . ends with ( str_ ) ) { return parse old bounded size ( token , bool_ ) ; } if ( token . starts with ( str_ ) && token . ends with ( str_ ) ) { return parse old bounded size ( token , bool_ ) ; } return parse atomic size ( token ) ; }
public static string format java doc box ( string text ) { require non null ( text ) ; return format text box ( text , jav a_ do c_ width , javado c_ words , jav a_ do c_ singl e_ lin e_ words ) ; }
private boolean last entry ( ) { return column . get ( column . size ( ) - num_ ) ; }
public int hash code ( ) { if ( hash code == num_ ) { int result = num_ ; result = num_ * result + method name . hash code ( ) ; if ( arg classes != null ) { for ( int i = num_ ; i < arg classes . length ; i ++ ) { result = num_ * result + ( ( arg classes [ i ] == null ) ? num_ : arg classes [ i ] . hash code ( ) ) ; } } hash code = result ; } return hash code ; }
i response info analyze response ( byte [ ] response ) ;
public int find last visible item position ( ) { final view child = find one visible child ( layout manager . get child count ( ) - num_ , - num_ , bool_ , bool_ ) ; return child == null ? n o_ position : recycler view . get child position ( child ) ; }
public static boolean is legal property key ( string key ) { return ( key . equals ( output keys . cdat a_ sectio n_ elements ) || key . equals ( output keys . doctyp e_ public ) || key . equals ( output keys . doctyp e_ system ) || key . equals ( output keys . encoding ) || key . equals ( output keys . indent ) || key . equals ( output keys . medi a_ type ) || key . equals ( output keys . method ) || key . equals ( output keys . omi t_ xm l_ declaration ) || key . equals ( output keys . standalone ) || key . equals ( output keys . version ) || ( key . length ( ) > num_ ) && ( key . char at ( num_ ) == str_ ) && ( key . last index of ( str_ ) == num_ ) && ( key . index of ( str_ ) > num_ ) && ( key . last index of ( str_ ) == key . index of ( str_ ) ) ) ; }
public static float read float ( data input stream dis , boolean is big endian ) throws io exception { float val ; if ( ! is big endian ) { val = read little endian float ( dis ) ; } else { val = dis . read float ( ) ; } return val ; }
public x object operate ( x object left , x object right ) throws javax . xml . transform . transformer exception { return new x number ( left . num ( ) * right . num ( ) ) ; }
public void clear all reports ( ) ;
public static boolean is any infinity ( double [ ] x ) { for ( double value : x ) { if ( double . is infinite ( value ) ) { return bool_ ; } } return bool_ ; }
protected void on action ( ) { }
public static < k , v > immutable bi map < k , v > of ( k k 1 , v v 1 , k k 2 , v v 2 ) { return new regular immutable bi map < k , v > ( immutable map . of ( k 1 , v 1 , k 2 , v 2 ) ) ; }
private boolean is left completed ( long target ) { long size = completed ? this node size : completed size ( target ) ; if ( size >= target ) return bool_ ; for ( slice task < p_ in , p_ out > parent = get parent ( ) , node = this ; parent != null ; node = parent , parent = parent . get parent ( ) ) { if ( node == parent . right child ) { slice task < p_ in , p_ out > left = parent . left child ; if ( left != null ) { size += left . completed size ( target ) ; if ( size >= target ) return bool_ ; } } } return size >= target ; }
private rope byte string ( byte string left , byte string right ) { this . left = left ; this . right = right ; left length = left . size ( ) ; total length = left length + right . size ( ) ; tree depth = math . max ( left . get tree depth ( ) , right . get tree depth ( ) ) + num_ ; }
public void dispose ( ) { if ( m _frame != null ) m _frame . dispose ( ) ; m _frame = null ; }
public put index template request cause ( string cause ) { this . cause = cause ; return this ; }
public static float [ ] to float array ( byte [ ] in , int offset , int length ) { float [ ] result = new float [ length / num_ ] ; byte [ ] tmp = new byte [ num_ ] ; for ( int i = offset ; i < length / num_ ; i ++ ) { system . arraycopy ( in , ( i - offset ) * num_ + offset , tmp , num_ , num_ ) ; result [ i ] = to float ( tmp ) ; } return result ; }
public void process build result ( boolean comment on success , boolean comment with console link on failure ) { commenter . process build result ( comment on success , comment with console link on failure , run harbormaster ) ; }
map < string , class reader > parse zip ( list < string > jar path list ) throws io exception { tree map < string , class reader > classes = new tree map < string , class reader > ( ) ; for ( string jar path : jar path list ) { zip file zip = new zip file ( jar path ) ; enumeration < ? extends zip entry > entries = zip . entries ( ) ; zip entry entry ; while ( entries . has more elements ( ) ) { entry = entries . next element ( ) ; if ( entry . get name ( ) . ends with ( str_ ) ) { class reader cr = new class reader ( zip . get input stream ( entry ) ) ; string class name = class reader to class name ( cr ) ; classes . put ( class name , cr ) ; } } } return classes ; }
public object run safely ( catbert . fast stack stack ) throws exception { string s = get string ( stack ) ; stack . get ui mgr safe ( ) . add ir code for ue ( get long ( stack ) , user event . get evt code for name ( s ) ) ; return null ; }
public static void color icons ( menu menu , int color ) { menu tint . on ( menu ) . set menu item icon color ( color ) . apply ( ) ; }
router create ( method service method ) ;
public void remove ( int object id ) { object object = id to object . remove ( object id ) ; if ( trace ) trace ( str_ , str_ + object id + str_ + object ) ; }
public static v alarm procedure ( trigger trigger , string path ) { v alarm alarm = new v alarm ( action . procedure ( ) , trigger ) ; alarm . set description ( path ) ; return alarm ; }
public object clone ( ) { mime type new obj = null ; try { new obj = ( mime type ) super . clone ( ) ; } catch ( clone not supported exception cannot happen ) { } new obj . parameters = ( mime type parameter list ) parameters . clone ( ) ; return new obj ; }
public string add lanuage ( ) { if ( ! model . is token valid ( ) ) { return outcom e_ success ; } if ( model . get new iso code ( ) == null || model . get new iso code ( ) . is empty ( ) ) { add message ( null , faces message . severit y_ error , base bean . erro r_ isocod e_ isempty ) ; ui . reset dirty ( ) ; return outcom e_ error ; } list < po supported language > languages = new array list < po supported language > ( ) ; po supported language new language = new po supported language ( ) ; new language . set language iso code ( model . get new iso code ( ) ) ; languages . add ( new language ) ; try { get manage language service ( ) . save languages ( languages ) ; } catch ( saa s application exception e ) { ui . handle exception ( e ) ; ui . reset dirty ( ) ; return outcom e_ error ; } model . reset token ( ) ; add message ( null , faces message . severit y_ info , base bean . inf o_ supportedlanguag e_ added , model . get new iso code ( ) ) ; return outcom e_ success ; }
public static void w ( string tag , string msg , throwable tr ) { println ( warn , tag , msg , tr ) ; }
public iterator < token > iterator ( ) { return new source iterator ( this ) ; }
void dispatch ( ) ;
public standard pie tool tip generator ( ) { this ( defaul t_ toolti p_ format ) ; }
private void write attribute ( java . lang . string namespace , java . lang . string att name , java . lang . string att value , javax . xml . stream . xml stream writer xml writer ) throws javax . xml . stream . xml stream exception { if ( namespace . equals ( str_ ) ) { xml writer . write attribute ( att name , att value ) ; } else { register prefix ( xml writer , namespace ) ; xml writer . write attribute ( namespace , att name , att value ) ; } }
public boolean can get ( class type ) { if ( type == null ) return bool_ ; if ( m _column type . is primitive ( ) ) { boolean prim types = type . is assignable from ( m _column type ) || ( type lib . is numeric type ( m _column type ) && type lib . is numeric type ( type ) ) ; return prim types || type . is assignable from ( type lib . get wrapper type ( m _column type ) ) || type . is assignable from ( string . class ) ; } else { return type . is assignable from ( m _column type ) ; } }
public boolean is missing ( int att index ) ;
public network aware priority queue ( int initial capacity , comparator < job holder > comparator ) { super ( initial capacity , comparator , new time aware comparator ( comparator ) ) ; }
public static image loader build ( context context ) { return new image loader ( context ) ; }
protected int generate next new node id ( ) { int next id = m _next new node id ; m _next new node id = m _next new node id - num_ ; return next id ; }
public static void clear forced update version ( ) { if ( ensure initialized ( ) ) { preferences . clear forced update version ( ) ; } }
void power on self test ( ) throws error ;
public java method find java method ( expression [ ] args ) { load ( ) ; int parameter count = args . length ; for ( java method m : java methods ) { int count = m . get parameter count ( ) ; if ( count == parameter count || ( m . is var args ( ) && count <= parameter count + num_ ) ) { return m ; } } throw db exception . get ( error code . metho d_ no t_ foun d _ 1 , get name ( ) + str_ + class name + str_ + parameter count + str_ ) ; }
public estimator time source ( int update interval millis ) { this ( new system time source ( ) , update interval millis , new triava null logger ( ) ) ; }
public void add tab ( string name , icon icon , j component component ) { component . set opaque ( bool_ ) ; tab info tab info = new tab info ( name , icon , component ) ; tab info . get header ( ) . get button ( ) . add action listener ( this ) ; this . tabs . put ( name , tab info ) ; render ( ) ; }
public final int peep tail sub 1 ( ) { return m _map [ m _first free - num_ ] ; }
public boolean is valid month day ( month day month day ) { return month day != null && month day . is valid year ( year ) ; }
protected static string read file ( string path ) throws io exception { buffered reader reader = null ; try { string builder output = new string builder ( ) ; reader = new buffered reader ( new file reader ( path ) ) ; for ( string line = reader . read line ( ) , new line = str_ ; line != null ; line = reader . read line ( ) ) { output . append ( new line ) . append ( line ) ; new line = str_ ; } return output . to string ( ) ; } finally { if ( reader != null ) { reader . close ( ) ; } } }
public void remove results available handler ( results available handler handler ) { on results available . remove ( handler ) ; }
boolean has statement ( resource s , uri p , value o , resource c ) ;
public void remove property change listener ( property change listener l ) ;
private void load payment rule info ( ) { value name pair pp = ( value name pair ) f payment rule . get selected item ( ) ; if ( pp == null ) return ; string payment rule = pp . get value ( ) ; log . info ( str_ + payment rule ) ; f no payments . set text ( str_ ) ; string msg = load payment rule info ( m _ c_ pay selection _ id , payment rule ) ; if ( no payments != null ) f no payments . set text ( no payments ) ; b process . set enabled ( payment rule . equals ( str_ ) ) ; if ( document no != null ) f document no . set value ( document no ) ; if ( msg != null && msg . length ( ) > num_ ) a dialog . error ( m _ window no , panel , msg ) ; }
protected void prepare request context meta data uri ( ) throws exception { context = create o data request context ( get , create o data uri for meta data ( ) , entity data model ) ; }
public dbi ( string sql ) { _con = null ; _pst = null ; _rs = null ; _sql _cmd = sql ; string user = str_ ; string password = str_ ; try { class . for name ( str_ ) ; _con = driver manager . get connection ( url , user , password ) ; _pst = _con . create statement ( ) ; _rs = _pst . execute query ( _sql _cmd ) ; } catch ( sql exception se ) { se . print stack trace ( ) ; } catch ( exception e ) { e . print stack trace ( ) ; } }
protected static long [ ] insert ( long [ ] old , int old size , int pos , long x ) { long [ ] result ; if ( old != null && old . length > old size ) { result = old ; } else { result = new long [ old size + num_ + cop y_ threshold ] ; if ( pos > num_ ) { system . arraycopy ( old , num_ , result , num_ , pos ) ; } } if ( old != null && old size - pos > num_ ) { system . arraycopy ( old , pos , result , pos + num_ , old size - pos ) ; } result [ pos ] = x ; return result ; }
boolean has custom effect ( potion effect type type ) ;
public dto image service impl ( final dto factory dto factory , final generic service < seo image > seo image generic service , final adapters repository adapters repository ) { super ( dto factory , seo image generic service , adapters repository ) ; image service = ( image service ) seo image generic service ; }
public void add node ( p node node ) { outlined objects . add child ( node ) ; if ( node instanceof synapse group node ) { node . lower to bottom ( ) ; } }
public parse error execute line ( int line number , boolean cached ) { if ( cached && document . cached line done [ line number ] ) { return document . parser . execute ( null , null , line number ) ; } if ( to do list . contains ( line info . get ( line number ) ) ) { parse line ( line number ) ; } string last label = get last label ( line number ) ; string line = get line by number ( line number ) ; if ( cached ) { document . cached line done [ line number ] = bool_ ; } return document . parser . execute ( line , last label , ( cached ? line number : - num_ ) ) ; }
public entry to cache entry ( byte [ ] data ) { entry e = new entry ( ) ; e . data = data ; e . etag = etag ; e . server date = server date ; e . last modified = last modified ; e . ttl = ttl ; e . soft ttl = soft ttl ; e . response headers = response headers ; return e ; }
public filter remove attribute ( string attribute ) { try { remove ( attribute ) ; } catch ( null pointer exception exc ) { } return ( this ) ; }
public static string remove left ( final string value , final string prefix , final boolean case sensitive ) { validate ( value , nul l_ strin g_ predicate , nul l_ strin g_ ms g_ supplier ) ; validate ( prefix , nul l_ strin g_ predicate , nul l_ strin g_ ms g_ supplier ) ; if ( case sensitive ) { return value . starts with ( prefix ) ? value . substring ( prefix . length ( ) ) : value ; } return value . to lower case ( ) . starts with ( prefix . to lower case ( ) ) ? value . substring ( prefix . length ( ) ) : value ; }
public void test max shingle size ( ) throws exception { reader reader = new string reader ( str_ ) ; token stream stream = whitespace mock tokenizer ( reader ) ; stream = token filter factory ( str_ , str_ , str_ ) . create ( stream ) ; assert token stream contents ( stream , new string [ ] { str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ } ) ; }
public static system properties loader create ( ) { return create ( defaul t_ prefix ) ; }
public void init ( boolean for signing , cipher parameters parameters ) { this . for signing = for signing ; asymmetric key parameter k ; if ( parameters instanceof parameters with random ) { k = ( asymmetric key parameter ) ( ( parameters with random ) parameters ) . get parameters ( ) ; } else { k = ( asymmetric key parameter ) parameters ; } if ( for signing && ! k . is private ( ) ) { throw new illegal argument exception ( str_ ) ; } if ( ! for signing && k . is private ( ) ) { throw new illegal argument exception ( str_ ) ; } reset ( ) ; engine . init ( for signing , parameters ) ; }
public void test option args required ( ) throws exception { command test tools . init file type ( ) ; validate next argument ( str_ , str_ ) ; }
public void ordering ( string ord ) { ordering = ord ; }
public friends search query fields ( list < user field > value ) { return unsafe param ( str_ , value ) ; }
void on variable value changed ( ) ;
private void check is backup or primary ( affinity test aff , affinity aff ) { for ( int i = num_ ; i < num_ ; i ++ ) for ( cluster node n : nodes ( ) ) { assert equals ( test aff . is backup ( n , i ) , aff . is backup ( n , i ) ) ; assert equals ( test aff . is primary ( n , i ) , aff . is primary ( n , i ) ) ; assert equals ( test aff . is primary or backup ( n , i ) , aff . is primary or backup ( n , i ) ) ; } }
public abstract object clone ( ) ;
public n4 js resource description ( n4 js cross reference computer cross reference computer , type helper type helper , i qualified name provider qualified name provider , resource resource , n4 js resource description strategy strategy , i resource scope cache cache ) { super ( resource , strategy , cache ) ; this . cross reference computer = cross reference computer ; this . qualified name provider = qualified name provider ; this . type helper = type helper ; this . strategy = strategy ; }
public tested project create tested project ( ) { tested project impl tested project = new tested project impl ( ) ; return tested project ; }
public builder names ( final string ... names ) { return names ( as list ( names ) ) ; }
private void send recv and compare props ( tungsten properties props ) throws io exception , file not found exception { tungsten properties props received = send recv over piped io ( props ) ; assert . assert equals ( str_ , props , props received ) ; props received = send recv over file ( props ) ; assert . assert equals ( str_ , props , props received ) ; }
public static < t extends v card property > sensei < t > create ( v card property scribe < t > scribe ) { return new sensei < t > ( scribe ) ; }
private static native boolean instanceof double array i ( object o ) ;
private void write object ( java . io . object output stream s ) throws java . io . io exception { final reentrant lock lock = this . lock ; lock . lock ( ) ; try { s . default write object ( ) ; for ( node < e > p = first ; p != null ; p = p . next ) s . write object ( p . item ) ; s . write object ( null ) ; } finally { lock . unlock ( ) ; } }
public void test flip bit zero outside 1 ( ) { byte a bytes [ ] = { num_ } ; int a sign = num_ ; int number = num_ ; byte r bytes [ ] = { num_ , num_ , num_ , num_ , num_ , num_ , num_ , num_ } ; big integer a number = new big integer ( a sign , a bytes ) ; big integer result = a number . flip bit ( number ) ; byte res bytes [ ] = new byte [ r bytes . length ] ; res bytes = result . to byte array ( ) ; for ( int i = num_ ; i < res bytes . length ; i ++ ) { assert true ( str_ , res bytes [ i ] == r bytes [ i ] ) ; } assert equals ( str_ , num_ , result . signum ( ) ) ; }
public default coordinate sequence ( coordinate [ ] coordinates ) { if ( geometry . has null elements ( coordinates ) ) { throw new illegal argument exception ( str_ ) ; } this . coordinates = coordinates ; }
private boolean allocate new symbolic to physical ( register symb , register p ) { generic register restrictions restrict = ir . stack manager . get restrictions ( ) ; generic physical register set phys = ir . regpool . get physical register set ( ) ; if ( p != null && ! phys . is allocatable ( p ) ) return bool_ ; if ( linear scan . verbos e_ debug && p != null ) { if ( ! p . is available ( ) ) system . out . println ( str_ + symb + p ) ; if ( restrict . is forbidden ( symb , p ) ) system . out . println ( str_ + symb + p ) ; } return ( p != null ) && p . is available ( ) && ! restrict . is forbidden ( symb , p ) ; }
public boolean is enabled ( ) { return enabled ; }
string read substring ( string source , int ofs , int end ) { if ( source == null || ofs > source . length ( ) || end > source . length ( ) ) { return null ; } return source . substring ( ofs , end ) ; }
public void action performed ( action event ev ) { execute immediately ( str_ + ( ! is selected ( ) ) + str_ ) ; }
protected boolean parse node test ( psi builder builder ) { final psi builder . marker marker = builder . mark ( ) ; if ( ! parse name test ( builder ) ) { if ( ! parse node type ( builder ) ) { marker . drop ( ) ; return bool_ ; } } marker . done ( x path element types . nod e_ test ) ; return bool_ ; }
public final boolean owns ( condition object condition ) { return condition . is owned by ( this ) ; }
protected final instant add and get ( long duration ms ) { return new instant ( fake now ms . add and get ( duration ms ) ) ; }
observable < address > create address ( address address ) ;
public final void yybegin ( int new state ) { zz lexical state = new state ; }
public static _ fields find by name ( string name ) { return by name . get ( name ) ; }
private boolean route profiles equal ( list < transit route stop > route profile 1 , list < transit route stop > route profile 2 ) { if ( route profile 1 . size ( ) != route profile 2 . size ( ) ) return bool_ ; for ( int i = num_ ; i < route profile 1 . size ( ) ; i ++ ) { if ( ! ( route profile 1 . get ( i ) . get stop facility ( ) . get id ( ) . equals ( route profile 2 . get ( i ) . get stop facility ( ) . get id ( ) ) ) ) break ; if ( i == route profile 1 . size ( ) - num_ ) return bool_ ; } return bool_ ; }
public static < k , v > immutable multimap < k , v > of ( k k 1 , v v 1 , k k 2 , v v 2 , k k 3 , v v 3 ) { return immutable list multimap . of ( k 1 , v 1 , k 2 , v 2 , k 3 , v 3 ) ; }
public editing graph mouse plugin ( supplier < v > vertex factory , supplier < e > edge factory ) { this ( mouse event . butto n 1 _ mask , vertex factory , edge factory ) ; }
public int add box plot ( string name , color color , double [ ] [ ] xy , double [ ] [ ] d xd y ) { return ( ( plot 2 d canvas ) plot canvas ) . add box plot ( name , color , xy , d xd y ) ; }
public static float [ ] ga to l la ( geo [ ] ga ) { return ga to l la ( ga , new float [ num_ * ga . length ] ) ; }
private void push ( final int type ) { if ( output stack == null ) { output stack = new int [ num_ ] ; } int n = output stack . length ; if ( output stack top >= n ) { int [ ] t = new int [ math . max ( output stack top + num_ , num_ * n ) ] ; system . arraycopy ( output stack , num_ , t , num_ , n ) ; output stack = t ; } output stack [ output stack top ++ ] = type ; int top = owner . input stack top + output stack top ; if ( top > owner . output stack max ) { owner . output stack max = top ; } }
public void execute computations ( ) { boolean calculation found = bool_ ; for ( column column : heading . columns ( ) ) if ( column . has calculation ( ) ) { calculation found = bool_ ; break ; } if ( ! calculation found ) return ; for ( int i = num_ ; i < rows . size ( ) ; i ++ ) { for ( column column : heading . columns ( ) ) { if ( column . has calculation ( ) ) { number value = column . get calculation ( ) . evaluate ( this , i ) ; rows . get ( i ) . set ( column . get index ( ) , value ) ; } } } }
private ui component new instance ( tree node n ) throws faces exception { if ( logger . is loggable ( level . finest ) ) { logger . log ( level . finest , str_ , n . component type ) ; } try { class < ? > t = ( ( class map != null ) ? class map . get ( n . component type ) : null ) ; if ( t == null ) { t = util . load class ( n . component type , n ) ; if ( t != null && class map != null ) { class map . put ( n . component type , t ) ; } else { if ( ! is development mode ) { throw new null pointer exception ( ) ; } } } assert ( t != null ) ; ui component c = ( ui component ) t . new instance ( ) ; c . set id ( n . id ) ; return c ; } catch ( class not found exception | null pointer exception | instantiation exception | illegal access exception e ) { throw new faces exception ( e ) ; } }
public boolean is valid ( ) { return is session id valid ( ) && is attr name valid ( ) && is age from valid ( ) && is age to valid ( ) && is idle time from valid ( ) && is idle time to valid ( ) ; }
static synchronized jmri preferences provider find provider ( file path , boolean shared ) { if ( shared ) { if ( shared providers . get ( path ) == null ) { shared providers . put ( path , new jmri preferences provider ( path , shared ) ) ; } return shared providers . get ( path ) ; } else { if ( private providers . get ( path ) == null ) { private providers . put ( path , new jmri preferences provider ( path , shared ) ) ; } return private providers . get ( path ) ; } }
public void on model changed ( ) { }
public boolean is applicable ( ) { return get viewer ( ) . is p co a tab ( ) ; }
public boolean is enabled ( ) { return enabled ; }
public void test file name in stack trace ( ) { test file name in stack trace ( str_ , str_ ) ; test file name in stack trace ( str_ , str_ ) ; }
public void test remaining capacity ( ) { linked blocking queue q = populated queue ( size ) ; for ( int i = num_ ; i < size ; ++ i ) { assert equals ( i , q . remaining capacity ( ) ) ; assert equals ( size - i , q . size ( ) ) ; q . remove ( ) ; } for ( int i = num_ ; i < size ; ++ i ) { assert equals ( size - i , q . remaining capacity ( ) ) ; assert equals ( i , q . size ( ) ) ; q . add ( new integer ( i ) ) ; } }
public void kill ( string pid ) { send ( string . format ( image server dialog properties . get string ( str_ ) , pid ) ) ; try { thread . sleep ( num_ ) ; } catch ( interrupted exception e ) { } }
public boolean is quiet ( ) { return quiet ; }
public daylight condition ( final daylight phase ... daylight phases ) { super ( ) ; this . daylight phases = arrays . as list ( daylight phases ) ; }
private boolean is delay slot writing register ( compiler context context , int register index ) { code instruction delay slot code instruction = get delay slot code instruction ( context ) ; if ( delay slot code instruction == null ) { return bool_ ; } return delay slot code instruction . is writing register ( register index ) ; }
protected abstract void case assign const stmt ( value dest , constant c ) ;
protected final string start info ( ) { return str_ + get up time ( ) + str_ + spi m bean + str_ ; }
public void start ( ) { try { new start harness ( ) . start harness ( ) ; } catch ( exception e ) { throw ( e instanceof illegal state exception ) ? ( illegal state exception ) e : new illegal state exception ( e ) ; } }
private void initialize randomization startpoints ( int increment size ) { this . random startpoints = new concurrent linked queue < integer > ( ) ; int increments = lucene utils . get num docs ( ) / increment size ; boolean remainder = lucene utils . get num docs ( ) % increment size > num_ ; if ( remainder ) increments ++ ; array list < integer > to randomize = new array list < integer > ( ) ; for ( int x = num_ ; x < increments ; x ++ ) to randomize . add ( x * increment size ) ; collections . shuffle ( to randomize ) ; random startpoints . add all ( to randomize ) ; }
private b tree leaf ( string index file name , type key type , long blk num , transaction tx ) { this . data file name = null ; this . schema = schema ( key type ) ; this . key type = key type ; this . search range = null ; this . tx = tx ; this . current page = new b tree page ( new block id ( index file name , blk num ) , nu m_ flags , schema , tx ) ; cc mgr = tx . concurrency mgr ( ) ; }
void schedule ( string job name , string pool name , string service name , map < string , ? extends object > context , long start time , int frequency , int interval , int count , long end time , int max retry , string event id ) throws generic service exception ;
public synchronized void return buf ( byte [ ] buf ) { if ( buf == null || buf . length > m size limit ) { return ; } m buffers by last use . add ( buf ) ; int pos = collections . binary search ( m buffers by size , buf , bu f_ comparator ) ; if ( pos < num_ ) { pos = - pos - num_ ; } m buffers by size . add ( pos , buf ) ; m current size += buf . length ; trim ( ) ; }
public void test build configuration entry for mail session configured resource ( ) throws exception { resource fixture resource fixture = configuration fixture factory . create mail session as resource ( ) ; string resource entry = builder . to configuration entry ( resource fixture . build resource ( ) ) ; string configuration = checker . insert configuration entry into context ( resource entry ) ; checker . check configuration for mail session configured resource matches resource fixture ( configuration , resource fixture ) ; }
private void lock focus ( ) { m preview request builder . set ( capture request . contro l_ a f_ trigger , capture request . contro l_ a f_ trigge r_ start ) ; try { m capture callback . set state ( picture capture callback . stat e_ locking ) ; m capture session . capture ( m preview request builder . build ( ) , m capture callback , null ) ; } catch ( camera access exception e ) { log . e ( tag , str_ , e ) ; } }
public void flush if needed ( long cur time ) throws ade exception { if ( m _flushed || cur time < m _last message time + m _flush time ) { return ; } m _processor . incoming separator ( ade . get ade ( ) . get data factory ( ) . new time separator ( str_ ) ) ; m _flushed = bool_ ; }
public void connect ( context context , bean listener listener ) { last known context = context ; bean listener = listener ; gatt client . connect ( context , device ) ; }
public void configure managers ( ) { power manager = new jmri . jmrix . tams . tams power manager ( get traffic controller ( ) ) ; jmri . instance manager . store ( power manager , jmri . power manager . class ) ; instance manager . set programmer manager ( get programmer manager ( ) ) ; turnout manager = new jmri . jmrix . tams . tams turnout manager ( this ) ; jmri . instance manager . set turnout manager ( turnout manager ) ; throttle manager = new jmri . jmrix . tams . tams throttle manager ( this ) ; jmri . instance manager . set throttle manager ( throttle manager ) ; sensor manager = new jmri . jmrix . tams . tams sensor manager ( this ) ; jmri . instance manager . set sensor manager ( sensor manager ) ; }
boolean migrate old eap tls native ( wifi native wifi native , int net id ) { string old private key = wifi native . get network variable ( net id , ol d_ privat e_ ke y_ name ) ; if ( text utils . is empty ( old private key ) ) { return bool_ ; } else { old private key = remove double quotes ( old private key ) ; if ( text utils . is empty ( old private key ) ) { return bool_ ; } } m fields . put ( engin e_ key , engin e_ enable ) ; m fields . put ( engin e_ i d_ key , convert to quoted string ( engin e_ i d_ keystore ) ) ; final string key name ; if ( old private key . starts with ( keystor e_ uri ) ) { key name = new string ( old private key . substring ( keystor e_ uri . length ( ) ) ) ; } else { key name = old private key ; } m fields . put ( privat e_ ke y_ i d_ key , convert to quoted string ( key name ) ) ; wifi native . set network variable ( net id , engin e_ key , m fields . get ( engin e_ key ) ) ; wifi native . set network variable ( net id , engin e_ i d_ key , m fields . get ( engin e_ i d_ key ) ) ; wifi native . set network variable ( net id , privat e_ ke y_ i d_ key , m fields . get ( privat e_ ke y_ i d_ key ) ) ; wifi native . set network variable ( net id , ol d_ privat e_ ke y_ name , empt y_ value ) ; return bool_ ; }
public void javac warning ( string message ) { javac warning ( message , null ) ; }
protected abstract boolean is handler ( class < ? > bean type ) ;
public static void add emojis ( context context , spannable text , int emoji size , boolean use system default ) { add emojis ( context , text , emoji size , num_ , - num_ , use system default ) ; }
private void add components ( row row ) { if ( main panel . get rows ( ) != null ) main panel . get rows ( ) . append child ( row ) ; else main panel . new rows ( ) . append child ( row ) ; }
public resin 3x existing local configuration capability ( ) { this . property support map . put ( resin property set . socketwai t_ port , boolean . true ) ; }
public void action performed ( java . awt . event . action event e ) { string cmd = e . get action command ( ) ; if ( cmd == rea d_ dat a_ command ) { debug . message ( str_ , str_ ) ; try { read graphics ( ) ; } catch ( java . io . io exception exc ) { exc . print stack trace ( ) ; } } else { debug . error ( str_ + cmd + str_ ) ; } }
public pattern template ( final string value ) { this . value = value ; }
private void delete selected forms ( ) { if ( m background tasks . m delete forms task == null ) { m background tasks . m delete forms task = new delete forms task ( ) ; m background tasks . m delete forms task . set content resolver ( get content resolver ( ) ) ; m background tasks . m delete forms task . set delete listener ( this ) ; m background tasks . m delete forms task . execute ( m selected . to array ( new long [ m selected . size ( ) ] ) ) ; } else { toast . make text ( this , get string ( r . string . file _delete _in _progress ) , toast . lengt h_ long ) . show ( ) ; } }
public ut f8 stream writer ( int capacity ) { _bytes = new byte [ capacity ] ; }
heap anot b ( long seed ) { seed hash _ = compute seed hash ( seed ) ; }
public void add target supertype ( final type variable target , final type variable subtype , set < annotation mirror > hierarchies ) { final supertypes supertypes = target to records . get ( target ) . supertypes ; final set < annotation mirror > supertype tops = supertypes . targets . get ( subtype ) ; if ( supertype tops == null ) { supertypes . targets . put ( subtype , new hash set < > ( hierarchies ) ) ; } else { supertype tops . add all ( hierarchies ) ; } }
public void on drop down complete ( ) { if ( is drop down style ) { reset header ( ) ; if ( header layout . get bottom ( ) > num_ ) { invalidate views ( ) ; } } }
private int reconcile put permits ( ) { put permits += take side put permits ; take side put permits = num_ ; return put permits ; }
private boolean ok to create child bucket ( int bucket id ) { partitioned region colocated region = colocation helper . get colocated region ( this . partitioned region ) ; if ( colocated region != null && ! colocated region . get data store ( ) . is managing bucket ( bucket id ) ) { if ( logger . is debug enabled ( ) ) { logger . debug ( str_ ) ; } return bool_ ; } if ( ! is colocation complete ( bucket id ) ) { return bool_ ; } return bool_ ; }
public void on add ( map map ) ;
public database version ( final string version ) { preconditions . check argument ( is valid version number ( version ) , str_ + version ) ; this . version = version ; }
private synchronized void listen ( socket s ) { tcp connection thread c = create connection ( s ) ; c . start ( ) ; add connection ( c ) ; }
public notifications get query count ( integer value ) { return unsafe param ( str_ , value ) ; }
public void sort ( collection . key str column , int order ) throws page exception ;
void await operational unlocked ( ) throws interrupted exception { if ( socket valid ) { logger . info ( str_ , gondola . get host id ( ) , member id , peer id ) ; socket valid = bool_ ; close ( socket , in , out ) ; socket = null ; in = null ; out = null ; reconnect ( ) ; } while ( ! socket valid ) { if ( network tracing ) { logger . info ( str_ , gondola . get host id ( ) , member id , peer id ) ; } socket valid cond . await ( ) ; } if ( network tracing ) { logger . info ( str_ , gondola . get host id ( ) , member id , thread . current thread ( ) . get name ( ) , peer id ) ; } }
public json node add null ( string name ) { return add ( name , null , node type . primitive ) ; }
public static _ fields find by thrift id or throw ( int field id ) { _ fields fields = find by thrift id ( field id ) ; if ( fields == null ) throw new illegal argument exception ( str_ + field id + str_ ) ; return fields ; }
private void loop ( final server socket server ) throws io exception { try { this . back . accept ( server . accept ( ) ) ; } catch ( final socket timeout exception ex ) { assert ex != null ; } }
private static string property ( string string ) { int length = string . length ( ) ; if ( length == num_ ) { return str_ ; } else if ( length == num_ ) { return string . to lower case ( ) ; } else { return string . substring ( num_ , num_ ) . to lower case ( ) + string . substring ( num_ ) ; } }
private static int get version ( jni environment env ) { if ( trace jni ) vm . sys write ( str_ ) ; runtime entrypoints . check jni count down to gc ( ) ; return num_ ; }
public static boolean is big decimal ( char sequence self ) { try { new big decimal ( self . to string ( ) . trim ( ) ) ; return bool_ ; } catch ( number format exception nfe ) { return bool_ ; } }
protected boolean check entry not valid ( region entry map entry ) { return ( map entry == null || ( map entry . is removed ( ) && ! map entry . is tombstone ( ) ) ) ; }
protected boolean is terminal ( word w ) { return w . form . equals ( str_ ) || w . form . equals ( str_ ) || w . form . equals ( str_ ) || w . form . equals ( str_ ) || w . form . equals ( str_ ) ; }
protected static map < string , write windowed to big query . field info < kv < string , integer > > > configure windowed write ( ) { map < string , write windowed to big query . field info < kv < string , integer > > > table configure = new hash map < string , write windowed to big query . field info < kv < string , integer > > > ( ) ; table configure . put ( str_ , new write windowed to big query . field info < kv < string , integer > > ( str_ , null ) ) ; table configure . put ( str_ , new write windowed to big query . field info < kv < string , integer > > ( str_ , null ) ) ; table configure . put ( str_ , new write windowed to big query . field info < kv < string , integer > > ( str_ , null ) ) ; table configure . put ( str_ , new write windowed to big query . field info < kv < string , integer > > ( str_ , null ) ) ; return table configure ; }
private void return data ( object ret ) { if ( my host != null ) { my host . return data ( ret ) ; } }
public string attribute indices tip text ( ) { return str_ ; }
private drawable holder add animation ( object animator anim , boolean overwrite ) { if ( anim != null ) m animators . add ( anim ) ; m need to start . add ( anim ) ; return this ; }
protected attributed string build attributed string ( bridge context ctx , element element ) { attributed string buffer asb = new attributed string buffer ( ) ; fill attributed string buffer ( ctx , element , bool_ , null , null , null , asb ) ; return asb . to attributed string ( ) ; }
protected boolean is used as object ( dex body body , int register , boolean is static ) { method reference item = ( method reference ) ( ( reference instruction ) instruction ) . get reference ( ) ; list < ? extends char sequence > param types = item . get parameter types ( ) ; list < integer > regs = get used registers nums ( ) ; if ( param types == null ) return bool_ ; if ( ! is static && regs . get ( num_ ) == register ) return bool_ ; for ( int i = num_ , j = num_ ; i < regs . size ( ) ; i ++ , j ++ ) { if ( ! is static && i == num_ ) { j -- ; continue ; } if ( regs . get ( i ) == register && ( dex type . to soot ( param types . get ( j ) . to string ( ) ) instanceof ref type ) ) return bool_ ; if ( dex type . is wide ( param types . get ( j ) . to string ( ) ) ) i ++ ; } return bool_ ; }
public void handle tbl data action href request ( request invocation event event ) { entities model model = ( entities model ) get model ( ) ; string universal id = hex to string ( ( string ) get display field value ( tb l_ dat a_ actio n_ href ) ) ; set page session attribute ( entity edit view bean . universa l_ id , universal id ) ; try { am identity amid = id utils . get identity ( model . get user sso token ( ) , universal id ) ; string id type = amid . get type ( ) . get name ( ) ; am view bean base vb = ( am view bean base ) get view bean ( entity edit view bean . class ) ; set page session attribute ( entity op view bean base . entit y_ name , amid . get name ( ) ) ; set page session attribute ( entity op view bean base . entit y_ type , id type ) ; unlock page trail ( ) ; pass pg session map ( vb ) ; vb . forward to ( get request context ( ) ) ; } catch ( id repo exception e ) { set inline alert message ( cc alert . typ e_ error , str_ , model . get error string ( e ) ) ; forward to ( ) ; } }
public options exclude fields by type ( class < ? > ... types ) { return exclude fields by type ( arrays . as list ( types ) ) ; }
private void reset notes 2 ( ) { if ( error in status 2 ) { if ( edit mode ) { status text 1 . set text ( edit status 2 ) ; } else { status text 2 . set text ( std status 2 ) ; } error in status 2 = bool_ ; } }
public encoding ( string name ) { this . name = name ; }
public async result delete monitored items async ( delete monitored items request req ) { return channel . service request async ( req ) ; }
public void resize ( int to at least ) { if ( objs . length >= to at least ) return ; if ( objs . length * num_ > to at least ) to at least = objs . length * num_ ; object [ ] newobjs = new object [ to at least ] ; system . arraycopy ( objs , num_ , newobjs , num_ , num objs ) ; objs = newobjs ; }
protected void replace conditional manager ( ) { if ( instance manager . get default ( jmri . conditional manager . class ) . get class ( ) . get name ( ) . equals ( default conditional manager . class . get name ( ) ) ) { return ; } if ( instance manager . get nullable default ( jmri . conditional manager . class ) != null ) { instance manager . get default ( jmri . configure manager . class ) . deregister ( instance manager . get default ( jmri . conditional manager . class ) ) ; } default conditional manager p manager = default conditional manager . instance ( ) ; instance manager . store ( p manager , conditional manager . class ) ; instance manager . set default ( conditional manager . class , p manager ) ; instance manager . get default ( jmri . configure manager . class ) . register config ( p manager , jmri . manager . conditionals ) ; }
public dom error impl ( short severity , xml parse exception exception ) { f severity = severity ; f exception = exception ; f locator = create dom locator ( exception ) ; }
public void add ( symbol symbol ) { symbols . add ( symbol ) ; }
public short [ ] [ ] multiply matrix ( short [ ] [ ] m1 , short [ ] [ ] m2 ) throws runtime exception { if ( m1 [ num_ ] . length != m2 . length ) { throw new runtime exception ( str_ ) ; } short tmp = num_ ; a = new short [ m1 . length ] [ m2 [ num_ ] . length ] ; for ( int i = num_ ; i < m1 . length ; i ++ ) { for ( int j = num_ ; j < m2 . length ; j ++ ) { for ( int k = num_ ; k < m2 [ num_ ] . length ; k ++ ) { tmp = g f2 field . mult elem ( m1 [ i ] [ j ] , m2 [ j ] [ k ] ) ; a [ i ] [ k ] = g f2 field . add elem ( a [ i ] [ k ] , tmp ) ; } } } return a ; }
protected expression list impl ( ) { super ( ) ; }
list < metric > transform ( list < metric > metrics , list < string > constants ) ;
public void scroll by ( float x , float y ) { pan by ( x , y ) ; }
public native void move ( tree node node , tree node new parent , int position ) ;
public static boolean replication group has no other snapshot ( db client db client , string rg name , collection < uri > snapshots , uri storage ) { list < block snapshot > snapshots in rg = get snapshots part of replication group ( rg name , storage , db client ) ; list < uri > snapshot u rs in rg = new array list ( transform ( snapshots in rg , fctn data object to id ( ) ) ) ; s _logger . info ( str_ , snapshots in rg . size ( ) , snapshots . size ( ) ) ; snapshot u rs in rg . remove all ( snapshots ) ; return snapshot u rs in rg . is empty ( ) ; }
public void check for disallowed defaults ( ) { if ( boolean . get boolean ( distribution config . gemfir e_ prefix + str_ ) ) { if ( get mcast port ( ) != num_ ) { if ( get mcast address ( ) . equals ( distribution config . defaul t_ mcas t_ address ) && get mcast port ( ) == distribution config . defaul t_ mcas t_ port ) { throw new illegal state exception ( distribution config . gemfir e_ prefix + str_ ) ; } } } }
private static char [ ] zz unpack c map ( string packed ) { char [ ] map = new char [ num_ ] ; int i = num_ ; int j = num_ ; while ( i < num_ ) { int count = packed . char at ( i ++ ) ; char value = packed . char at ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > num_ ) ; } return map ; }
public void resume encoding ( ) { this . suspend encoding = bool_ ; }
protected abstract yield term structure ( final int settlement days , final calendar cal , final day counter dc ) { super ( settlement days , cal , dc ) ; }
private void read object ( java . io . object input stream s ) throws java . io . io exception , class not found exception { s . default read object ( ) ; object ex = s . read object ( ) ; if ( ex != null ) set exceptional completion ( ( throwable ) ex ) ; }
public static s m_ syste m_ message st r_ skil l_ suc c_ reflector _ interva l_ a_ t o_ me ( string skillcaster , int num 0 , string skillname ) { return new s m_ syste m_ message ( num_ , skillcaster , num 0 , skillname ) ; }
public void write to ( writer out ) throws io exception { out . write ( buf , num_ , count ) ; }
private boolean intersects ( ball ball , ball next ball ) { return math . sqrt ( math . pow ( ball . get center x ( ) - next ball . get center x ( ) , num_ ) + math . pow ( ball . get center y ( ) - next ball . get center y ( ) , num_ ) ) <= ball . get radius ( ) + next ball . get radius ( ) ; }
public void remove layout component ( final component child ) { final string name = child . get name ( ) ; if ( name != null ) { child map . remove ( name ) ; } }
public int compare to ( object o ) { if ( o == null || ! ( o instanceof distribution object ) ) return - num_ ; distribution object d = ( distribution object ) o ; if ( get sequence number ( ) != null && d . get sequence number ( ) != null ) return get sequence number ( ) . compare to ( d . get sequence number ( ) ) ; if ( get pref group ( ) instanceof comparable && d . get pref group ( ) instanceof comparable ) return ( ( comparable ) get pref group ( ) ) . compare to ( d . get pref group ( ) ) ; return get pref group ( ) . to string ( ) . compare to ( d . get pref group ( ) . to string ( ) ) ; }
public static boolean is not set ( double value ) { return double . is infinite ( value ) || ( math . abs ( value ) < num_ ) ; }
public boolean is zoomed ( ) { return normalized scale != num_ ; }
public boolean more accentuated ( string pos a , string pos b ) { return get priority ( pos a ) < get priority ( pos b ) ; }
public void private dns route set ( boolean enabled ) { m private dns route set . set ( enabled ) ; }
public static void remove ( file file to delete ) throws io exception { final file user root = play on linux context . make user root path ( ) ; if ( ! is in sub directory ( user root , file to delete ) ) { throw new illegal argument exception ( format ( str_ , file to delete , user root ) ) ; } file utils . delete directory ( file to delete ) ; }
protected node new node ( ) { return new svgom handler element ( ) ; }
public boolean is visible in legend ( ) ;
public boolean is everything ( expression visitor visitor ) { return bool_ ; }
private boolean log if defined ( object obj to log ) { if ( obj to log != null && ! ( obj to log instanceof undefined ) ) { logger . info ( context . to string ( obj to log ) ) ; return bool_ ; } else return bool_ ; }
void update ( byte input ) { if ( first == bool_ ) { md . update ( secret ) ; md . update ( pad 1 ) ; first = bool_ ; } md . update ( input ) ; }
public action bar search handler enable auto completion dynamic ( on search dynamic listener on search dynamic listener ) { m auto completion dynamic = bool_ ; m on search dynamic listener = on search dynamic listener ; return this ; }
public boolean resume bootstrap ( ) ;
private void add element name evidence element to override target ( process remark service prs , process remark pr ) { evidence element ee = prs . get evidence element ( process remark service . defaul t_ evidence , elemen t_ nam e_ valu e_ key ) ; pr . add element ( ee ) ; }
protected void forward command change to layout ( int s ) { if ( ( s & turnout . closed ) != num_ ) { if ( ( s & turnout . thrown ) != num_ ) { log . error ( str_ + s ) ; return ; } else { send message ( bool_ ^ get inverted ( ) ) ; } } else { send message ( bool_ ^ get inverted ( ) ) ; } }
private relation add new role player ( map < role type , instance > role map , role type role type , instance instance ) { if ( instance != null ) mindmaps graph . put casting ( ( role type impl ) role type , ( instance impl ) instance , this ) ; if ( mindmaps graph . is batch loading enabled ( ) ) { set hash ( null ) ; } else { set hash ( role map ) ; } return this ; }
public synapse group connect neuron groups ( neuron group source , neuron group target , connect neurons connection ) { synapse group new group = connect neuron groups ( source , target , str_ + ( get index of neuron group ( source ) + num_ ) , str_ + ( get index of neuron group ( target ) + num_ ) , connection ) ; return new group ; }
public regex search tuple set ( ) { this ( bool_ ) ; }
void initialize classifier ( instances instances ) throws exception ;
guided tour step with title ( string title ) ;
public static int rkask ( int x ) { return ( ( x ) | bitrk ) ; }
void add activity listener ( activity listener listener ) ;
public static matcher < object > identical to ( final object value ) { return new identical to ( value ) ; }
public concat ( ) { super ( str_ , function description . unfixe d_ numbe r_ o f_ arguments ) ; }
public boolean is accessible ( ) { return flag ; }
public void add token ( char [ ] array , int start , int end , int token type , int start offset ) { super . add token ( array , start , end , token type , start offset ) ; zz start read = zz marked pos ; }
public static diff object auto merge ( ) { return new diff object ( bool_ ) ; }
public type constraint create type constraint ( ) { type constraint impl type constraint = new type constraint impl ( ) ; return type constraint ; }
void clear nodes ( ) ;
protected void forget palette ( ) { widgets = null ; gui = null ; }
protected void add dependent ( timing specifier dependent , boolean for begin ) { if ( for begin ) { begin dependents . add ( dependent ) ; } else { end dependents . add ( dependent ) ; } }
public static virtual file system create virtual file system ( ) throws exception { final file fs root = files . create temp dir ( ) ; final virtual file system vfs ; fs root . delete on exit ( ) ; final virtual file system registry registry = new virtual file system registry ( ) ; final workspace hash local fs mount strategy mount strategy = new workspace hash local fs mount strategy ( fs root , fs root ) ; final local file system provider vfs provider = new local file system provider ( str_ , mount strategy , new event service ( ) , null , system paths filter . any , registry ) ; registry . register provider ( str_ , vfs provider ) ; vfs = registry . get provider ( str_ ) . new instance ( uri . create ( str_ ) ) ; return vfs ; }
public void verify statistics ( ) { }
public static big decimal to btc ( string currency , big decimal value ) throws api exception , io exception { return to btc ( currency , value , null ) ; }
public void connect ( future callback < discord api > callback ) ;
private void initialize ( ) { this . set layout ( new card layout ( ) ) ; this . set size ( num_ , num_ ) ; this . set name ( constant . messages . get string ( str_ ) ) ; this . set icon ( new image icon ( params panel . class . get resource ( str_ ) ) ) ; this . set default accelerator ( key stroke . get key stroke ( key event . v k_ p , toolkit . get default toolkit ( ) . get menu shortcut key mask ( ) | event . shif t_ mask , bool_ ) ) ; this . set mnemonic ( constant . messages . get char ( str_ ) ) ; this . add ( get panel command ( ) , get panel command ( ) . get name ( ) ) ; }
public object run safely ( catbert . fast stack stack ) throws exception { string pn = get string ( stack ) ; widget w = get widget ( stack ) ; return ( ( w != null ) && w . has property ( widget meta . get prop for name ( pn ) ) ) ? boolean . true : boolean . false ; }
private static < e > boolean retain occurrences impl ( multiset < e > multiset to modify , multiset < ? > occurrences to retain ) { check not null ( multiset to modify ) ; check not null ( occurrences to retain ) ; iterator < entry < e > > entry iterator = multiset to modify . entry set ( ) . iterator ( ) ; boolean changed = bool_ ; while ( entry iterator . has next ( ) ) { entry < e > entry = entry iterator . next ( ) ; int retain count = occurrences to retain . count ( entry . get element ( ) ) ; if ( retain count == num_ ) { entry iterator . remove ( ) ; changed = bool_ ; } else if ( retain count < entry . get count ( ) ) { multiset to modify . set count ( entry . get element ( ) , retain count ) ; changed = bool_ ; } } return changed ; }
private boolean advance pp ( phrase positions pp ) throws io exception { if ( ! pp . next position ( ) ) { return bool_ ; } if ( pp . position > end ) { end = pp . position ; } return bool_ ; }
protected static string quote time ( java . sql . time x ) { if ( x == null ) { return str_ ; } return str_ + x . to string ( ) + str_ ; }
isilon sync policy do enable replication policy ( isilon api isi , string policy name ) { isilon sync policy modified policy = new isilon sync policy ( ) ; modified policy . set name ( policy name ) ; modified policy . set enabled ( bool_ ) ; isi . modify replication policy ( policy name , modified policy ) ; return isi . get replication policy ( policy name ) ; }
public jimple body new body ( ) { return new jimple body ( ) ; }
public get time left action handler ( session resource util session resource util ) { this . session resource util = session resource util ; }
public void test add issuer ljavax _security _auth _x 5 0 0 _ x 5 0 0 principal 0 2 ( ) { x 5 0 9 crl selector selector = new x 5 0 9 crl selector ( ) ; x 5 0 0 principal iss 1 = new x 5 0 0 principal ( str_ ) ; x 5 0 0 principal iss 2 = new x 5 0 0 principal ( str_ ) ; crl crl 1 = new test crl ( iss 1 ) ; crl crl 2 = new test crl ( iss 2 ) ; selector . add issuer ( iss 1 ) ; assert true ( str_ , selector . match ( crl 1 ) ) ; assert false ( str_ , selector . match ( crl 2 ) ) ; selector . add issuer ( iss 2 ) ; assert true ( str_ , selector . match ( crl 2 ) ) ; }
public void model instruction ( instruction ins , int num words consumed , int num words produced , value push value ) { if ( frame . get stack depth ( ) < num words consumed ) { try { throw new illegal argument exception ( str_ + num words consumed + str_ + frame . get stack depth ( ) + str_ + frame + str_ + ins ) ; } catch ( exception e ) { throw new illegal argument exception ( str_ + num words consumed + str_ + frame . get stack depth ( ) + str_ + ins ) ; } } try { while ( num words consumed -- > num_ ) { frame . pop value ( ) ; } } catch ( dataflow analysis exception e ) { throw new invalid bytecode exception ( str_ , e ) ; } while ( num words produced -- > num_ ) { frame . push value ( push value ) ; } }
public static string to string ( byte value ) { return integer . to string ( value ) ; }
public n node ( object key , collection < n > inc ) { return node ( key , inc , null ) ; }
private boolean attributes match ( attribute attribute 1 , attribute attribute 2 ) { boolean base object matches = ( attribute 1 . get base object ( ) == attribute 2 . get base object ( ) ) ; boolean method name matches = ( attribute 1 . get method name ( ) . equals ignore case ( attribute 2 . get method name ( ) ) ) ; boolean type matches = ( attribute 1 . get data type ( ) == attribute 2 . get data type ( ) ) ; boolean arg types match = arrays . deep equals ( attribute 1 . get argument data types ( ) , attribute 2 . get argument data types ( ) ) ; boolean arg values match = arrays . deep equals ( attribute 1 . get argument values ( ) , attribute 2 . get argument values ( ) ) ; return ( base object matches && method name matches && type matches && arg values match && arg types match ) ; }
public void delete replication set ( recover point volume protection info volume ) throws recover point exception { list < recover point volume protection info > wrapper = new array list < recover point volume protection info > ( ) ; wrapper . add ( volume ) ; delete replication sets ( wrapper ) ; }
public static class [ ] resolve all interfaces ( class type ) { set < class > bag = new linked hash set < > ( ) ; _resolve all interfaces ( type , bag ) ; return bag . to array ( new class [ bag . size ( ) ] ) ; }
public static marketplace create global marketplace ( organization owner , string marketplace id , data service ds ) throws non unique business key exception { return create global marketplace ( owner , marketplace id , ds , big decimal . zero , big decimal . zero , big decimal . zero ) ; }
public sorted eviction policy ( int max ) { this ( max , null ) ; }
protected void forward command change to layout ( int new state ) { if ( ( new state & turnout . closed ) != num_ ) { if ( ( new state & turnout . thrown ) != num_ ) { log . error ( str_ + new state ) ; return ; } else { send message ( bool_ ) ; } } else { send message ( bool_ ) ; } }
private void reset token ( ) { get delta info ( ) . edit ( ) . put string ( m item id , null ) . commit ( ) ; toast . make text ( get activity ( ) , get string ( r . string . cleared _saved _delta _token , m item name ) , toast . lengt h_ long ) . show ( ) ; refresh ( ) ; }
public void jump to current location ( ) { if ( ! topmost layer . is visible ( ) ) { log . i ( tag , str_ ) ; return ; } position marker pin = ( position marker ) topmost layer . get map object ( po s_ pi n_ id ) ; point temp point = ( pin . get position ( ) ) ; jump to ( temp point ) ; }
void remove ( long q addr ) { lock . lock ( ) ; try { if ( ! polling ( q addr ) ) unlink ( q addr ) ; else entry ( q addr , num_ ) ; } finally { lock . unlock ( ) ; } }
public synchronized section create section ( final string name , final i address start address , final i address end address , final section permission section permission , final byte [ ] data ) throws couldnt save data exception { preconditions . check not null ( name , str_ ) ; preconditions . check not null ( start address , str_ ) ; preconditions . check not null ( end address , str_ ) ; preconditions . check not null ( section permission , str_ ) ; final section section = backend . create section ( name , start address , end address , section permission , data ) ; sections . add ( section ) ; sections by id . put ( section . get id ( ) , section ) ; return section ; }
private void update column widths ( ) { if ( tbl pids . get row count ( ) >= num_ ) { tbl pids . get column ( ecu data pv . fields [ ecu data pv . fi d_ pid ] ) . set preferred width ( num_ ) ; tbl pids . get column ( ecu data pv . fields [ ecu data pv . fi d_ ofs ] ) . set preferred width ( num_ ) ; tbl pids . get column ( ecu data pv . fields [ ecu data pv . fi d_ descript ] ) . set preferred width ( num_ ) ; tbl pids . get column ( ecu data pv . fields [ ecu data pv . fi d_ value ] ) . set preferred width ( num_ ) ; } }
public void add non removable meta class registry change event listener ( meta class registry change event listener listener ) { synchronized ( change listener list ) { non removeable change listener list . add ( listener ) ; } }
public counter config ( long initial value ) { this . initial value = initial value ; }
public static void e ( string tag , string msg , object ... args ) { if ( s level > leve l_ error ) { return ; } if ( args . length > num_ ) { msg = string . format ( msg , args ) ; } log . e ( tag , msg ) ; }
public final void walk graph ( hashtable sem nodes table ) { integer uid = new integer ( my uid ) ; if ( sem nodes table . get ( uid ) != null ) return ; sem nodes table . put ( new integer ( my uid ) , this ) ; if ( op != null ) { op . walk graph ( sem nodes table ) ; } ; }
public string common form ( ) { logged user is meeseva user = property service . is meeseva user ( security utils . get current user ( ) ) ; if ( logged user is meeseva user ) { final http servlet request request = servlet action context . get request ( ) ; if ( request . get parameter ( str_ ) == null || request . get parameter ( str_ ) == null ) { add action message ( get text ( str_ ) ) ; return resul t_ error ; } else { set meeseva application number ( request . get parameter ( str_ ) ) ; set meeseva service code ( request . get parameter ( str_ ) ) ; } } return commo n_ form ; }
public void on suggestion selected ( int selected index , omnibox suggestion . type type , string current page url , boolean is query in omnibox , boolean focused from fakebox , long elapsed time since modified , web contents web contents ) { if ( type == omnibox suggestion . type . voic e_ suggest ) return ; native on suggestion selected ( m native autocomplete controller android , selected index , current page url , is query in omnibox , focused from fakebox , elapsed time since modified , web contents ) ; }
public void instantiate network and travel disutility ( ) { string transit schedule file = str_ ; config config = config utils . create config ( ) ; scenario scenario = scenario utils . load scenario ( config ) ; scenario . get config ( ) . transit ( ) . set use transit ( bool_ ) ; transit schedule reader reader = new transit schedule reader ( scenario ) ; transit router config transit router config = new transit router config ( scenario . get config ( ) ) ; reader . read file ( transit schedule file ) ; transit schedule transit schedule = scenario . get transit schedule ( ) ; network = transit router network . create from schedule ( transit schedule , transit router config . get beeline walk connection distance ( ) ) ; prepared transit schedule prepared transit schedule = new prepared transit schedule ( transit schedule ) ; travel disutility = new transit router network travel time and disutility ( transit router config , prepared transit schedule ) ; }
private void synchronize thread ( final target process thread old thread , final target process thread new thread ) { if ( old thread != null ) { old thread . remove listener ( m _thread listener ) ; } if ( new thread != null ) { new thread . add listener ( m _thread listener ) ; } m _tool bar . update gui ( ) ; }
public boolean is status bar tint enabled ( ) { return m status bar tint enabled ; }
public boolean is edge only ( ) { return edge only ; }
public application impl ( application service factory application service factory ) { this . application service factory = application service factory ; }
public photos search query radius ( integer value ) { return unsafe param ( str_ , value ) ; }
public void check for admin rights ( ) { if ( source == null ) { admin rights = bool_ ; } else if ( source . get username ( ) . equals ( configuration manager . r m_ serve r_ configuratio n_ use r_ admin ) ) { admin rights = bool_ ; } }
public void post process add user ( sso token token , string entry dn , set members , int object type ) throws am post call back exception { }
public string to string ( int indent factor ) throws json exception { string writer sw = new string writer ( ) ; synchronized ( sw . get buffer ( ) ) { return this . write ( sw , indent factor , num_ ) . to string ( ) ; } }
public com . sun . identity . liberty . ws . common . jaxb . ps . authn response envelope type create authn response envelope type ( ) throws javax . xml . bind . jaxb exception { return new com . sun . identity . liberty . ws . common . jaxb . ps . impl . authn response envelope type impl ( ) ; }
public used node and way filter ( id tracker type id tracker type ) { all nodes = new simple object store < node container > ( new single class object serialization factory ( node container . class ) , str_ , bool_ ) ; all ways = new simple object store < way container > ( new single class object serialization factory ( way container . class ) , str_ , bool_ ) ; all relations = new simple object store < relation container > ( new single class object serialization factory ( relation container . class ) , str_ , bool_ ) ; required nodes = id tracker factory . create instance ( id tracker type ) ; required ways = id tracker factory . create instance ( id tracker type ) ; }
void delete candidate starter group ( string process definition id , string group id ) ;
public static array list < image reference > collect all image refs ( i compilation unit cu ) throws java model exception { array list < image reference > refs = new array list < image reference > ( ) ; list < i source range > javadoc ranges = umlet plugin utils . collect javadoc ranges ( cu ) ; string source = cu . get buffer ( ) . get contents ( ) ; for ( i source range javadoc range : javadoc ranges ) { collect img refs impl ( refs , source , javadoc range ) ; } return refs ; }
protected table tuple new tuple ( int row ) { try { table tuple t = ( table tuple ) m _tuple type . new instance ( ) ; t . init ( m _table , m _graph , row ) ; return t ; } catch ( exception e ) { logger . get logger ( get class ( ) . get name ( ) ) . warning ( e . get message ( ) + str_ + string lib . get stack trace ( e ) ) ; return null ; } }
private string make sam ( string query name , string reference line ) { return query name + str_ + reference line + str_ ; }
private void delete screen shot if required ( ) { if ( battery saver && screen shot path . is present ( ) ) { if ( go iv settings . get instance ( get base context ( ) ) . should delete screenshots ( ) ) { screen shot helper . delete screen shot ( screen shot path . get ( ) ) ; } } }
public object clone ( ) { try { return super . clone ( ) ; } catch ( exception e ) { return new internal error ( ) ; } }
boolean is hashed ( json value value ) ;
public fave add group query add group ( user actor actor , int group id ) { return new fave add group query ( get client ( ) , actor , group id ) ; }
public void end document ( ) throws org . xml . sax . sax exception { try { if ( null != get stylesheet root ( ) ) { if ( num_ == m _stylesheet level ) get stylesheet root ( ) . recompose ( ) ; } else throw new transformer exception ( xsl messages . create message ( xslt error resources . e r_ n o_ stylesheetroot , null ) ) ; xslt element processor elem processor = get current processor ( ) ; if ( null != elem processor ) elem processor . start non text ( this ) ; m _stylesheet level -- ; pop space handling ( ) ; m _parsing complete = ( m _stylesheet level < num_ ) ; } catch ( transformer exception te ) { throw new org . xml . sax . sax exception ( te ) ; } }
void input method text changed ( input method event event ) ;
public static string create user folder if not exist ( final string path , final string user id ) throws dast proxy exception { final file user folder = new file ( path + str_ + user id ) ; if ( ! user folder . exists ( ) ) { final boolean result of operation = user folder . mkdir ( ) ; if ( ! result of operation ) { throw new dast proxy exception ( str_ ) ; } } return user folder . get absolute path ( ) ; }
public android authenticator ( context context , account account , string auth token type ) { this ( context , account , auth token type , bool_ ) ; }
public void capture video ( action listener response ) { capture callback = new event dispatcher ( ) ; capture callback . add listener ( response ) ; native instance . capture camera ( bool_ ) ; drop events = bool_ ; }
public name preserving runnable ( runnable runnable , string new name ) { this . runnable = runnable ; this . new name = new name ; }
private void show feedback ( string message ) { if ( my host != null ) { my host . show feedback ( message ) ; } else { system . out . println ( message ) ; } }
public void run test ( ) throws throwable { document doc ; node list name list ; node child ; node last child ; string data ; int node type ; doc = ( document ) load ( str_ , bool_ ) ; name list = doc . get elements by tag name ( str_ ) ; child = name list . item ( num_ ) ; last child = child . get last child ( ) ; node type = ( int ) last child . get node type ( ) ; assert equals ( str_ , num_ , node type ) ; data = ( ( character data ) last child ) . get data ( ) ; assert equals ( str_ , str_ , data ) ; }
public boolean has org title ( ) { return has extension ( org title . class ) ; }
public static void add on product create listener ( on product create listener on product create listener ) { check gc ( ) ; synchronized ( on product create listeners ) { on product create listeners . add ( new weak reference < on product create listener > ( on product create listener ) ) ; } }
public static boolean is working set ( object element ) { return ( element instanceof i working set ) ; }
private favorite create favorite ( emoticon emote ) { return new favorite ( emote . code , emote . emote set , num_ ) ; }
public response info bean read response info ( final chai user the user , final user identity user identity , final string user guid ) throws pwm unrecoverable exception ;
public fixed width text table writer ( string location ) throws data io exception { this ( fixed width text table schema . load ( location ) ) ; }
synchronized void flush operations ( rt edit text editor ) { stack < operation > undo stack = get undo stack ( editor ) ; stack < operation > redo stack = get redo stack ( editor ) ; undo stack . clear ( ) ; redo stack . clear ( ) ; }
public boolean is shared broker ( string host ) { for ( namespace isolation data policy data : this . policies . values ( ) ) { namespace isolation policy impl policy = new namespace isolation policy impl ( policy data ) ; if ( policy . is primary broker ( host ) ) { return bool_ ; } } return bool_ ; }
public remove history item action ( ) { super ( workbench messages . filtered items selection dialog _remove items from history action ) ; }
public sam reading context ( collection < file > files , int num threads , sam filter params filter params , sam file header header ) throws io exception { this ( files , num threads , filter params , header , sam range utils . create reference ranges ( header , filter params ) ) ; }
union 4 < first , second , third , fourth > second ( second value ) ;
private void disable removed auto tiering policies ( set < string > discovered policy ids , uri system uri ) { list < auto tiering policy > disabled policies = new array list < > ( ) ; uri query result list query results = new uri query result list ( ) ; _db client . query by constraint ( containment constraint . factory . get storage device fast policy constraint ( system uri ) , query results ) ; iterator < uri > query results iter = query results . iterator ( ) ; while ( query results iter . has next ( ) ) { uri auto tiering policy uri = query results iter . next ( ) ; auto tiering policy auto tiering policy = _db client . query object ( auto tiering policy . class , auto tiering policy uri ) ; if ( ( auto tiering policy != null ) && ( ! discovered policy ids . contains ( auto tiering policy . get policy name ( ) ) ) ) { auto tiering policy . set policy enabled ( bool_ ) ; auto tiering policy . set pools ( new string set ( ) ) ; auto tiering policy . set inactive ( bool_ ) ; disabled policies . add ( auto tiering policy ) ; } } _db client . update object ( disabled policies ) ; }
public abstract void encode image ( buffered image buf , file image file ) throws svg graphics 2 dio exception ;
public boolean is terminal ( t o , c context ) ;
public callable distributed task adapter ( callable < t > callable , async results reducer < t , r > reducer , async result filter < t > filter ) throws illegal argument exception { super ( callable ) ; this . reducer = reducer ; this . filter = filter ; }
public editable labeled om spline ( labeled om spline omls ) { super ( omls ) ; }
public abstract void write _ulonglong _array ( long [ ] value , int offset , int length ) ;
public void revert ( boolean recurse ) throws svn exception { isvn client adapter svn client = null ; try { try { util . save local history ( resource ) ; } catch ( core exception e ) { svn provider plugin . log ( i status . error , e . get message ( ) , e ) ; } svn client = get repository ( ) . get svn client ( ) ; operation manager . get instance ( ) . begin operation ( svn client ) ; svn client . revert ( get file ( ) , recurse ) ; } catch ( svn client exception e ) { throw svn exception . wrap exception ( e ) ; } finally { get repository ( ) . return svn client ( svn client ) ; set < i resource > refresh list = new hash set < i resource > ( ) ; refresh list . add ( get resource ( ) ) ; operation manager . get instance ( ) . end operation ( bool_ , refresh list ) ; } }
boolean is include usable control ( ) ;
public string dns resolve ( string host ) { try { inet address ina = inet address . get by name ( host ) ; return ina . get host address ( ) ; } catch ( unknown host exception e ) { logger . log ( javax pac script parser . class , log level . debug , str_ , host ) ; } return str_ ; }
public static boolean check sd card available ( ) { return android . os . environment . get external storage state ( ) . equals ( android . os . environment . medi a_ mounted ) ; }
protected void append ( t item ) { if ( item != null ) { this . list . add ( item ) ; this . notify data set changed ( ) ; } }
public static aggregate < map < string , concept > , optional < ? > > min ( string var name ) { return aggregates . min ( var name ) ; }
static void import prefs ( input stream in ) throws io exception , invalid preferences format exception { try { document doc = builder . parse ( new input source ( in ) ) ; element preferences ; preferences = doc . get document element ( ) ; string version = preferences . get attribute ( str_ ) ; if ( version != null && float . parse float ( version ) > xm l_ version ) { throw new invalid preferences format exception ( str_ + version + str_ ) ; } element root = ( element ) preferences . get elements by tag name ( str_ ) . item ( num_ ) ; preferences prefs root = null ; string type = root . get attribute ( str_ ) ; if ( type . equals ( str_ ) ) { prefs root = preferences . user root ( ) ; } else { prefs root = preferences . system root ( ) ; } load node ( prefs root , root ) ; } catch ( factory configuration error e ) { throw new invalid preferences format exception ( e ) ; } catch ( sax exception e ) { throw new invalid preferences format exception ( e ) ; } }
public object clone ( ) { generic object list retval = ( generic object list ) super . clone ( ) ; for ( list iterator < generic object > iter = retval . list iterator ( ) ; iter . has next ( ) ; ) { generic object obj = ( generic object ) ( ( generic object ) iter . next ( ) ) . clone ( ) ; iter . set ( obj ) ; } return retval ; }
private void add conversations ( ) { tp p_ phase myphase = awaiting ; main npc . add ( conversation states . attending , arrays . as list ( str_ , str_ ) , new tpp quest in phase condition ( myphase ) , conversation states . attending , str_ + str_ + str_ , null ) ; main npc . add ( conversation states . attending , str_ , new tpp quest in phase condition ( myphase ) , conversation states . attending , null , new details killings action ( ) ) ; main npc . add ( conversation states . attending , str_ , new tpp quest in phase condition ( myphase ) , conversation states . attending , null , new reward player action ( ) ) ; }
public void add dependencies ( hash set < db object > dependencies ) { if ( dependencies . contains ( this ) ) { return ; } if ( sequences != null ) { for ( sequence s : sequences ) { dependencies . add ( s ) ; } } expression visitor visitor = expression visitor . get dependencies visitor ( dependencies ) ; for ( column col : columns ) { col . is everything ( visitor ) ; } dependencies . add ( this ) ; }
public void add contact ( final string address , final string nickname ) throws im exception { if ( null == address ) { throw new null pointer exception ( ) ; } if ( m manager . get state ( ) == contact list manager . blocke d_ lis t_ loaded ) { if ( m manager . is blocked ( address ) ) { throw new im exception ( im error info . can t_ ad d_ blocke d_ contact , str_ ) ; } } contact contact = get contact ( address ) ; if ( contact == null ) { contact = new contact ( new xmpp address ( address ) , nickname ) ; } else if ( nickname != null ) contact . set name ( nickname ) ; try { m manager . add contact to list async ( contact , contact list . this , bool_ ) ; } catch ( im exception e ) { e . print stack trace ( ) ; } }
public secure channel create secure channel ( string connect url , string endpoint uri , security mode mode , cert remote certificate ) throws service result exception { endpoint description ed = new endpoint description ( ) ; ed . set endpoint url ( endpoint uri ) ; ed . set security mode ( mode . get message security mode ( ) ) ; ed . set security policy uri ( mode . get security policy ( ) . get policy uri ( ) ) ; cert _remote certificate = mode . get message security mode ( ) == message security mode . none ? null : remote certificate ; if ( _remote certificate != null ) ed . set server certificate ( _remote certificate . get encoded ( ) ) ; return create secure channel ( connect url , ed ) ; }
private expression compile extension ( int op pos ) throws transformer exception { int end ext func = op pos + get op ( op pos + num_ ) - num_ ; op pos = get first child pos ( op pos ) ; java . lang . string ns = ( java . lang . string ) get token queue ( ) . element at ( get op ( op pos ) ) ; op pos ++ ; java . lang . string func name = ( java . lang . string ) get token queue ( ) . element at ( get op ( op pos ) ) ; op pos ++ ; function extension = new func ext function ( ns , func name , string . value of ( get next method id ( ) ) ) ; try { int i = num_ ; while ( op pos < end ext func ) { int next op pos = get next op pos ( op pos ) ; extension . set arg ( this . compile ( op pos ) , i ) ; op pos = next op pos ; i ++ ; } } catch ( wrong number args exception wnae ) { ; } return extension ; }
public boolean has enough space ( int length ) { return size + length < capacity ; }
public static touched checker prefix touched ( string data prefix , string touched prefix ) { return ( null ) ; }
public static int padding ( int align code ) { if ( align code == alig n_ cod e_ none ) return num_ ; return ( ma x_ alig n_ words << fiel d_ shift ) ; }
boolean locators update copy ( ) throws sql exception ;
public void add key mapping ( ignite tx key key , cluster node node ) { grid distributed tx mapping m = mappings . get ( node . id ( ) ) ; if ( m == null ) mappings . put ( m = new grid distributed tx mapping ( node ) ) ; ignite tx entry tx entry = entry ( key ) ; assert tx entry != null ; tx entry . node id ( node . id ( ) ) ; m . add ( tx entry ) ; if ( log . is debug enabled ( ) ) log . debug ( str_ + cctx . local node id ( ) + str_ + key + str_ + node + str_ + this + str_ ) ; }
public void write class field length ( int len ) throws io exception { }
public static s m_ syste m_ message st r_ stigm a_ exhaust ( int num 0sp ) { return new s m_ syste m_ message ( num_ , num 0sp ) ; }
public string global info ( ) { return str_ ; }
public static _ fields find by name ( string name ) { return by name . get ( name ) ; }
public string to string ( ) { if ( root == null ) { return str_ ; } return format node ( root ) ; }
public void assert not equals auto case ( string context , string assert id , string expected , string actual ) { string content type = get content type ( ) ; if ( str_ . equals ( content type ) ) { if ( str_ . equals ( context ) ) { framework . assert not equals ignore case ( this , assert id , expected , actual ) ; } else { framework . assert not equals ( this , assert id , expected . to upper case ( ) , actual ) ; } } framework . assert not equals ( this , assert id , expected , actual ) ; }
list < search folder > load search folders ( ) ;
public knowledge model edge ( knowledge model node node 1 , knowledge model node node 2 , int type ) { super ( node 1 , node 2 , endpoint . tail , endpoint . arrow ) ; if ( node 1 == null || node 2 == null ) { throw new null pointer exception ( ) ; } if ( this . type != forbidde n_ explicitly && this . type != forbidde n_ b y_ tiers && this . type != required && this . type != forbidde n_ b y_ groups && this . type != require d_ b y_ groups ) { throw new illegal argument exception ( str_ ) ; } this . type = type ; }
public double num ( x path context xctxt ) throws javax . xml . transform . transformer exception { return m _val ; }
private void create shader ( ) { if ( m width == num_ ) return ; if ( m bitmap cover == null ) { m bitmap cover = bitmap . create bitmap ( m width , m height , bitmap . config . arg b _ 8 8 8 8 ) ; m bitmap cover . erase color ( m cover color ) ; } m cover scale = ( ( float ) m width ) / ( float ) m bitmap cover . get width ( ) ; m bitmap cover = bitmap . create scaled bitmap ( m bitmap cover , ( int ) ( m bitmap cover . get width ( ) * m cover scale ) , ( int ) ( m bitmap cover . get height ( ) * m cover scale ) , bool_ ) ; m shader = new bitmap shader ( m bitmap cover , shader . tile mode . clamp , shader . tile mode . clamp ) ; m paint cover = new paint ( ) ; m paint cover . set anti alias ( bool_ ) ; m paint cover . set shader ( m shader ) ; }
similar face [ ] find similar ( uuid face id , uuid [ ] face ids , int max num of candidates returned ) throws client exception , io exception ;
public static string path nodes to string ( array list < path parser . path data node > nodes , boolean only commands ) { decimal format float formatter = new decimal format ( str_ ) ; string builder sb = new string builder ( ) ; for ( path parser . path data node n : nodes ) { sb . append ( n . type ) ; sb . append ( str_ ) ; if ( ! only commands ) { for ( float p : n . params ) { if ( ( str_ + p ) . contains ( str_ ) || ( str_ + p ) . contains ( str_ ) ) { sb . append ( float formatter . format ( p ) ) ; } else { sb . append ( p ) ; } sb . append ( str_ ) ; } sb . replace ( sb . length ( ) - num_ , sb . length ( ) , str_ ) ; } } return sb . to string ( ) ; }
promise < void > promise notify ( ) ;
public static void main ( string [ ] argv ) { run classifier ( new simple logistic ( ) , argv ) ; }
public static boolean is vplex volume ( volume volume , db client db client ) { uri storage uri = volume . get storage controller ( ) ; storage system storage = db client . query object ( storage system . class , storage uri ) ; if ( discovered data object . type . vplex . name ( ) . equals ( storage . get system type ( ) ) ) { return bool_ ; } else { return bool_ ; } }
public void remove all graph model listeners ( ) { m _listeners . clear ( ) ; }
public static void load scenario ( final scenario scenario ) { scenario loader impl . load scenario ( scenario ) ; }
public long update ttl ( long elapsed time ) { this . ttl -= elapsed time ; this . current anim time millis += elapsed time ; if ( this . current anim time millis >= this . get update texture millis ( ) && this . anim frames > num_ ) { this . current anim time millis = num_ ; int pos = this . get text pos ( ) ; pos ++ ; if ( pos < this . anim frames ) { this . set text pos ( pos ) ; } else { this . set text pos ( num_ ) ; } } return this . ttl ; }
public void push ( int state _num ) { vstack . push ( new integer ( state _num ) ) ; }
public static rounding params as circle ( ) { return ( new rounding params ( ) ) . set round as circle ( bool_ ) ; }
boolean mark as ham ( final sling http servlet request request , final string id ) ;
public void test user data handler notified of only shallow adoptions ( ) throws exception { dom to string ( document ) ; recording handler handler = new recording handler ( ) ; name . set user data ( str_ , str_ , handler ) ; name . set user data ( str_ , str_ , handler ) ; standard . set user data ( str_ , str_ , handler ) ; waffles . set user data ( str_ , str_ , handler ) ; document new document = builder . new document ( ) ; assert same ( name , new document . adopt node ( name ) ) ; assert same ( new document , name . get owner document ( ) ) ; assert same ( new document , standard . get owner document ( ) ) ; assert same ( new document , waffles . get owner document ( ) ) ; set < string > expected = new hash set < string > ( ) ; expected . add ( notification ( nod e_ adopted , str_ , str_ , name , null ) ) ; expected . add ( notification ( nod e_ adopted , str_ , str_ , name , null ) ) ; assert equals ( expected , handler . calls ) ; }
public boolean is interface member ( ) { return last retrieved source == implemented ; }
public void init ( sync manager sync manager , floodlight module context context ) throws sync exception ;
public minus expression ( final list < memory expression element > children ) { this . children = children ; }
public static boolean is valid ifd ( int ifd id ) { return ifd id == ifd id . typ e_ if d _ 0 || ifd id == ifd id . typ e_ if d _ 1 || ifd id == ifd id . typ e_ if d_ exif || ifd id == ifd id . typ e_ if d_ interoperability || ifd id == ifd id . typ e_ if d_ gps ; }
private void show feedback ( string message ) { if ( my host != null ) { my host . show feedback ( message ) ; } else { system . out . println ( message ) ; } }
public final boolean is enum ( ) { return ( f flags & f_ i s_ enum ) != num_ ; }
private export group lookup export group ( uri group id ) { arg validator . check uri ( group id ) ; export group group = _permissions helper . get object by id ( group id , export group . class ) ; arg validator . check entity not null ( group , group id , is id embedded in url ( group id ) ) ; return group ; }
public builder detect custom slow calls ( ) { return enable ( detec t_ custom ) ; }
void exit scope ( ) { locals . pop ( ) ; }
private void write q name ( javax . xml . namespace . q name qname , javax . xml . stream . xml stream writer xml writer ) throws javax . xml . stream . xml stream exception { java . lang . string namespace uri = qname . get namespace uri ( ) ; if ( namespace uri != null ) { java . lang . string prefix = xml writer . get prefix ( namespace uri ) ; if ( prefix == null ) { prefix = generate prefix ( namespace uri ) ; xml writer . write namespace ( prefix , namespace uri ) ; xml writer . set prefix ( prefix , namespace uri ) ; } if ( prefix . trim ( ) . length ( ) > num_ ) { xml writer . write characters ( prefix + str_ + org . apache . axis 2 . databinding . utils . converter util . convert to string ( qname ) ) ; } else { xml writer . write characters ( org . apache . axis 2 . databinding . utils . converter util . convert to string ( qname ) ) ; } } else { xml writer . write characters ( org . apache . axis 2 . databinding . utils . converter util . convert to string ( qname ) ) ; } }
public static boolean is vmax volume using 8 0 3 smis ( volume volume , db client db client ) { storage system storage = db client . query object ( storage system . class , volume . get storage controller ( ) ) ; return ( storage != null && storage . device is type ( type . vmax ) && storage . get using smis 8 0 ( ) ) ; }
public void on video size changed ( media player mp , int width , int height ) ;
public economy concurrent hash map ( i hash entry handler < k , v > handler ) { this ( defaul t_ initia l_ capacity , defaul t_ loa d_ factor , defaul t_ concurrenc y_ level , handler ) ; }
public boolean is cell editable ( int row , int column ) { return bool_ ; }
public static string create utf string from c ( address string address ) { final boolean us e_ librar y_ codec = bool_ ; byte [ ] tmp ; byte buffer bbuf ; if ( vm . fully booted ) { try { bbuf = java . nio . jikes rvm support . new direct byte buffer ( string address , strlen ( string address ) ) ; if ( us e_ librar y_ codec ) { charset decoder csd = charset . for name ( str_ ) . new decoder ( ) ; return create string ( csd , bbuf ) ; } else { return ut f8 convert . from ut f8 ( bbuf ) ; } } catch ( exception ex ) { } } tmp = create byte array from c ( string address ) ; return string utilities . ascii bytes to string ( tmp ) ; }
void capture ( final context context , final response response , final capture point mode ) { string writer out = new string writer ( ) ; print writer writer = new print writer ( out ) ; string id = context . get id ( ) ; switch ( mode ) { case response : capture response ( writer , response , id ) ; break ; case filtere d_ response : capture filtered response ( writer , response , id ) ; break ; default : throw new illegal argument exception ( str_ + mode . name ( ) ) ; } if ( capture context ) { writer . println ( str_ ) ; capture context as json ( writer , context ) ; } logger . info ( out . to string ( ) ) ; }
void poll network state ( ) { if ( null == m connectivity manager ) { m connectivity manager = ( connectivity manager ) get system service ( context . connectivit y_ service ) ; } if ( null == m wifi manager ) { m wifi manager = ( wifi manager ) get system service ( context . wif i_ service ) ; } if ( m connectivity manager == null ) { log . w ( constants . tag , str_ ) ; } else { network info active info = m connectivity manager . get active network info ( ) ; update network state ( active info ) ; } }
public web resource statistics compute raw mark ( web resource statistics wr statistics ) { float passed = wr statistics . get nb of passed ( ) ; if ( passed == - num_ ) { wr statistics . set raw mark ( float . value of ( - num_ ) ) ; return wr statistics ; } big decimal weighted passed = big decimal . value of ( passed ) ; big decimal weighted failed = wr statistics . get weighted failed ( ) ; if ( ( weighted failed . equals ( big decimal . zero ) || weighted failed . equals ( zero ) ) && ( weighted passed . equals ( big decimal . zero ) || weighted passed . equals ( zero ) ) ) { wr statistics . set raw mark ( float . value of ( num_ ) ) ; return wr statistics ; } float result = weighted passed . divide ( weighted passed . add ( weighted failed ) , num_ , rounding mode . hal f_ up ) . float value ( ) * num_ ; wr statistics . set raw mark ( result ) ; return wr statistics ; }
public void test _check server trusted _ 0 3 ( ) throws exception { x 5 0 9 trust manager impl xtm = new x 5 0 9 trust manager impl ( ) ; x 5 0 9 certificate [ ] xcert = set x 5 0 9 certificate ( ) ; xtm . check server trusted ( xcert , str_ ) ; }
public boolean is leaves ( ) { return ! ( is composite ( boundable 1 ) || is composite ( boundable 2 ) ) ; }
private static synchronized void send ( session session , json object reply ) { try { session . get remote ( ) . send string ( reply . to string ( ) ) ; } catch ( exception e ) { log . error ( str_ , e ) ; } }
public void drop pcj ( final string pcj id ) throws pcj storage exception ;
private boolean validate name space ( string name space ) { boolean valid name space = bool_ ; if ( name space . equals ignore case ( discovery _ namespaces . unmanage d_ cgs . to string ( ) ) || name space . equals ignore case ( discovery _ namespaces . all . to string ( ) ) ) { valid name space = bool_ ; } return valid name space ; }
public long free memory ( ) { return num_ ; }
public data source properties interface convert ( map < string , string > property map ) { string type = property map . get ( datasource keys . type ) ; if ( type != null ) { integer ds type = num_ ; try { ds type = integer . value of ( type ) ; } catch ( number format exception e ) { console manager . get instance ( ) . exception ( this , e ) ; return null ; } esri data source interface ds = data source map . get ( ds type ) ; if ( ds != null ) { return ds . convert ( property map ) ; } } return null ; }
void write to ( protocol output stream out ) throws io exception ;
public void remove tile at ( cg point pos ) { assert ( pos . x < layer size . width && pos . y < layer size . height && pos . x >= num_ && pos . y >= num_ ) : str_ ; assert ( tiles != null && atlas index array _ != null ) : str_ ; int gid = tile gid at ( pos ) ; if ( gid != num_ ) { int z = ( int ) ( pos . x + pos . y * layer size . width ) ; int atlas index = atlas index for existant z ( z ) ; tiles . put ( z , num_ ) ; atlas index array _ . remove ( atlas index ) ; cc sprite sprite = ( cc sprite ) get child by tag ( z ) ; if ( sprite != null ) super . remove child ( sprite , bool_ ) ; else { texture atlas _ . remove quad ( atlas index ) ; for ( cc node node : children _ ) { cc sprite s = ( cc sprite ) node ; int ai = s . atlas index ; if ( ai >= atlas index ) { s . atlas index = ai - num_ ; } } } } }
public void call visitors ( expression owner owner , x path visitor visitor ) ;
public static _ fields find by thrift id or throw ( int field id ) { _ fields fields = find by thrift id ( field id ) ; if ( fields == null ) throw new illegal argument exception ( str_ + field id + str_ ) ; return fields ; }
protected abstract string secondary file system config path ( ) ;
public void contract arg with recombinant ( node oldie 1 , node oldie 2 , compound parameter internal node parameters , compound parameter internal and root node parameters , compound parameter node rates ) { remove variable ( oldie 1 . height parameter ) ; remove variable ( oldie 2 . height parameter ) ; remove variable ( oldie 2 . partitioning ) ; remove variable ( oldie 1 . rate parameter ) ; remove variable ( oldie 2 . rate parameter ) ; removed parameters = new parameter [ num_ ] ; removed parameters [ num_ ] = oldie 1 . height parameter ; removed parameters [ num_ ] = oldie 2 . height parameter ; removed parameters [ num_ ] = oldie 1 . rate parameter ; removed parameters [ num_ ] = oldie 2 . rate parameter ; partitioning parameters . remove parameter ( oldie 2 . partitioning ) ; removed partitioning parameter = oldie 2 . partitioning ; stored internal node heights = internal node parameters ; stored internal node heights . remove parameter ( oldie 1 . height parameter ) ; stored internal node heights . remove parameter ( oldie 2 . height parameter ) ; stored internal and root node heights = internal and root node parameters ; stored internal and root node heights . remove parameter ( oldie 1 . height parameter ) ; stored internal and root node heights . remove parameter ( oldie 2 . height parameter ) ; stored node rates = node rates ; stored node rates . remove parameter ( oldie 1 . rate parameter ) ; stored node rates . remove parameter ( oldie 2 . rate parameter ) ; nodes . remove ( oldie 1 ) ; nodes . remove ( oldie 2 ) ; internal node count -= num_ ; }
public void visit tree ( jc tree tree ) { }
boolean is connected ( host id host id ) ;
public unsigned byte add ( unsigned byte increment ) { return value of ( get value ( ) + increment . get value ( ) ) ; }
public void swipe finished ( ) { if ( is animating ( ) ) return ; final float snapped x = snap back x ( m x / m layout width ) * m layout width ; final float snapped sliding t = snap back sliding t ( m sliding t ) ; if ( snapped x <= - m layout width || snapped x >= m layout width ) dismiss button bar ( ) ; if ( snapped sliding t < num_ ) dismiss button bar ( ) ; animate to ( snapped x , snapped sliding t , bool_ ) ; }
public dialog positive action background ( drawable drawable ) { view util . set background ( m positive action , drawable ) ; return this ; }
public void start ( int statement id ) ;
boolean pop changed ( ) { boolean changed = this . changed ; this . changed = bool_ ; return changed ; }
public static double [ ] [ ] lead ( instances d , result r , string md type ) { int l = d . class index ( ) ; int n = d . num instances ( ) ; double ytrue [ ] [ ] = ml utils . get yfrom d ( d ) ; double ypred [ ] [ ] = matrix utils . threshold ( r . all predictions ( ) , num_ ) ; double e [ ] [ ] = matrix utils . abs ( matrix utils . subtract ( ytrue , ypred ) ) ; instances d_ e = ml utils . replace zas classes ( new instances ( d ) , e , l ) ; return stat utils . marg dep matrix ( d_ e , md type ) ; }
public matrix 4x 3d m 3 2 ( double m 3 2 ) { this . m 3 2 = m 3 2 ; properties &= ~ ( propert y_ identity ) ; return this ; }
protected void probe removed ( tracer probe < x > probe , x data source ) { }
public static collection < calscale > all ( ) { return enums . all ( ) ; }
public list < ec key > find keys before ( long time secs ) { lock . lock ( ) ; try { list < ec key > results = lists . new linked list ( ) ; for ( ec key key : hash to keys . values ( ) ) { final long key time = key . get creation time seconds ( ) ; if ( key time < time secs ) { results . add ( key ) ; } } return results ; } finally { lock . unlock ( ) ; } }
public log format ( double base , string base label , string power label , boolean show base ) { param checks . null not permitted ( base label , str_ ) ; param checks . null not permitted ( power label , str_ ) ; this . base = base ; this . base log = math . log ( this . base ) ; this . base label = base label ; this . show base = show base ; this . power label = power label ; }
public t startup and wait check ( ) { this . startup check = null ; return ( t ) this ; }
public static boolean is int ( final string str ) { try { integer . parse int ( str ) ; return bool_ ; } catch ( final number format exception e ) { return bool_ ; } }
public final int yystate ( ) { return zz lexical state ; }
public collective attribute subentries virtual attribute provider ( ) { super ( ) ; }
public static string replace ( string in string , string old pattern , string new pattern ) { if ( ! has length ( in string ) || ! has length ( old pattern ) || new pattern == null ) { return in string ; } string builder sb = new string builder ( ) ; int pos = num_ ; int index = in string . index of ( old pattern ) ; int pat len = old pattern . length ( ) ; while ( index >= num_ ) { sb . append ( in string . substring ( pos , index ) ) ; sb . append ( new pattern ) ; pos = index + pat len ; index = in string . index of ( old pattern , pos ) ; } sb . append ( in string . substring ( pos ) ) ; return sb . to string ( ) ; }
r visit executable ( executable element e , p p ) ;
public x path processor exception ( string message , exception e ) { super ( message , e ) ; }
public builder update phone number ( phone number old phone number , phone number new phone number ) { delete phone number ( old phone number ) ; add phone number ( new phone number ) ; return this ; }
public abstract void write bytes ( string str ) throws io exception ;
protected void mark departed member ( t id ) { synchronized ( this . member to version ) { region version holder < t > holder = this . member to version . get ( id ) ; if ( holder != null ) { holder . is departed member = bool_ ; } } }
public abstract void clear ( ) ;
final public int num processors ( ) { return m _processors ; }
public static void main ( string [ ] args ) { run filter ( new numeric cleaner ( ) , args ) ; }
public abstract mr message create init packet ( ) { return null ; }
public com . sun . identity . wsfederation . jaxb . xmlsig . transform element create transform element ( ) throws javax . xml . bind . jaxb exception { return new com . sun . identity . wsfederation . jaxb . xmlsig . impl . transform element impl ( ) ; }
public void test set f 2 8 momentary ( ) { boolean f 2 8 momentary = bool_ ; abstract throttle instance = new abstract throttle impl ( ) ; instance . set f 2 8 momentary ( f 2 8 momentary ) ; }
public ssl test config ( boolean use ssl , boolean client auth ) { super ( use ssl , client auth , null , tes t_ keystor e_ password , null , tes t_ keystor e_ password ) ; trust store = key store = resource . new class path resource ( tes t_ keystor e_ resource ) ; if ( null == key store || ! key store . exists ( ) ) { throw new illegal state exception ( str_ + tes t_ keystor e_ resource ) ; } }
protected void wait until stopped ( ) { boolean done waiting = bool_ ; while ( ! done waiting ) { if ( _auto engineer != null ) { done waiting = _auto engineer . is stopped ( ) ; } else { done waiting = bool_ ; } if ( ! done waiting ) { try { thread . sleep ( num_ ) ; } catch ( interrupted exception e ) { } } } }
void dispose ( ) ;
public void create snapshot ( volume req volume , list < uri > snapshot ur is , string snapshot type , boolean create inactive , boolean read only , string task id ) ;
void reset ( j component component , region region , synth style style , int state ) { this . component = component ; this . region = region ; this . style = style ; this . state = state ; }
public static boolean has step of assignable class ( final class super class , final traversal . admin < ? , ? > traversal ) { for ( final step < ? , ? > step : traversal . get steps ( ) ) { if ( super class . is assignable from ( step . get class ( ) ) ) { return bool_ ; } } return bool_ ; }
public synchronized string buffer delete ( int start , int end ) { delete 0 ( start , end ) ; return this ; }
private void update progress ( int progress ) { if ( my host != null && progress != previous progress ) { my host . update progress ( progress ) ; } previous progress = progress ; }
void open search ui ( ) ;
public static void return value ( int value , string class name , string method name ) { execution tracer tracer = get execution tracer ( ) ; if ( tracer . disabled ) return ; if ( is thread neq current thread ( ) ) return ; tracer . trace . return value ( class name , method name , value ) ; }
private int create frame buffer object ( ) { this . fbo = gl gen framebuffers ext ( ) ; gl bind framebuffer ext ( g l_ framebuffe r_ ext , fbo ) ; gl framebuffer texture 2 dext ( g l_ framebuffe r_ ext , g l_ colo r_ attachmen t 0 _ ext , g l_ textur e _ 2 d , this . tex , num_ ) ; int fbo status = gl check framebuffer status ext ( g l_ framebuffe r_ ext ) ; if ( fbo status != g l_ framebuffe r_ complet e_ ext ) { throw new assertion error ( str_ + fbo status ) ; } gl bind framebuffer ext ( g l_ framebuffe r_ ext , num_ ) ; return fbo ; }
public void unindex ( tuple t , string attr name ) { throw new unsupported operation exception ( ) ; }
public static inline method refactoring create ( i type root unit , compilation unit node , int selection start , int selection length ) { ast node target = refactoring availability tester . get inlineable method node ( unit , node , selection start , selection length ) ; if ( target == null ) return null ; if ( target . get node type ( ) == ast node . metho d_ declaration ) { return new inline method refactoring ( unit , ( method declaration ) target , selection start , selection length ) ; } else { i compilation unit cu = ( i compilation unit ) unit ; if ( target . get node type ( ) == ast node . metho d_ invocation ) { return new inline method refactoring ( cu , ( method invocation ) target , selection start , selection length ) ; } else if ( target . get node type ( ) == ast node . supe r_ metho d_ invocation ) { return new inline method refactoring ( cu , ( super method invocation ) target , selection start , selection length ) ; } else if ( target . get node type ( ) == ast node . constructo r_ invocation ) { return new inline method refactoring ( cu , ( constructor invocation ) target , selection start , selection length ) ; } } return null ; }
public static void boot ( aos options options ) { }
public authenticate to realm condition ( ) { this ( privilege manager . debug , new entitlement core wrapper ( ) ) ; }
public bad location exception ( string s , int offs ) { super ( s ) ; this . offs = offs ; }
public static long free memory ( ) { long free = jd k_ syste m_ resources . free memory ( ) ; if ( free < num_ && is linux ( ) ) { free = linu x_ syste m_ resources . free memory ( ) ; } return free ; }
private void close database ( string db name , callback context cbc ) { db runner r = dbrmap . get ( db name ) ; if ( r != null ) { try { r . q . put ( new db query ( bool_ , cbc ) ) ; } catch ( exception e ) { if ( cbc != null ) { cbc . error ( str_ + e ) ; } log . e ( sq lite plugin . class . get simple name ( ) , str_ , e ) ; } } else { if ( cbc != null ) { cbc . success ( str_ ) ; } } }
void on collapse button clicked ( ) ;
public void add business filter to owned service invocations ( viewer filter filter ) ;
protected map < uri , integer > select export mask volumes ( export group export group , uri storage uri ) throws io exception { map < uri , integer > volume map = new hash map < uri , integer > ( ) ; _log . info ( str_ , joiner . on ( str_ ) . join ( export group . get volumes ( ) . entry set ( ) ) ) ; for ( string uri : export group . get volumes ( ) . key set ( ) ) { uri vol uri = uri . create ( uri ) ; block object block obj = volume . fetch export mask block object ( _db client , vol uri ) ; if ( block obj == null ) { _log . warn ( str_ , vol uri . to string ( ) ) ; continue ; } _log . info ( str_ , vol uri , block obj . get storage controller ( ) ) ; if ( ! block obj . get storage controller ( ) . equals ( storage uri ) ) { continue ; } volume map . put ( vol uri , integer . value of ( export group . get volumes ( ) . get ( vol uri . to string ( ) ) ) ) ; } return volume map ; }
public abstract void draw ( game renderer game renderer ) ;
public string buffer ( int capacity ) { super ( capacity ) ; }
public void run test ( ) throws throwable { document doc ; document type doc type ; boolean success ; doc = ( document ) load ( str_ , bool_ ) ; doc type = doc . get doctype ( ) ; success = doc type . is supported ( str_ , str_ ) ; assert false ( str_ , success ) ; }
public void publish metrics ( list < metric datum with key < key type > > data to publish ) ;
public void after process message ( distribution manager dm , distribution message message ) { }
public final void remove ( ) { remove ( internal thread local map . get if set ( ) ) ; }
public d view key pair ( j frame parent , string title , dialog . modality type modality , private key private key , x 5 0 9 certificate [ ] certificate chain , provider provider ) { super ( parent , title , modality ) ; this . private key = private key ; this . certificate chain = certificate chain ; this . provider = provider ; init components ( ) ; }
public date writer observance ( boolean observance ) { this . observance = observance ; return this ; }
public object clone ( ) throws clone not supported exception { node sequence clone = ( node sequence ) super . clone ( ) ; if ( null != m _iter ) clone . m _iter = ( dtm iterator ) m _iter . clone ( ) ; if ( m _cache != null ) { m _cache . increase use count ( ) ; } return clone ; }
public transformer handler new transformer handler ( source src ) throws transformer configuration exception { templates templates = new templates ( src ) ; if ( templates == null ) return null ; return new transformer handler ( templates ) ; }
private void delete index ( abstract index descriptor index ) throws open ds exception { final string backend id = str_ + str_ + index . get backend ( ) . get backend id ( ) ; string dn ; if ( is vlv index ( index ) ) { dn = str_ + str_ + index . get name ( ) + str_ + backend id + str_ ; } else { dn = str_ + str_ + index . get name ( ) + str_ + backend id + str_ ; } directory server . get configuration handler ( ) . delete entry ( dn . value of ( dn ) ) ; }
protected void assert number of arguments ( int expected , sql function execution context context ) { if ( context . get number of arguments ( ) != expected ) { throw new runtime exception ( str_ + expected + str_ + context . get number of arguments ( ) ) ; } }
public boolean region matches ( int this start , string string , int start , int length ) { if ( string == null ) { throw new null pointer exception ( str_ ) ; } if ( start < num_ || string . count - start < length ) { return bool_ ; } if ( this start < num_ || count - this start < length ) { return bool_ ; } if ( length <= num_ ) { return bool_ ; } int o 1 = offset + this start , o 2 = string . offset + start ; char [ ] value 1 = value ; char [ ] value 2 = string . value ; for ( int i = num_ ; i < length ; ++ i ) { if ( value 1 [ o 1 + i ] != value 2 [ o 2 + i ] ) { return bool_ ; } } return bool_ ; }
public easy dcc turnout ( int number ) { super ( str_ + number ) ; _number = number ; }
long estimate size ( ) ;
public string to xml string ( ) { string builder xml string = new string builder ( ) ; if ( null != this . target id ) { xml string . append ( hds constants . spac e_ str ) . append ( str_ ) . append ( this . target id ) . append ( str_ ) ; } if ( null != this . label ) { xml string . append ( hds constants . spac e_ str ) . append ( str_ ) . append ( this . label ) . append ( str_ ) ; } return xml string . to string ( ) ; }
public void create sub config ( string name , string schema name , map values ) throws am console exception { string [ ] params = { service name , parent config . get component name ( ) , name , schema name } ; try { am model . log event ( str_ , params ) ; parent config . add sub config ( name , schema name , num_ , values ) ; am model . log event ( str_ , params ) ; } catch ( sso exception e ) { string [ ] params ex = { service name , parent config . get component name ( ) , name , schema name , am model . get error string ( e ) } ; am model . log event ( str_ , params ex ) ; throw new am console exception ( am model . get error string ( e ) ) ; } catch ( sms exception e ) { string [ ] params ex = { service name , parent config . get component name ( ) , name , schema name , am model . get error string ( e ) } ; am model . log event ( str_ , params ex ) ; throw new am console exception ( am model . get error string ( e ) ) ; } }
public phaser ( ) { this ( null , num_ ) ; }
public t query for id ( id id ) throws sql exception ;
t divide ( t a ) throws null argument exception , math runtime exception ;
public abstract void add tele missile attack ( attack action ea ) ;
void remove pipe connection listener ( i pipe connection listener listener ) ;
void push import url ( string href url ) { m _import stack . push ( href url ) ; }
private boolean has config changed ( json value existing config , json value new config ) { return ! existing config . is equal to ( new config ) ; }
boolean on suggestion click ( int position ) ;
public static void insert statement ( array list < file > list , file dir ) throws exception { for ( int i = num_ ; i < list . size ( ) ; i ++ ) { array list < string > lines = new array list < > ( ) ; lines . add ( str_ + dir . get name ( ) + str_ ) ; try ( scanner input = new scanner ( list . get ( i ) ) ) { while ( input . has next ( ) ) { lines . add ( input . next line ( ) ) ; } } try ( print writer output = new print writer ( list . get ( i ) ) ) { for ( int j = num_ ; j < lines . size ( ) ; j ++ ) { output . println ( lines . get ( j ) ) ; } } } }
public message edit message caption ( string chat id , long message id , string caption , inline reply markup inline reply markup ) { if ( caption != null && chat id != null && message id != null ) { json object json response = this . edit message caption ( chat id , message id , null , caption , inline reply markup ) ; if ( json response != null ) { return message impl . create message ( json response . get json object ( str_ ) , this ) ; } } return null ; }
protected void post runnable ( runnable runnable ) { if ( runnable != null ) { if ( get use synchronous mode ( ) || handler == null ) { runnable . run ( ) ; } else { handler . post ( runnable ) ; } } }
public void update ( byte b ) { byte buffer [ ] = new byte [ num_ ] ; buffer [ num_ ] = b ; update ( buffer , num_ ) ; }
public static match result find match after index ( reg exp regexp , string text , int exclusive start index ) { regexp . set last index ( exclusive start index + num_ ) ; return regexp . exec ( text ) ; }
public static < t > p vector x < t > iterate ( final long limit , final t seed , final unary operator < t > f ) { return reactive seq . iterate ( seed , f ) . limit ( limit ) . to p vector x ( ) ; }
boolean is _outside ( pla point p _point ) ;
public remote error ( string message , int code ) { this . message = message ; this . code = code ; }
public writable byte channel create ( gcs path path , string type ) throws io exception { google cloud storage write channel channel = new google cloud storage write channel ( executor service , storage client , new client request helper < storage object > ( ) , path . get bucket ( ) , path . get object ( ) , async write channel options . new builder ( ) . build ( ) , new object write conditions ( ) , collections . < string , string > empty map ( ) , type ) ; if ( upload buffer size bytes != null ) { channel . set upload buffer size ( upload buffer size bytes ) ; } channel . initialize ( ) ; return channel ; }
public void close ( ) { synchronized ( async close executors ) { if ( ! this . closed ) { this . closed = bool_ ; for ( thread pool executor pool : async close executors . values ( ) ) { pool . shutdown ( ) ; } async close executors . clear ( ) ; } } }
boolean move ( int offset ) ;
public max forwards header create max forwards header ( int max forwards ) throws invalid argument exception { if ( max forwards < num_ || max forwards > num_ ) throw new invalid argument exception ( str_ + max forwards ) ; max forwards m = new max forwards ( ) ; m . set max forwards ( max forwards ) ; return m ; }
public bundler put boolean ( string key , boolean value ) { bundle . put boolean ( key , value ) ; return this ; }
static public int round positive ( float x ) { return ( int ) ( x + num_ ) ; }
public static builder create builder ( header header , readable font data data ) { return new builder ( header , data ) ; }
public void drop item in hand ( boolean whole stack ) { item stack stack = get item in hand ( ) ; if ( stack == null || stack . get type ( ) == material . air || stack . get amount ( ) < num_ ) { return ; } item stack dropping = stack . clone ( ) ; if ( ! whole stack ) { dropping . set amount ( num_ ) ; } glow item dropped = drop ( dropping ) ; if ( dropped == null ) { return ; } if ( stack . get amount ( ) == num_ || whole stack ) { set item in hand ( null ) ; } else { item stack now = stack . clone ( ) ; now . set amount ( now . get amount ( ) - num_ ) ; set item in hand ( now ) ; } }
public void focus without animation ( ) { m edit text . set hint ( null ) ; m label . set visibility ( view . visible ) ; m edit text . request focus ( ) ; }
public boolean is dynamic ( ) { return bool_ ; }
public static final void clear host credentials ( string host ) { credentials provider creds provider = collect . get instance ( ) . get credentials provider ( ) ; log . i ( t , str_ + host ) ; list < auth scope > as list = build auth scopes ( host ) ; for ( auth scope a : as list ) { creds provider . set credentials ( a , null ) ; } }
public void parse numbers ( ) { for ( int i = str_ ; i <= str_ ; i ++ ) { token types [ i ] |= toke n_ digit ; } token types [ str_ ] |= toke n_ digit ; token types [ str_ ] |= toke n_ digit ; }
public void update apps ( list < app info > apps ) { for ( app info app : apps ) { m component to app map . put ( app . to component key ( ) , app ) ; } on apps updated ( ) ; }
public soap parse ( string content type , input stream is ) { string mime type = mime utils . get base content type ( content type ) ; string charset = mime utils . get charset ( content type ) ; return parse ( mime type , charset , is ) ; }
void on consume multi finished ( list < purchase > purchases , list < iab result > results ) ;
public void write raw part ( input stream content ) throws io exception { write current boundary ( ) ; write ( content ) ; }
double heuristic ( node x , node y ) { coordinate xnode = x . get coordinate ( ) ; coordinate ynode = y . get coordinate ( ) ; return math . sqrt ( math . pow ( xnode . x - ynode . x , num_ ) + math . pow ( xnode . y - ynode . y , num_ ) ) ; }
public number constructor ( bug reporter bug reporter ) { this . bug accumulator = new bug accumulator ( bug reporter ) ; handle ( str_ , bool_ , str_ ) ; handle ( str_ , bool_ , str_ ) ; handle ( str_ , bool_ , str_ ) ; handle ( str_ , bool_ , str_ ) ; handle ( str_ , bool_ , str_ ) ; handle ( str_ , bool_ , str_ ) ; handle ( str_ , bool_ , str_ ) ; }
public dependency example ( ) { ored criteria = new array list < criteria > ( ) ; }
public boolean is directive ( string directive ) { if ( directives . contains key ( directive ) ) return bool_ ; else return bool_ ; }
public void put octet string ( byte [ ] s , int tag ) { put string value ( s ) ; put tag ( tag ) ; }
private static credential authorize ( ) throws exception { google client secrets client secrets = google client secrets . load ( jso n_ factory , new input stream reader ( hello analytics api sample . class . get resource as stream ( str_ ) ) ) ; if ( client secrets . get details ( ) . get client id ( ) . starts with ( str_ ) || client secrets . get details ( ) . get client secret ( ) . starts with ( str_ ) ) { system . out . println ( str_ + str_ ) ; system . exit ( num_ ) ; } google authorization code flow flow = new google authorization code flow . builder ( http transport , jso n_ factory , client secrets , collections . singleton ( analytics scopes . analytic s_ readonly ) ) . set data store factory ( data store factory ) . build ( ) ; return new authorization code installed app ( flow , new local server receiver ( ) ) . authorize ( str_ ) ; }
private void handle interruption ( ) { }
public boolean contains jwt ( session id sid ) { return get jwt from session id ( sid , bool_ ) != null ; }
public boolean has user base ( ) ;
public static void write fully ( file channel file , long pos , byte buffer src ) { try { int off = num_ ; do { int len = file . write ( src , pos + off ) ; off += len ; } while ( src . remaining ( ) > num_ ) ; } catch ( io exception e ) { throw new illegal state exception ( erro r_ writin g_ failed , str_ , file , src . remaining ( ) , pos , e ) ; } }
private void read object ( object input stream s ) throws io exception , class not found exception { s . default read object ( ) ; type = null ; types = null ; }
public callable distributed task adapter ( ) { }
public input lexer source ( input stream input ) throws io exception { super ( new buffered reader ( new input stream reader ( input ) ) , bool_ ) ; }
public balanced binary node < k , v > pred ( balanced binary node < k , v > n ) { if ( root == null ) { return null ; } if ( n . left != null ) { n = n . left ; while ( n . right != null ) { n = n . right ; } return n ; } while ( n != root && n == n . parent . left ) { n = n . parent ; } if ( n == root ) { return null ; } return n . parent ; }
public simple entry ( map . entry < ? extends k , ? extends v > entry ) { key = entry . get key ( ) ; value = entry . get value ( ) ; }
public static void create all tables ( sq lite database db , boolean if not exists ) { wifi lock info dao . create table ( db , if not exists ) ; }
private void measure child ( view child ) { view group . layout params child layout params = get layout params ( child ) ; int child height spec = view group . get child measure spec ( m height measure spec , get padding top ( ) + get padding bottom ( ) , child layout params . height ) ; int child width spec ; if ( child layout params . width > num_ ) { child width spec = measure spec . make measure spec ( child layout params . width , measure spec . exactly ) ; } else { child width spec = measure spec . make measure spec ( num_ , measure spec . unspecified ) ; } child . measure ( child width spec , child height spec ) ; }
public void on edge drag started ( int edge flags , int pointer id ) { }
public static void add search algorithm ( string name , search for actions algo ) { searc h_ names . add ( name ) ; searc h_ algos . add ( algo ) ; }
public void on packages unavailable ( string [ ] package names ) { }
public abstract boolean is property supported ( string name ) ;
public double predict ( u u , id pref < i > pref ) { return predict ( user 2uidx ( u ) , u pref fun . apply ( pref ) ) ; }
public void check quota and disk status ( ) { validate quota limit ( ) ; validate disk used status ( ) ; }
public void disallow in ( ) { tele rules . disallow in ( ) ; }
public static boolean is valid ( string address ) { return is valid i pv 4 ( address ) || is valid i pv 6 ( address ) ; }
public static < k , v > immutable set multimap < k , v > of ( k k 1 , v v 1 ) { immutable set multimap . builder < k , v > builder = immutable set multimap . builder ( ) ; builder . put ( k 1 , v 1 ) ; return builder . build ( ) ; }
private http servlet request _get http servlet request ( ) { return ( http servlet request ) super . get request ( ) ; }
public void create async ( final string name , final future callback < task > response callback ) throws io exception { map < string , string > map = new hash map < > ( ) ; map . put ( str_ , name ) ; create object async ( get base path ( ) , serialize object as json ( map ) , response callback ) ; }
boolean add owner ( principal caller , principal owner ) throws not owner exception ;
public static input stream decompress ( input stream compressed ) throws fits exception { buffered input stream pb = new buffered input stream ( compressed , on e_ megabyte ) ; pb . mark ( num_ ) ; int mag 1 = - num_ ; int mag 2 = - num_ ; try { mag 1 = pb . read ( ) ; mag 2 = pb . read ( ) ; pb . reset ( ) ; i compress provider selected provider = select compression provider ( mag 1 , mag 2 ) ; if ( selected provider != null ) { return selected provider . decompress ( pb ) ; } else { return pb ; } } catch ( io exception e ) { throw new fits exception ( str_ , e ) ; } }
protected csv record ( ) { this . record = new array list < > ( ) ; }
public void test _search _named _graphs 4 ( ) throws exception { new test helper ( str_ ) . run test ( ) ; }
public static void normalize rows ( float [ ] [ ] input ) { for ( int i = num_ ; i < input . length ; ++ i ) { normalize ( input [ i ] ) ; } }
public static string ensure not ending slash ( string path ) { objects . require non null ( path , str_ ) ; if ( str_ . equals ( path ) ) { return path ; } final int length = path . length ( ) ; return path . char at ( length - num_ ) == str_ ? path . substring ( num_ , length - num_ ) : path ; }
public void arrange children ( array list < view > list , int item count ) { arrange children ( list , item count , bool_ ) ; }
public void on status changed ( string provider , int status , bundle extras ) { }
public string to string ( string sep ) { if ( is empty ( ) ) { return str_ ; } else { string builder buf = new string builder ( ) ; buf . append ( head ) ; for ( list < a > l = tail ; l . non empty ( ) ; l = l . tail ) { buf . append ( sep ) ; buf . append ( l . head ) ; } return buf . to string ( ) ; } }
public animatable value interpolate ( animatable value result , animatable value to , float interpolation , animatable value accumulation , int multiplier ) { animatable preserve aspect ratio value res ; if ( result == null ) { res = new animatable preserve aspect ratio value ( target ) ; } else { res = ( animatable preserve aspect ratio value ) result ; } short new align , new meet or slice ; if ( to != null && interpolation >= num_ ) { animatable preserve aspect ratio value to value = ( animatable preserve aspect ratio value ) to ; new align = to value . align ; new meet or slice = to value . meet or slice ; } else { new align = align ; new meet or slice = meet or slice ; } if ( res . align != new align || res . meet or slice != new meet or slice ) { res . align = align ; res . meet or slice = meet or slice ; res . has changed = bool_ ; } return res ; }
public static void stop rcs service ( context context ) { if ( s logger . is activated ( ) ) { s logger . debug ( str_ ) ; } context . stop service ( new intent ( context , start service . class ) ) ; context . stop service ( new intent ( context , https provisioning service . class ) ) ; context . stop service ( new intent ( context , rcs core service . class ) ) ; }
protected void commit ( ) throws mailbox exception { try { get entity manager ( ) . get transaction ( ) . commit ( ) ; } catch ( persistence exception e ) { throw new mailbox exception ( str_ , e ) ; } }
public void on resume ( ) { m sensor manager . register listener ( m sensor event listener , m sensor manager . get default sensor ( sensor . typ e_ accelerometer ) , sensor manager . senso r_ dela y_ normal ) ; }
public debug configuration ( debug configuration type type , string name , string host , int port , map < string , string > connection properties ) { this . type = type ; this . name = name ; this . host = host ; this . port = port ; this . connection properties = connection properties ; }
public matrix plus ( matrix b ) { check matrix dimensions ( b ) ; matrix x = new matrix ( m , n ) ; double [ ] [ ] c = x . get array ( ) ; for ( int i = num_ ; i < m ; i ++ ) { for ( int j = num_ ; j < n ; j ++ ) { c [ i ] [ j ] = a [ i ] [ j ] + b . a [ i ] [ j ] ; } } return x ; }
public void reset ( ) { adler = num_ ; }
public zd t5 ( ) { super ( num_ ) ; }
public static void debug ( object obj ) { debug ( obj , num_ , bool_ ) ; }
public string to string ( ) { return str_ ; }
public boolean has description ( ) { return field set flags ( ) [ num_ ] ; }
public static void assert j delete ( string request , string ... tests ) throws exception { assert j delete ( request , json test util . defaul t_ delta , tests ) ; }
protected void start disconnected ( ) { }
public jonas 5x runtime configuration ( ) { super ( ) ; set property ( jonas property set . jona s_ undeplo y_ ignor e_ version , str_ ) ; }
private double correlation of new feature ( string data file , string [ ] features , int ind var col number , int [ ] x , int y , int row ini , int row end ) { double cor xplusy ; regression reg = new regression ( ) ; int j = num_ ; int [ ] xplusf = new int [ x . length + num_ ] ; for ( int i = num_ ; i < x . length ; i ++ ) xplusf [ i ] = x [ i ] ; xplusf [ x . length ] = y ; reg . multiple linear regression ( data file , ind var col number , xplusf , features , intercept term , row ini , row end ) ; cor xplusy = reg . get correlation ( ) ; return cor xplusy ; }
public n gram graph comparator ( ) { }
public static check index . status check index ( directory dir ) throws io exception { return check index ( dir , bool_ ) ; }
private double test fit ( double [ ] x , double [ ] test , distribution dist ) throws arithmetic exception { for ( int i = num_ ; i < test . length ; i ++ ) { test [ i ] = dist . cdf ( x [ i ] ) ; if ( test [ i ] > num_ ) { test [ i ] = num_ ; } if ( test [ i ] < num_ ) { test [ i ] = num_ ; } if ( double . is na n ( test [ i ] ) ) { throw new arithmetic exception ( str_ + dist . to string ( ) ) ; } } arrays . sort ( test ) ; return kolmogorov smirnov test . simple test ( test ) ; }
private multimap < class < ? > , subscriber > find all subscribers ( object listener ) { multimap < class < ? > , subscriber > methods in listener = hash multimap . create ( ) ; class < ? > clazz = listener . get class ( ) ; for ( method method : get annotated methods ( clazz ) ) { class < ? > [ ] parameter types = method . get parameter types ( ) ; class < ? > event type = parameter types [ num_ ] ; methods in listener . put ( event type , subscriber . create ( bus , listener , method ) ) ; } return methods in listener ; }
public boolean remove container and cancel if necessary ( image container container ) { m containers . remove ( container ) ; if ( m containers . size ( ) == num_ ) { m request . cancel ( ) ; return bool_ ; } return bool_ ; }
public screen capture pixel matrix editor ( ) { super ( ) ; init components ( ) ; layout components ( ) ; }
private static object clone subarray ( object [ ] a , int from , int to ) { int n = to - from ; object result = array . new instance ( a . get class ( ) . get component type ( ) , n ) ; system . arraycopy ( a , from , result , num_ , n ) ; return result ; }
public void fill default values ( ) { tf learning rate . set text ( double . to string ( subtractive normalization rule . defaul t_ learnin g_ rate ) ) ; }
private void send notification ( string message body ) { intent intent = new intent ( this , events activity . class ) ; intent . add flags ( intent . fla g_ activit y_ clea r_ top ) ; pending intent pending intent = pending intent . get activity ( this , num_ , intent , pending intent . fla g_ on e_ shot ) ; uri default sound uri = ringtone manager . get default uri ( ringtone manager . typ e_ notification ) ; notification compat . builder notification builder = new notification compat . builder ( this ) . set small icon ( r . drawable . ic _logo ) . set content title ( str_ ) . set content text ( message body ) . set auto cancel ( bool_ ) . set sound ( default sound uri ) . set content intent ( pending intent ) ; notification manager notification manager = ( notification manager ) get system service ( context . notificatio n_ service ) ; notification manager . notify ( num_ , notification builder . build ( ) ) ; }
public void assign role ( am role role ) throws am exception , sso exception { assign role ( role . get dn ( ) ) ; }
private void reduce parse tree ( compilation unit declaration unit ) { type declaration [ ] types = unit . types ; for ( int i = num_ , l = types == null ? num_ : types . length ; i < l ; i ++ ) purge method statements ( types [ i ] ) ; }
public void put ( string key , file files [ ] , string content type , string custom file name ) throws file not found exception { if ( key != null ) { list < file wrapper > file wrappers = new array list < file wrapper > ( ) ; for ( file file : files ) { if ( file == null || ! file . exists ( ) ) { throw new file not found exception ( ) ; } file wrappers . add ( new file wrapper ( file , content type , custom file name ) ) ; } file array params . put ( key , file wrappers ) ; } }
private primality ( ) { }
public boolean goto previous ( ) { current taxon iterator = null ; current taxon id = null ; return is current set ( ) ; }
public void write raw varint 6 4 ( long value ) throws io exception { while ( bool_ ) { if ( ( value & ~ num_ ) == num_ ) { write raw byte ( ( int ) value ) ; return ; } else { write raw byte ( ( ( int ) value & num_ ) | num_ ) ; value >>>= num_ ; } } }
boolean on bubble click ( em message message ) ;
public void run test ( ) throws throwable { string local name = str_ ; string namespace uri = str_ ; string qualified name = str_ ; document doc ; node list element list ; node test addr ; attr addr attr ; string result attr ; doc = ( document ) load ( str_ , bool_ ) ; element list = doc . get elements by tag name ( str_ ) ; test addr = element list . item ( num_ ) ; assert not null ( str_ , test addr ) ; ( ( element ) test addr ) . set attribute ns ( namespace uri , qualified name , str_ ) ; result attr = ( ( element ) test addr ) . get attribute ns ( namespace uri , local name ) ; assert equals ( str_ , str_ , result attr ) ; }
protected string build data source file name ( data source ds ) { string config dir = get file handler ( ) . append ( get domain home ( ) , str_ ) ; string jdbc dir = get file handler ( ) . append ( config dir , str_ ) ; string file = ds . get id ( ) + str_ ; return get file handler ( ) . append ( jdbc dir , file ) ; }
public void reset amount ( ) { still needed amount = required amount ; }
public abstract void header ( string fmt , object ... args ) ;
public void mouse entered ( mouse event event ) { initiate tool tip ( event ) ; }
public void update league history ( ) { collections . sort ( team list , new team comp poll ( ) ) ; string [ ] year top 1 0 = new string [ num_ ] ; team tt ; for ( int i = num_ ; i < num_ ; ++ i ) { tt = team list . get ( i ) ; year top 1 0 [ i ] = tt . abbr + str_ + tt . wins + str_ + tt . losses + str_ ; } league history . add ( year top 1 0 ) ; }
boolean starts with check length ( char s [ ] , int len , char prefix [ ] ) { if ( prefix . length == num_ && len < num_ ) { return bool_ ; } else if ( len < prefix . length + num_ ) { return bool_ ; } else { for ( int i = num_ ; i < prefix . length ; i ++ ) if ( s [ i ] != prefix [ i ] ) return bool_ ; return bool_ ; } }
public boolean is set object ( ) { return this . object != null ; }
public default retry policy ( int initial timeout ms , int max num retries , float backoff multiplier ) { m current timeout ms = initial timeout ms ; m max num retries = max num retries ; m backoff multiplier = backoff multiplier ; }
public void close ( ) { try { m keep alive manager . stop ( ) ; m listeners . clear ( ) ; for ( sip provider sip provider : m sip providers ) { sip provider . remove sip listener ( this ) ; sip provider . remove listening points ( ) ; try { m sip stack . delete sip provider ( sip provider ) ; } catch ( object in use exception e ) { s logger . error ( str_ , e ) ; } } } finally { if ( m sip stack != null ) { m sip stack . stop ( ) ; } else { if ( s logger . is activated ( ) ) { s logger . debug ( str_ ) ; } } sip factory . get instance ( ) . reset factory ( ) ; } }
private void create v ms ( ) { host host = host . get host ( num_ ) ; for ( int i = num_ ; i < num_ ; i ++ ) { vm arr [ i ] = host . get vm ( i ) ; } }
public boolean is empty ( ) { return first == null ; }
public void unconfigure arrow button ( ) { if ( arrow button != null ) { arrow button . remove mouse listener ( popup . get mouse listener ( ) ) ; arrow button . remove mouse motion listener ( popup . get mouse motion listener ( ) ) ; } }
public boolean is key frame ( ) { return key frame ; }
immutable stack < t > to immutable ( ) ;
public static int launch process and wait for ( list < string > commands , file working dir , final output stream output stream , i process receiver process receiver ) throws interrupted exception , io exception { return launch process and wait for ( commands , working dir , null , output stream , process receiver ) ; }
public void visit local variable ( string name , string desc , string signature , label start , label end , int index ) { if ( mv != null ) { mv . visit local variable ( name , desc , signature , start , end , index ) ; } }
void create ( workspace workspace ) throws conflict exception , server exception ;
public static boolean check root permission ( ) { return exec command ( str_ , bool_ , bool_ ) . result == num_ ; }
void warn ( string msg , object [ ] args ) throws transformer exception { string fmsg = xsl messages . create xpath warning ( msg , args ) ; error listener ehandler = this . get error listener ( ) ; if ( null != ehandler ) { ehandler . warning ( new transformer exception ( fmsg , m _source locator ) ) ; } else { system . err . println ( fmsg ) ; } }
public synchronized boolean intersects set ( ns set other set ) { for ( ns object o : set ) { if ( other set . contains object ( o ) ) return bool_ ; } return bool_ ; }
public void update sync state from android ( ) { if ( android sync settings . is sync enabled ( m context ) ) { start ( ) ; } else { stop ( ) ; } }
public final long doc freq ( ) { return doc freq ; }
public void test merge in both with node merge strategy with mixed content ( ) throws exception { web xml src web xml = get web xml ( str_ , str_ ) ; web xml merge web xml = get web xml ( str_ , str_ ) ; web xml merger merger = new web xml merger ( src web xml ) ; element format = get context param element ( str_ , str_ ) ; node merge strategy strategy = new node merge strategy ( null , format ) ; merger . set merge strategy ( web xml type . contex t_ param , strategy ) ; merger . merge ( merge web xml ) ; assert true ( web xml utils . has context param ( src web xml , str_ ) ) ; assert equals ( str_ , get context param value ( web xml utils . get context param ( src web xml , str_ ) ) ) ; }
private void state 0 ( ) throws io exception { initialization initialization = new random initialization ( problem , alpha ) ; solution [ ] initial population = initialization . initialize ( ) ; int [ ] initial ids = new int [ alpha ] ; evaluate all ( initial population ) ; for ( int i = num_ ; i < alpha ; i ++ ) { initial ids [ i ] = add to population ( initial population [ i ] ) ; } write population ( new file ( file prefix + str_ ) , initial ids ) ; }
public search scroll request ( action request request ) { super ( request ) ; }
public e element ( ) { return get first ( ) ; }
public movie extended matcher ( final map < movie search options , object > search options ) { this . search options = search options ; }
public void go to next color ( ) { m color index = ( m color index + num_ ) % ( m colors . length ) ; }
public boolean is selected ( ) { return selected ; }
public static int next index ( int index ) { return index = ( index + num_ ) % num_ ; }
protected void handle column changed ( column c , int start , int end ) { for ( ; ! is valid row ( start ) && start <= end ; ++ start ) ; if ( start > end ) return ; int idx ; if ( m _last col != - num_ && c == get column ( m _last col ) ) { idx = m _last col ; } else { idx = get column number ( c ) ; } if ( idx >= num_ ) { fire table event ( start , end , idx , table model event . update ) ; } }
public i packet deserialize ( byte [ ] data , int offset , int length ) throws packet parsing exception ;
completable future < void > acknowledge async ( message message ) ;
public du c 2 0 0 6 topic file set ( string s topic sgml file , string s corpus root dir ) { super ( s corpus root dir , num_ ) ; topic file = s topic sgml file ; topic file text = utils . load file to string with newlines ( s topic sgml file ) ; }
void load sessions ( map < string , session > sessions ) ;
protected feed ( element key < ? , ? extends feed > key ) { super ( key ) ; feed state = new feed state ( ) ; }
protected void read contents ( ) { boolean done = bool_ ; while ( ! ( done || err ( ) ) ) { int code = read ( ) ; switch ( code ) { case num_ : read image ( ) ; break ; case num_ : code = read ( ) ; switch ( code ) { case num_ : read graphic control ext ( ) ; break ; case num_ : read block ( ) ; string app = str_ ; for ( int i = num_ ; i < num_ ; i ++ ) { app += ( char ) block [ i ] ; } if ( app . equals ( str_ ) ) { read netscape ext ( ) ; } else skip ( ) ; break ; default : skip ( ) ; } break ; case num_ : done = bool_ ; break ; case num_ : break ; default : status = statu s_ forma t_ error ; } } }
public final serializer and map result find and add serializer ( class < ? > type , serializer provider provider , bean property property ) throws json mapping exception { json serializer < object > serializer = provider . find value serializer ( type , property ) ; return new serializer and map result ( serializer , new with ( type , serializer ) ) ; }
private object invoke item select method ( object handler , string method name , object ... params ) { if ( handler == null ) return null ; method method = null ; try { method = handler . get class ( ) . get declared method ( method name , adapter view . class , view . class , int . class , long . class ) ; if ( method != null ) return method . invoke ( handler , params ) ; else throw new ab app exception ( str_ + method name ) ; } catch ( exception e ) { e . print stack trace ( ) ; } return null ; }
private void actualizar niveles ( list lista niveles ) { for ( int i = num_ ; i < lista niveles . size ( ) ; i ++ ) { ( ( nivel archivo vo ) lista niveles . get ( i ) ) . set orden ( new integer ( i + num_ ) ) ; } }
static void fail ( string message , object ... args ) { errors ++ ; system . out . printf ( message , args ) ; }
protected handshaker ( boolean is client , dtls session session , record layer record layer , session listener session listener , certificate [ ] root certificates , int max transmission unit ) { this ( is client , num_ , session , record layer , session listener , root certificates , max transmission unit ) ; }
public boolean has global block ( rest status status ) { for ( cluster block cluster block : global ) { if ( cluster block . status ( ) . equals ( status ) ) { return bool_ ; } } return bool_ ; }
void track conditional cache hit ( ) ;
protected void on connection closed ( final string connection id ) { }
public void stop discovery ( ) { if ( m api client != null ) { weave . devic e_ api . stop loading ( m api client , m discovery listener ) ; } }
public void run test ( ) throws throwable { document doc ; node created node ; string local name ; doc = ( document ) load ( str_ , bool_ ) ; created node = doc . create element ( str_ ) ; local name = created node . get local name ( ) ; assert null ( str_ , local name ) ; }
public uima annotations tokenizer factory ( map < string , string > args ) { super ( args ) ; token type = require ( args , str_ ) ; descriptor path = require ( args , str_ ) ; configuration parameters . put all ( args ) ; }
public static int emfile ( ) { return get platform error codes ( ) . emfile ( ) ; }
public void test column _count ( ) throws exception { string select stmt = str_ + database creator . simpl e_ tabl e1 ; st = db . prepare ( select stmt ) ; assert equals ( num_ , st . column _count ( ) ) ; st . step ( ) ; int column count = st . column _count ( ) ; assert not null ( column count ) ; assert equals ( num_ , column count ) ; select stmt = str_ + database creator . simpl e_ tabl e1 ; st = db . prepare ( select stmt ) ; assert equals ( num_ , st . column _count ( ) ) ; st . bind ( num_ , str_ ) ; st . step ( ) ; column count = st . column _count ( ) ; assert not null ( column count ) ; assert equals ( num_ , column count ) ; }
public intent add flags ( int flags ) { m flags |= flags ; return this ; }
public void add custom view to holder ( view view ) { holder . remove all views ( ) ; holder . add view ( view ) ; }
static prepared statement prepare statement ( string sql ) throws sql exception { return prepare statement ( sql , result set . typ e_ forwar d_ only , result set . concu r_ rea d_ only ) ; }
public future < role > create role ( future callback < role > callback ) ;
protected abstract int cell header size ( ) ;
protected abstract void register specific listener ( ) ;
protected void close ( ) { super . remove attributes ( ) ; listeners . clear ( ) ; sync events . clear ( ) ; owner message . get events ( ) . clear ( ) ; if ( executor != null ) { executor . shutdown ( ) ; try { if ( ! executor . await termination ( num_ , time unit . milliseconds ) ) { executor . shutdown now ( ) ; } } catch ( interrupted exception ie ) { executor . shutdown now ( ) ; thread . current thread ( ) . interrupt ( ) ; } } }
protected abstract void create body content ( i managed form managed form ) ;
public static uri parse ( string uri string ) { return new string uri ( uri string ) ; }
private static void print usage ( ) { system . err . println ( str_ ) ; system . err . println ( str_ + str_ + str_ + str_ ) ; system . exit ( num_ ) ; }
void copy ( ) { arraycopy ( to copy . current message . to byte array ( ) , num_ , to copy . current position ) ; to copy = null ; }
public object writer with type ( class < ? > root type ) { return with type ( _config . construct type ( root type ) ) ; }
public void tab page load started ( int id ) { strip layout tab tab = find tab by id ( id ) ; if ( tab != null ) tab . page loading started ( ) ; }
public image resizer ( context context , int image width , int image height ) { super ( context ) ; set image size ( image width , image height ) ; }
public boolean made pointblank shot ( ) { return made pointblank shot ; }
public boolean is max y set ( int scale ) { return m max y [ scale ] != - math helper . nul l_ value ; }
building register building ( resource location resource , long cost , int wood , int stone ) ;
public void highlight touch ( highlight high ) { if ( high == null ) m indices to hightlight = null ; else { if ( m log enabled ) log . i ( lo g_ tag , str_ + high . to string ( ) ) ; m indices to hightlight = new highlight [ ] { high } ; } invalidate ( ) ; if ( m selection listener != null ) { if ( ! values to highlight ( ) ) m selection listener . on nothing selected ( ) ; else { entry e = m data . get entry for highlight ( high ) ; m selection listener . on value selected ( e , high . get data set index ( ) , high ) ; } } }
public static final statechart load statechart ( string filename ) { return abstract test models util . load statechart ( uri . create platform plugin uri ( filename , bool_ ) ) ; }
public void add execution visitor ( execution visitor execution visitor ) { if ( execution visitor == null ) { throw new illegal argument exception ( str_ ) ; } this . execution visitor = execution visitor ; }
public int weight ( ) ;
protected void fire ancestor moved ( j component source , int id , container ancestor , container ancestor parent ) { object [ ] listeners = listener list . get listener list ( ) ; for ( int i = listeners . length - num_ ; i >= num_ ; i -= num_ ) { if ( listeners [ i ] == ancestor listener . class ) { ancestor event ancestor event = new ancestor event ( source , id , ancestor , ancestor parent ) ; ( ( ancestor listener ) listeners [ i + num_ ] ) . ancestor moved ( ancestor event ) ; } } }
public void create key ( ) { try { m key store . load ( null ) ; m key generator . init ( new key gen parameter spec . builder ( ke y_ name , key properties . purpos e_ encrypt | key properties . purpos e_ decrypt ) . set block modes ( key properties . bloc k_ mod e_ cbc ) . set user authentication required ( bool_ ) . set encryption paddings ( key properties . encryptio n_ paddin g_ pkc s7 ) . build ( ) ) ; m key generator . generate key ( ) ; } catch ( no such algorithm exception | invalid algorithm parameter exception | certificate exception | io exception e ) { throw new runtime exception ( e ) ; } }
public abstract io buffer put unsigned short ( int index , short value ) ;
private object execute or ( page context pc , sql sql , query qr , operation 2 expression , int row ) throws page exception { boolean rtn = caster . to boolean value ( execute exp ( pc , sql , qr , expression . get left ( ) , row ) ) ; if ( rtn ) return boolean . true ; boolean rtn 2 = caster . to boolean ( execute exp ( pc , sql , qr , expression . get right ( ) , row ) ) ; return rtn 2 ; }
public object compiled ( ) { return compiled ; }
item new method item ( final string owner , final string name , final string desc , final boolean itf ) { int type = itf ? imeth : meth ; key 3 . set ( type , owner , name , desc ) ; item result = get ( key 3 ) ; if ( result == null ) { put 1 2 2 ( type , new class ( owner ) , new name type ( name , desc ) ) ; result = new item ( index ++ , key 3 ) ; put ( result ) ; } return result ; }
public void send data ( byte [ ] [ ] data , string target host name , int target port , long interval ) { send data ( data , num_ , data . length , target host name , target port , interval ) ; }
public void increment at ( final int index , final double val ) { this . matrix . increment at ( index , num_ , val ) ; }
float m 2 1 ( ) ;
public void data sink update ( data sink event evt ) { if ( evt instanceof end of stream event ) { synchronized ( wait file sync ) { file done = bool_ ; wait file sync . notify all ( ) ; } } else if ( evt instanceof data sink error event ) { synchronized ( wait file sync ) { file done = bool_ ; file success = bool_ ; wait file sync . notify all ( ) ; } } }
private void cancel clicked ( ) { is canceled = bool_ ; dispose ( ) ; }
public generic feed retrieve next page ( link next ) throws apps for your domain exception , malformed url exception , io exception , service exception { return service . get feed ( new url ( next . get href ( ) ) , generic feed . class ) ; }
public mock transaction ( final account sender ) { this ( sender , num_ ) ; }
public bundler put char array ( string key , char [ ] value ) { bundle . put char array ( key , value ) ; return this ; }
private boolean is substitute ( method m ) { if ( modifier . is static ( m . get modifiers ( ) ) && m . get name ( ) . equals ( name ) ) { if ( parameters . length == m . get parameter count ( ) ) { class < ? > [ ] mparams = m . get parameter types ( ) ; int start = num_ ; if ( ! original is static ) { start = num_ ; if ( ! mparams [ num_ ] . is assignable from ( resolve type ( parameters [ num_ ] , bool_ ) ) ) { return bool_ ; } } for ( int i = start ; i < mparams . length ; i ++ ) { if ( mparams [ i ] != resolve type ( parameters [ i ] , bool_ ) ) { return bool_ ; } } } return bool_ ; } return bool_ ; }
public serial turnout ( string system name , string user name ) { super ( system name , user name ) ; t system name = system name ; t bit = serial address . get bit from system name ( system name ) ; }
public void on finish ( ) { }
private static void add query entity ( document doc , node parent , string pkg , pojo descriptor pojo , boolean generate aliases ) { element bean = add bean ( doc , parent , query entity . class ) ; add property ( doc , bean , str_ , pkg + str_ + pojo . key class name ( ) ) ; add property ( doc , bean , str_ , pkg + str_ + pojo . value class name ( ) ) ; collection < pojo field > fields = pojo . value fields ( bool_ ) ; add query fields ( doc , bean , fields ) ; if ( generate aliases ) add query field aliases ( doc , bean , fields ) ; add query indexes ( doc , bean , fields , pojo . indexes ( ) ) ; }
public synchronized void resume ( ) { if ( paused ) { set paused ( bool_ ) ; if ( current clip != null ) { current clip . start ( ) ; } notify all ( ) ; } }
protected boolean is authentication required ( string artifact , string version ) throws io exception { return str_ . equals ignore case ( ( string ) load properties ( artifact , version ) . get ( authenticatio n_ require d_ property ) ) ; }
public nn chain hac ( lance williams dissimilarity dist measure ) { this ( dist measure , new euclidean distance ( ) ) ; }
public static boolean contains ( coordinate coord , coordinate [ ] p ) { int wn = get winding number ( coord , p ) ; return wn != num_ ; }
public csv reader ( reader reader , char separator ) { this ( reader , separator , csv parser . defaul t_ quot e_ character , csv parser . defaul t_ escap e_ character ) ; }
public infoflow results analyze apk file ( string file name , boolean enable implicit flows , boolean enable static fields , boolean flow sensitive aliasing ) throws io exception , xml pull parser exception { string android jars = system . getenv ( str_ ) ; if ( android jars == null ) android jars = system . get property ( str_ ) ; if ( android jars == null ) throw new runtime exception ( str_ ) ; system . out . println ( str_ + android jars ) ; setup application setup application = new setup application ( android jars , file name ) ; setup application . set taint wrapper ( new easy taint wrapper ( str_ ) ) ; setup application . calculate sources sinks entrypoints ( str_ ) ; setup application . set enable implicit flows ( enable implicit flows ) ; setup application . set enable static field tracking ( enable static fields ) ; setup application . set flow sensitive aliasing ( flow sensitive aliasing ) ; return setup application . run infoflow ( ) ; }
public int size ( ) { return size ( root ) ; }
public static void on pause ( ) { log . i ( tag , str_ ) ; dismiss dialog ( dialog ) ; if ( timer task hide != null ) timer task hide . cancel ( ) ; if ( timer task show != null ) timer task show . cancel ( ) ; log . i ( tag , str_ ) ; }
public key concurrent hash map pro ( int initial capacity ) { this ( initial capacity , defaul t_ loa d_ factor , defaul t_ concurrenc y_ level ) ; }
public string to string ( ) { return this . get class ( ) . get name ( ) + str_ + my _p + str_ ; }
public void eat separators ( ) throws io exception { while ( is separator ( ch ) ) { read char ( ) ; } }
protected void build successful ( notification notification , string success message , string prefix console ) { notification . set message ( success message ) ; notification . set status ( finished ) ; console . print ( prefix console + str_ + success message ) ; }
static void clear instance cache ( ) { synchronized ( instanc e_ cache ) { instanc e_ cache . clear ( ) ; } }
v visit ( scope binding binding ) ;
public int array spliterator ( int [ ] array , int additional characteristics ) { this ( array , num_ , array . length , additional characteristics ) ; }
public static server side sort request control new control ( final boolean is critical , final collection < sort key > keys ) { reject . if null ( keys ) ; reject . if false ( ! keys . is empty ( ) , str_ ) ; return new server side sort request control ( is critical , collections . unmodifiable list ( new array list < sort key > ( keys ) ) ) ; }
private void update progress ( string progress label , int progress ) { if ( my host != null ) { my host . update progress ( progress label , progress ) ; } else { system . out . println ( progress label + str_ + progress + str_ ) ; } }
public void on show modal ( ) ;
public void test replace first ( ) { instances result ; m _ filter = get filter ( str_ , str_ , bool_ , str_ , bool_ ) ; result = perform test ( ) ; assert equals ( str_ , result . attribute ( num_ ) . name ( ) ) ; }
protected void startup non transactional ( ) throws exception { mock store ( ) ; configuration = power mock . create strict mock ( hg configuration . class ) ; easy mock . expect ( configuration . get handle factory ( ) ) . and return ( ( hg handle factory ) class . for name ( hghandlefactor y_ implementatio n_ clas s_ name ) . new instance ( ) ) ; easy mock . expect ( configuration . is transactional ( ) ) . and return ( bool_ ) . times ( num_ ) ; replay ( ) ; storage . startup ( store , configuration ) ; }
void kill ( ) ;
public void on camera view stopped ( ) ;
public void remove last ( ) { remove ( inner chain . get last ( ) ) ; }
public void on consume multi finished ( list < purchase > purchases , list < iab result > results ) ;
public final void print ( char [ ] buffer , int offset , int length ) throws io exception { if ( _source == null ) return ; print latin 1 ( buffer , offset , length ) ; }
public boolean is set ( _ fields field ) { if ( field == null ) { throw new illegal argument exception ( ) ; } switch ( field ) { case a : return is set a ( ) ; case b : return is set b ( ) ; case c : return is set c ( ) ; case shor t_ set : return is set short set ( ) ; case in t_ set : return is set int set ( ) ; case mi x_ structlist : return is set mix structlist ( ) ; case shor t_ list : return is set short list ( ) ; case ordere d_ struc t_ map : return is set ordered struct map ( ) ; case mi x_ struc t_ map : return is set mix struct map ( ) ; case orde r_ enum : return is set order enum ( ) ; case bin : return is set bin ( ) ; } throw new illegal state exception ( ) ; }
public void attribute as class ( ) { data sorted table model model ; if ( m _ current col == - num_ ) { return ; } model = ( data sorted table model ) m _ table data . get model ( ) ; if ( model . get attribute at ( m _ current col ) == null ) { return ; } set cursor ( cursor . get predefined cursor ( cursor . wai t_ cursor ) ) ; model . attribute as class at ( m _ current col ) ; set cursor ( cursor . get predefined cursor ( cursor . defaul t_ cursor ) ) ; }
public object clone ( ) throws clone not supported exception { namespace mappings clone = new namespace mappings ( ) ; clone . m _node stack = ( namespace mappings . stack ) m _node stack . clone ( ) ; clone . count = this . count ; clone . m _namespaces = ( hashtable ) m _namespaces . clone ( ) ; clone . count = count ; return clone ; }
int end ( ) ;
private void add singleton ( temp cluster clus , dbid ref id , double dist , boolean as cluster ) { if ( as cluster ) { clus . add child ( make singleton cluster ( id , dist ) ) ; } else { clus . add ( id ) ; } clus . depth = dist ; }
protected expression bool ( int op pos ) throws transformer exception { return compile unary ( new org . apache . xpath . operations . bool ( ) , op pos ) ; }
boolean check error ( ) { return bool_ ; }
static page stream data read ( page store store , data data , int page id ) { page stream data p = new page stream data ( store , page id , num_ , num_ ) ; p . data = data ; p . read ( ) ; return p ; }
void force address ( simple string address ) ;
protected void handle default selection ( selection event event ) { fire apply editor value ( ) ; deactivate ( ) ; }
public map < string , pattern > collections ( ) { if ( cmap != null ) return cmap ; final string r = get ( crawl attribute . collections . key ) ; this . cmap = collection parser ( r ) ; return this . cmap ; }
public static string escape text value ( object value , context cx ) { xml lib xml lib = current xml lib ( cx ) ; return xml lib . escape text value ( value ) ; }
public boolean is set header ( ) { return this . header != null ; }
public json tokener ( string s ) { this ( new string reader ( s ) ) ; }
public void test bogus arguments ( ) throws exception { illegal argument exception expected = expect throws ( illegal argument exception . class , null ) ; assert true ( expected . get message ( ) . contains ( str_ ) ) ; }
public boolean is class superclass of ( soot class parent , soot class possible child ) { parent . check level ( soot class . hierarchy ) ; possible child . check level ( soot class . hierarchy ) ; return get subclasses of ( parent ) . contains ( possible child ) ; }
public attributes ( ) { this ( num_ ) ; }
public void add update manager listener ( update manager listener l ) { listeners . add ( l ) ; }
private void check path parameter conditions ( method method , field selector selector ) { type ref type = selector . get type ( ) ; well known type wkt = type . get well known type ( ) ; if ( type . is map ( ) ) { error ( method , str_ , selector . to string ( ) , get input message name ( method ) ) ; } else if ( type . is repeated ( ) ) { error ( method , str_ , selector , get input message name ( method ) ) ; } else if ( type . is message ( ) && ! wkt . allowed as path parameter ( ) ) { error ( method , str_ , selector , get input message name ( method ) ) ; } }
static http headers of ( http status status ) { return new default http headers ( ) . status ( status ) ; }
public number format action ( ) { super ( str_ ) ; }
public static boolean is initialized ( ) { return instance . codename one running && ( instance . impl == null ? bool_ : instance . impl . is initialized ( ) ) ; }
private void update cursor ( ) { if ( ( ! editor . is cursor set ( ) ) || editor . get cursor ( ) instanceof ui resource ) { cursor cursor = ( editor . is editable ( ) ) ? text cursor : null ; editor . set cursor ( cursor ) ; } }
public random response handler ( int length ) { this ( length , defaul t_ duration ) ; }
public playlist mark ( sage . io . sage data file in stream ) throws java . io . io exception { in stream . skip bytes ( num_ ) ; type = in stream . read ( ) ; play item id ref = in stream . read unsigned short ( ) ; timestamp = in stream . read int ( ) ; entry espid = in stream . read unsigned short ( ) ; duration = in stream . read int ( ) ; }
public void collapse ( tree path [ ] paths ) { for ( tree path path : paths ) { collapse ( ( default mutable tree node ) path . get last path component ( ) ) ; } }
public friends get suggestions query fields ( list < user field > value ) { return unsafe param ( str_ , value ) ; }
private synchronized void remove map entry ( string local id ) { if ( ! is local id ( local id ) ) { throw new illegal state exception ( str_ + local id + str_ ) ; } file file = new file ( disk path , local id ) ; parse file utils . delete quietly ( file ) ; }
public int add dir ( file file ) { if ( ! file . exists ( ) ) { return num_ ; } string [ ] names = get names ( get files ( file , str_ ) ) ; load class ( file , names ) ; return num_ ; }
private void write object ( java . io . object output stream s ) throws java . io . io exception { s . default write object ( ) ; for ( node < e > p = first ( ) ; p != null ; p = succ ( p ) ) { e item = p . item ; if ( item != null ) s . write object ( item ) ; } s . write object ( null ) ; }
public void tabs all closing effect ( long time ) { boolean need animation = bool_ ; if ( m stack tabs != null ) { for ( int i = num_ ; i < m stack tabs . length ; ++ i ) { need animation |= ! m stack tabs [ i ] . is dying ( ) ; m stack tabs [ i ] . set dying ( bool_ ) ; } } else { need animation = bool_ ; } if ( need animation ) { m scroll offset for dying tabs = m scroll offset ; m spacing = compute spacing ( num_ ) ; if ( m stack tabs != null ) { boolean is rtl = ! ( ( m current mode == orientation . portrait ) ^ localization utils . is layout rtl ( ) ) ; for ( int i = num_ ; i < m stack tabs . length ; i ++ ) { stack tab tab = m stack tabs [ i ] ; tab . set discard origin y ( num_ ) ; tab . set discard origin x ( is rtl ? num_ : tab . get layout tab ( ) . get original content width ( ) ) ; tab . set discard from click ( bool_ ) ; } } start animation ( time , overview animation type . discar d_ all ) ; } m is dying = bool_ ; }
private void push run ( int run base , int run len ) { this . run base [ stack size ] = run base ; this . run len [ stack size ] = run len ; stack size ++ ; }
public void google java format ( ) { google java format ( google java format . defaul t_ version ) ; }
vertex last relationship ( vertex type , int from last ) ;
public set < string builder > recommend ( string builder string ) { set < string builder > ret = new hash set < string builder > ( ) ; for ( dictionary dict : this . dictionaries . values ( ) ) { ret . add all ( dict . recommend ( string ) ) ; } final sorted map < string builder , atomic integer > u = common words . tail map ( string ) ; string builder vv ; try { for ( final map . entry < string builder , atomic integer > v : u . entry set ( ) ) { vv = v . get key ( ) ; if ( string builder comparator . cas e_ insensitiv e_ order . starts with ( vv , string ) && vv . length ( ) > string . length ( ) ) { ret . add ( vv ) ; } else { break ; } } } catch ( final concurrent modification exception e ) { concurrent log . log exception ( e ) ; } return ret ; }
public boolean communication initiated ( ) ;
string private field name ( name name ) ;
void move row relative ( int rows ) throws sql exception ;
static animation style map int to value ( int mode int ) { switch ( mode int ) { case num_ : default : return rotate ; case num_ : return flip ; } }
private void return data ( object ret ) { if ( my host != null ) { my host . return data ( ret ) ; } }
public native byte b refresh ( ) ;
protected set send outgoing ( distribution message message ) throws not serializable exception { long start time = distribution stats . get stat time ( ) ; set result = channel . send ( message . get recipients ( ) , message , distribution manager . this , this . stats ) ; long end time = num_ ; if ( distribution stats . enable clock stats ) { end time = nano timer . get time ( ) ; } boolean sent to all = message . for all ( ) ; if ( sent to all ) { stats . inc broadcast messages ( num_ ) ; if ( distribution stats . enable clock stats ) { stats . inc broadcast messages time ( end time - start time ) ; } } stats . inc sent messages ( num_ ) ; if ( distribution stats . enable clock stats ) { stats . inc sent messages time ( end time - start time ) ; stats . inc distribute message time ( end time - message . get timestamp ( ) ) ; } return result ; }
public circular range fan ( string sidc ) { super ( sidc ) ; this . rings = new array list < surface circle > ( ) ; }
public bundler put all ( bundle bundle ) { this . bundle . put all ( bundle ) ; return this ; }
public static list filter regs result by current ( list lista regs , integer book id , integer folder id ) { if ( ( lista regs != null ) && ( ! lista regs . is empty ( ) ) ) { for ( iterator iterator = lista regs . iterator ( ) ; iterator . has next ( ) ; ) { asoc regs results asoc regs results = ( asoc regs results ) iterator . next ( ) ; if ( ( asoc regs results . get book id ( ) . int value ( ) == book id . int value ( ) ) && ( asoc regs results . get folder id ( ) . int value ( ) == folder id . int value ( ) ) ) { iterator . remove ( ) ; } } } return lista regs ; }
public cts block cipher ( block cipher cipher ) { if ( ( cipher instanceof ofb block cipher ) || ( cipher instanceof cfb block cipher ) ) { throw new illegal argument exception ( str_ ) ; } this . cipher = cipher ; block size = cipher . get block size ( ) ; buf = new byte [ block size * num_ ] ; buf off = num_ ; }
public char current ( ) ;
public static synchronized boolean is body labeled ( ) { return body labeled ; }
public abstract string type name ( ) ;
private void write document ( document doc , file f , string character set , string line separator ) throws io exception { lf writer out = new lf writer ( new output stream writer ( new file output stream ( f ) , character set ) ) ; out . set line separator ( line separator ) ; try { string sequence ; for ( int i = num_ ; i < doc . get length ( ) ; i += num_ ) { out . write ( doc . get text ( i , math . min ( num_ , doc . get length ( ) - i ) ) ) ; } } catch ( bad location exception e ) { throw new io exception ( e . get message ( ) ) ; } finally { out . close ( ) ; undo manager . discard all edits ( ) ; } }
private boolean has next tls mode ( ) { return next tls mode != tl s_ mod e_ null ; }
public string str rep with prestige ( ) { return str_ + rank team poll score + str_ + abbr + str_ + team prestige + str_ ; }
public void test one node expire event ( ) throws throwable { test session expire ( num_ ) ; }
public void zoom to ( int lon e7 , int lat e7 , osm element e ) { set follow gps ( bool_ ) ; if ( e instanceof node && map . get zoom level ( ) < num_ ) { application . get logic ( ) . set zoom ( num_ ) ; } else { map . get view box ( ) . set borders ( e . get bounds ( ) , bool_ ) ; } map . get view box ( ) . move to ( lon e7 , lat e7 ) ; }
private void send broadcast finished sync folder ( account account , string remote path , boolean success ) { intent finished = new intent ( file downloader . get download finish message ( ) ) ; finished . put extra ( file downloader . accoun t_ name , account . name ) ; finished . put extra ( file downloader . extr a_ remot e_ path , remote path ) ; finished . put extra ( file downloader . extr a_ fil e_ path , file storage utils . get save path ( account . name ) + remote path ) ; finished . put extra ( file downloader . extr a_ downloa d_ result , success ) ; m service . send sticky broadcast ( finished ) ; }
void mark alert for deletion ( string name , principal user owner ) ;
private void export project constraints ( project project , file export temp dir ) throws io exception { file constraints dir = new file ( export temp dir + constraints ) ; file utils . force mkdir ( constraints dir ) ; string file name ; for ( constraint set set : repository . list constraint sets ( project ) ) { file name = set . get name ( ) ; file utils . copy file ( repository . export constraint as file ( set ) , new file ( constraints dir , file name ) ) ; } }
public boolean has comment count ext ( ) { return has extension ( gphoto comment count . class ) ; }
private string describe minute ( int m ) { switch ( m ) { case num_ : return str_ ; case num_ : return str_ ; case num_ : return str_ ; case num_ : return str_ ; case num_ : return str_ ; case num_ : return str_ ; case num_ : return str_ ; case num_ : return str_ ; case num_ : return str_ ; case num_ : return str_ ; case num_ : return str_ ; default : return str_ ; } }
public base event entry ( base entry < ? > source entry ) { super ( source entry ) ; get categories ( ) . add ( event entry . even t_ category ) ; }
public synchronized void rename file ( jdbc sequential file file , string new file name ) throws sql exception { try { connection . set auto commit ( bool_ ) ; rename file . set string ( num_ , new file name ) ; rename file . set int ( num_ , file . get id ( ) ) ; rename file . execute update ( ) ; connection . commit ( ) ; } catch ( sql exception e ) { connection . rollback ( ) ; throw e ; } }
public boolean is public ( ) { return is ( public ) ; }
public boolean is canceled ( ) { return m canceled ; }
public int port ( ) { return port ; }
public boolean supports multicast ( ) throws socket exception { return has flag ( if f_ multicast ) ; }
public static object from spec ( object context , string spec ) throws illegal argument exception , class not found exception , illegal access exception , invocation target exception , instantiation exception , no such method exception { return from spec ( context , spec , object . class , null , null ) ; }
public final boolean is native ( ) { return modifier . is native ( get modifiers ( ) ) ; }
void reset ( ) ;
private static pattern anchored ( string regex ) { return pattern . compile ( str_ + regex + str_ ) ; }
public final mutable double 2 d multiply ( mutable double 2 d other , final double val ) { x = other . x * val ; y = other . y * val ; return this ; }
void on metadata ( t metadata ) ;
public void clear ( ) { ored criteria . clear ( ) ; order by clause = null ; distinct = bool_ ; }
private vector 2 to world coordinates ( point point ) { double x = ( point . get x ( ) - this . canvas . get width ( ) / num_ ) / this . scale ; double y = - ( point . get y ( ) - this . canvas . get height ( ) / num_ ) / this . scale ; return new vector 2 ( x , y ) ; }
protected void validate alternate identifier ( java . lang . string [ ] param ) { }
protected void process switch binary report ( serial message serial message , int offset , int endpoint ) throws z wave serial message exception { int value = serial message . get message payload byte ( offset + num_ ) ; logger . debug ( str_ , this . get node ( ) . get node id ( ) , value ) ; z wave command class value event z event = new z wave command class value event ( this . get node ( ) . get node id ( ) , endpoint , this . get command class ( ) , value ) ; this . get controller ( ) . notify event listeners ( z event ) ; }
protected void init db object base ( database db , int object id , string name , int trace module id ) { this . database = db ; this . trace = db . get trace ( trace module id ) ; this . id = object id ; this . object name = name ; this . modification id = db . get modification meta id ( ) ; }
public boolean parse ( string query ) { matcher matcher = pattern . compile ( exchang e_ regex , pattern . cas e_ insensitive ) . matcher ( query ) ; if ( ! matcher . matches ( ) ) { return bool_ ; } string exchange from table = matcher . group ( str_ ) ; string exchange to table = matcher . group ( str_ ) ; string partition spec = matcher . group ( str_ ) ; exchange from table spec = get spec ( exchange from table ) ; exchange to table spec = get spec ( exchange to table ) ; partition name = get partition name ( partition spec ) ; partition values = get partition values ( partition spec ) ; return bool_ ; }
public final void calc score ( ) { m _score = scor e_ other ; if ( null == m _target string ) calc target string ( ) ; }
public literal create literal ( xml gregorian calendar calendar ) ;
public void add attribute ( attribute info attribute ) { attributes . put ( attribute . get name ( ) , attribute ) ; }
void insert _octet ( byte value ) throws org . omg . dynamic any . dyn any package . type mismatch , org . omg . dynamic any . dyn any package . invalid value ;
public static input stream open file or resource stream ( string file name , class c ) { if ( file name == null ) { string msg = logging . get message ( str_ ) ; logging . logger ( ) . severe ( msg ) ; throw new illegal argument exception ( msg ) ; } object stream or exception = wwio . get file or resource as stream ( file name , c ) ; if ( stream or exception instanceof exception ) { string msg = logging . get message ( str_ , file name ) ; throw new ww runtime exception ( msg , ( exception ) stream or exception ) ; } return ( input stream ) stream or exception ; }
public app test ( string test name ) { super ( test name ) ; }
imap response composer continuation response ( string message ) throws io exception ;
public battery info ( parcel in ) { usage percent = in . read int ( ) ; duration micros = in . read long ( ) ; usage details = in . read string ( ) ; checkin details = in . read string ( ) ; }
public request security token response ( requested security token token , string applies to ) { this . token = token ; this . applies to = applies to ; }
public c f5 ( ) { this ( num_ ) ; }
static public void generate seed ( byte [ ] result ) { instance . get seed bytes ( result ) ; }
public boolean is cached ( ) { return bytes != null ; }
private static void update all u is ( ) { frame app frames [ ] = frame . get frames ( ) ; for ( frame frame : app frames ) { update window ui ( frame ) ; } }
public void cancel ( int id ) { cancel ( null , id ) ; }
public static headers of ( string ... names and values ) { if ( names and values == null || names and values . length % num_ != num_ ) { throw new illegal argument exception ( str_ ) ; } names and values = names and values . clone ( ) ; for ( int i = num_ ; i < names and values . length ; i ++ ) { if ( names and values [ i ] == null ) throw new illegal argument exception ( str_ ) ; names and values [ i ] = names and values [ i ] . trim ( ) ; } for ( int i = num_ ; i < names and values . length ; i += num_ ) { string name = names and values [ i ] ; string value = names and values [ i + num_ ] ; if ( name . length ( ) == num_ || name . index of ( str_ ) != - num_ || value . index of ( str_ ) != - num_ ) { throw new illegal argument exception ( str_ + name + str_ + value ) ; } } return new headers ( names and values ) ; }
void delete user mailboxes names ( string user ) throws exception ;
public date roll date ( date base , time zone zone ) { calendar calendar = calendar . get instance ( zone ) ; calendar . set time ( base ) ; calendar . add ( this . roll unit type . get calendar field ( ) , this . roll count ) ; return calendar . get time ( ) ; }
protected abstract void perform action ( site node site node ) ;
public void increment discarded ( ) ;
public menu ( string label ) throws headless exception { this ( label , bool_ ) ; }
private void update progress ( int progress ) { if ( my host != null && progress != previous progress ) { my host . update progress ( progress ) ; } else { system . out . println ( str_ + string . value of ( progress ) + str_ ) ; } previous progress = progress ; }
protected with statement impl ( ) { super ( ) ; }
public static string bytes to hex ( final byte [ ] bytes ) { string builder builder = new string builder ( bytes . length * num_ ) ; for ( int i = num_ ; i < bytes . length ; i ++ ) { builder . append ( hexchars [ ( bytes [ i ] & num_ ) > > > num_ ] ) ; builder . append ( hexchars [ bytes [ i ] & num_ ] ) ; builder . append ( str_ ) ; } return builder . to string ( ) ; }
public void munge ( string entity id , collection < statement > statements , collection < string > existing values , collection < string > existing refs , change source change ) { if ( statements . is empty ( ) ) { return ; } munge operation op = new munge operation ( entity id , statements , existing values , existing refs ) ; if ( source change != null ) { op . import from change ( source change ) ; } op . munge ( ) ; existing values . remove all ( op . extra valid subjects ) ; existing refs . remove all ( op . extra valid subjects ) ; return ; }
public static boolean route has stop sequence loop ( transit route transit route ) { set < string > parent facilities = new hash set < > ( ) ; for ( transit route stop stop : transit route . get stops ( ) ) { if ( ! parent facilities . add ( get parent id ( stop . get stop facility ( ) . get id ( ) . to string ( ) ) ) ) { return bool_ ; } } return bool_ ; }
public continuous query exception ( string message , throwable cause ) { super ( message , cause ) ; }
public void write ( char [ ] cbuf , int off , int len ) throws io exception { internal out . write ( cbuf , off , len ) ; }
public int arity of ( int fn ) { return fn == f_ not ? num_ : num_ ; }
public static boolean bool value ( string prop name , boolean dflt ) { string sys prop = get property ( prop name ) ; return ( sys prop != null && ! sys prop . is empty ( ) ) ? boolean . get boolean ( sys prop ) : dflt ; }
public void cancel button action performed ( ) { edit mode = bool_ ; cur node = null ; add button . set visible ( bool_ ) ; edit button . set visible ( bool_ ) ; delete button . set visible ( bool_ ) ; done button . set visible ( bool_ ) ; update button . set visible ( bool_ ) ; cancel button . set visible ( bool_ ) ; status text 1 . set text ( std status 1 ) ; status text 2 . set text ( std status 2 ) ; status text 3 . set text ( std status 3 ) ; }
public block result ( ) { this . entities = null ; }
public bloom filter ( byte [ ] data , int hash functions , int tweak , update mode update ) { filter = arrays . clone ( data ) ; this . hash functions = math . min ( hash functions , ma x_ has h_ funcs ) ; this . tweak = tweak ; this . update = update ; }
public trace state exited item provider ( adapter factory adapter factory ) { super ( adapter factory ) ; }
public shingles many series to shingles ( map < string , array list < double [ ] > > data , int window size , int paa size , int alphabet size , numerosity reduction strategy strategy , double normalization threshold , int shingle size ) throws sax exception { shingles res = new shingles ( alphabet size , shingle size ) ; for ( entry < string , array list < double [ ] > > e : data . entry set ( ) ) { for ( double [ ] series : e . get value ( ) ) { map < string , integer > shingles = ts 2 shingles ( series , window size , paa size , alphabet size , strategy , normalization threshold , shingle size ) ; int [ ] counts = new int [ res . get index ( ) . size ( ) ] ; for ( string str : shingles . key set ( ) ) { integer idx = res . get index ( ) . get ( str ) ; counts [ idx ] = shingles . get ( str ) ; } res . add shingled series ( e . get key ( ) , counts ) ; } } return res ; }
public void handle decode ( result raw result , bitmap barcode , float scale factor ) { inactivity timer . on activity ( ) ; last result = raw result ; viewfinder view . draw result bitmap ( barcode ) ; beep manager . play beep sound and vibrate ( ) ; toast . make text ( this , str_ + result parser . parse result ( raw result ) . to string ( ) , toast . lengt h_ short ) . show ( ) ; }
public line revert ( ) { final line reverted = new line ( this ) ; reverted . direction = reverted . direction . negate ( ) ; return reverted ; }
void send read command ( int loco io address , int loco io sub address , int cv ) { reading = bool_ ; tc . send loco net message ( loco io . read cv ( loco io address , loco io sub address , cv ) ) ; start timer ( ) ; }
public collection < lb pool > list pool ( string pool id ) ;
protected void inorder ( tree node < e > root ) { if ( root == null ) return ; inorder ( root . left ) ; system . out . print ( root . element + str_ ) ; inorder ( root . right ) ; }
public static boolean store on application private dir ( context context , bitmap bitmap , string filename , bitmap . compress format format , int quality ) { output stream out = null ; try { out = new buffered output stream ( context . open file output ( filename , context . mod e_ private ) ) ; return bitmap . compress ( format , quality , out ) ; } catch ( file not found exception e ) { log . e ( tag , str_ , e ) ; return bool_ ; } finally { closeable utils . close ( out ) ; } }
public dns sd txt record ( byte [ ] data ) { m data = ( byte [ ] ) data . clone ( ) ; }
void info ( string msg , throwable throwable ) ;
public options add option ( string opt , string long opt , boolean has arg , string description ) { add option ( new option ( opt , long opt , has arg , description ) ) ; return this ; }
void write _ object ( org . omg . corba . object value ) ;
public boolean contains key ( string key ) { return context . contains key ( key ) ; }
public boolean is opaque ( synth context context ) { return bool_ ; }
public a disable active gc ( ) ;
public int read ( byte [ ] buf , int off , int len ) throws t transport exception { if ( input stream _ == null ) { throw new t transport exception ( t transport exception . no t_ open , str_ ) ; } int bytes read ; try { bytes read = input stream _ . read ( buf , off , len ) ; } catch ( io exception iox ) { throw new t transport exception ( t transport exception . unknown , iox ) ; } if ( bytes read < num_ ) { throw new t transport exception ( t transport exception . en d_ o f_ file ) ; } return bytes read ; }
protected abstract double int map ( ) { }
protected void unpack shorts ( byte byte array [ ] , short output [ ] , int short count ) { int j ; int first byte , second byte ; if ( directory . is big endian ( ) ) { for ( int i = num_ ; i < short count ; i ++ ) { j = num_ * i ; first byte = byte array [ j ] & num_ ; second byte = byte array [ j + num_ ] & num_ ; output [ i ] = ( short ) ( ( first byte << num_ ) + second byte ) ; } } else { for ( int i = num_ ; i < short count ; i ++ ) { j = num_ * i ; first byte = byte array [ j ] & num_ ; second byte = byte array [ j + num_ ] & num_ ; output [ i ] = ( short ) ( ( second byte << num_ ) + first byte ) ; } } }
public < b > flux t < b > flat map ( function < ? super t , ? extends flux < ? extends b > > f ) ;
object stream field ( string signature , string name ) { if ( name == null ) { throw new null pointer exception ( str_ ) ; } this . name = name ; this . type string = signature . replace ( str_ , str_ ) . intern ( ) ; default resolve ( ) ; this . is deserialized = bool_ ; }
protected peer address change notification ( ) { }
public static boolean match ( string pattern text , parse tree node specimen , map < string , parse tree node > bindings ) { map < string , parse tree node > temp bindings = get pattern node ( pattern text ) . match ( specimen ) ; if ( temp bindings != null ) { bindings . put all ( temp bindings ) ; return bool_ ; } return bool_ ; }
static void check identifier ( final string name , final int start , final int end , final string msg ) { if ( name == null || ( end == - num_ ? name . length ( ) <= start : end <= start ) ) { throw new illegal argument exception ( str_ + msg + str_ ) ; } if ( ! character . is java identifier start ( name . char at ( start ) ) ) { throw new illegal argument exception ( str_ + msg + str_ + name ) ; } int max = end == - num_ ? name . length ( ) : end ; for ( int i = start + num_ ; i < max ; ++ i ) { if ( ! character . is java identifier part ( name . char at ( i ) ) ) { throw new illegal argument exception ( str_ + msg + str_ + name ) ; } } }
protected void custom on close ( ) { }
static void check headless ( ) throws headless exception { if ( is headless ( ) ) { throw new headless exception ( ) ; } }
private < t > t wrap exceptions ( callable < t > callable ) throws transient kinesis exception { try { return callable . call ( ) ; } catch ( expired iterator exception e ) { throw e ; } catch ( limit exceeded exception | provisioned throughput exceeded exception e ) { throw new transient kinesis exception ( str_ , e ) ; } catch ( amazon service exception e ) { if ( e . get error type ( ) == amazon service exception . error type . service ) { throw new transient kinesis exception ( str_ , e ) ; } throw new runtime exception ( str_ , e ) ; } catch ( exception e ) { throw new runtime exception ( str_ , e ) ; } }
public static document make dom ( byte [ ] in ) throws sax exception , io exception , parser configuration exception { input stream is = new byte array input stream ( in ) ; document dom = document builder factory . new instance ( ) . new document builder ( ) . parse ( is ) ; return dom ; }
protected string create error message ( string key , object [ ] args ) { try { return format message ( key , args ) ; } catch ( missing resource exception e ) { return key ; } }
protected static void load standard font width ( final string font name ) { final integer file number = standard file list . get ( font name ) ; if ( file number != null && standard font loaded . get ( file number ) == null ) { try { load standard font ( file number ) ; } catch ( final exception e ) { log writer . write log ( str_ + e + str_ + font name + str_ + font name ) ; } } }
public static b node parse b node ( string n triples b node , value factory value factory ) throws illegal argument exception { if ( n triples b node . starts with ( str_ ) ) { return value factory . create b node ( n triples b node . substring ( num_ ) ) ; } else { throw new illegal argument exception ( str_ + n triples b node ) ; } }
public compressing codec ( string name , compression mode compression mode , int chunk size , int max docs per chunk , int block size ) { this ( name , str_ , compression mode , chunk size , max docs per chunk , block size ) ; }
protected void update project explorer ( ) { final selection < ? > selection = project explorer part . get selection ( ) ; final collection < path type filter > filters = collections . singleton ( all ) ; }
public string canonical ( ) { switch ( type ) { case converge : return steps . get ( steps . size ( ) - num_ ) ; case cycle : return collections . min ( steps , comparator . comparing ( null ) . then comparing ( function . identity ( ) ) ) ; case diverge : throw new illegal argument exception ( str_ ) ; default : throw unhandled . enum exception ( type ) ; } }
public void add header view ( view view ) { m header views . add ( view ) ; }
public composite action ( visualization vis , long duration ) { super ( vis , duration , activity . defaul t_ ste p_ time ) ; }
void enter field ( ) { old contents = val . get text ( ) ; }
public block ( network parameters params , byte [ ] payload bytes , int offset , message serializer serializer , int length ) throws protocol exception { super ( params , payload bytes , offset , serializer , length ) ; }
public static object demux array ( object src , int [ ] dims ) { return demux array ( src , dims , get component type ( src . get class ( ) ) ) ; }
public movie rename task ( list < movie > movies to rename ) { super ( bundle . get string ( str_ ) ) ; this . movies to rename = movies to rename ; }
public checksum index input open checksum input ( string name , io context context ) throws io exception { return new buffered checksum index input ( open input ( name , context ) ) ; }
public static boolean is affected by ecm ( entity ae , coords a , coords b ) { return compute ecm . is affected by ecm ( ae , a , b , null ) ; }
protected void compare subscription restriction ( node tp node , boolean subscription restriction ) { assert not null ( tp node ) ; assert equals ( string . value of ( subscription restriction ) , tp node . get attributes ( ) . get named item ( str_ ) . get node value ( ) ) ; }
public static void show assignment ( frame frame , int window no , string value ) { info info = new info assignment ( frame , bool_ , window no , num_ , value , bool_ , bool_ , str_ ) ; a env . show center window ( frame , info ) ; }
protected void maybe fire bounds invalidated ( rectangle invalidated area ) { drawing d = get drawing ( ) ; rectangle 2 d . double canvas bounds = new rectangle 2 d . double ( num_ , num_ , num_ , num_ ) ; if ( d . get ( canva s_ width ) != null ) { canvas bounds . width += d . get ( canva s_ width ) ; } if ( d . get ( canva s_ height ) != null ) { canvas bounds . height += d . get ( canva s_ height ) ; } if ( ! canvas bounds . contains ( invalidated area ) ) { fire bounds invalidated ( invalidated area ) ; } }
private void open room activity ( context context ) { hash map < string , object > params = new hash map < > ( ) ; params . put ( vector room activity . extr a_ matri x_ id , m session . get my user id ( ) ) ; params . put ( vector room activity . extr a_ roo m_ id , m parameters . get ( ulin k_ roo m_ i d_ key ) ) ; if ( m parameters . contains key ( ulin k_ even t_ i d_ key ) ) { params . put ( vector room activity . extr a_ even t_ id , m parameters . get ( ulin k_ even t_ i d_ key ) ) ; } intent intent = new intent ( context , vector home activity . class ) ; intent . set flags ( intent . fla g_ activit y_ clea r_ top | intent . fla g_ activit y_ singl e_ top | intent . fla g_ activit y_ ne w_ task ) ; intent . put extra ( vector home activity . extr a_ jum p_ t o_ roo m_ params , params ) ; context . start activity ( intent ) ; }
private byte [ ] b ( int ... a ) { byte [ ] ret = new byte [ a . length ] ; for ( int i = num_ ; i < a . length ; i ++ ) ret [ i ] = ( byte ) a [ i ] ; return ret ; }
private boolean rollback failed transactions ( table reference table ref , map < cell , long > keys to delete , map < long , long > commit timestamps , transaction service transaction service ) { for ( long start ts : sets . new hash set ( keys to delete . values ( ) ) ) { if ( commit timestamps . get ( start ts ) == null ) { log . warn ( str_ + start ts ) ; if ( ! rollback other transaction ( start ts , transaction service ) ) { return bool_ ; } } else { validate . is true ( commit timestamps . get ( start ts ) == transaction constants . faile d_ commi t_ ts ) ; } } try { log . debug ( str_ + table ref + str_ + keys to delete ) ; key value service . delete ( table ref , multimaps . for map ( keys to delete ) ) ; } catch ( runtime exception e ) { string msg = str_ + str_ + str_ + str_ + table ref + str_ + str_ ; if ( log . is debug enabled ( ) ) { msg += str_ + keys to delete ; } log . warn ( msg , e ) ; } return bool_ ; }
public number up supported ( int lower bound , int upper bound ) { super ( lower bound , upper bound ) ; if ( lower bound > upper bound ) { throw new illegal argument exception ( str_ ) ; } else if ( lower bound < num_ ) { throw new illegal argument exception ( str_ ) ; } }
public boolean contains ( event point ep ) { balanced binary node < event point , event point > bn = events . get entry ( ep ) ; return ( bn != null ) ; }
private boolean has thumbnail ( ) { return m item . thumbnails != null && m item . thumbnails . get current page ( ) != null && ! m item . thumbnails . get current page ( ) . is empty ( ) && m item . thumbnails . get current page ( ) . get ( num_ ) . small != null && m item . thumbnails . get current page ( ) . get ( num_ ) . small . url != null ; }
public boolean is inside vehicle ( ) ;
public static void assert contains string ( string to find , file log ) { assert not equals ( str_ + to find + str_ , - num_ , read logfile ( log ) . index of ( to find ) ) ; }
public static int parse int ( fxg node node , string value , string name , int min , int max , int default value ) { int i = parse int ( node , value , name ) ; if ( i >= min && i <= max ) { return i ; } if ( ( ( abstract fxg node ) node ) . is version greater than compiler ( ) ) { fxg log . get logger ( ) . log ( fxg logger . warn , str_ , null , ( ( abstract fxg node ) node ) . get document name ( ) , node . get start line ( ) , node . get start column ( ) , default value , name ) ; return default value ; } else { throw new fxg exception ( node . get start line ( ) , node . get start column ( ) , str_ , value , min , max ) ; } }
public int yylength ( ) ;
public string lexicon lookup ( string text , string pos ) { if ( text == null || text . length ( ) == num_ ) return null ; string [ ] entries ; entries = lexicon lookup primitive ( text , pos ) ; if ( entries . length == num_ ) { text = text . to lower case ( get locale ( ) ) ; entries = lexicon lookup primitive ( text , pos ) ; } if ( entries . length == num_ ) { text = text . substring ( num_ , num_ ) . to upper case ( get locale ( ) ) + text . substring ( num_ ) ; entries = lexicon lookup primitive ( text , pos ) ; } if ( entries . length == num_ ) return null ; return entries [ num_ ] ; }
public char to char value ( object o ) throws page exception ;
public static void test local var declaration speed ( int size ) { system . out . println ( str_ + runtime . get runtime ( ) . free memory ( ) ) ; system . out . println ( str_ + runtime . get runtime ( ) . total memory ( ) ) ; timer timer = new timer ( ) . start ( ) ; double buffer buffer ; int val ; double f ; int j ; for ( int i = num_ ; i < size ; i ++ ) { for ( j = num_ ; j < size ; j ++ ) { buffer = null ; val = num_ ; f = num_ ; } } system . out . println ( timer . stop ( ) ) ; system . out . println ( str_ + runtime . get runtime ( ) . free memory ( ) ) ; system . out . println ( str_ + runtime . get runtime ( ) . total memory ( ) ) ; }
public ansible runner debug ( ) { return debug ( bool_ ) ; }
protected abstract void end document ( pd document pdf ) throws io exception ;
public android authenticator ( context context , account account , string auth token type ) { this ( context , account , auth token type , bool_ ) ; }
protected multi data object . entry create secondary entry ( multi data object obj , file object secondary file ) { return new file entry ( obj , secondary file ) ; }
private boolean is char type ( field field ) { string type = field . get type ( ) . get name ( ) ; return type . equals ( str_ ) || type . ends with ( str_ ) ; }
object ref [ ] mc _enum _resolutions ( string username , string password ) throws remote exception ;
public logging profile ( writer writer , string name ) { super ( name ) ; m writer = writer ; }
public static void populate from buffer ( vector 3f vector , float buffer buf , int index ) { vector . x = buf . get ( index * num_ ) ; vector . y = buf . get ( index * num_ + num_ ) ; vector . z = buf . get ( index * num_ + num_ ) ; }
public void add signer ( private key key , x 5 0 9 certificate cert , string encryption oid , string digest oid , attribute table signed attr , attribute table unsigned attr ) throws illegal argument exception { do add signer ( key , cert , encryption oid , digest oid , new default signed attribute table generator ( signed attr ) , new simple attribute table generator ( unsigned attr ) , signed attr ) ; }
protected void add refs property descriptor ( object object ) { item property descriptors . add ( create item property descriptor ( ( ( composeable adapter factory ) adapter factory ) . get root adapter factory ( ) , get resource locator ( ) , get string ( str_ ) , get string ( str_ , str_ , str_ ) , sexec package . literals . chec k _ _ refs , bool_ , bool_ , bool_ , null , null , null ) ) ; }
public string global info ( ) { return str_ + str_ + str_ ; }
private static int convert entire color linear rg bto srgb ( int rgb ) { int a 1 = ( rgb > > num_ ) & num_ ; int r 1 = ( rgb > > num_ ) & num_ ; int g 1 = ( rgb > > num_ ) & num_ ; int b 1 = rgb & num_ ; int [ ] work tbl = linear rg bto srgb ; r 1 = work tbl [ r 1 ] ; g 1 = work tbl [ g 1 ] ; b 1 = work tbl [ b 1 ] ; return ( ( a 1 << num_ ) | ( r 1 << num_ ) | ( g 1 << num_ ) | b 1 ) ; }
private static string to key ( char variant , string url ) { int index = url . index of ( str_ ) ; return variant + url . substring ( index ) ; }
public void close ( ) throws io exception { reset version ( ) ; if ( input stream != null ) { try { input stream . close ( ) ; } catch ( io exception e ) { } finally { input stream = null ; } } if ( random access file != null ) { try { if ( random access file . get fd ( ) . valid ( ) ) random access file . close ( ) ; } finally { random access file = null ; } } }
public boolean is fully downloaded ( storage data storage data ) { for ( local storage data lsd : downloaded storages ) { if ( object utils . equals ( lsd . get id ( ) , storage data . get id ( ) ) ) { return lsd . is fully downloaded ( ) ; } } return bool_ ; }
public chunk builder generate biomes ( final chunk builder builder , final chunk pos pos ) { final biome grid biomes = new biome grid ( ) ; final int [ ] biome values = builder . get biomes input ( ) [ num_ ] . generate values ( pos . get x ( ) * chunk . chun k_ size , pos . get z ( ) * chunk . chun k_ size , chunk . chun k_ size , chunk . chun k_ size ) ; for ( int i = num_ ; i < biome values . length ; i ++ ) { biomes . raw data ( ) [ i ] = ( byte ) biome values [ i ] ; } builder . set biome grid ( biomes ) ; return builder ; }
public string to string ( ) { return ( to string ( mm , str_ ) ) ; }
public boolean outer class has annotation ( annotation annotation ) { class < ? > outer = type . get declaring class ( ) ; while ( outer != null ) { annotation accessor accessor = new annotation accessor ( supported annotations , outer , ignore annotation failure ) ; if ( accessor . type has ( annotation ) ) { return bool_ ; } outer = outer . get declaring class ( ) ; } return bool_ ; }
q like ( string expression ) ;
public static boolean is status completed ( int status ) { return ( status >= num_ && status < num_ ) || ( status >= num_ && status < num_ ) ; }
public int size ( ) { return mails . size ( ) ; }
public application create application ( string app name ) { requester . response response = api . get requester ( ) . post ( requester . discor d_ ap i_ prefix + str_ , new json object ( ) . put ( str_ , app name ) ) ; if ( response . is ok ( ) ) { return new application ( response . get object ( ) ) ; } throw new runtime exception ( str_ + response . to string ( ) ) ; }
public static byte [ ] bitmap to byte ( bitmap b ) { byte array output stream o = new byte array output stream ( ) ; b . compress ( bitmap . compress format . png , num_ , o ) ; return o . to byte array ( ) ; }
public boolean is anonymous name ( ) ;
public void restart ( draw context dc ) { if ( this . max expiry time == num_ || this . max expiry time < this . min expiry time ) { this . expired = bool_ ; } else { long now = dc != null ? dc . get frame time stamp ( ) : system . current time millis ( ) ; this . expiry time = now + this . min expiry time + rand . next int ( ( int ) ( this . max expiry time - this . min expiry time ) ) ; this . expired = bool_ ; } }
public tungsten properties create simple runtime ( ) throws exception { pipeline config builder builder = new pipeline config builder ( ) ; builder . set property ( replicator conf . servic e_ name , str_ ) ; builder . set role ( str_ ) ; builder . add pipeline ( str_ , str_ , null ) ; builder . add stage ( str_ , str_ , str_ , null ) ; builder . add component ( str_ , str_ , dummy extractor . class ) ; builder . add component ( str_ , str_ , dummy applier . class ) ; return builder . get config ( ) ; }
protected void select clip path ( ) { select clip path ( get print dc ( ) ) ; }
public void reset originals ( ) { m starting start trim = num_ ; m starting end trim = num_ ; m starting rotation = num_ ; set start trim ( num_ ) ; set end trim ( num_ ) ; set rotation ( num_ ) ; }
public abstract long position ( ) throws io exception ;
public module version ( int major , int minor , int micro ) { this ( major , minor , micro , null ) ; }
public custom switch preference ( context context , attribute set attrs ) { super ( context , attrs ) ; }
public abstract rotate handle ( figure owner ) { super ( owner ) ; }
private list < string > remove duplicate ( list < string > possible values , list < string > auto complete values ) { list < string > values = new array list < > ( ) ; if ( possible values != null ) { values . add all ( possible values ) ; } if ( auto complete values != null ) { if ( values . is empty ( ) ) { values . add all ( auto complete values ) ; } for ( string possible value : auto complete values ) { if ( ! values . contains ( possible value ) && ( ! possible value . is empty ( ) || ! possible value . trim ( ) . is empty ( ) ) ) { values . add ( possible value ) ; } } } if ( values . contains ( str_ ) && ! values . contains ( str_ ) ) { values . add ( str_ ) ; } else if ( values . contains ( str_ ) && ! values . contains ( str_ ) ) { values . add ( str_ ) ; } return values ; }
public boolean is empty ( ) { if ( m data == null ) return bool_ ; else { if ( m data . get y val count ( ) <= num_ ) return bool_ ; else return bool_ ; } }
public static v alarm audio ( trigger trigger , attachment sound ) { v alarm alarm = new v alarm ( action . audio ( ) , trigger ) ; if ( sound != null ) { alarm . add attachment ( sound ) ; } return alarm ; }
public int describe contents ( ) { return num_ ; }
public generic dto to entity converter ( final generic dao < t , long > generic dao ) { this . generic dao = generic dao ; }
boolean is applicable ( ) ;
public boolean is rel path ( ) { return _is _rel _path ; }
public extended buffer capabilities ( buffer capabilities caps ) { super ( caps . get front buffer capabilities ( ) , caps . get back buffer capabilities ( ) , caps . get flip contents ( ) ) ; this . vsync = v sync type . vsyn c_ default ; }
float apply as float ( entity instance ) ;
void add candidate starter user ( string process definition id , string user id ) ;
public long file getter paged memory ( file file ) throws io exception { this . file = file ; limit = file . length ( ) / num_ ; system . err . println ( str_ + file ) ; raf = new random access file ( file , str_ ) ; data = new long [ ( int ) ( ( limit > > > pag e_ bits ) ) + num_ ] [ ] ; length 0 = ( int ) ( math . min ( limit , num_ << pag e_ bits ) ) ; }
public void add ( double [ ] preds , double [ ] input ) { if ( m _value index == ( int ) input [ m _mining schema att index ] ) { if ( m _target category == - num_ ) { preds [ num_ ] += m _coefficient ; } else { preds [ m _target category ] += m _coefficient ; } } }
abstract protected t first value ( ) ;
public boolean validate ( ) { if ( complete _expansion _rooms == null ) return bool_ ; for ( expand room freespace complete curr _room : complete _expansion _rooms ) { if ( ! curr _room . validate ( this ) ) return bool_ ; } return bool_ ; }
double process data point ( final double input data point ) ;
void remove configurations changed listener ( configuration changed listener listener ) ;
void iconify ( ) throws io exception ;
byte [ ] to byte array ( ) { return arrays . copy of ( data , pos ) ; }
public necronomicon infusion ritual ( string unlocalized name , int book type , float required energy , item stack item , object sacrifice , object ... offerings ) { this ( unlocalized name , book type , - num_ , required energy , item , sacrifice , offerings ) ; }
public double variance ( ) { throw new runtime exception ( str_ ) ; }
public static string truncate ( string str , int len ) { if ( str == null ) { return null ; } if ( len < num_ ) { return null ; } if ( str . length ( ) > len ) { return str . substring ( num_ , len ) ; } else { return str ; } }
private void truncate uncommitted entries ( ) { if ( type ( ) == copycat server . state . passive ) { context . get log ( ) . truncate ( math . min ( context . get commit index ( ) , context . get log ( ) . last index ( ) ) ) ; } }
public static string on document tree activity result ( context context , int request code , int result code , intent data ) { final string selected path = storage picker . handle ( context , request code , result code , data ) ; if ( selected path != null ) { configuration manager . instance ( ) . set storage path ( selected path ) ; bt engine . ctx . data dir = platforms . data ( ) ; bt engine . ctx . torrents dir = platforms . torrents ( ) ; } return selected path ; }
public void paint scroll pane border ( synth context context , graphics g , int x , int y , int w , int h ) { paint border ( context , g , x , y , w , h , null ) ; }
private void add layer ( drawable layer , int id , int left , int top , int right , int bottom ) { final layer state st = m layer state ; int n = st . m children != null ? st . m children . length : num_ ; int i = st . m num ; if ( i >= n ) { child drawable [ ] nu = new child drawable [ n + num_ ] ; if ( i > num_ ) { system . arraycopy ( st . m children , num_ , nu , num_ , i ) ; } st . m children = nu ; } m layer state . m children changing configurations |= layer . get changing configurations ( ) ; child drawable child drawable = new child drawable ( ) ; st . m children [ i ] = child drawable ; child drawable . m id = id ; child drawable . m drawable = layer ; child drawable . m inset l = left ; child drawable . m inset t = top ; child drawable . m inset r = right ; child drawable . m inset b = bottom ; st . m num ++ ; layer . set callback ( this ) ; }
public void stop ( ) { thread thread to stop ; synchronized ( this ) { thread to stop = thread ; thread = null ; } if ( thread to stop == null ) { throw new illegal state exception ( str_ ) ; } thread to stop . interrupt ( ) ; while ( bool_ ) { try { thread to stop . join ( ) ; return ; } catch ( interrupted exception ignored ) { } } }
public static string convert method signature ( string class name , string method name , string method sig ) { return convert method signature ( class name , method name , method sig , str_ ) ; }
private token peek next ( ) { return current token ; }
public boolean do send heart beat ( license info ext license info ) throws parse exception { if ( license info == null ) { return bool_ ; } string last heartbeat date = license info . get last heartbeat event date ( ) ; if ( last heartbeat date == null || last heartbeat date . is empty ( ) || last heartbeat date . equals ( call home constants . valu e_ no t_ set ) ) { _log . info ( str_ ) ; return bool_ ; } _log . info ( str_ , last heartbeat date ) ; simple date format stored date = new simple date format ( serializ e_ dat e_ format ) ; date zk date = stored date . parse ( last heartbeat date ) ; date today = calendar . get instance ( ) . get time ( ) ; int days = days . days between ( new date time ( zk date ) , new date time ( today ) ) . get days ( ) ; if ( days > ( call home constants . heartbear t_ even t_ threshold - num_ ) ) { _log . info ( str_ , days ) ; return bool_ ; } _log . info ( str_ , days , ( call home constants . heartbear t_ even t_ threshold - days ) ) ; return bool_ ; }
builder reencode for uri ( ) { for ( int i = num_ , size = encoded path segments . size ( ) ; i < size ; i ++ ) { string path segment = encoded path segments . get ( i ) ; encoded path segments . set ( i , canonicalize ( path segment , pat h_ segmen t_ encod e_ se t_ uri , bool_ , bool_ , bool_ ) ) ; } if ( encoded query names and values != null ) { for ( int i = num_ , size = encoded query names and values . size ( ) ; i < size ; i ++ ) { string component = encoded query names and values . get ( i ) ; if ( component != null ) { encoded query names and values . set ( i , canonicalize ( component , quer y_ componen t_ encod e_ se t_ uri , bool_ , bool_ , bool_ ) ) ; } } } if ( encoded fragment != null ) { encoded fragment = canonicalize ( encoded fragment , fragmen t_ encod e_ se t_ uri , bool_ , bool_ , bool_ ) ; } return this ; }
public boolean back history ( ) { if ( super . can go back ( ) ) { super . go back ( ) ; return bool_ ; } return bool_ ; }
public abstract void new doc ( ) throws io exception ;
public state switch item provider ( adapter factory adapter factory ) { super ( adapter factory ) ; }
public static list < search result entry > find children of class ( string name ) { list < search result entry > results = new array list < search result entry > ( ) ; for ( class node cn : visualizer window . instance . get nodes ( ) . values ( ) ) { if ( cn . super name . to lower case ( ) . contains ( name . to lower case ( ) ) ) { results . add ( new search result entry ( cn ) ) ; } else { for ( string inter : cn . interfaces ) { if ( inter . to lower case ( ) . contains ( name . to lower case ( ) ) ) { results . add ( new search result entry ( cn ) ) ; break ; } } } } return results ; }
private void after server commit ( tx commit message txcm ) { if ( this . internal after send commit != null ) { this . internal after send commit . run ( ) ; } gem fire cache impl cache = gem fire cache impl . get instance ( ) ; if ( cache == null ) { return ; } cache . get cancel criterion ( ) . check cancel in progress ( null ) ; internal distributed system ds = cache . get distributed system ( ) ; dm dm = ds . get distribution manager ( ) ; txcm . set dm ( dm ) ; txcm . set ack required ( bool_ ) ; txcm . set disable listeners ( bool_ ) ; cache . get tx manager ( ) . set tx state ( null ) ; txcm . hookup regions ( dm ) ; txcm . basic process ( ) ; }
private void internal flush ( next filter next filter , io session session , io buffer buf ) throws exception { io buffer tmp = null ; synchronized ( buf ) { buf . flip ( ) ; tmp = buf . duplicate ( ) ; buf . clear ( ) ; } logger . debug ( str_ , tmp ) ; next filter . filter write ( session , new default write request ( tmp ) ) ; }
public static chest chest ( string name ) { if ( name . equals ( defaul t_ d b_ name ) ) throw new iron exception ( defaul t_ d b_ name + str_ ) ; return get chest ( name ) ; }
public void add anchor ( ) { add anchor ( current point ) ; }
public void on section item clicked ( int section index ) { m sections list view . set item checked ( section index , bool_ ) ; set nav drawer opened ( bool_ ) ; if ( m current section == section index ) { return ; } change section ( section index ) ; m current section = section index ; }
protected int make press color ( ) { int r = ( this . background color > > num_ ) & num_ ; int g = ( this . background color > > num_ ) & num_ ; int b = ( this . background color > > num_ ) & num_ ; return color . argb ( num_ , r , g , b ) ; }
private static boolean add to evaluator ( array deque < filter value set param > remaining parameters , filter handle filter callback , event evaluator event evaluator , array deque < event type index builder index lookupable pair > tree path info , filter service granular lock factory lock factory ) { if ( event evaluator instanceof filter handle set node ) { filter handle set node node = ( filter handle set node ) event evaluator ; add to node ( remaining parameters , filter callback , node , tree path info , lock factory ) ; return bool_ ; } filter param index base next index = ( filter param index base ) event evaluator ; filter value set param parameter = index helper . find parameter ( remaining parameters , next index ) ; if ( parameter != null ) { remaining parameters . remove ( parameter ) ; tree path info . add ( new event type index builder index lookupable pair ( next index , parameter . get filter for value ( ) ) ) ; add to index ( remaining parameters , filter callback , next index , parameter . get filter for value ( ) , tree path info , lock factory ) ; return bool_ ; } return bool_ ; }
private flag ( int bit position ) { if ( bit position < num_ || bit position > num_ ) { throw new illegal argument exception ( bit position + str_ ) ; } this . mask = num_ << bit position ; }
public int add value ( char sequence value ) { return add ( value , bloom , bloom seeds , bloom mask ) ; }
public static nokia item type value of ( byte type id ) { switch ( type id ) { case num_ : return tex t_ is o _ 8 8 5 9 _ 1 ; case num_ : return tex t_ unicode ; case num_ : return ot a_ bitmap ; case num_ : return ringtone ; case num_ : return profil e_ name ; case num_ : return scree n_ saver ; default : return new nokia item type ( type id , string . value of ( type id ) ) ; } }
public void destroy ( ) { super . destroy ( ) ; }
void on sign in failed ( ) ;
public void parse package ( dynamic apk manager dpkg , context context , file apk file ) { if ( is apk file ( apk file ) ) { parse base package ( dpkg , context , apk file ) ; } else if ( apk file . is directory ( ) ) { file [ ] apk files = apk file . list files ( ) ; if ( apk files != null && apk files . length > num_ ) { for ( file file : apk files ) { parse package ( dpkg , context , file ) ; } } } }
public tag decorate ( tag tag ) ;
public void test receive _ unconnected close null ( ) throws exception { assert false ( this . channel 1 . is connected ( ) ) ; this . channel 1 . close ( ) ; assert false ( this . channel 1 . is open ( ) ) ; try { this . channel 1 . receive ( null ) ; fail ( str_ ) ; } catch ( null pointer exception e ) { } }
public boolean intersects frustum ( frustum frustum ) { if ( frustum == null ) { throw new illegal argument exception ( logger . log message ( logger . error , str_ , str_ , str_ ) ) ; } this . end point 1 . set ( this . bottom center ) ; this . end point 2 . set ( this . top center ) ; if ( this . intersects at ( frustum . near ) < num_ ) { return bool_ ; } if ( this . intersects at ( frustum . far ) < num_ ) { return bool_ ; } if ( this . intersects at ( frustum . left ) < num_ ) { return bool_ ; } if ( this . intersects at ( frustum . right ) < num_ ) { return bool_ ; } if ( this . intersects at ( frustum . top ) < num_ ) { return bool_ ; } if ( this . intersects at ( frustum . bottom ) < num_ ) { return bool_ ; } return bool_ ; }
private int check interrupt while waiting ( node node ) { return thread . interrupted ( ) ? ( transfer after cancelled wait ( node ) ? thro w_ ie : reinterrupt ) : num_ ; }
public void visit multi a new array insn ( string desc , int dims ) { if ( mv != null ) { mv . visit multi a new array insn ( desc , dims ) ; } }
public nas port attribute ( int port ) { super ( octet utils . to octets ( attribute type . na s_ port , port ) ) ; this . port = port ; }
public hash map < string , data service _ definition > add data service ( data service _ definition data service definition ) { this . list data service definition . put ( data service definition . get name ( ) , data service definition ) ; return this . list data service definition ; }
private void create loan product entity ( final string minimum days between disbursal and first repayment ) { final string loan product json = new loan product test builder ( ) . with principal ( loan principal amount ) . with number of repayments ( number of repayments ) . withinterest rate per period ( interest rate per period ) . with interest rate frequency type as year ( ) . with minimum days between disbursal and first repayment ( minimum days between disbursal and first repayment ) . build ( null ) ; this . loan product id = this . loan transaction helper . get loan product id ( loan product json ) ; }
public void tear down ( ) { super . tear down ( ) ; }
public static input stream to input stream ( char sequence input , charset encoding ) { return to input stream ( input . to string ( ) , encoding ) ; }
private boolean try to notify reset ( ) { if ( ( m status == pt r_ statu s_ complete || m status == pt r_ statu s_ prepare ) && m ptr indicator . is in start position ( ) ) { if ( m ptr ui handler holder . has handler ( ) ) { m ptr ui handler holder . on ui reset ( this ) ; if ( debug ) { ptr c log . i ( lo g_ tag , str_ ) ; } } m status = pt r_ statu s_ init ; clear flag ( ) ; return bool_ ; } return bool_ ; }
public void make immutable ( ) { if ( is mutable ) { if ( ( status code != null ) && ( status code . is mutable ( ) ) ) { status code . make immutable ( ) ; } is mutable = bool_ ; } }
void write _ulonglong ( long value ) ;
public boolean column ( int nrows , int capacity , boolean default value ) { super ( boolean . class , new boolean ( default value ) ) ; if ( capacity < nrows ) { throw new illegal argument exception ( str_ ) ; } m _bits = new bit set ( capacity ) ; m _bits . set ( num_ , capacity , default value ) ; m _size = nrows ; }
public chronology with zone ( date time zone zone ) { if ( zone == null ) { zone = date time zone . get default ( ) ; } if ( zone == get zone ( ) ) { return this ; } return get instance ( zone ) ; }
private void check write permission ( ) throws sernet . gs . service . security exception { boolean is write permission = get rights server handler ( ) . is enabled ( get auth service ( ) . get username ( ) , action right i ds . editprofile ) ; if ( ! is write permission ) { throw new security exception ( str_ + get auth service ( ) . get username ( ) + str_ ) ; } }
public list < string > sort fields ( ) { return sort fields ; }
public static void add gzip header ( final http servlet response response ) { response . set header ( str_ , str_ ) ; }
public static _ fields find by name ( string name ) { return by name . get ( name ) ; }
public component configuration configure component ( string parsys , string component name , string config name ) { component configuration data = component configs . get configs ( component name ) . get ( config name . to lower case ( ) ) ; if ( data == null ) { throw new illegal argument exception ( str_ + config name ) ; } get parsys ( parsys ) . configure component ( component name , data ) ; verify parsys rerendered ( parsys ) ; return data ; }
public aa tree file allocator ( long size ) { super ( ) ; this . capacity = size ; add ( new region ( num_ , capacity - num_ ) ) ; }
public authorization identity response control ( string authorization id ) { this ( bool_ , authorization id ) ; }
protected custom tool bar create edit tool bar ( ) { custom tool bar edit tools = new custom tool bar ( ) ; for ( action action : action manager . get network editing actions ( ) ) { edit tools . add ( action ) ; } edit tools . add ( action manager . get zero selected objects action ( ) ) ; edit tools . add ( action manager . get randomize objects action ( ) ) ; return edit tools ; }
public static void unregister rotation policy listener ( context context , rotation policy listener listener ) { context . get content resolver ( ) . unregister content observer ( listener . m observer ) ; }
public static tungsten properties load from json ( string json ) throws json parse exception , json mapping exception , io exception { object mapper mapper = new object mapper ( ) ; tungsten properties tungsten prop = mapper . read value ( json , tungsten properties . class ) ; return tungsten prop ; }
public int create binomial ( final int n , final double p ) { double value = p ; final string builder bits = new string builder ( num_ ) ; double bit value = num_ ; while ( value > num_ ) { if ( value >= bit value ) { bits . append ( str_ ) ; value -= bit value ; } else { bits . append ( str_ ) ; } bit value /= num_ ; } final bit string p bits = new bit string ( bits . to string ( ) ) ; int trials = n ; int total successes = num_ ; int p index = p bits . get length ( ) - num_ ; while ( trials > num_ && p index >= num_ ) { final bit string bs = new bit string ( trials , generator ) ; final int successes = bs . count set bits ( ) ; trials -= successes ; if ( p bits . get bit ( p index ) ) { total successes += successes ; } -- p index ; } return total successes ; }
public void begin display ( display event event ) throws model control exception { if ( is xui admin console enabled ( ) ) { redirect to xui ( get request context ( ) . get request ( ) , xui redirect helper . deploymen t_ servers ) ; } else { super . begin display ( event ) ; } reset button state ( tb l_ serve r_ butto n_ delete ) ; reset button state ( tb l_ serve r_ butto n_ clone ) ; reset button state ( tb l_ sit e_ butto n_ delete ) ; get site names ( ) ; get server names ( ) ; }
public static void close quietly ( closeable closeable ) { if ( closeable != null ) { try { closeable . close ( ) ; } catch ( runtime exception rethrown ) { throw rethrown ; } catch ( exception ignored ) { } } }
void on item focused ( view view , boolean has focus ) ;
public static s m_ syste m_ message st r_ fieldartifac t_ cor e_ casting ( string value 1 , string value 0 ) { return new s m_ syste m_ message ( num_ , value 1 , value 0 ) ; }
public void insert ( key key ) { node x = new node ( ) ; x . key = key ; size ++ ; head = insert ( x , head ) ; if ( min == null ) min = head ; else min = ( greater ( min . key , key ) ) ? head : min ; }
public static remote register ( activation desc desc ) throws unknown group exception , activation exception , remote exception { activation id id = activation group . get system ( ) . register object ( desc ) ; return sun . rmi . server . activatable ref . get stub ( desc , id ) ; }
public void clear read time ( ) { _read time = num_ ; }
private static char [ ] zz unpack c map ( string packed ) { char [ ] map = new char [ num_ ] ; int i = num_ ; int j = num_ ; while ( i < num_ ) { int count = packed . char at ( i ++ ) ; char value = packed . char at ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > num_ ) ; } return map ; }
private void init ( ) { init platform event ( platform event identifier . use r_ logi n_ t o_ service ) ; init platform event ( platform event identifier . use r_ logou t_ fro m_ service ) ; init platform parameter definition ( platform parameter identifiers . concurren t_ user , parameter value type . long ) ; init platform parameter definition ( platform parameter identifiers . name d_ user , parameter value type . long ) ; init platform parameter definition ( platform parameter identifiers . period , parameter value type . duration ) ; }
public void delete local comment ( final i comment comment ) throws com . google . security . zynamics . binnavi . api . disassembly . couldnt delete exception { try { m _edge . delete local comment ( comment ) ; } catch ( final couldnt delete exception exception ) { throw new com . google . security . zynamics . binnavi . api . disassembly . couldnt delete exception ( exception ) ; } }
void read from nbt ( nbt tag compound src ) ;
public svg polyline element bridge ( ) { }
public void write header ( string name ) throws io exception { throw new unsupported operation exception ( get class ( ) . get simple name ( ) ) ; }
public coded exception ( string fault code , throwable cause ) { super ( cause ) ; this . fault code = fault code ; this . fault detail = exception utils . get stack trace ( cause ) ; this . fault string = cause . get message ( ) ; }
public void comment ( char ch [ ] , int start , int length ) throws org . xml . sax . sax exception { if ( ch == null || start < num_ || length >= ( ch . length - start ) || length < num_ ) return ; append ( m _doc . create comment ( new string ( ch , start , length ) ) ) ; }
public static host port all addresses ( int port ) { return new host port ( wildcar d_ address , port ) ; }
private void process batch ( ) { log . info ( str_ , batch start idx , tuples . size ( ) ) ; try { for ( int i = batch start idx ; i < tuples . size ( ) ; i ++ ) { set statement parameters ( tuples . get ( i ) ) ; } for ( map . entry < integer , map < integer , prepared statement > > dd id to agg id to statement entry : dd id to agg id to statement . entry set ( ) ) { for ( map . entry < integer , prepared statement > entry : dd id to agg id to statement entry . get value ( ) . entry set ( ) ) { entry . get value ( ) . execute batch ( ) ; entry . get value ( ) . clear batch ( ) ; } } } catch ( sql exception e ) { throw new runtime exception ( str_ , e ) ; } finally { batch start idx += tuples . size ( ) - batch start idx ; } }
public void run test ( ) throws throwable { document doc ; node list element list ; node name node ; character data child ; string child data ; doc = ( document ) load ( str_ , bool_ ) ; element list = doc . get elements by tag name ( str_ ) ; name node = element list . item ( num_ ) ; child = ( character data ) name node . get first child ( ) ; child . delete data ( num_ , num_ ) ; child data = child . get data ( ) ; assert equals ( str_ , str_ , child data ) ; }
public app test ( string test name ) { super ( test name ) ; }
public t create ( string name , file source , string yaml , collection processing engine engine ) throws baleen exception { if ( has ( name ) ) { throw new baleen exception ( type name + str_ ) ; } logger . info ( str_ , name ) ; t controller = create new controller ( name , yaml , source , engine ) ; controllers . put ( name , controller ) ; metrics . get counter ( str_ ) . inc ( ) ; return controller ; }
private native void _set data segments source ( string [ ] segments , string cache dir ) ;
public void handle tbl resource comparator button delete request ( request invocation event event ) throws model control exception { submit cycle = bool_ ; cc action table table = ( cc action table ) get child ( tb l_ resource ) ; table . restore state data ( ) ; cc action table model tbl model = ( cc action table model ) property sheet model . get model ( tb l_ resource ) ; integer [ ] selected = tbl model . get selected rows ( ) ; if ( ( selected != null ) && ( selected . length > num_ ) ) { ordered set tbl values = ( ordered set ) get page session attribute ( sc policy model . attribut e_ nam e_ resourc e_ comparator ) ; tbl values . remove all ( selected ) ; set page session attribute ( sc policy model . attribut e_ nam e_ resourc e_ comparator , tbl values ) ; populate resource comparator table ( tbl values ) ; } try { map values = get all values ( ) ; set page session attribute ( propert y_ attribute , ( hash map ) values ) ; set page session attribute ( sc policy view bean . pag e_ modified , str_ ) ; } catch ( am console exception e ) { set inline alert message ( cc alert . typ e_ error , str_ , e . get message ( ) ) ; } forward to ( ) ; }
public static com . google . android . vending . licensing . i license result listener as interface ( android . os . i binder obj ) { if ( ( obj == null ) ) { return null ; } android . os . i interface iin = ( android . os . i interface ) obj . query local interface ( descriptor ) ; if ( ( ( iin != null ) && ( iin instanceof com . google . android . vending . licensing . i license result listener ) ) ) { return ( ( com . google . android . vending . licensing . i license result listener ) iin ) ; } return new com . google . android . vending . licensing . i license result listener . stub . proxy ( obj ) ; }
public te x parser ( boolean is partial , string parse string , te x formula formula , boolean firstpass , boolean space ) { this ( is partial , parse string , formula , firstpass ) ; this . ignore white space = space ; }
private void process patch ( final state current ) { try { switch ( current . task state . stage ) { case started : process ip lease documents ( current ) ; break ; case failed : case finished : case cancelled : break ; default : this . fail task ( new illegal state exception ( string . format ( str_ , current . task state . stage ) ) ) ; } } catch ( throwable e ) { fail task ( e ) ; } }
public abstract void advance ( ) ;
map < string , boolean > disable stats ( async context context , string name ) throws unmapped interface exception , unable to create instance exception ;
public final int yystate ( ) { return zz lexical state ; }
public drawer builder with sticky header shadow ( boolean sticky header shadow ) { this . m sticky header shadow = sticky header shadow ; return this ; }
public address ( locale locale ) { m locale = locale ; }
public void test compare to zero zero ( ) { big integer a number = big integer . zero ; big integer b number = big integer . zero ; assert equals ( num_ , a number . compare to ( b number ) ) ; }
protected void sequence _ function type expression ol d_ t anonymous formal parameter list _ type ref with modifiers ( i serialization context context , function type expression semantic object ) { generic sequencer . create sequence ( context , semantic object ) ; }
public void on edge touched ( int edge flags , int pointer id ) { }
private void remove ( thread group g ) { synchronized ( this ) { if ( destroyed ) { return ; } for ( int i = num_ ; i < ngroups ; i ++ ) { if ( groups [ i ] == g ) { ngroups -= num_ ; system . arraycopy ( groups , i + num_ , groups , i , ngroups - i ) ; groups [ ngroups ] = null ; break ; } } if ( nthreads == num_ ) { notify all ( ) ; } if ( daemon && ( nthreads == num_ ) && ( n unstarted threads == num_ ) && ( ngroups == num_ ) ) { destroy ( ) ; } } }
private boolean is alloc call ( byte [ ] name ) { for ( int i = num_ ; i < alloc call methods . length ; i ++ ) { byte [ ] func name = services . get array no barrier ( alloc call methods , i ) ; if ( magic . get array length ( name ) == magic . get array length ( func name ) ) { int j = magic . get array length ( func name ) - num_ ; while ( j >= num_ ) { if ( services . get array no barrier ( name , j ) != services . get array no barrier ( func name , j ) ) break ; j -- ; } if ( j == - num_ ) return bool_ ; } } return bool_ ; }
string process badge border color ( ) ;
public void collection phase ( short phase id , boolean primary ) { vm . assertions . fail ( str_ ) ; }
public static void check weak references ( final weak reference < ? > ... references ) { int i = num_ ; boolean has value = bool_ ; do { has value = bool_ ; if ( i > num_ ) { force gc ( ) ; } for ( weak reference < ? > ref : references ) { if ( ref . get ( ) != null ) { has value = bool_ ; break ; } } } while ( i ++ <= num_ && has value ) ; for ( weak reference < ? > ref : references ) { assert . assert null ( ref . get ( ) ) ; } }
private thread group ( ) { this . name = str_ ; this . parent = null ; }
private int pop ( ) { if ( output stack top > num_ ) { return output stack [ -- output stack top ] ; } else { return stack | - ( -- owner . input stack top ) ; } }
public void remove offer ( offer o , player p ) { item item = o . get item ( ) ; string item name = item . get name ( ) ; o . get slot ( offer . offe r_ ite m_ slo t_ name ) . remove ( item . get id ( ) ) ; p . equip or put on ground ( item ) ; get slot ( offer s_ slo t_ name ) . remove ( o . get id ( ) ) ; get expired offers ( ) . remove ( o ) ; get slot ( expire d_ offer s_ slo t_ name ) . remove ( o . get id ( ) ) ; get zone ( ) . store to database ( ) ; string slot name = null ; string target = str_ ; if ( item . get container slot ( ) != null ) { slot name = item . get container slot ( ) . get name ( ) ; target = str_ ; } new item logger ( ) . add log item event command ( new log simple item event command ( item , p , str_ + target , item name , integer . to string ( get quantity ( item ) ) , str_ , slot name ) ) ; }
public static void request redraw ( ) { message service . post message ( reques t_ redraw , null , null ) ; }
public void test just date ( ) throws exception { path file = get work dir ( ) . resolve ( str_ ) ; perf run data run data = create perf run data ( file , bool_ , just date doc maker . class . get name ( ) ) ; write line doc task wldt = new write line doc task ( run data ) ; wldt . do logic ( ) ; wldt . close ( ) ; try ( buffered reader br = files . new buffered reader ( file , standard charsets . ut f _ 8 ) ) { string line = br . read line ( ) ; assert header line ( line ) ; line = br . read line ( ) ; assert null ( line ) ; } }
protected boolean is label and nonlabel ( j component c 1 , j component c 2 , int position ) { if ( position == swing constants . east || position == swing constants . west ) { boolean c 1 label = ( c 1 instanceof j label ) ; boolean c 2 label = ( c 2 instanceof j label ) ; return ( ( c 1 label || c 2 label ) && ( c 1 label != c 2 label ) ) ; } return bool_ ; }
public boolean is update ( ) { return value update time != null ; }
void on center item click ( int position ) ;
union 6 < first , second , third , fourth , fifth , sixth > third ( third value ) ;
public void receive errorregister vasa certificate ( java . lang . exception e ) { }
public void clear loggers cache ( ) { loggers . clear ( ) ; }
public byte [ ] read bytes ( ) throws sql exception ;
public void commit ( ) throws io exception { if ( has errors ) { complete edit ( this , bool_ ) ; remove ( entry . key ) ; } else { complete edit ( this , bool_ ) ; } }
boolean should cycle ( ) ;
public void receive resultget number of entities ( com . emc . storageos . vasa . vasa service stub . get number of entities response result ) { }
public smooth over scroller ( context context , interpolator interpolator ) { this ( context , interpolator , bool_ ) ; }
public void open sequence ( ) throws ber exception { open sequence ( sequence tag ) ; }
public void close ( ) { flush ( ) ; if ( writer != null ) { try { writer . close ( ) ; } catch ( io exception e ) { debug . error ( file name + str_ , e ) ; } } stop buffer timer ( ) ; }
public static < t > set < t > singleton ( t o ) { return new singleton set < > ( o ) ; }
private static string pool name to metric name ( string pool name ) { return pool name . to lower case ( ) . replace all ( str_ , str_ ) ; }
private void add property ( property prop , int index , map < string , property > keys _map , string key _name ) throws malformed object name exception { if ( keys _map . contains key ( key _name ) ) throw new malformed object name exception ( str_ + key _name + str_ ) ; if ( index == _kp _array . length ) { property [ ] tmp _prop _array = new property [ index + num_ ] ; system . arraycopy ( _kp _array , num_ , tmp _prop _array , num_ , index ) ; _kp _array = tmp _prop _array ; } _kp _array [ index ] = prop ; keys _map . put ( key _name , prop ) ; }
public content stream loader init ( solr params args ) { return this ; }
public final void yybegin ( int new state ) { zz lexical state = new state ; }
list < tuple > filter tuples ( object repository , query spec query spec , list < tuple > tuples ) ;
public static intent forge intent on stack event ( context ctx , contact id contact , intent intent ) { intent . set class ( ctx , one to one talk view . class ) ; intent . add flags ( intent . fla g_ activit y_ clea r_ top | intent . fla g_ activit y_ ne w_ task ) ; intent . put extra ( extr a_ contact , ( parcelable ) contact ) ; return intent ; }
public double specificity ( int negatives ) { return ( ( double ) tn ) / ( negatives ) ; }
private void calc random offset ( int max random offset ) { if ( max random offset != num_ ) { random offset = new random ( ) . next int ( max random offset + num_ ) * num_ ; } }
private point f transform coord touch to bitmap ( float x , float y , boolean clip to bitmap ) { matrix . get values ( m ) ; float orig w = get drawable ( ) . get intrinsic width ( ) ; float orig h = get drawable ( ) . get intrinsic height ( ) ; float trans x = m [ matrix . mtran s_ x ] ; float trans y = m [ matrix . mtran s_ y ] ; float final x = ( ( x - trans x ) * orig w ) / get image width ( ) ; float final y = ( ( y - trans y ) * orig h ) / get image height ( ) ; if ( clip to bitmap ) { final x = math . min ( math . max ( final x , num_ ) , orig w ) ; final y = math . min ( math . max ( final y , num_ ) , orig h ) ; } return new point f ( final x , final y ) ; }
void add undo action ( undo action action ) { int i action = m _undo stack . size ( ) - num_ ; while ( i action > m _n current edit action ) { m _undo stack . remove ( i action -- ) ; } if ( m _n saved pointer > m _n current edit action ) { m _n saved pointer = - num_ ; } m _undo stack . add ( action ) ; m _n current edit action ++ ; }
public sample vcpc fast runner ( graph wrapper graph wrapper , parameters params , knowledge box model knowledge box model ) { super ( graph wrapper . get graph ( ) , params , knowledge box model ) ; }
public payment deregistration exception ( string message ) { super ( message ) ; }
public static void auto boxing ( method visitor mv , class < ? > clz ) { auto boxing ( mv , type . get type ( clz ) ) ; }
public pair e ( ) { char d 2 = ( char ) ( diagonal + num_ ) ; return new pair ( d 2 , row ) ; }
private static void copy string att vals ( instance holder holder , map < string , integer > string att indexes ) { for ( string att name : string att indexes . key set ( ) ) { attribute att = holder . m _instance . dataset ( ) . attribute ( att name ) ; string val = holder . m _instance . string value ( att ) ; if ( holder . m _string vals == null ) { holder . m _string vals = new hash map < string , string > ( ) ; } holder . m _string vals . put ( att name , val ) ; } }
void add missing ( int count ) ;
public boolean is parse status dirty ( org . apache . nutch . storage . parse status value ) { throw new java . lang . unsupported operation exception ( str_ ) ; }
public boolean is connected ( ) { return m _connection ok ; }
public boolean has page size field ( ) { return get page size field ( ) != null ; }
public boolean equals ( object obj ) { return ( obj instanceof abstract i d 3v 2 frame body ) && super . equals ( obj ) ; }
public string [ ] upload _file ( string group _name , string master _filename , string prefix _name , byte [ ] file _buff , string file _ext _name , name value pair [ ] meta _list ) throws io exception , my exception { if ( ( group _name == null || group _name . length ( ) == num_ ) || ( master _filename == null || master _filename . length ( ) == num_ ) || ( prefix _name == null ) ) { throw new my exception ( str_ ) ; } return this . do _upload _file ( proto common . storag e_ prot o_ cm d_ uploa d_ slav e_ file , group _name , master _filename , prefix _name , file _ext _name , file _buff . length , new upload buff ( file _buff , num_ , file _buff . length ) , meta _list ) ; }
string url decode ( string data ) ;
public void remove image sharing ( string sharing id ) { m image sharing cache . remove ( sharing id ) ; }
public object remove ( object old ) { return old new map . remove ( old ) ; }
public static _ fields find by thrift id ( int field id ) { switch ( field id ) { case num_ : return begi n_ i n_ both ; case num_ : return newint ; case num_ : return newbyte ; case num_ : return newshort ; case num_ : return newlong ; case num_ : return newdouble ; case num_ : return newstruct ; case num_ : return newlist ; case num_ : return newset ; case num_ : return newmap ; case num_ : return newstring ; case num_ : return en d_ i n_ both ; default : return null ; } }
static string decode string ( byte buf in ) throws unsupported encoding exception { return new string ( read fixed length content ( in ) , str_ ) ; }
synchronized public void write cv ( int cv , int val , prog listener p ) throws programmer exception { dc cpp message msg = dc cpp message . make write ops mode cv msg ( m address , cv , val ) ; tc . send dc cpp message ( msg , this ) ; prog listener = p ; value = val ; prog state = dc cpp programmer . requestsent ; restart timer ( msg . get timeout ( ) ) ; }
boolean is painting ( ) { container component = this ; while ( component != null ) { if ( component instanceof j component && ( ( j component ) component ) . get flag ( ancesto r_ usin g_ buffer ) ) { return bool_ ; } component = component . get parent ( ) ; } return bool_ ; }
public void remove model listener ( model listener listener ) { listener helper . remove model listener ( listener ) ; }
private static int partition ( int [ ] array , int [ ] index , int l , int r ) { double pivot = array [ index [ ( l + r ) / num_ ] ] ; int help ; while ( l < r ) { while ( ( array [ index [ l ] ] < pivot ) && ( l < r ) ) { l ++ ; } while ( ( array [ index [ r ] ] > pivot ) && ( l < r ) ) { r -- ; } if ( l < r ) { help = index [ l ] ; index [ l ] = index [ r ] ; index [ r ] = help ; l ++ ; r -- ; } } if ( ( l == r ) && ( array [ index [ r ] ] > pivot ) ) { r -- ; } return r ; }
private synchronized void init ( string channel , int mask ) { int sep = channel . index of ( str_ ) ; if ( sep != - num_ ) { string num = channel . substring ( sep + num_ ) ; cname = channel . substring ( num_ , sep ) ; try { numrange = parse num ( num ) ; } catch ( exception e ) { throw new illegal argument exception ( str_ + num ) ; } } else { numrange = new int [ ] { nu m_ min , nu m_ max } ; } }
public void authorize complete ( ) throws twitter exception { access token token = get connection ( ) . get o auth access token ( ) ; set token ( token . get token ( ) ) ; set token secret ( token . get token secret ( ) ) ; }
public static function score query builder function score query ( query builder query builder ) { return new function score query builder ( query builder ) ; }
int size of ( ) ;
public void characters ( string characters ) throws sax exception { final int len = characters . length ( ) ; if ( len > m _chars buff . length ) { m _chars buff = new char [ len * num_ + num_ ] ; } characters . get chars ( num_ , len , m _chars buff , num_ ) ; characters ( m _chars buff , num_ , len ) ; }
public boolean is use alternate endpoints enabled ( ) { return use alternate endpoints ; }
public synchronized pool ( int max pool size ) { super ( max pool size ) ; }
public static s m_ syste m_ message st r_ skil l_ suc c_ switch hpm p_ instant _ a_ t o_ self ( string skillcaster , string skillname ) { return new s m_ syste m_ message ( num_ , skillcaster , skillname ) ; }
public void init $ children ( ) { children = new ast node [ num_ ] ; set child ( new opt ( ) , num_ ) ; set child ( new list ( ) , num_ ) ; set child ( new list ( ) , num_ ) ; }
public void force snap gravity ( int s snap gravity ) { refresh screen size ( ) ; if ( s snap gravity == num_ ) { movable window . unsnap ( ) ; return ; } m snap window holder . update snap ( s snap gravity ) ; calculate snap ( ) ; finish snap ( bool_ ) ; }
public entity migration builder rename named association ( string from , string to ) { migration builder . builder . entity migration rules ( ) . add rule ( new entity migration rule ( migration builder . from version , migration builder . to version , entity types , new rename named association ( from , to ) ) ) ; return this ; }
public static boolean is u id contained in set of open files ( string name , long u id ) { final pair < string , long > pair = new pair < > ( name , u id ) ; integer count = open files . get ( pair ) ; return count != null && count > num_ ; }
private static double meters to degrees longitude ( double distance , double lat ) { return distance / approximat e_ meter s_ pe r_ degre e_ a t_ equator / math . cos ( math . to radians ( lat ) ) ; }
public boolean is password auth enabled ( ) { return this . _password auth enabled ; }
protected list < list < coord > > parse multilinestring ( ) throws io exception { list < list < coord > > list = new array list < list < coord > > ( ) ; string multi contents = read nested contents ( reader ) ; string reader r 2 = new string reader ( multi contents ) ; string line string = read nested contents ( r 2 ) ; while ( line string . length ( ) > num_ ) { list . add ( parse line string ( line string ) ) ; line string = read nested contents ( r 2 ) ; } return list ; }
public void uninstalling ui ( ) ;
public json array remove ( int index ) { values . remove ( index ) ; return this ; }
public void test add listener ( ) { simple listener listener 1 = create mock simple listener ( num_ ) ; simple listener listener 2 = create mock simple listener ( num_ ) ; assert equals ( num_ , adaptor . get num listeners ( ) ) ; adaptor . add listener ( listener 1 ) ; assert equals ( num_ , adaptor . get num listeners ( ) ) ; adaptor . add listener ( listener 2 ) ; assert equals ( num_ , adaptor . get num listeners ( ) ) ; adaptor . add listener ( listener 1 ) ; assert equals ( num_ , adaptor . get num listeners ( ) ) ; list < simple listener > listeners = lists . as list ( adaptor . get listeners ( ) ) ; assert equals ( num_ , listeners . size ( ) ) ; assert true ( listeners . contains ( listener 1 ) ) ; assert true ( listeners . contains ( listener 2 ) ) ; easy mock . verify ( listener 1 , listener 2 ) ; }
public flag register optional ( final char name char , final string name , final class < ? > type , final string usage , final string description ) { return register optional ( name char , name , type , usage , description , null ) ; }
public void add _return ( java . lang . string param ) { if ( local _return == null ) { local _return = new java . lang . string [ ] { } ; } local _return tracker = bool_ ; java . util . list list = org . apache . axis 2 . databinding . utils . converter util . to list ( local _return ) ; list . add ( param ) ; this . local _return = ( java . lang . string [ ] ) list . to array ( new java . lang . string [ list . size ( ) ] ) ; }
public abstract void init ( map < string , object > plugin config ) ;
protected void remove listeners ( ) { window top level windows [ ] = event queue monitor . get top level windows ( ) ; if ( top level windows != null ) { for ( int i = num_ ; i < top level windows . length ; i ++ ) { if ( top level windows [ i ] instanceof accessible ) { remove listeners ( ( accessible ) top level windows [ i ] ) ; } } } }
public enumeration < option > list options ( ) { vector < option > new vector = new vector < option > ( num_ ) ; new vector . add element ( new option ( str_ + str_ , str_ , num_ , str_ ) ) ; new vector . add all ( collections . list ( super . list options ( ) ) ) ; return new vector . elements ( ) ; }
public scrolling swing terminal test ( ) { init components ( ) ; scrolling swing terminal = new scrolling swing terminal ( terminal emulator device configuration . get default ( ) . with line buffer scrollback size ( num_ ) , swing terminal font configuration . get default ( ) , terminal emulator color configuration . get default ( ) ) ; panel terminal container . add ( scrolling swing terminal , border layout . center ) ; pack ( ) ; }
boolean is collapsed ( ) ;
public int correct id column size ( string vendor name , string column name , string data type , int size ) { int i = size ; if ( column name . to upper case ( ) . ends with ( str_ ) ) { int data type id = get data type id ( vendor name , data type ) ; if ( data type id >= numeric && data type id <= number ) i = num_ ; } return i ; }
public void skip hdu ( ) throws fits exception , io exception { if ( this . at eof ) { return ; } else { header hdr = new header ( this . data str ) ; int data size = ( int ) hdr . get data size ( ) ; this . data str . skip all bytes ( data size ) ; if ( this . data str instanceof random access ) { this . last file offset = ( ( random access ) this . data str ) . get file pointer ( ) ; } } }
public void interval removed ( list data event e ) { fire property change ( accessible context . accessibl e_ visibl e_ dat a_ property , boolean . value of ( bool_ ) , boolean . value of ( bool_ ) ) ; }
private static int [ ] [ ] compile derivatives indirection ( final int parameters , final int order , final ds compiler value compiler , final ds compiler derivative compiler ) { if ( parameters == num_ || order == num_ ) { return new int [ num_ ] [ parameters ] ; } final int v size = value compiler . derivatives indirection . length ; final int d size = derivative compiler . derivatives indirection . length ; final int [ ] [ ] derivatives indirection = new int [ v size + d size ] [ parameters ] ; for ( int i = num_ ; i < v size ; ++ i ) { system . arraycopy ( value compiler . derivatives indirection [ i ] , num_ , derivatives indirection [ i ] , num_ , parameters - num_ ) ; } for ( int i = num_ ; i < d size ; ++ i ) { system . arraycopy ( derivative compiler . derivatives indirection [ i ] , num_ , derivatives indirection [ v size + i ] , num_ , parameters ) ; derivatives indirection [ v size + i ] [ parameters - num_ ] ++ ; } return derivatives indirection ; }
private void write attribute ( java . lang . string prefix , java . lang . string namespace , java . lang . string att name , java . lang . string att value , javax . xml . stream . xml stream writer xml writer ) throws javax . xml . stream . xml stream exception { if ( xml writer . get prefix ( namespace ) == null ) { xml writer . write namespace ( prefix , namespace ) ; xml writer . set prefix ( prefix , namespace ) ; } xml writer . write attribute ( namespace , att name , att value ) ; }
static float rotate y ( float p x , float p y , float c x , float c y , float angle in degrees ) { double angle = math . to radians ( angle in degrees ) ; return ( float ) ( math . sin ( angle ) * ( p x - c x ) + math . cos ( angle ) * ( p y - c y ) + c y ) ; }
public attribute set translate html to css ( attribute set html attr set ) { attribute set css attr set = css . translate html to css ( html attr set ) ; mutable attribute set css style set = add style ( null , null ) ; css style set . add attributes ( css attr set ) ; return css style set ; }
public void allocate public ip ( property handler properties ) throws exception ;
private void log slow requests ( long request lifetime , request < ? > request , byte [ ] response contents , status line status line ) { if ( debug || request lifetime > slo w_ reques t_ threshol d_ ms ) { volley log . d ( str_ + str_ , request , request lifetime , response contents != null ? response contents . length : str_ , status line . get status code ( ) , request . get retry policy ( ) . get current retry count ( ) ) ; } }
public static cha call graph v ( boolean include api ) { if ( v == null || v . include api != include api ) { v = new cha call graph ( include api ) ; } return v ; }
boolean contains ( object object ) ;
public static poll tcp manager nio create ( ) { synchronized ( _nio select manager ) { if ( _nio select manager . get ( ) == null ) { poll tcp manager nio select manager = new poll tcp manager nio ( ) ; if ( select manager . start ( ) ) { _nio select manager . set ( select manager ) ; } } return _nio select manager . get ( ) ; } }
public void add native child at ( react shadow node child , int native index ) { assertions . assert condition ( ! m is layout only ) ; assertions . assert condition ( ! child . m is layout only ) ; if ( m native children == null ) { m native children = new array list < > ( num_ ) ; } m native children . add ( native index , child ) ; child . m native parent = this ; }
public object run safely ( catbert . fast stack stack ) throws exception { java . io . file f = get file ( stack ) ; return boolean . value of ( f != null && f . is file ( ) ) ; }
protected void reset frame ( ) { last dispose = dispose ; last rect = new rectangle ( ix , iy , iw , ih ) ; last image = image ; last bg color = bg color ; lct = null ; }
public boolean is done ( ) { return index > arc segs + line segs ; }
public void remove on video size changed listener ( ) { m on video size changed listener = null ; m window . remove callback ( this ) ; m window . detach views ( ) ; }
renew results renew leases ( object [ ] reg i ds , uuid [ ] lease i ds , long [ ] durations ) throws remote exception ;
public bundle capability container test ( string test name , environment test data test data ) throws exception { super ( test name , test data ) ; }
public pdf stream ( ) { this ( null ) ; }
public static boolean use embedded cassandra ( ) { string [ ] contact points = get contact points array ( ) ; return contact points != null && contact points . length == num_ && contact points [ num_ ] . trim ( ) . starts with ( str_ ) ; }
public boolean exists ( ) { return ( flags _field & exists ) != num_ ; }
public rational subtract ( rational second rational ) { big integer n = ( r [ num_ ] . multiply ( second rational . get denominator ( ) ) ) . subtract ( r [ num_ ] . multiply ( second rational . get numerator ( ) ) ) ; big integer d = r [ num_ ] . multiply ( second rational . get denominator ( ) ) ; return new rational ( n , d ) ; }
public int depth ( ) { return super . depth ( ) ; }
public void add coalescing object ( coalesce config object ) { m coalesce objects . add ( object ) ; m theta ranges . add ( object . spiral . calculate theta for radius ( object . end proximity ) ) ; }
public boolean is tenant idp selection enabled ( string tenant name , i idm service context service context ) throws remote exception , idm exception ;
final public boolean starts with ignore case ( final char sequence prefix ) { final int l = prefix . length ( ) ; if ( l > length ( ) ) return bool_ ; int i = l ; final char [ ] a = array ; char c , d ; while ( i -- != num_ ) { c = character . to lower case ( character . to upper case ( a [ i ] ) ) ; d = character . to lower case ( character . to upper case ( prefix . char at ( i ) ) ) ; if ( c != d ) return bool_ ; } return bool_ ; }
private void unset buffers ( ) { buffers = null ; cur buf = null ; cur buf index = num_ ; }
public static s m_ syste m_ message st r_ skil l_ suc c_ fp heal _ interva l_ hea l_ t o_ b ( string skilltarget , int num 0 , string skillname ) { return new s m_ syste m_ message ( num_ , skilltarget , num 0 , skillname ) ; }
private runtime ( ) { }
public static byte [ ] string to byte array ( string input ) { char chars [ ] = input . to char array ( ) ; byte bytes [ ] = new byte [ chars . length ] ; for ( int i = num_ ; i < chars . length ; i ++ ) { bytes [ i ] = ( byte ) chars [ i ] ; } return bytes ; }
collection < ? extends client request result > handle tag request ( final client request tag request ) { final collection < tag value update > transfer tags = new array list < > ( tag request . get ids ( ) . size ( ) ) ; transfer tags . add all ( get tags by id ( tag request ) ) ; transfer tags . add all ( get tags by regex ( tag request ) ) ; if ( log . is debug enabled ( ) ) { log . debug ( str_ + transfer tags . size ( ) + str_ ) ; } return transfer tags ; }
public void test get login config auth method ( ) throws exception { string xml = webap p_ tes t_ header + str_ + str_ + str_ + str_ + str_ ; web xml web xml = web xml io . parse web xml ( new byte array input stream ( xml . get bytes ( str_ ) ) , get entity resolver ( ) ) ; assert equals ( str_ , web xml utils . get login config auth method ( web xml ) ) ; }
public void from axes ( vector 3f u axis , vector 3f v axis , vector 3f w axis ) { m 0 0 = u axis . x ; m 1 0 = u axis . y ; m 2 0 = u axis . z ; m 0 1 = v axis . x ; m 1 1 = v axis . y ; m 2 1 = v axis . z ; m 0 2 = w axis . x ; m 1 2 = w axis . y ; m 2 2 = w axis . z ; }
protected void on client tick ( client tick event ev ) throws exception { }
void end ( ) ;
public static boolean is indirect invocation ( tree . invocation expression that , boolean unwrap ) { return is indirect invocation ( that . get primary ( ) , unwrap ) ; }
boolean validate intensity ( int time ) { if ( time < num_ || time > num_ ) { javax . swing . j option pane . show message dialog ( edit conditional frame , java . text . message format . format ( rbx . get string ( str_ ) , time , rbx . get string ( str_ ) ) , bundle . get message ( str_ ) , javax . swing . j option pane . erro r_ message ) ; return bool_ ; } return bool_ ; }
protected void add rdn attributes if necessary ( dn entry dn , map < attribute type , list < attribute > > user attributes , map < attribute type , list < attribute > > operational attributes ) { for ( ava ava : entry dn . rdn ( ) ) { attribute type t = ava . get attribute type ( ) ; add rdn attributes if necessary ( t . is operational ( ) ? operational attributes : user attributes , ava ) ; } }
void parse ( input stream is ) throws exception ;
public void assign static group ( am static group group ) throws am exception , sso exception ;
void show place holder ( widget place holder ) ;
protected static date date ( string value ) { return v card date format . parse ( value ) ; }
public void remove accessible selection ( int i ) { tree model model = j tree . this . get model ( ) ; if ( model != null ) { if ( i >= num_ && i < get accessible children count ( ) ) { tree path path = get child tree path ( i ) ; j tree . this . remove selection path ( path ) ; } } }
private void test equals ignore case ( locale locale ) { locale default locale = locale . get default ( ) ; locale . set default ( locale ) ; try { for ( string a : lati n_ i_ variants ) { for ( string b : lati n_ i_ variants ) { if ( ! a . equals ignore case ( b ) ) { fail ( str_ + a + str_ + b + str_ + locale ) ; } } } } finally { locale . set default ( default locale ) ; } }
static label node [ ] clone ( final list < label node > labels , final map < label node , label node > map ) { label node [ ] clones = new label node [ labels . size ( ) ] ; for ( int i = num_ ; i < clones . length ; ++ i ) { clones [ i ] = map . get ( labels . get ( i ) ) ; } return clones ; }
public boolean is logged in ( ) { return em client . get instance ( ) . is logged in before ( ) ; }
public frame body ti t3 ( ) { }
public script in java ( final string scriptname ) { super ( scriptname ) ; this . classname = str_ + scriptname . substring ( num_ , scriptname . length ( ) - num_ ) ; }
protected void leave ( inet address inetaddr ) throws io exception { leave ( inetaddr , null ) ; }
public pointer < b > reduce ( cl queue queue , cl buffer < b > input , cl event ... events to wait for ) ;
public static connection factory new failover connection factory ( set < ldapurl > servers , string username , char [ ] password , int heart beat interval , string heart beat time unit , options ldap options ) { list < connection factory > factories = new array list < connection factory > ( servers . size ( ) ) ; for ( ldapurl ldapurl : servers ) { factories . add ( new connection factory ( ldapurl , username , password , heart beat interval , heart beat time unit , ldap options ) ) ; } return load balance factories ( factories ) ; }
static public void assert equals ( string expected , string actual ) { assert equals ( null , expected , actual ) ; }
public final void check ( final predicate < t > property ) { final theory runner < p , t > qc = new theory runner < > ( this . state . get ( ) , this . ps , this . assumptions , conversion , as string ) ; qc . check ( property ) ; }
public boolean is time ( int index ) ;
protected void not _null ( object obj ) throws internal _error { if ( obj == null ) throw new internal _error ( str_ ) ; }
public static void send ( player player , object packet ) { if ( player == null || packet == null ) return ; try { object craft player = reflection utils . package type . craftbukki t_ entity . get class ( str_ ) . cast ( player ) ; object handle = player . get class ( ) . get method ( str_ ) . invoke ( craft player ) ; object player connection = handle . get class ( ) . get field ( str_ ) . get ( handle ) ; player connection . get class ( ) . get method ( str_ , reflection utils . package type . minecraf t_ server . get class ( str_ ) ) . invoke ( player connection , packet ) ; } catch ( exception e ) { e . print stack trace ( ) ; } }
protected void load feature file ( string file name ) throws io exception , mary configuration exception { feature file reader = new feature file reader ( file name ) ; feature definition = feature file reader . get feature definition ( ) ; phone feature index = feature definition . get feature index ( str_ ) ; halfphone lr feature index = feature definition . get feature index ( str_ ) ; }
public parameter push ( string [ ] s ) { return new parameter ( param , s ) ; }
private void reset header height ( ) { int height = m header view . get visiable height ( ) ; if ( height == num_ ) return ; if ( m pull refreshing && height <= m header view height ) { return ; } int final height = num_ ; if ( m pull refreshing && height > m header view height ) { final height = m header view height ; } m scroll back = scrollbac k_ header ; m scroller . start scroll ( num_ , height , num_ , final height - height , scrol l_ duration ) ; invalidate ( ) ; }
public frame body encr ( ) { this . set object value ( data types . ob j_ owner , str_ ) ; this . set object value ( data types . ob j_ metho d_ symbol , ( byte ) num_ ) ; this . set object value ( data types . ob j_ encryptio n_ info , new byte [ num_ ] ) ; }
public boolean is current service invalid now ( ) { return invalidate refs ; }
string to string ( ) ;
public wafer map renderer ( ) { this ( null , null ) ; }
private synchronized void read object ( java . io . object input stream s ) throws io exception , class not found exception { s . default read object ( ) ; init ( get mask ( actions ) ) ; }
protected boolean has compressed thumbnail ( ) { return m thumbnail != null ; }
boolean undoable ( ) ;
public int delete ( ) { query query = model . dialect ( ) . delete ( model ) ; query . use ( db ( ) ) ; return query . execute ( ) ; }
boolean is activity resuming ( ) ;
public void render ( graphics 2 d g , shape shape ) { render ( g , shape , bool_ ) ; }
public static void write int ( byte [ ] data , int offset , int v ) { data [ offset ] = ( byte ) ( num_ & v ) ; data [ offset + num_ ] = ( byte ) ( num_ & ( v > > > num_ ) ) ; data [ offset + num_ ] = ( byte ) ( num_ & ( v > > > num_ ) ) ; data [ offset + num_ ] = ( byte ) ( num_ & ( v > > > num_ ) ) ; }
public void cancel ( ) { }
public void on camera view started ( int width , int height ) ;
public long cguest _time ( ) { return long . parse long ( fields [ num_ ] ) ; }
public vertical layout ( int gap ) { my gap = gap ; my alignment = - num_ ; }
public boolean remove statemachine ( i statemachine statemachine ) { lock . write lock ( ) . lock ( ) ; boolean ret = statemachine list . remove ( statemachine ) ; lock . write lock ( ) . unlock ( ) ; return ret ; }
public < t > t passthrough ( type < t > type ) throws exception { t value = read ( type ) ; write ( type , value ) ; return value ; }
public static string strip file protocol ( string uri string ) { if ( uri string . starts with ( str_ ) ) { uri string = uri string . substring ( num_ ) ; } return uri string ; }
public boolean is bounds enforced ( ) { return bounds enforced ; }
private boolean is message send ( trigger type type ) { for ( trigger type used type : used triggers types ) { if ( type == used type ) { return bool_ ; } } return bool_ ; }
public boolean is empty ( ) { return events . size ( ) == num_ ; }
public boolean is property bool ( string key ) { return get property ( key ) . equals ( str_ ) ; }
public int compare to ( cp _info constant _pool [ ] , cp _info cp , cp _info cp _constant _pool [ ] ) { float d ; if ( tag != cp . tag ) return tag - cp . tag ; constan t_ float _info cu = ( constan t_ float _info ) cp ; d = convert ( ) - cu . convert ( ) ; return ( ( d > num_ ) ? num_ : ( ( d < num_ ) ? - num_ : num_ ) ) ; }
protected void start bridge server ( int port ) throws io exception { start bridge server ( port , - num_ ) ; }
public static gender female ( ) { return new gender ( female ) ; }
public boolean has value ( ) { return get value ( ) != null ; }
public void add ( collection geometries ) { merged line strings = null ; for ( iterator i = geometries . iterator ( ) ; i . has next ( ) ; ) { geometry geometry = ( geometry ) i . next ( ) ; add ( geometry ) ; } }
public string method ( ) { return get connection ( ) . get request method ( ) ; }
public int size ( ) { return q . size ( ) ; }
public boolean load configuration ( final string configuration file ) { try { final input stream is = file utils . load file by name ( configuration file ) ; configuration = ( mqtt spy daemon configuration ) parser . load from input stream ( is ) ; populate defaults ( ) ; return bool_ ; } catch ( xml exception e ) { logger . error ( str_ , e ) ; } catch ( io exception e ) { logger . error ( str_ , e ) ; } return bool_ ; }
public static builder create direct task ( ) { return new builder ( bool_ ) ; }
public void log message ( string message ) { log . p ( message ) ; }
public boolean matches ( string s ) { if ( m _ search string . length ( ) == num_ ) return bool_ ; if ( m _ reg exp ) return m _ pattern . matcher ( s ) . matches ( ) ; else return s . to lower case ( ) . contains ( m _ search string ) ; }
public string to xml string ( ) throws sam l2 exception { return this . to xml string ( bool_ , bool_ ) ; }
public static final index create test index numeric field ( ) { index index = new index ( str_ ) ; index . set table ( db , str_ ) ; array list < index field > fields = new array list < > ( ) ; fields . add ( new index field ( str_ , field data type . integer ) ) ; index . set fields ( fields ) ; index . is unique ( bool_ ) ; return index ; }
public simple problem solving agent ( int max goals to formulate ) { formulate goals indefinitely = bool_ ; this . max goals to formulate = max goals to formulate ; }
boolean validate free ( segment kelp segment ) { return bool_ ; }
private void start jms service ( ) throws exception { broker = new broker service ( ) ; string broker name = str_ ; broker . set broker name ( broker name ) ; broker . get persistence adapter ( ) . set directory ( new file ( str_ + broker . get broker name ( ) + str_ + org . apache . activemq . store . kahadb . kaha db persistence adapter . class . get simple name ( ) ) . get absolute file ( ) ) ; broker . add connector ( str_ ) ; broker . get system usage ( ) . get store usage ( ) . set limit ( num_ * num_ * num_ ) ; broker . get system usage ( ) . get temp usage ( ) . set limit ( num_ * num_ * num_ ) ; broker . set delete all messages on startup ( bool_ ) ; broker . start ( ) ; }
public final boolean is locally consistent ( ) { tb par pos = new tb par ( this . size ( ) ) ; tb par neg = new tb par ( this . size ( ) ) ; for ( int i = num_ ; i < this . size ( ) ; i ++ ) { live expr node ln = this . expr at ( i ) ; if ( ln instanceof ln state ) { pos . add element ( ln ) ; } else if ( ln instanceof ln neg ) { live expr node body = ( ( ln neg ) ln ) . get body ( ) ; if ( body instanceof ln state ) { neg . add element ( body ) ; } } } for ( int i = num_ ; i < pos . size ( ) ; i ++ ) { if ( neg . member ( pos . expr at ( i ) ) ) { return bool_ ; } } return bool_ ; }
private void parse configuration ( ) { if ( current cluster == - num_ ) { logger . debug ( str_ ) ; return ; } }
public byte vector put long ( final long l ) { int length = this . length ; if ( length + num_ > data . length ) { enlarge ( num_ ) ; } byte [ ] data = this . data ; int i = ( int ) ( l > > > num_ ) ; data [ length ++ ] = ( byte ) ( i > > > num_ ) ; data [ length ++ ] = ( byte ) ( i > > > num_ ) ; data [ length ++ ] = ( byte ) ( i > > > num_ ) ; data [ length ++ ] = ( byte ) i ; i = ( int ) l ; data [ length ++ ] = ( byte ) ( i > > > num_ ) ; data [ length ++ ] = ( byte ) ( i > > > num_ ) ; data [ length ++ ] = ( byte ) ( i > > > num_ ) ; data [ length ++ ] = ( byte ) i ; this . length = length ; return this ; }
public int size ( ) { final reentrant lock lock = this . lock ; lock . lock ( ) ; try { return count ; } finally { lock . unlock ( ) ; } }
public min max node ( comparator < integer > selector ) { if ( selector != i comparator . max && selector != i comparator . min ) { throw new illegal argument exception ( str_ ) ; } this . selector = selector ; }
void write ( boolean [ ] buf , int offset , int size ) throws io exception ;
public void remove change listener ( change listener cl ) { listeners . remove ( cl ) ; }
public synchronized object remove ( object key ) { entry tab [ ] = table ; int hash = key . hash code ( ) ; int index = ( hash & num_ ) % tab . length ; for ( entry e = tab [ index ] , prev = null ; e != null ; prev = e , e = e . next ) { if ( ( e . hash == hash ) && e . key . equals ( key ) ) { mod count ++ ; if ( prev != null ) { prev . next = e . next ; } else { tab [ index ] = e . next ; } count -- ; object old value = e . value ; e . value = null ; lru tracker . remove ( e ) ; return old value ; } } return null ; }
public abstract boolean is subtype ( annotation mirror rhs , annotation mirror lhs ) ;
public double kurtosis ( ) { double mean = mean ( ) ; double tmp = num_ ; final int length = length ( ) ; int used = num_ ; for ( index value iv : this ) { tmp += pow ( iv . get value ( ) - mean , num_ ) ; used ++ ; } tmp += pow ( - mean , num_ ) * ( length - used ) ; return tmp / ( pow ( standard deviation ( ) , num_ ) * ( length - num_ ) ) - num_ ; }
public static void send feedback ( context context , string feedback ) { init ( context ) ; if ( text utils . is empty ( feedback ) ) { ln . e ( str_ , str_ ) ; return ; } start log service ( message utils . conten t_ data , get fbjson ( feedback ) ) ; }
public final void append ( string s ) { compound id . append ( s ) ; }
public sax not supported exception ( string message ) { super ( message ) ; }
public void add direct ( street segment street segment , zoned date time from time date zd ) { itinerary itinerary = new itinerary ( street segment , access . size ( ) , from time date zd ) ; access . add ( street segment ) ; this . itinerary . add ( itinerary ) ; }
abstract protected void generate script ( namespace namespace , print stream out ) ;
public void each ( closure closure ) throws sql exception { each row ( get sql ( ) , get parameters ( ) , closure ) ; }
void data received ( string request id , int data length , int encoded data length ) ;
public static void clear notification ( context context , int notification type ) { shared preferences shared preferences = preference manager . get default shared preferences ( context ) ; shared preferences . editor editor = shared preferences . edit ( ) ; switch ( notification type ) { case notificatio n_ action : editor . put int ( context . get string ( r . string . pref _key _notification _action _count ) , num_ ) ; break ; case notificatio n_ rule : editor . put int ( context . get string ( r . string . pref _key _notification _rule _count ) , num_ ) ; break ; case notificatio n_ warn : editor . put int ( context . get string ( r . string . pref _key _notification _warn _count ) , num_ ) ; break ; default : log . w ( tag , new illegal argument exception ( ) ) ; return ; } editor . commit ( ) ; notification manager nm = ( notification manager ) context . get system service ( context . notificatio n_ service ) ; nm . cancel ( notification type ) ; }
private void update progress ( string progress label , int progress ) { if ( my host != null && ( ( progress != previous progress ) || ( ! progress label . equals ( previous progress label ) ) ) ) { my host . update progress ( progress label , progress ) ; } previous progress = progress ; previous progress label = progress label ; }
range ( int from , int to , range next ) { this . from = from ; this . to = to ; this . next = next ; }
public index map ( map < integer , e > map ) { this . array = new object [ map . size ( ) ] ; put all ( map ) ; }
public boolean after sampling ( sampler < ? , ? , ? > sampler , sampled vertex decorator < ? > vertex ) ;
public telnet terminal server ( server socket factory server socket factory , int port , charset charset ) throws io exception { this . server socket = server socket factory . create server socket ( port ) ; this . charset = charset ; }
private void compose lua script ( lua script lua script type ) { log . info ( str_ + lua script type + str_ + logoutput ) ; this . script = read lua script from classpath ( lua script type ) ; this . sha = digest utils . sha 1 hex ( this . script ) ; }
public xml beans ( j component layout , bean context support context , int datatype , int tab ) throws exception { super ( ) ; m _vector index = tab ; m _ bean layout = layout ; m _ bean context support = context ; set data type ( datatype ) ; }
public string timestamp ( ) { float total seconds = this . length ( ) ; float second = total seconds % num_ ; int minute = ( int ) total seconds / num_ % num_ ; int hour = ( int ) ( total seconds / num_ ) ; string builder sb = new string builder ( ) ; if ( hour > num_ ) { sb . append ( hour + str_ ) ; } if ( minute > num_ ) { sb . append ( minute + str_ ) ; } sb . append ( second ) ; return sb . to string ( ) ; }
public string now ( ) { return new date time ( chrono ) . to string ( ) ; }
public void write ( output stream out , drawing drawing , affine transform drawing transform , dimension image size ) throws io exception { write ( out , drawing . get children ( ) , drawing transform , image size ) ; }
protected synchronized proj holder push ( proj holder proj ) { if ( back stack == null ) { back stack = new stack < proj holder > ( ) ; } if ( back stack . size ( ) >= stack size ) { back stack . remove element at ( num_ ) ; } return back stack . push ( proj ) ; }
void on refresh ( ) ;
public boolean is searchable ( final int column ) throws sql exception { return bool_ ; }
public int size ( ) { return nodes . size ( ) ; }
public void receive errorquery catalog ( java . lang . exception e ) { }
public item builder meta ( final i meta builder < ? , ? > builder ) { this . item stack . set item meta ( builder . build ( ) ) ; return this ; }
private void return data ( object ret ) { if ( my host != null ) { my host . return data ( ret ) ; } }
protected boolean allow filter result ( f filter , list < r > dest ) { return bool_ ; }
static int find best sample size ( int actual width , int actual height , int desired width , int desired height ) { double wr = ( double ) actual width / desired width ; double hr = ( double ) actual height / desired height ; double ratio = math . min ( wr , hr ) ; float n = num_ ; while ( ( n * num_ ) <= ratio ) { n *= num_ ; } return ( int ) n ; }
public void on refresh started ( view view , int position , string field ) ;
public void show skip ( ) { skip intro button . set visibility ( view . visible ) ; is skip force hidden = bool_ ; }
public void shutdown ( ) { while ( bool_ ) { long cur = combined state . get ( ) ; long new value = cur | num_ ; if ( combined state . compare and set ( cur , new value ) ) { break ; } } }
public boolean is captured view under ( int x , int y ) { return is view under ( m captured view , x , y ) ; }
public boolean is set put response ( ) { return this . put response != null ; }
public connection factory < connection > create factory ( ) throws invalid configuration exception { connection config config = config factory . get config ( connection type ) ; int timeout = timeout config . get timeout ( connection type ) ; options options = options . default options ( ) . set ( reques t_ timeout , new duration ( ( long ) timeout , time unit . seconds ) ) ; debug ( str_ , config . get ldapur ls ( ) , config . get max connections ( ) , config . get ldap heartbeat ( ) , timeout ) ; final org . forgerock . opendj . ldap . connection factory ldap connection factory = ldap utils . new failover connection pool ( config . get ldapur ls ( ) , config . get bind dn ( ) , config . get bind password ( ) , config . get max connections ( ) , config . get ldap heartbeat ( ) , seconds . to string ( ) , options ) ; return new ldap connection factory ( ldap connection factory ) ; }
public map < string , parameter type > parameter list to map ( list < parameter type > parameter types ) { map < string , parameter type > result = new hash map < > ( ) ; for ( parameter type type : parameter types ) { result . put ( type . get key ( ) , type ) ; } return result ; }
public video get catalog section query ( vk api client client , string section id , string from ) { super ( client , str_ , get catalog section response . class ) ; section id ( section id ) ; from ( from ) ; }
public read write required exception ( ) { super ( str_ ) ; }
public a arch 6 4 frame map ( code cache provider code cache , register config register config , reference map builder factory reference map factory ) { super ( code cache , register config , reference map factory ) ; initial spill size = frame setup size ( ) ; spill size = initial spill size ; }
public boolean end ( ) { return bool_ ; }
public synchronized stun message event send request and wait for response ( request request , transport address server address , transaction id tran id ) throws stun exception , io exception { synchronized ( send lock ) { stun stack . send request ( request , server address , local address , blocking request sender . this , tran id ) ; } ended = bool_ ; while ( ! ended ) { try { wait ( ) ; } catch ( interrupted exception ex ) { logger . log ( level . warning , str_ , ex ) ; } } stun message event res = response event ; response event = null ; return res ; }
public boolean use sasl external ( ) { return sasl external ; }
public string to string ( ) { return ( string ) value ; }
public void insert _string ( string value ) throws org . omg . dynamic any . dyn any package . type mismatch , org . omg . dynamic any . dyn any package . invalid value { org . omg . corba . portable . servant object $so = _servant _preinvoke ( str_ , _ops class ) ; dyn fixed operations $self = ( dyn fixed operations ) $so . servant ; try { $self . insert _string ( value ) ; } finally { _servant _postinvoke ( $so ) ; } }
public int add padding ( byte [ ] in , int in off ) { byte code = ( byte ) ( in . length - in off ) ; while ( in off < in . length ) { in [ in off ] = code ; in off ++ ; } return code ; }
public set < http method > allowed request methods ( ) { ensure enabled ( ) ; return allowed request methods ; }
public path cassandra location ( ) { return conf ( ) . resolve ( location . defaul t_ file ) ; }
private boolean is valid query ( string query ) { if ( query == null ) { return bool_ ; } return quer y_ pattern . matcher ( query ) . matches ( ) ; }
public int [ ] array ( int [ ] array ) { if ( array == null || array . length != count ) { array = new int [ count ] ; } system . arraycopy ( data , num_ , array , num_ , count ) ; return array ; }
public static cc sprite sprite ( string sprite frame name , boolean is frame ) { return new cc sprite ( sprite frame name , is frame ) ; }
public tree ( table nodes , table edges ) { this ( nodes , edges , defaul t_ sourc e_ key , defaul t_ targe t_ key ) ; }
protected void import base types ( final int raw module id , final int module id ) throws sql exception { postgre sql data importer . import base types ( get provider ( ) . get connection ( ) , raw module id , module id ) ; }
public boolean is edge vector ( int edge index ) { string edge value = get feature ( edge index ) . to string ( ) ; return ( ! edge value . equals ( feature definition . nullvalue ) ) ; }
public boolean has message ( string id ) { return this . messages . contains key ( id ) ; }
factory client factory ( ) ;
public static stats create and merge from ( stats model ) { stats r = new stats ( model . name , model . unit , num_ ) ; r . histogram = new int [ model . histogram . length ] ; system . arraycopy ( model . histogram , num_ , r . histogram , num_ , model . histogram . length ) ; r . counts = new long [ model . histogram . length ] ; r . merge ( model ) ; return r ; }
public void node to be removed ( node old node ) { handle node removed ( old node ) ; }
module info resolve from file ( file file , string name , string version , overrides overrides ) ;
protected void _finish token ( ) throws io exception , json parse exception { _token incomplete = bool_ ; int tb = _type byte ; int type = ( ( tb > > num_ ) & num_ ) ; if ( type == num_ ) { _finish number token ( tb ) ; return ; } if ( type <= num_ ) { _decode short ascii value ( num_ + ( tb & num_ ) ) ; return ; } if ( type <= num_ ) { _decode short unicode value ( num_ + ( tb & num_ ) ) ; return ; } if ( type == num_ ) { tb &= num_ ; switch ( tb > > num_ ) { case num_ : _decode long ascii ( ) ; return ; case num_ : _decode long unicode ( ) ; return ; case num_ : _binary value = _read 7 bit binary with length ( ) ; return ; case num_ : _finish raw binary ( ) ; return ; } } _throw internal ( ) ; }
public memory ( boolean use gui ) { m _ use gui = use gui ; }
public static boolean matches range ( byte buffer buffer , int start , byte [ ] pattern ) { for ( int i = num_ ; i < pattern . length ; ++ i ) { if ( pattern [ i ] != buffer . get ( start + i ) ) { return bool_ ; } } return bool_ ; }
public boolean is configurable ( ) { return bool_ ; }
private void init checkbox ( check box preference checkbox , boolean checked , boolean enabled ) { checkbox . set checked ( checked ) ; checkbox . set enabled ( enabled ) ; }
public boolean is edge touched ( int edges ) { final int count = m initial edges touched . length ; for ( int i = num_ ; i < count ; i ++ ) { if ( is edge touched ( edges , i ) ) { return bool_ ; } } return bool_ ; }
public boolean is applicable ( ) { viewer base viewer = ( viewer base ) get viewer ( ) ; return viewer . get graph ( ) . get number of nodes ( ) > num_ ; }
public static void main ( final string [ ] args ) { dom test case . do main ( hc _nodeappendchildgetnodename . class , args ) ; }
public static diphone load binary ( byte buffer bb ) throws io exception { string buffer sb = new string buffer ( ) ; int mid point ; int num samples ; sample [ ] samples ; if ( bb . get int ( ) != magic ) { throw new error ( str_ ) ; } for ( int i = num_ ; i < nam e_ length ; i ++ ) { char c = bb . get char ( ) ; if ( ! character . is whitespace ( c ) ) { sb . append ( c ) ; } } mid point = bb . get int ( ) ; num samples = bb . get int ( ) ; samples = new sample [ num samples ] ; for ( int i = num_ ; i < num samples ; i ++ ) { samples [ i ] = sample . load binary ( bb ) ; } return new diphone ( sb . to string ( ) . trim ( ) , samples , mid point ) ; }
public int index of ( object obj ) { return this . hlist . index of ( obj ) ; }
public boolean add edge ( int u , int v ) ;
public boolean is nav bar tint enabled ( ) { return m nav bar tint enabled ; }
public void error ( org . xml . sax . sax parse exception e ) throws org . xml . sax . sax exception { string formatted msg = e . get message ( ) ; sax source locator locator = get locator ( ) ; error listener handler = m _stylesheet processor . get error listener ( ) ; try { handler . error ( new transformer exception ( formatted msg , locator ) ) ; } catch ( transformer exception te ) { throw new org . xml . sax . sax exception ( te ) ; } }
public static boolean is dec character ( final char c ) { return char matcher . in range ( str_ , str_ ) . apply ( c ) ; }
public abstract boolean is empty ( ) ;
private double distance ( instance first , instance second ) { double diff , distance = num_ ; for ( int i = num_ ; i < m _instances . num attributes ( ) ; i ++ ) { if ( i == m _instances . class index ( ) ) { continue ; } double first val = m _global means or modes [ i ] ; double second val = m _global means or modes [ i ] ; switch ( m _instances . attribute ( i ) . type ( ) ) { case attribute . numeric : if ( ! first . is missing ( i ) ) { first val = first . value ( i ) ; } if ( ! second . is missing ( i ) ) { second val = second . value ( i ) ; } diff = norm ( first val , i ) - norm ( second val , i ) ; break ; default : diff = num_ ; break ; } distance += diff * diff ; } return math . sqrt ( distance ) ; }
private int extract arg name ( int index , string working ) { for ( int i = index ; i < working . length ( ) ; i ++ ) { char c = working . char at ( i ) ; if ( c == str_ ) return i ; if ( c == str_ ) return i ; } return - num_ ; }
private static s2 cell id containing cell ( s2 point pa , s2 point pb ) { s2 cell id a = s2 cell id . from point ( pa ) ; s2 cell id b = s2 cell id . from point ( pb ) ; if ( a . face ( ) != b . face ( ) ) { return s2 cell id . sentinel ( ) ; } while ( ! a . equals ( b ) ) { a = a . parent ( ) ; b = b . parent ( ) ; } return a ; }
public static void write list of longs ( list list , boolean has long i ds , data output out ) throws io exception { if ( list == null ) { out . write int ( - num_ ) ; } else { out . write int ( list . size ( ) ) ; out . write boolean ( has long i ds ) ; for ( iterator it = list . iterator ( ) ; it . has next ( ) ; ) { long l = ( long ) it . next ( ) ; if ( has long i ds ) { out . write long ( l . long value ( ) ) ; } else { out . write int ( ( int ) l . long value ( ) ) ; } } } }
public boolean is notification supported ( ) { return impl . is notification supported ( ) ; }
public delete operation basis ( client connection client connection , long operation id , int message id , list < control > request controls , byte string raw entry dn ) { super ( client connection , operation id , message id , request controls ) ; this . raw entry dn = raw entry dn ; }
public xr tree frag ( expression expr ) { super ( expr ) ; }
public static void remove player ( final string player name ) { final player player = mock stendhal rp rule processor . get ( ) . get player ( player name ) ; if ( player != null ) { remove player ( player ) ; } }
public static rcs status value of ( int value ) { rcs status status = m value to enum . get ( value ) ; if ( status != null ) { return status ; } return n o_ info ; }
public void submit ( ) { if ( edited ) { set value ( new value ( val field . get text ( ) ) ) ; } }
static policy decision append policy decision to policy decision ( policy decision pd 1 , policy decision pd 2 ) throws policy exception { map action decisions = pd 1 . get action decisions ( ) ; iterator action names = action decisions . key set ( ) . iterator ( ) ; while ( action names . has next ( ) ) { string action name = ( string ) action names . next ( ) ; action decision action decision = ( action decision ) action decisions . get ( action name ) ; pd 2 . add action decision ( action decision ) ; } return pd 2 ; }
public int hash code ( k o ) ;
public void put ( string key , entry entry ) ;
public boolean free page ( int page num ) { page p ; try { p = fetch page ( page num ) ; } catch ( page exception e ) { return bool_ ; } return free page ( p ) ; }
public boolean allow insert ( final class < ? > insert type ) { if ( get criterium ( ) instanceof c condition criterium && ! is root ( ) ) { return bool_ ; } if ( insert type == c condition criterium . class ) { return bool_ ; } if ( insert type == c and criterium . class || insert type == c or criterium . class ) { return get child count ( ) > num_ ; } if ( insert type == c not criterium . class ) { return allow not insert ( ) ; } return bool_ ; }
public object run ( uri source , string [ ] args ) throws compilation failed exception , io exception { return run ( new groovy code source ( source ) , args ) ; }
public int format ( ) { return this . format ; }
private static void pixel ( double x , double y ) { offscreen . fill rect ( ( int ) math . round ( scale x ( x ) ) , ( int ) math . round ( scale y ( y ) ) , num_ , num_ ) ; }
public boolean check event ( event . id choice ) { peek event ( ) ; return current event != null && current event . is ( choice ) ; }
public void write file ( path impl path ) throws io exception { stream impl is = path . open read impl ( ) ; try { if ( is != null ) { write stream ( is ) ; } } finally { if ( is != null ) is . close ( ) ; } }
public int add ( g l 1 0 gl , drawable drawable , int min width , int min height ) { return add ( gl , drawable , null , null , min width , min height ) ; }
public static s m_ syste m_ message st r_ ms g_ notif y_ logi n_ guild ( string value 0 ) { return new s m_ syste m_ message ( num_ , value 0 ) ; }
public static page param info detect ( monotonic page infos groups adjacent numbers groups , string doc url ) { parsed url parsed doc url = parsed url . create ( doc url ) ; if ( parsed doc url == null ) return new page param info ( ) ; parsed doc url . set username ( str_ ) ; parsed doc url . set password ( str_ ) ; detection state detection state = new detection state ( ) ; for ( monotonic page infos groups . group group : adjacent numbers groups . get groups ( ) ) { if ( group . m list . size ( ) < num_ ) continue ; detection state state = detect page param for monotonic numbers ( group . m list , group . m delta sign < num_ , parsed doc url , detection state . is empty ( ) ? str_ : detection state . m best page param info . m page pattern ) ; if ( state != null ) detection state . compare and update ( state ) ; } if ( detection state . is empty ( ) ) return new page param info ( ) ; if ( detection state . has multi page patterns ( ) && log util . is loggable ( log util . debu g_ leve l_ pagin g_ info ) ) { log util . log to console ( str_ ) ; } final page param info best page param info = detection state . m best page param info ; best page param info . determine next paging url ( doc url ) ; return best page param info ; }
public sequence element parse ( input stream stream ) throws io exception , sax exception , parser configuration exception { return parse ( stream , str_ ) ; }
public static dog max dog ( dog [ ] dogs ) { dog max dog = dogs [ num_ ] ; for ( dog d : dogs ) { if ( d . size > max dog . size ) { max dog = d ; } } return max dog ; }
public static boolean is p n_ char s_ u ( int code point ) { return is p n_ char s_ base ( code point ) || code point == str_ ; }
private boolean link last ( node < e > node ) { if ( count >= capacity ) return bool_ ; node < e > l = last ; node . prev = l ; last = node ; if ( first == null ) first = node ; else l . next = node ; ++ count ; not empty . signal ( ) ; return bool_ ; }
public byte consume byte ( string name , boolean required ) throws parse exception { return consume byte ( name , required , ( byte ) num_ ) ; }
public static void add failure ( soft assertion error soft assertion error ) { get failures ( ) . add ( soft assertion error ) ; }
private string resolve next page url ( string source offset ) throws el eval exception { string url ; if ( conf . pagination . mode == pagination mode . lin k_ header && next != null ) { url = next . get uri ( ) . to string ( ) ; } else if ( conf . pagination . mode == pagination mode . b y_ offset || conf . pagination . mode == pagination mode . b y_ page ) { if ( source offset != null ) { set page offset ( source offset ) ; } url = resource eval . eval ( resource vars , conf . resource url , string . class ) ; } else { url = resolved url ; } return url ; }
public more like this query builder max doc freq ( int max doc freq ) { this . max doc freq = max doc freq ; return this ; }
protected boolean delete _ accounting ( string acct table ) { return bool_ ; }
public static < r , c , v > immutable table < r , c , v > of ( r row key , c column key , v value ) { return new singleton immutable table < r , c , v > ( row key , column key , value ) ; }
public void remove url ( string url ) { set < string > urls = get cached urls ( ) ; urls . remove ( url ) ; put cached urls ( urls ) ; update notification ( urls ) ; }
public boolean is location ( string str ) { return links . is vertex label ( str ) ; }
private component create title panel ( ) { j panel title panel = new j panel ( new grid bag layout ( ) ) ; grid bag constraints gbc = new grid bag constraints ( ) ; title panel . set opaque ( bool_ ) ; gbc . anchor = grid bag constraints . northwest ; gbc . fill = grid bag constraints . both ; gbc . weightx = num_ ; gbc . gridwidth = grid bag constraints . relative ; localizable message title = inf o_ securit y_ option s_ title . get ( ) ; j label l = ui factory . make j label ( ui factory . icon type . n o_ icon , title , ui factory . text style . title ) ; l . set opaque ( bool_ ) ; title panel . add ( l , gbc ) ; gbc . gridwidth = grid bag constraints . relative ; gbc . anchor = grid bag constraints . northwest ; gbc . weightx = num_ ; gbc . gridwidth = grid bag constraints . remainder ; gbc . insets . left = num_ ; gbc . weightx = num_ ; gbc . gridwidth = grid bag constraints . remainder ; title panel . add ( box . create horizontal glue ( ) , gbc ) ; return title panel ; }
private void game loop ( ) { graphics 2 d g = ( graphics 2 d ) this . canvas . get buffer strategy ( ) . get draw graphics ( ) ; this . transform ( g ) ; this . clear ( g ) ; long time = system . nano time ( ) ; long diff = time - this . last ; this . last = time ; double elapsed time = ( double ) diff / nan o_ t o_ base ; this . render ( g , elapsed time ) ; if ( ! paused ) { this . update ( g , elapsed time ) ; } g . dispose ( ) ; buffer strategy strategy = this . canvas . get buffer strategy ( ) ; if ( ! strategy . contents lost ( ) ) { strategy . show ( ) ; } toolkit . get default toolkit ( ) . sync ( ) ; }
void on progress ( long transferred bytes , long total size ) ;
public static xtiff directory create ( ) { return factory . create directory ( ) ; }
public account set online query ( vk api client client , user actor actor ) { super ( client , str_ , ok response . class ) ; access token ( actor . get access token ( ) ) ; }
public boolean is palindrome ( list node head ) { if ( head == null || head . next == null ) { return bool_ ; } list node slow = head ; list node fast = head ; while ( fast != null && fast . next != null ) { slow = slow . next ; fast = fast . next . next ; } if ( fast != null ) slow = slow . next ; slow = reverse list ( slow ) ; while ( slow != null && head . val == slow . val ) { head = head . next ; slow = slow . next ; } return slow == null ; }
private void goto splash activity ( ) { intent intent = new intent ( ) ; intent . set flags ( intent . fla g_ activit y_ clea r_ top ) ; intent . set class ( this , splash activity . class ) ; intent . set action ( splash activity . actio n_ unchec k_ lock ) ; start activity ( intent ) ; finish ( ) ; }
public static low pass builder low pass builder ( ) { return new low pass builder ( ) ; }
void add first ( e e ) ;
public static paint new background paint ( context context ) { final paint paint = new paint ( ) ; paint . set color ( color . parse color ( defaul t_ backgroun d_ colo r_ id ) ) ; return paint ; }
public void clear view index cache ( ) { view index cache = null ; }
public static boolean test pixel color ( int x , int y , final color color , int attempts , int delay , final robot robot ) { while ( attempts -- > num_ ) { robot . delay ( delay ) ; color screen = robot . get pixel color ( x , y ) ; if ( screen . equals ( color ) ) { return bool_ ; } } return bool_ ; }
protected object item from response with specifier ( network response response , object the specifier ) { object result = null ; if ( response != null && response . data != null && response . data . length > num_ ) { result = response . data ; } return result ; }
public sql data exception ( string reason ) { super ( reason , null , num_ ) ; }
public double calculate replica usable capacity ( int vmthinsizeparentvm , int poolsnapshotcount , int desktoppoolcount , int datastorecount , int storageoverhead , string storagetiering ) { boolean b = bool_ ; if ( storagetiering . equals ignore case ( str_ ) ) { b = bool_ ; } else { b = bool_ ; } double d = num_ ; if ( b ) { d = ( vmthinsizeparentvm * desktoppoolcount * poolsnapshotcount ) / num_ ; } else { d = ( vmthinsizeparentvm * poolsnapshotcount * desktoppoolcount * datastorecount ) / num_ ; } d *= ( num_ + ( storageoverhead / num_ ) ) ; d = ( double ) math . round ( d * num_ ) / num_ ; return d ; }
private static list < file > locate baseline output files ( string dir name , string file extension ) { list < file > output files = new array list < file > ( ) ; final file dir = new file ( dir name ) ; final file [ ] dir content = dir . list files ( ) ; for ( file file : dir content ) { if ( file . is directory ( ) ) { output files . add all ( locate baseline output files ( file . get path ( ) , file extension ) ) ; } else if ( file . get path ( ) . ends with ( str_ + file extension ) ) { boolean dontadd = bool_ ; for ( string ext : analysi s_ result s_ t o_ skip ) { if ( file . get path ( ) . ends with ( ext ) ) { dontadd = bool_ ; } } if ( ! dontadd ) { system . out . println ( str_ + file . get path ( ) ) ; output files . add ( file ) ; } } } return output files ; }
private boolean has been uploaded ( final int id ) { final data helper data helper = new data helper ( this ) ; final session session = data helper . load session ( id ) ; if ( session != null ) { return session . has been exported ( ) ; } else { return bool_ ; } }
void validate ( camera session session ) ;
public exception builder property ( string property ) { body . set property ( property ) ; return this ; }
protected final object clone ( ) { return this ; }
public void error ( string msg , object [ ] args ) throws transformer exception { java . lang . string fmsg = xsl messages . create xpath message ( msg , args ) ; if ( null != m _error handler ) { m _error handler . fatal error ( new transformer exception ( fmsg , m _locator ) ) ; } else { throw new transformer exception ( fmsg , ( sax source locator ) m _locator ) ; } }
private void remove stale range references ( ) { remove stale references ( range reference queue , ranges ) ; }
public void mark ( ) { try { mark byte stack . push ( long . value of ( get stream position ( ) ) ) ; mark bit stack . push ( integer . value of ( get bit offset ( ) ) ) ; } catch ( io exception e ) { } }
public void stop stream ( ) { stream stopped = bool_ ; }
public void test unsized longs count seq ( ) { long adder counter = new long adder ( ) ; splittable random r = new splittable random ( ) ; long size = num_ ; r . longs ( ) . limit ( size ) . for each ( null ) ; assert equals ( size , counter . sum ( ) ) ; }
public change number indexer ( changelog db changelog db , changelog state provider changelog state provider ) { this ( changelog db , changelog state provider , new ecl enabled domain predicate ( ) ) ; }
public boolean dominates ( stmt s , stmt t ) { return ( ( flow set ) get flow before ( t ) ) . contains ( s ) ; }
public word load word ( offset offset ) { if ( vm . verify assertions ) vm . _assert ( vm . no t_ reached ) ; return null ; }
public boolean is mutable ( ) { return is mutable ; }
public final void test is satisfied succeeds ( ) { regex constraint regex constraint = new regex constraint ( regex ) ; assert true ( regex constraint . is satisfied ( str_ ) ) ; }
public void clear ( ) { mod count ++ ; for ( int i = num_ ; i < size ; i ++ ) { element data [ i ] = null ; } size = num_ ; }
default to int function with throwable < t , e > with logging ( ) { return with logging ( logger factory . get logger ( get class ( ) ) ) ; }
public simple date format ( string pattern ) { super ( ) ; this . pattern = pattern ; }
public abstract void stop all client cqs ( ) throws cq exception ;
public byte bm request type ( ) { return this . control setup . get ( num_ ) ; }
private void write q name ( javax . xml . namespace . q name qname , javax . xml . stream . xml stream writer xml writer ) throws javax . xml . stream . xml stream exception { java . lang . string namespace uri = qname . get namespace uri ( ) ; if ( namespace uri != null ) { java . lang . string prefix = xml writer . get prefix ( namespace uri ) ; if ( prefix == null ) { prefix = generate prefix ( namespace uri ) ; xml writer . write namespace ( prefix , namespace uri ) ; xml writer . set prefix ( prefix , namespace uri ) ; } if ( prefix . trim ( ) . length ( ) > num_ ) { xml writer . write characters ( prefix + str_ + org . apache . axis 2 . databinding . utils . converter util . convert to string ( qname ) ) ; } else { xml writer . write characters ( org . apache . axis 2 . databinding . utils . converter util . convert to string ( qname ) ) ; } } else { xml writer . write characters ( org . apache . axis 2 . databinding . utils . converter util . convert to string ( qname ) ) ; } }
void create all sql views ( ) ;
public void on progress ( int bytes written , int total size ) { }
private static identity parse ( final json object json ) { final map < string , string > props = new hash map < > ( json . size ( ) ) ; props . put ( ps twitter . name , json . get string ( ps twitter . name ) ) ; props . put ( str_ , json . get string ( str_ ) ) ; return new identity . simple ( string . format ( str_ , json . get int ( str_ ) ) , props ) ; }
void stop ( ) ;
boolean matches ( string expected ) ;
protected void prepare x legend ( ) { string buffer a = new string buffer ( ) ; int length = ( int ) ( ( ( float ) ( m data . get x vals ( ) . get ( num_ ) . length ( ) + m data . get x vals ( ) . get ( m data . get x val count ( ) - num_ ) . length ( ) ) ) ) ; if ( m data . get x vals ( ) . get ( num_ ) . length ( ) <= num_ ) length *= num_ ; for ( int i = num_ ; i < length ; i ++ ) { a . append ( str_ ) ; } m x legend width = calc text width ( m x legend paint , a . to string ( ) ) ; }
public boolean is expired ( ) { return this . ttl < system . current time millis ( ) ; }
public servlet output stream create output stream ( ) throws io exception { log . debug ( str_ ) ; compression response stream stream = new compression response stream ( orig response , compression level , compression strategy ) ; return stream ; }
public int event to square ( motion event evt ) { int x crd = ( int ) ( evt . get x ( ) ) ; int y crd = ( int ) ( evt . get y ( ) ) ; int sq = - num_ ; if ( sq size > num_ ) { int x = get x sq ( x crd ) ; int y = get y sq ( y crd ) ; if ( ( x >= num_ ) && ( x < num_ ) && ( y >= num_ ) && ( y < num_ ) ) { sq = position . get square ( x , y ) ; } } return sq ; }
public synchronized void trim ( context ctx ) { preferences prefs = new preferences ( ctx ) ; int pref size = prefs . get notification cache size ( ) ; log . d ( debu g_ tag , str_ + pref size + str_ + cache . size ( ) + str_ + size ) ; if ( pref size > this . size ) { this . size = pref size ; } else if ( pref size < this . size ) { notification manager manager = ( notification manager ) ctx . get system service ( context . notificatio n_ service ) ; for ( int i = num_ ; i < ( this . size - pref size ) ; i ++ ) { remove ( manager ) ; } this . size = pref size ; } }
public void append to log ( string log append message ) { profiling timer node current node = current . get ( ) ; if ( current node != null ) { current node . append to log ( log append message ) ; } }
public edge ( node node 1 , node node 2 , endpoint endpoint 1 , endpoint endpoint 2 ) { if ( node 1 == null || node 2 == null ) { throw new null pointer exception ( str_ ) ; } if ( endpoint 1 == null || endpoint 2 == null ) { throw new null pointer exception ( str_ ) ; } if ( pointing left ( endpoint 1 , endpoint 2 ) ) { this . node 1 = node 2 ; this . node 2 = node 1 ; this . endpoint 1 = endpoint 2 ; this . endpoint 2 = endpoint 1 ; } else { this . node 1 = node 1 ; this . node 2 = node 2 ; this . endpoint 1 = endpoint 1 ; this . endpoint 2 = endpoint 2 ; } }
public void add value ( number value , comparable chipx , comparable chipy ) { set value ( value , chipx , chipy ) ; }
protected abstract boolean can proceed ( ) ;
public abstract double compute left neighbor contribution ( int left node degree ) ;
private array list < cluster > define clusters random ( random random ) throws exception { array list < cluster > clusters = new array list < cluster > ( m _ num clusters ) ; double diff inst num = m _ max inst num - m _ min inst num ; double min inst num = m _ min inst num ; double diff radius = m _ max radius - m _ min radius ; cluster cluster ; for ( int i = num_ ; i < m _ num clusters ; i ++ ) { int inst num = ( int ) ( random . next double ( ) * diff inst num + min inst num ) ; double radius = ( random . next double ( ) * diff radius ) + m _ min radius ; cluster = new cluster ( inst num , radius , random ) ; clusters . add ( cluster ) ; } return clusters ; }
public waiting thread ( condition cond , route specific pool pool ) { if ( cond == null ) { throw new illegal argument exception ( str_ ) ; } this . cond = cond ; this . pool = pool ; }
public static string replace ignore case ( string source , string substring , string newsubstring ) { string buffer sb = new string buffer ( source ) ; int idx = - num_ ; int len 1 = substring . length ( ) ; int len 2 = newsubstring . length ( ) ; while ( ( idx = ( sb . to string ( ) . to lower case ( ) . index of ( substring . to lower case ( ) , idx ) ) ) >= num_ ) { sb . replace ( idx , idx + len 1 , newsubstring ) ; idx += len 2 ; } return sb . to string ( ) ; }
public sip header parse ( ) throws parse exception { record route list record route list = new record route list ( ) ; if ( debug ) dbg _enter ( str_ ) ; try { this . lexer . match ( token types . recor d_ route ) ; this . lexer . s por ht ( ) ; this . lexer . match ( str_ ) ; this . lexer . s por ht ( ) ; while ( bool_ ) { record route record route = new record route ( ) ; super . parse ( record route ) ; record route list . add ( record route ) ; this . lexer . s por ht ( ) ; char la = lexer . look ahead ( num_ ) ; if ( la == str_ ) { this . lexer . match ( str_ ) ; this . lexer . s por ht ( ) ; } else if ( la == str_ ) break ; else throw create parse exception ( str_ ) ; } return record route list ; } finally { if ( debug ) dbg _leave ( str_ ) ; } }
protected final void fire children added ( bean context membership event bcme ) { object [ ] copy ; synchronized ( bcm listeners ) { copy = bcm listeners . to array ( ) ; } for ( int i = num_ ; i < copy . length ; i ++ ) ( ( bean context membership listener ) copy [ i ] ) . children added ( bcme ) ; }
void paint icon ( component c , graphics g , int x , int y ) ;
public final long position ( ) { return position ; }
protected void add listeners ( ) { context . add result listener ( this ) ; context . add visualization listener ( this ) ; if ( task . update on any ( visualization task . o n_ data ) ) { context . add data store listener ( this ) ; } }
public synchronized vertex create vertex ( ) { basic vertex vertex = new basic vertex ( ) ; vertex . init ( ) ; add vertex ( vertex ) ; return vertex ; }
public abstract boolean on back pressed ( ) ;
protected void tear down ( ) { }
public pages parse wiki query ( vk api client client , user actor actor , string text ) { super ( client , str_ , string . class ) ; access token ( actor . get access token ( ) ) ; text ( text ) ; }
public static object read object from file ( string name ) throws class not found exception , io exception { byte [ ] data = read data from file ( name ) ; return deserialize ( data ) ; }
private list < proxy > filter unresponsive proxies from list ( list < proxy > proxy list ) { if ( this . failed delay cache . is empty ( ) ) { return proxy list ; } list < proxy > result = new array list < proxy > ( proxy list . size ( ) ) ; for ( proxy proxy : proxy list ) { if ( is direct ( proxy ) || is not unresponsive ( proxy ) ) { result . add ( proxy ) ; } } return result ; }
public request handle put ( string url , request params params , response handler interface response handler ) { return put ( null , url , params , response handler ) ; }
public < t > book write ( string key , t value ) { if ( value == null ) { throw new paper db exception ( str_ ) ; } else { m storage . insert ( key , value ) ; } return this ; }
public final secret key generate secret ( key spec key spec ) throws invalid key spec exception { return spi impl . engine generate secret ( key spec ) ; }
public boolean is timestamp valid ( final long timestamp ) { this . equipment logger . trace ( str_ ) ; boolean is valid = bool_ ; long diff = ( timestamp - system . current time millis ( ) ) ; if ( diff > ma x_ msecond s_ diff ) { is valid = bool_ ; } this . equipment logger . trace ( str_ + is valid ) ; return is valid ; }
public void add listener ( animator listener listener ) { if ( m listeners == null ) { m listeners = new array list < animator listener > ( ) ; } m listeners . add ( listener ) ; }
public static s m_ syste m_ message st r_ ms g_ captch a_ unrestric t_ faile d_ retry ( string value 0 ) { return new s m_ syste m_ message ( num_ , value 0 ) ; }
public static entropy calculator discrete new instance ( int blocksize , int base ) { return new block entropy calculator discrete ( blocksize , base ) ; }
void updated ( client update update , client client updated ) ;
private boolean ensure scroll wheel adjusted ( ) { int delta = m initial scroll offset - m current scroll offset ; if ( delta != num_ ) { if ( math . abs ( delta ) > m selector element size / num_ ) { delta += ( delta > num_ ) ? - m selector element size : m selector element size ; } if ( is horizontal mode ( ) ) { m previous scroller x = num_ ; m adjust scroller . start scroll ( num_ , num_ , delta , num_ , selecto r_ adjustmen t_ duratio n_ millis ) ; } else { m previous scroller y = num_ ; m adjust scroller . start scroll ( num_ , num_ , num_ , delta , selecto r_ adjustmen t_ duratio n_ millis ) ; } invalidate ( ) ; return bool_ ; } return bool_ ; }
public mock account lookup ( ) { this ( unknown account behavior . moc k_ account ) ; }
public divider item decoration ( context context ) { final typed array styled attributes = context . obtain styled attributes ( attrs ) ; m divider = styled attributes . get drawable ( num_ ) ; styled attributes . recycle ( ) ; }
public node list nodelist ( ) throws javax . xml . transform . transformer exception { error ( xpath error resources . e r_ can t_ conver t_ t o_ nodelist , new object [ ] { get type string ( ) } ) ; return null ; }
public void reset ( ) { super . reset ( ) ; h1 = num_ ; h2 = num_ ; h3 = num_ ; h4 = num_ ; h5 = num_ ; h6 = num_ ; h7 = num_ ; h8 = num_ ; }
public void swap children ( int index 1 , int index 2 ) { spatial c 2 = children . get ( index 2 ) ; spatial c 1 = children . remove ( index 1 ) ; children . add ( index 1 , c 2 ) ; children . remove ( index 2 ) ; children . add ( index 2 , c 1 ) ; }
boolean is final ( ) ;
protected integer [ ] extract delta ( i analyzed message summary ms ) { final string raw delta = ms . get statistics ( ) . get string stat ( last seen logging scorer continuous . class . get simple name ( ) + str_ + str_ ) ; if ( raw delta . equals ( str_ ) ) { return null ; } final list < string > string delta = arrays . as list ( string utils . split ( string utils . substring between ( raw delta , str_ , str_ ) , str_ ) ) ; final integer [ ] delta = new integer [ string delta . size ( ) ] ; for ( int i = num_ ; i < string delta . size ( ) ; ++ i ) { delta [ i ] = integer . decode ( string delta . get ( i ) ) ; } return delta ; }
public servlet filter http interaction ( http servlet request http request , http servlet response http response , filter chain chain ) { this . http request = http request ; this . http response = http response ; this . chain = chain ; }
public void add ( final d data ) { this . container . add ( data ) ; if ( data instanceof i sizeable ) { this . byte size += ( ( i sizeable ) data ) . byte size ( ) ; } }
public static void load ( context cx , scriptable this obj , object [ ] args , function fun obj ) { shell shell = ( shell ) get top level scope ( this obj ) ; for ( int i = num_ ; i < args . length ; i ++ ) { shell . process source ( cx , context . to string ( args [ i ] ) ) ; } }
public static void assert contains ( string [ ] string set , string ... values ) { set < string > set = new hash set < string > ( arrays . as list ( string set ) ) ; for ( string value : values ) { scope test helper . assert true ( set . contains ( value ) ) ; } }
public static void return connection ( final connection connection , final statement statement ) throws database connection exception { if ( logger . is debug enabled ( ) ) logger . debug ( info rel con ) ; try { if ( statement != null ) statement . close ( ) ; } catch ( final exception exception ) { logger . error ( err stmt string , exception ) ; throw new database connection exception ( err stmt string , exception ) ; } try { if ( connection != null ) connection . close ( ) ; } catch ( final exception exception ) { logger . fatal ( err conn open string , exception ) ; throw new database connection exception ( err conn close string , exception ) ; } }
public boolean has navigtion bar ( ) { return m has navigation bar ; }
public void merge ( rectangle rect ) { float min x = math . min ( x , rect . x ) ; float max x = math . max ( x + width , rect . x + rect . width ) ; x = min x ; width = max x - min x ; float min y = math . min ( y , rect . y ) ; float max y = math . max ( y + height , rect . y + rect . height ) ; y = min y ; height = max y - min y ; }
public static int bits required ( long max value ) { if ( max value < num_ ) { throw new illegal argument exception ( str_ + max value + str_ ) ; } return unsigned bits required ( max value ) ; }
public static void create table ( sq lite database db , boolean if not exists ) { string constraint = if not exists ? str_ : str_ ; db . exec sql ( str_ + constraint + str_ + str_ + str_ + str_ + str_ ) ; }
public void install ( map < string , collection < dynamic modification > > modifications ) throws cannot compile exception , unmodifiable class exception { install ( modifications , lists . < throwable > new array list ( ) ) ; }
public static void main ( final string [ ] args ) { dom test case . do main ( documentinvalidcharacterexceptioncreateattribute . class , args ) ; }
public com . sun . identity . liberty . ws . common . jaxb . protocol . status detail type create status detail type ( ) throws javax . xml . bind . jaxb exception { return new com . sun . identity . liberty . ws . common . jaxb . protocol . impl . status detail type impl ( ) ; }
public static void main ( string [ ] args ) { if ( args . length >= num_ ) { if ( str_ . equals ( args [ num_ ] ) ) { system . out . print ( get os name ( ) ) ; return ; } else if ( str_ . equals ( args [ num_ ] ) ) { system . out . print ( get arch name ( ) ) ; return ; } } system . out . print ( get native lib folder path for current os ( ) ) ; }
public void delete ( ) throws io exception { close ( ) ; delete contents ( directory ) ; }
public namespace entity create namespace entity ( string namespace cd ) { namespace entity namespace entity = new namespace entity ( ) ; namespace entity . set code ( namespace cd ) ; return namespace dao . save and refresh ( namespace entity ) ; }
protected fetch request ( ) { _parameters . set ( new parameter ( str_ , str_ ) ) ; if ( debug ) _log . debug ( str_ ) ; }
public static void e ( string tag , string msg , object ... args ) { if ( s level > leve l_ error ) { return ; } if ( args . length > num_ ) { msg = string . format ( msg , args ) ; } log . e ( tag , msg ) ; }
string base 6 4 encode ( byte [ ] data ) ;
protected string strip quotes ( string rvalue ) { string buffer buf = new string buffer ( ) ; int rvlen = rvalue . length ( ) ; for ( int i = num_ ; i < rvlen ; i ++ ) { char ch = rvalue . char at ( i ) ; if ( ch != str_ && ch != str_ ) { buf . append ( ch ) ; } } return buf . to string ( ) ; }
public static string exception chain to string ( throwable t ) { string writer sw = new string writer ( ) ; print writer pw = new print writer ( sw , bool_ ) ; while ( t != null ) { t . print stack trace ( pw ) ; t = t . get cause ( ) ; } pw . flush ( ) ; sw . flush ( ) ; return sw . to string ( ) ; }
private void update progress ( string progress label , int progress ) { if ( my host != null && ( ( progress != previous progress ) || ( ! progress label . equals ( previous progress label ) ) ) ) { my host . update progress ( progress label , progress ) ; } previous progress = progress ; previous progress label = progress label ; }
public boolean is two way branch ( ) { return is conditional branch ( ) && ! if cmp 2 . conforms ( this ) && ! ( vm . build for i a 3 2 && org . jikesrvm . compilers . opt . ir . ia 3 2 . mi r_ cond branch 2 . conforms ( this ) ) && ! ( vm . build for power pc && org . jikesrvm . compilers . opt . ir . ppc . mi r_ cond branch 2 . conforms ( this ) ) ; }
public void reload from preference ( ) { if ( m emergency contacts preference category != null ) { m emergency contacts preference category . reload from preference ( ) ; } }
protected loc path iterator ( ) { }
protected string compose filename ems ( symbol code code ) { string scheme = code . get scheme ( ) ; string category = code . get category ( ) ; string function id = code . get function id ( ) ; char status = symbology constants . statu s_ present . equals ignore case ( code . get status ( ) ) ? str_ : str_ ; if ( function id == null ) function id = str_ ; string builder sb = new string builder ( ) ; sb . append ( di r_ ico n_ ems ) . append ( str_ ) . append ( scheme . to lower case ( ) ) . append ( str_ ) . append ( category . to lower case ( ) ) . append ( status ) . append ( function id . to lower case ( ) ) . append ( str_ ) . append ( pat h_ suffix ) ; return sb . to string ( ) ; }
public boolean was modified ( ) { return m _was modified ; }
public block index ( int x , int y , int z ) { this . x = x ; this . y = y ; this . z = z ; }
public int process bytes ( byte [ ] in , int in off , int len , byte [ ] out , int out off ) throws data length exception ;
public void read stream ( input stream is ) throws io exception { _row . read stream ( is , _data , num_ , this ) ; }
public boolean has next ( ) throws interrupted exception ;
public invalid path exception ( string input , string reason , int index ) { super ( reason ) ; if ( ( input == null ) || ( reason == null ) ) throw new null pointer exception ( ) ; if ( index < - num_ ) throw new illegal argument exception ( ) ; this . input = input ; this . index = index ; }
public void clear ( ) { for ( node node : get children ( ) ) { if ( node instanceof to many node ) { ( ( to many node ) node ) . refresh ( ) ; } } }
public static set < eval factory node > recursive get child nodes ( eval factory node current node , eval node util factory filter filter ) { set < eval factory node > result = new linked hash set < eval factory node > ( ) ; if ( filter . consider ( current node ) ) { result . add ( current node ) ; } recursive get child nodes ( result , current node , filter ) ; return result ; }
public string format ( date time formatter formatter ) { objects . require non null ( formatter , str_ ) ; return formatter . format ( this ) ; }
public boolean is compute multi info coherence ( ) { return compute multi info coherence ; }
protected void paint origin label ( point 2 d origin pnt , graphics graphics , map bean the map ) { if ( the map != null && origin pnt != null ) { om text text = new om text ( origin pnt . get y ( ) , origin pnt . get x ( ) , get origin label ( ) , om text . justif y_ center ) ; text . set baseline ( om text . baselin e_ bottom ) ; text . put attribute ( om graphic constants . n o_ rotate , boolean . true ) ; prepare label ( text ) ; text . generate ( the map . get rotated projection ( ) ) ; text . render ( graphics ) ; } }
protected view property animator compat animate move impl ( final view holder holder , int from x , int from y , int to x , int to y ) { final view view = holder . item view ; final int delta x = to x - from x ; final int delta y = to y - from y ; view compat . animate ( view ) . cancel ( ) ; if ( delta x != num_ ) { view compat . animate ( view ) . translation x ( num_ ) ; } if ( delta y != num_ ) { view compat . animate ( view ) . translation y ( num_ ) ; } return view compat . animate ( view ) . set interpolator ( null ) . set duration ( get move duration ( ) ) ; }
private void scan variant ( ) { for ( int i = num_ ; i < variant . get param list ( ) . size ( ) && ! is stop ( ) ; i ++ ) { original pair = variant . get param list ( ) . get ( i ) ; if ( ! is to exclude ( original pair ) ) { http message msg = get new msg ( ) ; try { scan ( msg , original pair ) ; } catch ( exception e ) { logger . error ( str_ , e ) ; } } } }
public void fetch album photo ( final activity context , final string album name , final string artist name ) { m first tab . fetch album photo ( context , album name , artist name ) ; }
private boolean change state ( state state ) { if ( _state == state . stopped ) return bool_ ; _state = state ; return bool_ ; }
final int record exceptional completion ( throwable ex ) { int s ; if ( ( s = status ) >= num_ ) { int h = system . identity hash code ( this ) ; final reentrant lock lock = exception table lock ; lock . lock ( ) ; try { expunge stale exceptions ( ) ; exception node [ ] t = exception table ; int i = h & ( t . length - num_ ) ; for ( exception node e = t [ i ] ; ; e = e . next ) { if ( e == null ) { t [ i ] = new exception node ( this , ex , t [ i ] ) ; break ; } if ( e . get ( ) == this ) break ; } } finally { lock . unlock ( ) ; } s = set completion ( exceptional ) ; } return s ; }
public tree path notify entry deleted ( browser node info node info ) { basic node node = node info . get node ( ) ; if ( node == root node ) { throw new illegal argument exception ( str_ ) ; } final tree node parent node = node . get parent ( ) ; if ( parent node != null ) { remove one node ( node ) ; return new tree path ( tree model . get path to root ( parent node ) ) ; } return null ; }
protected explanation ( answer answer , int event id ) { this . answer = answer ; this . event id = event id ; owner = answer . get block representing control dependency of ( this ) ; if ( owner != null ) owner . add explanation ( this ) ; }
private void send self patch ( state s ) { send request ( build self patch operation ( s ) ) ; }
public t dequeue ( ) throws interrupted exception { return dequeue ( num_ ) ; }
private void clear swap ( ) { assert state ( ) == evicted ; assert ! grid query processor . is enabled ( cctx . config ( ) ) : str_ ; try { grid closeable iterator < map . entry < byte [ ] , grid cache swap entry > > it = cctx . swap ( ) . iterator ( id ) ; boolean is loc store = cctx . store ( ) . is local ( ) ; if ( it != null ) { while ( it . has next ( ) ) { map . entry < byte [ ] , grid cache swap entry > entry = it . next ( ) ; byte [ ] key bytes = entry . get key ( ) ; key cache object key = cctx . to cache key object ( key bytes ) ; cctx . swap ( ) . remove ( key , id ) ; if ( is loc store ) cctx . store ( ) . remove ( null , key . value ( cctx . cache object context ( ) , bool_ ) ) ; } } } catch ( ignite checked exception e ) { u . error ( log , str_ + this , e ) ; } }
public static < t > optional < t > find by path ( tree def < t > tree def , t node , list < t > path , function < ? super t , ? > mapper ) { return find by path ( tree def , node , mapper , path , mapper ) ; }
private static boolean check complex derivation ( xs complex type decl derived , xs type definition base , short block ) { if ( derived == base ) return bool_ ; if ( ( derived . f derived by & block ) != num_ ) return bool_ ; xs type definition direct base = derived . f base type ; if ( direct base == base ) return bool_ ; if ( direct base == schema grammar . f any type || direct base == schema grammar . f any simple type ) { return bool_ ; } if ( direct base . get type category ( ) == xs type definition . comple x_ type ) return check complex derivation ( ( xs complex type decl ) direct base , base , block ) ; if ( direct base . get type category ( ) == xs type definition . simpl e_ type ) { if ( base . get type category ( ) == xs type definition . comple x_ type ) { if ( base == schema grammar . f any type ) base = schema grammar . f any simple type ; else return bool_ ; } return check simple derivation ( ( xs simple type ) direct base , ( xs simple type ) base , block ) ; } return bool_ ; }
private void start recovery leader selector ( ) { while ( ! coordinator . get coordinator client ( ) . is connected ( ) ) { log . info ( str_ ) ; try { thread . sleep ( recovery constants . recover y_ connec t_ interval ) ; } catch ( interrupted exception e ) { log . warn ( str_ , e ) ; } } leader selector leader selector = coordinator . get coordinator client ( ) . get leader selector ( recovery constants . recover y_ leade r_ path , new recovery leader selector listener ( ) ) ; leader selector . auto requeue ( ) ; leader selector . start ( ) ; }
public static view drag helper create ( view group for parent , callback cb ) { return new view drag helper ( for parent . get context ( ) , for parent , cb ) ; }
public auth result update link ( account . id to , auth request who ) throws orm exception , account exception , io exception { try ( review db db = schema . open ( ) ) { account external id . key key = id ( who ) ; list < account external id . key > filtered keys by scheme = filter keys by scheme ( key . get scheme ( ) , db . account external ids ( ) . by account ( to ) ) ; if ( ! filtered keys by scheme . is empty ( ) && ( filtered keys by scheme . size ( ) > num_ || ! filtered keys by scheme . contains ( key ) ) ) { db . account external ids ( ) . delete keys ( filtered keys by scheme ) ; } by id cache . evict ( to ) ; return link ( to , who ) ; } }
public void finest ( throwable ex ) ;
public string omega tip text ( ) { return str_ ; }
public void remove items ( int ... identifiers ) { if ( identifiers != null ) { for ( int identifier : identifiers ) { remove item ( identifier ) ; } } }
public int append data ( data source data source , int length , boolean allow end of input ) throws io exception { length = prepare for append ( length ) ; int bytes appended = data source . read ( last allocation . data , last allocation . translate offset ( last allocation offset ) , length ) ; if ( bytes appended == c . resul t_ en d_ o f_ input ) { if ( allow end of input ) { return c . resul t_ en d_ o f_ input ; } throw new eof exception ( ) ; } last allocation offset += bytes appended ; total bytes written += bytes appended ; return bytes appended ; }
public static void main ( string ... a ) throws exception { test base . create caller ( ) . init ( ) . test ( ) ; }
protected writer ( java . lang . object lock ) { this . lock = lock ; }
void remove zoom listener ( zoom listener listener ) ;
public c thread combo box ( ) { set preferred size ( new dimension ( num_ , num_ ) ) ; set renderer ( new ctid box renderer ( ) ) ; }
public drawer builder with saved instance ( bundle saved instance ) { this . m saved instance = saved instance ; return this ; }
public list < uri > refresh connection status for all v plex management servers ( ) { list < uri > active mgmnt servers = new array list < uri > ( ) ; list < storage provider > vplex mnmgt servers = custom query utility . get active storage providers by interface type ( _db client , storage provider . interface type . vplex . name ( ) ) ; for ( storage provider vplex mnmgt server : vplex mnmgt servers ) { try { v plex api client client = get v plex api client ( _vplex api factory , vplex mnmgt server , _db client ) ; client . verify connectivity ( ) ; active mgmnt servers . add ( vplex mnmgt server . get id ( ) ) ; vplex mnmgt server . set connection status ( storage provider . connection status . connected . to string ( ) ) ; } catch ( exception e ) { _log . warn ( str_ , vplex mnmgt server . get ip address ( ) ) ; vplex mnmgt server . set connection status ( storage provider . connection status . notconnected . to string ( ) ) ; } finally { _db client . update object ( vplex mnmgt server ) ; } } return active mgmnt servers ; }
public abstract void locate node ( ) throws active mq exception ;
public message from json ( transport message message ) { if ( message == null ) throw new illegal argument exception ( str_ ) ; return gson . from json ( message . get content ( ) , message . class ) ; }
public void init ( ) { debug . message ( str_ , str_ ) ; set can grab graphic ( bool_ ) ; set state machine ( new rect state machine ( this ) ) ; g points = new grab point [ num_ ] ; }
public vertex type combine vertices ( set < vertex type > vertex set ) ;
public pdf object remove ( pdf name key ) { return map . remove ( key ) ; }
public static boolean is level info ( ) { return level . info . int value ( ) >= s _current level . int value ( ) ; }
public observable < product > retrieve product observable ( string product id ) { io . vertx . rx . java . observable future < product > result handler = io . vertx . rx . java . rx helper . observable future ( ) ; retrieve product ( product id , result handler . to handler ( ) ) ; return result handler ; }
public static boolean is azul jvm ( ) { return is jvm vendor ( azu l_ jv m_ vendo r_ name ) ; }
protected cc animate ( cc animation anim , boolean restore ) { super ( anim . frames ( ) . size ( ) * anim . delay ( ) ) ; restore original frame = restore ; animation = anim ; orig frame = null ; }
public newsfeed save list query no reposts ( boolean value ) { return unsafe param ( str_ , value ) ; }
public string process incoming class name ( string name ) ;
static public int [ ] to int array ( i string [ ] strings ) { int [ ] int array = new int [ strings . length ] ; for ( int i = num_ ; i < strings . length ; i ++ ) { int array [ i ] = strings [ i ] . id ; } return int array ; }
public void done ( ) { buffer = null ; bufline = null ; bufcolumn = null ; }
private void return data ( object ret ) { if ( my host != null ) { my host . return data ( ret ) ; } }
public create index request mapping ( string type , string source ) { if ( mappings . contains key ( type ) ) { throw new illegal state exception ( str_ + type + str_ ) ; } mappings . put ( type , source ) ; return this ; }
public double linear distance ( final double x , final double y , final double z ) { return math . sqrt ( linear distance squared ( x , y , z ) ) ; }
public synchronized void close now ( ) { if ( ! _closed ) { _reference count = num_ ; close data store ( ) ; } }
public speech to text ( ) { super ( servic e_ name ) ; if ( ( get end point ( ) == null ) || get end point ( ) . is empty ( ) ) { set end point ( url ) ; } }
public ntlm authentication ( boolean is proxy , url url , password authentication pw ) { super ( is proxy ? prox y_ authentication : serve r_ authentication , auth scheme . ntlm , url , str_ ) ; init ( pw ) ; }
public string list target features ( target feature computer feature computer , list < element > segments and boundaries ) { string pause symbol = feature computer . get pause symbol ( ) ; list < target > targets = overridable create targets with pauses ( segments and boundaries , pause symbol ) ; string header = feature computer . get all feature processor names and values ( ) ; string builder text = new string builder ( ) ; string builder bin = new string builder ( ) ; for ( target target : targets ) { feature vector features = feature computer . compute feature vector ( target ) ; text . append ( feature computer . to string values ( features ) ) . append ( str_ ) ; bin . append ( features . to string ( ) ) . append ( str_ ) ; } string out = header + str_ + text + str_ + bin ; return out ; }
protected void characters flush ( ) { if ( m _text pending start >= num_ ) { int length = m _chars . size ( ) - m _text pending start ; boolean do strip = bool_ ; if ( get should strip whitespace ( ) ) { do strip = m _chars . is whitespace ( m _text pending start , length ) ; } if ( do strip ) { m _chars . set length ( m _text pending start ) ; } else { if ( length > num_ ) { int ex name = m _expanded name table . get expanded type id ( dtm . tex t_ node ) ; int data index = m _data . size ( ) ; m _previous = add node ( m _coalesced text type , ex name , m _parents . peek ( ) , m _previous , data index , bool_ ) ; m _data . add element ( m _text pending start ) ; m _data . add element ( length ) ; } } m _text pending start = - num_ ; m _text type = m _coalesced text type = dtm . tex t_ node ; } }
void on commit clicked ( ) ;
private void after save ( data support base obj , list < field > supported fields , long id ) { throw if save failed ( id ) ; assign id value ( base obj , get id field ( supported fields ) , id ) ; if ( ! ignore associations ) { update associated table with fk ( base obj ) ; insert intermediate join table value ( base obj , bool_ ) ; } }
public void send message except ( string peer id , byte [ ] message ) ;
public static list < rule > parse referential ( string path ) { ruleset ruleset = delphi rules utils . build rule set from xml ( delphi rules utils . get configuration from file ( path ) ) ; list < rule > rules repository = new array list < rule > ( ) ; for ( delphi rule f rule : ruleset . get rules ( ) ) { rules repository . add ( create repository rule ( f rule ) ) ; } return rules repository ; }
public static boolean is crossing dateline ( double left lon , double right lon , float proj scale ) { return ( ( left lon > right lon ) || ( more math . approximately _equal ( left lon , right lon , num_ ) && proj scale > num_ ) ) ; }
void bake ( ) throws registration error , missing ingredient error ;
void on item long press ( view view , int position ) ;
public static string default nce consist roster filename ( ) { return roster . get default ( ) . get roster location ( ) + nce consist roster file name ; }
private void add hyperlink token ( int start , int end , int token type ) { int so = start + offset shift ; add token ( zz buffer , start , end , token type , so , bool_ ) ; }
public string to string ( ) { return to string ( bool_ ) ; }
public object run safely ( catbert . fast stack stack ) throws exception { ui manager ui mgr = stack . get ui mgr ( ) ; return ( ui mgr == null || ! ui mgr . are core animations enabled ( ) ) ? boolean . false : boolean . true ; }
public static response code value of ( final int value ) { int code class = get code class ( value ) ; int code detail = get code detail ( value ) ; switch ( code class ) { case num_ : return value of success code ( code detail ) ; case num_ : return value of client error code ( code detail ) ; case num_ : return value of server error code ( code detail ) ; default : throw new message format exception ( string . format ( str_ , format code ( code class , code detail ) ) ) ; } }
public string parser ( string str ) { this . str = str ; current position = num_ ; max position = str == null ? num_ : str . length ( ) ; }
shapeless crafting recipe builder add ingredient ( crafting recipe item item ) ;
element creator add undeclared element marker ( ) ;
private native static boolean has static initializer ( class < ? > cl ) ;
private static void rewrite udp pref limit ( int global , int realm ) throws exception { buffered reader fr = new buffered reader ( new file reader ( one kdc . kr b 5 _ conf ) ) ; file writer fw = new file writer ( str_ ) ; while ( bool_ ) { string s = fr . read line ( ) ; if ( s == null ) { break ; } if ( s . starts with ( str_ ) ) { if ( global != - num_ ) { fw . write ( str_ + global + str_ ) ; } } else if ( s . trim ( ) . starts with ( str_ ) ) { if ( realm != - num_ ) { fw . write ( str_ + realm + str_ ) ; } } fw . write ( s + str_ ) ; } fr . close ( ) ; fw . close ( ) ; sun . security . krb 5 . config . refresh ( ) ; }
public static double log 2 ( final double x ) { return math . log ( x ) / num_ ; }
public int find first visible item position ( ) { final view child = find one visible child ( num_ , layout manager . get child count ( ) , bool_ , bool_ ) ; return child == null ? n o_ position : recycler view . get child adapter position ( child ) ; }
public d view cert csr pem ( j dialog parent , string title , x 5 0 9 certificate cert ) throws crypto exception { super ( parent , title , modality type . documen t_ modal ) ; this . cert = cert ; init components ( ) ; }
public void test partitioned oversize ( ) throws exception { cache mode = partitioned ; near enabled = bool_ ; check oversize ( ) ; }
static void append bytes ( string content , mode mode , bit array bits , string encoding ) throws writer exception { switch ( mode ) { case numeric : append numeric bytes ( content , bits ) ; break ; case alphanumeric : append alphanumeric bytes ( content , bits ) ; break ; case byte : append 8 bit bytes ( content , bits , encoding ) ; break ; case kanji : append kanji bytes ( content , bits ) ; break ; default : throw new writer exception ( str_ + mode ) ; } }
enclosing ball < s , p > ball on support ( list < p > support ) ;
public boolean contains node ( node node ) { return session node wrappers . contains ( node ) ; }
public static x content x content ( byte [ ] data ) { return x content ( data , num_ , data . length ) ; }
final void assert open ( ) throws illegal state exception { if ( is closed ( ) ) { throw new illegal state exception ( str_ ) ; } }
static native void future double result ( long env ptr , long fut ptr , double res ) ;
public static field find field ( class < ? > type , string name ) throws no such field exception { if ( name == null ) { throw new illegal argument exception ( str_ ) ; } field field = type . get field ( name ) ; if ( ! modifier . is public ( field . get modifiers ( ) ) ) { throw new no such field exception ( str_ + name + str_ ) ; } type = field . get declaring class ( ) ; if ( ! modifier . is public ( type . get modifiers ( ) ) || ! is package accessible ( type ) ) { throw new no such field exception ( str_ + name + str_ ) ; } return field ; }
public static boolean is binary op conditional sparse safe ( op op 2 op ) { return ( op == op op 2 . greater || op == op op 2 . less || op == op op 2 . notequal || op == op op 2 . equal || op == op op 2 . minus ) ; }
public void toggle truncation ( ) { m is showing truncated text = ! m is showing truncated text ; update max lines ( ) ; }
boolean on send button clicked ( final feedback feedback ) ;
private void write attribute ( java . lang . string prefix , java . lang . string namespace , java . lang . string att name , java . lang . string att value , javax . xml . stream . xml stream writer xml writer ) throws javax . xml . stream . xml stream exception { if ( xml writer . get prefix ( namespace ) == null ) { xml writer . write namespace ( prefix , namespace ) ; xml writer . set prefix ( prefix , namespace ) ; } xml writer . write attribute ( namespace , att name , att value ) ; }
algorithm identifier find ( string dig alg name ) ;
public static service info create ( final string type , final string name , final int port , final int weight , final int priority , final byte [ ] text ) { return new service info impl ( type , name , str_ , port , weight , priority , bool_ , text ) ; }
public void load current artist image ( final image view image view ) { load image ( music utils . get artist name ( ) , music utils . get artist name ( ) , null , - num_ , image view , image type . artist ) ; }
public ignite cache < k , v > with expiry policy ( expiry policy plc ) ;
void list timeseries ( ) throws io exception { list time series response time series list = this . monitoring service . projects ( ) . time series ( ) . list ( this . project resource ) . set filter ( str_ + metric + str_ ) . set page size ( num_ ) . set interval start time ( get start time ( ) ) . set interval end time ( get end time ( ) ) . execute ( ) ; this . output stream . println ( str_ ) ; this . output stream . println ( time series list . to pretty string ( ) ) ; }
final void forbid all volatiles ( register symb ) { restricted register set r = hash . get ( symb ) ; if ( r == null ) { r = new restricted register set ( phys ) ; hash . put ( symb , r ) ; } r . set no volatiles ( ) ; }
public object label add volume label ( string lu object id , string name ) throws exception { return hds api volume manager . add label to object ( lu object id , name ) ; }
public device settings ( ) { uuid = uuid . random uuid ( ) . to string ( ) ; }
public deck merge sort ( ) { return this ; }
rest analyzer ( http config aspect aspect ) { this . aspect = aspect ; }
public void clear ( ) { for ( data source source : data ) { source . remove data listener ( this ) ; } data visible . clear ( ) ; if ( get legend ( ) != null ) { get legend ( ) . clear ( ) ; } data . clear ( ) ; invalidate axis extrema ( ) ; }
public boolean is showing ( ) { return m showing ; }
private boolean match ( string string ) { if ( this . matcher == null ) { return bool_ ; } return this . matcher . match ( string ) ; }
public static extension registry lite new instance ( ) { return new extension registry lite ( ) ; }
private void cmd _match to ( ) { int index = match to . get selected index ( ) ; string selection = ( string ) match to . get model ( ) . get element at ( index ) ; x matched to border . set value ( selection ) ; x matched to table . set row count ( num_ ) ; }
protected synchronized void waiting task ( int exp num ) { m _sub exp queue . push ( new integer ( exp num ) ) ; }
private void update progress ( int progress ) { if ( my host != null && progress != previous progress ) { my host . update progress ( progress ) ; } previous progress = progress ; }
iterator < string > list ( ) throws users repository exception ;
public abstract i model compile ( uri uri , list < gaml compilation error > errors ) ;
public void enable ( ) throws io exception { synchronized ( opt out lock ) { if ( is opt out ( ) ) { configuration . set ( str_ , bool_ ) ; configuration . save ( configuration file ) ; } if ( task == null ) { start ( ) ; } } }
public boolean is bound ( ) { return bound ; }
public abstract void on participant status changed ( string chat id , contact id contact , participant status status ) ;
private boolean check supertypes ( class < ? > cls ) { for ( class < ? > c : known parameterizables ) { if ( c . is assignable from ( cls ) ) { return bool_ ; } } return bool_ ; }
public x 5 0 9 attribute certificate holder ( byte [ ] cert encoding ) throws io exception { this ( parse bytes ( cert encoding ) ) ; }
public static document new document ( ) throws parser configuration exception { document builder factory dbfac = document builder factory . new instance ( ) ; document builder doc builder ; doc builder = dbfac . new document builder ( ) ; return doc builder . new document ( ) ; }
public static void main ( string p _args [ ] ) { new main application ( p _args ) ; }
public boolean is decline counter ( ) { return is ( declinecounter ) ; }
public void jump label ( string label ) throws io exception { printer . println ( indent + label + str_ ) ; }
public boolean is trait additive ( string ns , string tn ) { return bool_ ; }
public static test suite ( ) { final test suite suite = new test suite ( str_ ) ; suite . add test suite ( test data set join . class ) ; return suite ; }
public string int value to string value ( integer int val ) { if ( int val == null ) return null ; final string enum string = enum int to string map . get ( int val ) ; if ( enum string != null ) return enum string ; return defaul t_ value . to string ( ) ; }
private void test session expire ( int nodes ) throws throwable { create servers ( nodes ) ; copycat client client 1 = create client ( ) ; copycat client client 2 = create client ( ) ; client 1 . on event ( str_ , null ) ; client 1 . submit ( new test expire ( ) ) . then run ( null ) ; ( ( default copycat client ) client 2 ) . kill ( ) . then run ( null ) ; await ( duration . of seconds ( num_ ) . to millis ( ) , num_ ) ; }
public account header builder with selection list enabled ( boolean selection list enabled ) { this . m selection list enabled = selection list enabled ; return this ; }
public boolean equals ( bst < e > tree ) { if ( tree . size != size ) return bool_ ; return equals ( root , tree . root ) ; }
private void recycle view ( view view , int index ) { int count = wheel . get view adapter ( ) . get items count ( ) ; if ( ( index < num_ || index >= count ) && ! wheel . is cyclic ( ) ) { empty items = add view ( view , empty items ) ; } else { while ( index < num_ ) { index = count + index ; } index %= count ; items = add view ( view , items ) ; } }
private snapshot index commit snapshot ( snapshot index commit commit ) throws io exception { snapshot holder snapshot holder = snapshots . get ( commit . get generation ( ) ) ; if ( snapshot holder == null ) { snapshot holder = new snapshot holder ( num_ ) ; snapshots . put ( commit . get generation ( ) , snapshot holder ) ; } snapshot holder . counter ++ ; return new one time release snapshot index commit ( this , commit ) ; }
public static final string generate hash ( final string s ) { try { message digest digest = java . security . message digest . get instance ( str_ ) ; digest . update ( s . get bytes ( ) ) ; byte message digest [ ] = digest . digest ( ) ; string buffer hex string = new string buffer ( ) ; for ( int i = num_ ; i < message digest . length ; i ++ ) { string h = integer . to hex string ( num_ & message digest [ i ] ) ; while ( h . length ( ) < num_ ) h = str_ + h ; hex string . append ( h ) ; } return hex string . to string ( ) ; } catch ( no such algorithm exception e ) { e . print stack trace ( ) ; } return str_ ; }
private void migrate cm settings for user ( int user id ) { synchronized ( this ) { if ( loca l_ logv ) log . d ( tag , str_ + user id ) ; int rows migrated = migrate cm settings for table ( user id , cm database helper . cm table names . tabl e_ system , cm settings . system . legac y_ syste m_ settings ) ; if ( loca l_ logv ) log . d ( tag , str_ + rows migrated + str_ ) ; rows migrated = migrate cm settings for table ( user id , cm database helper . cm table names . tabl e_ secure , cm settings . secure . legac y_ secur e_ settings ) ; if ( loca l_ logv ) log . d ( tag , str_ + rows migrated + str_ ) ; rows migrated = migrate cm settings for table ( user id , cm database helper . cm table names . tabl e_ global , cm settings . global . legac y_ globa l_ settings ) ; if ( loca l_ logv ) log . d ( tag , str_ + rows migrated + str_ ) ; } }
public double manhattan distance ( final java . awt . geom . point 2 d p ) { final double dx = math . abs ( ( double ) this . x - p . get x ( ) ) ; final double dy = math . abs ( ( double ) this . y - p . get y ( ) ) ; return dx + dy ; }
protected void calc modulus ( ) { if ( m x axis == null || ! m x axis . is enabled ( ) ) return ; if ( ! m x axis . is axis modulus custom ( ) ) { float [ ] values = new float [ num_ ] ; m view port handler . get matrix touch ( ) . get values ( values ) ; m x axis . m axis label modulus = ( int ) math . ceil ( ( m data . get x val count ( ) * m x axis . m label rotated width ) / ( m view port handler . content width ( ) * values [ matrix . mscal e_ x ] ) ) ; } if ( m log enabled ) log . i ( lo g_ tag , str_ + m x axis . m axis label modulus + str_ + m x axis . m label width + str_ + m x axis . m label rotated width + str_ + m view port handler . content width ( ) ) ; if ( m x axis . m axis label modulus < num_ ) m x axis . m axis label modulus = num_ ; }
public void store session ( user session session ) { sessions . add ( session ) ; }
public page rank ( hypergraph < v , e > graph , function < e , ? extends number > edge _weight , double alpha ) { super ( graph , edge _weight , scoring utils . get uniform root prior ( graph . get vertices ( ) ) , alpha ) ; }
private static int convert search scope ( string search scope str ) { integer scope value i = defaul t_ searc h_ ct l_ scope ; if ( search scope str == null ) { _log . debug ( str_ ) ; } else { scope value i = searc h_ ct l_ scopes . get ( search scope str ) ; if ( scope value i == null ) { _log . debug ( str_ , search scope str ) ; } _log . debug ( str_ , search scope str ) ; } _log . debug ( str_ , scope value i ) ; return scope value i == null ? defaul t_ searc h_ ct l_ scope : scope value i ; }
public boolean put in cache ( ) ;
public int read int ( ) { return read int array ( ) [ num_ ] ; }
protected void append uintvar integer ( long value ) { int i ; long max = shor t_ intege r_ max ; for ( i = num_ ; i < num_ ; i ++ ) { if ( value < max ) { break ; } max = ( max << num_ ) | num_ ; } while ( i > num_ ) { long temp = value > > > ( i * num_ ) ; temp = temp & num_ ; append ( ( int ) ( ( temp | num_ ) & num_ ) ) ; i -- ; } append ( ( int ) ( value & num_ ) ) ; }
public void on remote thumbnail available ( byte [ ] jpeg image ) ;
public string format value ( object value ) { string text ; if ( formatter == null ) { if ( value == null ) { text = str_ ; } else { metadata tools metadata tools = app beans . get ( metadata tools . name ) ; if ( meta property != null ) { text = metadata tools . format ( value , meta property ) ; } else if ( datatype != null ) { text = datatype . format ( value , locale ) ; } else { text = metadata tools . format ( value ) ; } } } else { text = formatter . format ( value ) ; } return text ; }
boolean is label ( operand op ) { if ( op . is branch ( ) ) { return mc offsets . get machine code offset ( op . as branch ( ) . target ) < num_ ; } else { return bool_ ; } }
public final boolean less equals ( protocol version version ) { return is comparable ( version ) && ( compare to version ( version ) <= num_ ) ; }
private boolean contains ( string ids [ ] , int id ) { for ( int i = num_ ; i < ids . length ; i ++ ) { if ( operator . compare ( ids [ i ] , id ) == num_ ) return bool_ ; } return bool_ ; }
i message send file ( file file , string content ) throws io exception , missing permissions exception , rate limit exception , discord exception ;
void start ( transaction manager tx manager ) ;
public void paint ( graphics g ) { graphics 2 d g 2 = ( graphics 2 d ) g ; g 2 . set background ( bg color ) ; g 2 . translate ( playfiel d_ offset , playfiel d_ offset ) ; g 2 . clear rect ( - playfiel d_ offset , - playfiel d_ offset , this . get width ( ) + playfiel d_ offset , this . get height ( ) + playfiel d_ offset ) ; if ( underlay image != null ) { g 2 . draw image ( underlay image , cur transform , null ) ; } if ( map graphic != null && show map graphic ) { map graphic . draw ( g 2 ) ; } for ( dtn host h : w . get hosts ( ) ) { new node graphic ( h ) . draw ( g 2 ) ; } for ( int i = num_ , n = overlay graphics . size ( ) ; i < n ; i ++ ) { overlay graphics . get ( i ) . draw ( g 2 ) ; } this . ref graphic . draw ( g 2 ) ; }
public string to string ( ) { return this . get class ( ) . get name ( ) + str_ + get id ( ) ; }
void install ( ) { }
public void configure job ( job job ) ;
private resource command load epp resource command ( string filename ) throws exception { epp input epp input = new epp loader ( this , filename ) . get epp ( ) ; return ( ( resource command wrapper ) epp input . get command wrapper ( ) . get command ( ) ) . get resource command ( ) ; }
public void write mapping ( writer w ) throws io exception { w . write ( str_ + ( new date ( ) ) + str_ ) ; for ( integer key : id 2name . key set ( ) ) { w . write ( key + str_ + id 2name . get ( key ) + str_ ) ; } }
public alarm ( string name , alarm listener listener , class loader loader ) { this ( name ) ; set listener ( listener ) ; set context loader ( loader ) ; }
public boolean read bit ( ) { return read bits ( num_ ) == num_ ; }
public void add rule ( rule rule ) { if ( rule == null ) { throw new illegal argument exception ( str_ ) ; } else { rules . add ( rule ) ; } }
public peer lookup task create peer lookup ( byte [ ] info _hash ) ;
private void simulate store ( final store instruction instruction ) { final int index = instruction . get number ( ) ; final element element to store = runtime stack . pop ( ) ; if ( element to store instanceof method handle ) merge method handle store ( index , ( method handle ) element to store ) ; else merge element store ( index , instruction . get variable type ( ) , element to store ) ; }
public string to string ( ) { string buffer buffer = new string buffer ( ) ; buffer . append ( str_ ) ; buffer . append ( str_ ) . append ( m _pwd ) ; buffer . append ( str_ ) . append ( m _pwd mbc ) ; buffer . append ( str_ ) . append ( m _pwd last updts ) ; buffer . append ( str_ ) ; return buffer . to string ( ) ; }
public void flush ( ) throws io exception { writer . flush ( ) ; }
string encode ( t object ) ;
void update mic button state ( ) ;
void clear cache ( ) { sheet selection model . clear table model cache ( ) ; }
public boolean match ( psi element pattern node , psi element matched node , int start , int end , match context context ) { return match ( pattern node , matched node , context ) ; }
protected abstract boolean process data ( list objects , internal distributed member sender , int sequence num , boolean last in sequence ) ;
private void play next ( ) { spotlight view . builder next = queue . poll ( ) ; if ( next != null ) { next . show ( ) . set ready ( bool_ ) ; } else { log . d ( tag , str_ ) ; reset tour ( ) ; } }
public void clear ( ) { ored criteria . clear ( ) ; order by clause = null ; distinct = bool_ ; }
public flv ( file file , boolean generate metadata ) { this . file = file ; this . generate metadata = generate metadata ; int count = num_ ; if ( ! generate metadata ) { try { flv reader reader = new flv reader ( this . file ) ; i tag tag = null ; while ( reader . has more tags ( ) && ( ++ count < num_ ) ) { tag = reader . read tag ( ) ; if ( tag . get data type ( ) == io constants . typ e_ metadata ) { if ( meta service == null ) { meta service = new meta service ( this . file ) ; } meta data = meta service . read meta data ( tag . get body ( ) ) ; } } reader . close ( ) ; } catch ( exception e ) { log . error ( str_ , e ) ; } } }
public simple time label format ( string format ) { this . format = format . replace all ( str_ , str_ ) ; }
public boolean is hidden ( final list < web element > elements , int timeout ) { return is condition met ( not ( visibility of all elements ( elements ) ) , timeout ) ; }
public void add ejb ( context ejb ejb ) { if ( entries . contains ( ejb . get name ( ) ) ) { return ; } else { entries . add ( ejb . get name ( ) ) ; } synchronized ( ejbs ) { ejb . set naming resources ( this ) ; ejbs . put ( ejb . get name ( ) , ejb ) ; } support . fire property change ( str_ , null , ejb ) ; }
public static void circle ( double x , double y , double r ) { if ( r < num_ ) throw new illegal argument exception ( str_ ) ; double xs = scale x ( x ) ; double ys = scale y ( y ) ; double ws = factor x ( num_ * r ) ; double hs = factor y ( num_ * r ) ; if ( ws <= num_ && hs <= num_ ) pixel ( x , y ) ; else offscreen . draw ( new ellipse 2 d . double ( xs - ws / num_ , ys - hs / num_ , ws , hs ) ) ; draw ( ) ; }
private void update progress ( string progress label , int progress ) { if ( my host != null && ( ( progress != previous progress ) || ( ! progress label . equals ( previous progress label ) ) ) ) { my host . update progress ( progress label , progress ) ; } previous progress = progress ; previous progress label = progress label ; }
public synchronized void add all series ( list < xy series > series ) { m series . add all ( series ) ; }
public unchecked io exception ( string message , io exception cause ) { super ( message , objects . require non null ( cause ) ) ; }
public void add data changed listener ( data changed listener l ) { mv . add data change listener ( l ) ; }
public void clear cache ( ) { piece image = null ; }
public static lua table bind methods ( class < ? extends lib function > factory , method [ ] methods ) { if ( methods != null ) { return bind methods ( factory , arrays . as list ( methods ) ) ; } return new lua table ( ) ; }
call target access message ( message unknown ) ;
public randomized set ( ) { list = new array list < integer > ( ) ; r = new random ( ) ; }
public static boolean verify destination ( string destination , string location ) { return ( ( location != null ) && ( location . length ( ) != num_ ) && ( destination != null ) && ( destination . length ( ) != num_ ) && ( location . equals ignore case ( destination ) ) ) ; }
public int array list values ( ) { return values ; }
protected abstract void init listeners ( ) ;
public boolean has batch status ( ) { return has extension ( batch status . class ) ; }
private void write json object end ( ) throws t exception { try { get current writer ( ) . write end object ( ) ; pop context ( ) ; if ( get current context ( ) . is map key ( ) ) { string writer string = get writer string ( ) ; pop writer ( ) ; get current writer ( ) . write field name ( writer string ) ; } if ( num_ == context stack . size ( ) ) { get current writer ( ) . flush ( ) ; } } catch ( io exception ex ) { throw new t exception ( ex ) ; } }
private void generate jsp fragment ( node n , string tag handler var ) throws jasper exception { fragment helper class . fragment fragment = fragment helper class . open fragment ( n , method nesting ) ; servlet writer out save = out ; out = fragment . get gen buffer ( ) . get out ( ) ; string tmp parent = parent ; parent = str_ ; boolean is simple tag parent save = is simple tag parent ; is simple tag parent = bool_ ; boolean tmp is fragment = is fragment ; is fragment = bool_ ; string push body count var save = push body count var ; if ( push body count var != null ) { push body count var = str_ ; } visit body ( n ) ; out = out save ; parent = tmp parent ; is simple tag parent = is simple tag parent save ; is fragment = tmp is fragment ; push body count var = push body count var save ; fragment helper class . close fragment ( fragment , method nesting ) ; out . print ( str_ + fragment helper class . get class name ( ) + str_ + fragment . get id ( ) + str_ + tag handler var + str_ + push body count var + str_ ) ; }
public sup remove element ( string hashcode ) { remove element from registry ( hashcode ) ; return ( this ) ; }
private void serialize components ( final workspace component serializer serializer , final archive contents archive , final zip output stream zip stream ) throws io exception { for ( workspace component component : workspace . get component list ( ) ) { archive contents . archived component archive comp = archive . add component ( component ) ; zip entry entry = new zip entry ( archive comp . get uri ( ) ) ; zip stream . put next entry ( entry ) ; serializer . serialize component ( component ) ; gui component < ? > desktop component = simbrain desktop . get desktop ( workspace ) . get desktop component ( component ) ; if ( desktop component != null ) { archive contents . archived component . archived desktop component dc = archive comp . add desktop component ( desktop component ) ; entry = new zip entry ( dc . get uri ( ) ) ; zip stream . put next entry ( entry ) ; desktop component . save ( zip stream ) ; } } }
public string write entry ( object entity , string context url ) throws o data render exception { this . context url = check not null ( context url ) ; try { return write json ( entity , null ) ; } catch ( io exception | illegal access exception | no such field exception | o data edm exception | o data render exception e ) { log . error ( str_ ) ; throw new o data render exception ( str_ , e ) ; } }
private void create rgb format ( ) { video format = new rgb format ( new dimension ( mip . get m width ( ) , mip . get m height ( ) ) , width * height , int [ ] . class , mip . get fps ( ) , num_ , num_ , num_ , num_ , num_ , width , format . false , rgb format . bi g_ endian ) ; }
protected abstract t relative to root ( string label ) throws cannot resolve label ;
private static byte [ ] read checked bytes ( byte [ ] buffer , int data size ) throws invalid protocol buffer nano exception { backup protos . checked message wrapper = new backup protos . checked message ( ) ; message nano . merge from ( wrapper , buffer , num_ , data size ) ; cr c 3 2 checksum = new cr c 3 2 ( ) ; checksum . update ( wrapper . payload ) ; if ( wrapper . checksum != checksum . get value ( ) ) { throw new invalid protocol buffer nano exception ( str_ ) ; } return wrapper . payload ; }
protected void update ui for mode ( ) { final layout params lp = get loading layout layout params ( ) ; if ( this == m header layout . get parent ( ) ) { remove view ( m header layout ) ; } if ( m mode . show header loading layout ( ) ) { add view internal ( m header layout , num_ , lp ) ; } if ( this == m footer layout . get parent ( ) ) { remove view ( m footer layout ) ; } if ( m mode . show footer loading layout ( ) ) { add view internal ( m footer layout , lp ) ; } refresh loading views size ( ) ; m current mode = ( m mode != mode . both ) ? m mode : mode . pul l_ fro m_ start ; }
public boolean is device list readonly ( ) { return device list readonly ; }
public thread ( thread group group , runnable runnable , string thread name , long stack ) { this ( null , group , runnable , thread name , stack ) ; }
protected void update ui for mode ( ) { final layout params lp = get loading layout layout params ( ) ; if ( this == m header layout . get parent ( ) ) { remove view ( m header layout ) ; } if ( m mode . show header loading layout ( ) ) { add view internal ( m header layout , num_ , lp ) ; } if ( this == m footer layout . get parent ( ) ) { remove view ( m footer layout ) ; } if ( m mode . show footer loading layout ( ) ) { add view internal ( m footer layout , lp ) ; } refresh loading views size ( ) ; m current mode = ( m mode != mode . both ) ? m mode : mode . pul l_ fro m_ start ; }
public packed token attribute impl ( ) { }
public static < t extends data object > t find by property ( collection < t > col , string property , object value ) { if ( col != null && property != null ) { object val = null ; for ( t t : col ) { val = get property value ( t . get class ( ) , t , property ) ; if ( ( val == value ) || ( val != null && val . equals ( value ) ) ) { return t ; } } } return null ; }
public void put general string ( string s ) throws io exception { write string ( s , der value . tag _ general string , str_ ) ; }
protected void calculate partials partials pruning ( double [ ] partials 1 , double [ ] matrices 1 , double [ ] partials 2 , double [ ] matrices 2 , double [ ] partials 3 , int [ ] matrix map ) { throw new runtime exception ( str_ ) ; }
public static _ fields find by thrift id ( int field id ) { switch ( field id ) { case num_ : return header ; default : return null ; } }
public static void unregister semantic nodes ( ) { semantic nodes = new linked list ( ) ; }
private void write keys with prefix ( string prefix ) { for ( string key : keys ) { if ( key . starts with ( prefix ) ) { ps . println ( key + str_ + prop . get property ( key ) ) ; } } ps . println ( ) ; }
public static final string strip all spaces ( final string data ) { final string builder text = new string builder ( ( data ) ) ; int pointer 2 = text . length ( ) - num_ ; while ( pointer 2 > num_ ) { if ( text . char at ( pointer 2 ) == str_ ) { text . delete char at ( pointer 2 ) ; } pointer 2 -- ; if ( pointer 2 < num_ ) { break ; } } return text . to string ( ) ; }
public native boolean compile ( ) throws sq lite . exception ;
public void load gc traces ( string [ ] file names ) { main panel . load gc traces ( file names ) ; }
public boolean is idle ( ) throws android . os . remote exception ;
public static void check length ( double [ ] m , int n ) { if ( m . length != n ) throw error ( str_ + m . length + str_ + n + str_ ) ; }
public boolean matches fluid ( item stack filter , fluid stack fluid ) ;
public ws units response load units from type ( string type code , int init value , int size , es . ieci . tecdoc . isicres . ws . legacy . service . units . security security ) ;
void send error ( int code , string message ) throws io exception ;
public string rule string ( xml object object ) ;
public static < t > substitution < t > for args ( list < type variable > parameters , list < t > arguments ) { if ( parameters . size ( ) != arguments . size ( ) ) { throw new illegal argument exception ( str_ ) ; } substitution < t > s = new substitution < > ( ) ; for ( int i = num_ ; i < parameters . size ( ) ; i ++ ) { s . put ( parameters . get ( i ) , arguments . get ( i ) ) ; } return s ; }
public static boolean is supported attr ( string attr name ) { if ( background . equals ( attr name ) ) { return bool_ ; } if ( tex t_ color . equals ( attr name ) ) { return bool_ ; } if ( lis t_ selector . equals ( attr name ) ) { return bool_ ; } if ( divider . equals ( attr name ) ) { return bool_ ; } return bool_ ; }
public int cost inline ( int thresh , environment env , context ctx ) { return num_ ; }
public static _ fields find by thrift id or throw ( int field id ) { _ fields fields = find by thrift id ( field id ) ; if ( fields == null ) throw new illegal argument exception ( str_ + field id + str_ ) ; return fields ; }
public parallel client ( ) { initialize ( ) ; }
public static in space predicate in ( object ... values ) { return new in space predicate ( values ) ; }
int insert selective ( sampletable 1 record ) ;
protected v create ( k key ) { return null ; }
public abstract io buffer put unsigned short ( long value ) ;
private void broadcast wifi infos ( final array list < wifi record > wifis ) { final wifi record recent = wifis . get ( wifis . size ( ) - num_ ) ; event bus . get default ( ) . post ( new on wifi added ( recent . get ssid ( ) , recent . get level ( ) ) ) ; }
public void run transform thread ( ) { thread controller wrapper . run thread ( this , - num_ ) ; }
public unlogged failure ( final int exit code , final string msg ) { this ( exit code , msg , null ) ; }
long version ( ) ;
public invalid stream exception ( ) { }
public boolean is set ( _ fields field ) { if ( field == null ) { throw new illegal argument exception ( ) ; } switch ( field ) { case applicatio n_ instanc e_ id : return is set application instance id ( ) ; } throw new illegal state exception ( ) ; }
string finish ( ) ;
private final void register ( final string name , final i checkpoint protocol ndx ) { synchronized ( name 2 addr ) { assert open ( ) ; name 2 addr . register index ( name , ndx ) ; } }
boolean accept ( constant pool cpool , cp ref info cpref ) ;
always identical key store state ( key store history history , key store key store , password password ) { super ( history , key store , password ) ; }
public jk xml exception ( string message , throwable cause , boolean enable suppression , boolean writable stack trace ) { super ( message , cause , enable suppression , writable stack trace ) ; }
public boolean is point in child bounds ( view child , int x , int y ) { final rect r = m temp rect 1 ; get descendant rect ( child , r ) ; return r . contains ( x , y ) ; }
public static boolean check deprecation ( property property , string path , int line ) { flex 2 . compiler . mxml . reflect . deprecated deprecated = property . get deprecated ( ) ; if ( ( deprecated != null ) ) { if ( ! check log deprecation warning ( path , line , property . get name ( ) , deprecated . get since ( ) , deprecated . get message ( ) , deprecated . get replacement ( ) ) ) { thread local toolkit . log ( new deprecated ( property . get name ( ) ) , path , line ) ; } return bool_ ; } return bool_ ; }
private void check state ( ) { if ( ! start ) { throw new illegal state exception ( str_ ) ; } if ( end ) { throw new illegal state exception ( str_ ) ; } }
public void clear stack ( ) { stack < fragment > fragment stack = m fragment stacks . get ( m selected tab index ) ; if ( fragment stack . size ( ) > num_ ) { fragment fragment ; fragment transaction ft = m fragment manager . begin transaction ( ) ; ft . set transition ( m transition mode ) ; while ( fragment stack . size ( ) > num_ ) { fragment = m fragment manager . find fragment by tag ( fragment stack . peek ( ) . get tag ( ) ) ; if ( fragment != null ) { fragment stack . pop ( ) ; ft . remove ( fragment ) ; } } fragment = reattach previous fragment ( ft ) ; if ( fragment != null ) { ft . commit ( ) ; } else { if ( ! fragment stack . is empty ( ) ) { fragment = fragment stack . peek ( ) ; ft . add ( m container id , fragment , fragment . get tag ( ) ) ; ft . commit ( ) ; } } m fragment stacks . set ( m selected tab index , fragment stack ) ; m current frag = fragment ; if ( m nav listener != null ) { m nav listener . on fragment transaction ( m current frag ) ; } } }
public ecdsa signature ( big integer r , big integer s ) { this . r = r ; this . s = s ; }
public boolean is only selected ( ) { return m _only selected ; }
public boolean is destroy ( ) { return this . op type == o p_ typ e_ destroy && is entry ( ) ; }
static boolean package has activities ( context context , string package name , user handle compat user ) { final launcher apps compat launcher apps = launcher apps compat . get instance ( context ) ; return launcher apps . get activity list ( package name , user ) . size ( ) > num_ ; }
ssh pair dto generate pair ( generate ssh pair request request ) throws server exception ;
public min max criterion ( ) { }
public resolvable method argument types ( class < ? > ... argument types ) { this . argument types = argument types ; return this ; }
public static void main ( final string [ ] args ) { dom test case . do main ( elementgetelementsbytagnamens 0 4 . class , args ) ; }
void open ( string [ ] headers , char column delimiter , char text qualifier , string encoding , boolean print headers ) throws unsupported encoding exception ;
public void remove from peers advisors ( boolean rebalance ) { if ( get persistence advisor ( ) != null ) { get persistence advisor ( ) . release tie lock ( ) ; } disk region disk region = get disk region ( ) ; boolean should destroy = rebalance || disk region == null || ! disk region . is recreated ( ) ; operation op = should destroy ? operation . regio n_ loca l_ destroy : operation . regio n_ close ; region event impl event = new region event impl ( this , op , null , bool_ , get my id ( ) , generate event id ( ) ) ; if ( is partitioned region open ( ) ) { if ( disk region != null && should destroy ) { disk region . begin destroy data storage ( ) ; } new destroy region operation ( event , bool_ ) . distribute ( ) ; } }
public byte [ ] remove ( final string stack , final long handle ) throws io exception , space exceeded exception { stack s = get stack ( stack ) ; if ( s == null ) return null ; return s . remove ( handle ) ; }
public sendable photo message . sendable photo message builder caption ( string caption ) { this . caption = caption ; return this ; }
public node ( v content ) { this . content = content ; children = new tree map < r , node > ( ) ; attributes = new tree map < string , v > ( ) ; }
public static boolean is at least ( int api level ) { return build . version . sd k_ int >= api level ; }
public boolean is same transaction ( k key ) { versioned value data = map . get ( key ) ; if ( data == null ) { return bool_ ; } int tx = get transaction id ( data . operation id ) ; return tx == transaction . transaction id ; }
protected void add indent options tab ( code style settings settings ) { language code style settings provider provider = language code style settings provider . for language ( get default language ( ) ) ; if ( provider != null ) { indent options editor indent options editor = provider . get indent options editor ( ) ; if ( indent options editor != null ) { my indent options wrapper indent options wrapper = new my indent options wrapper ( settings , provider , indent options editor ) ; add tab ( indent options wrapper ) ; } } }
public map < string , integer > load identifier id pairs ( db transaction transaction ) throws sql exception { map < string , integer > map = new hash map < string , integer > ( ) ; string query = str_ ; result set set = transaction . query ( query , new hash map < string , object > ( ) ) ; while ( set . next ( ) ) { string identifier = set . get string ( str_ ) ; integer id = set . get int ( str_ ) ; map . put ( identifier , id ) ; } return map ; }
public string find key ( string key ) { header card card = find card ( key ) ; if ( card == null ) { return null ; } else { return card . to string ( ) ; } }
public void add files ( i file [ ] files ) { assert . is not null ( files ) ; f files . add all ( arrays . as list ( files ) ) ; }
public boolean max caching time reached ( ) { long cachingtime = current time millis ( ) / num_ - latest refresh time ; return cachingtime > max caching time * num_ ; }
public void write ( byte [ ] out ) { connected thread r ; synchronized ( this ) { if ( m state != stat e_ connected ) return ; r = m connected thread ; } r . write ( out ) ; }
public void remove last ( string header name ) throws null pointer exception ;
private void handle remote worker lost ( final i state queue state queue ) { keep alive timer . cancel ( ) ; if ( cleanup globals . compare and set ( bool_ , bool_ ) ) { tlc server . remove tlc server thread ( this ) ; if ( state queue != null ) { state queue . s enqueue ( states != null ? states : new tlc state [ num_ ] ) ; } states = new tlc state [ num_ ] ; if ( state queue != null ) { synchronized ( state queue ) { state queue . notify all ( ) ; } } tlc globals . dec num workers ( ) ; } }
public void detach ( ) { valid = bool_ ; }
public static void register rotation policy listener ( context context , rotation policy listener listener , int user handle ) { context . get content resolver ( ) . register content observer ( settings . system . get uri for ( settings . system . acceleromete r_ rotation ) , bool_ , listener . m observer , user handle ) ; context . get content resolver ( ) . register content observer ( settings . system . get uri for ( settings . system . hid e_ rotatio n_ loc k_ toggl e_ fo r_ accessibility ) , bool_ , listener . m observer , user handle ) ; }
void failure ( digits exception error ) ;
public boolean next ( ) { _offset = next offset ( ) ; return _offset >= num_ ; }
protected void add declared namespaces ( element element ) { namespace element namespace = element . get namespace ( ) ; for ( int size = namespace stack . size ( ) ; declared namespace index < size ; declared namespace index ++ ) { namespace namespace = namespace stack . get namespace ( declared namespace index ) ; element . add ( namespace ) ; } }
public v put ( long key , v value ) { int index = insertion index ( key ) ; return do put ( key , value , index ) ; }
private void engine reset ( ) { buffered = num_ ; count = num_ ; digest [ num_ ] = num_ ; digest [ num_ ] = num_ ; digest [ num_ ] = num_ ; digest [ num_ ] = num_ ; digest [ num_ ] = num_ ; for ( int i = num_ ; i < dat a_ length ; i ++ ) { tmp [ i ] = num_ ; buffer [ i ] = num_ ; } for ( int i = num_ ; i < dat a_ length / num_ ; i ++ ) data [ i ] = num_ ; for ( int i = num_ ; i < num_ ; i ++ ) z [ i ] = num_ ; }
public void test case 1 5 ( ) { byte a bytes [ ] = { num_ , num_ , num_ , num_ , num_ , num_ , num_ } ; byte b bytes [ ] = { num_ } ; int a sign = num_ ; int b sign = num_ ; big integer a number = new big integer ( a sign , a bytes ) ; big integer b number = new big integer ( b sign , b bytes ) ; try { a number . remainder ( b number ) ; fail ( str_ ) ; } catch ( arithmetic exception e ) { } }
public static object catcher ( object input ) { try { norelease . just ( input ) ; } catch ( throwable t ) { t . print stack trace ( ) ; norelease . breakpoint ( ) ; } return null ; }
public sparse long array ( ) { this ( num_ ) ; }
public void add action listener ( action listener l ) ;
public void receive redundancy ( ) { try { while ( bool_ ) { if ( m in . read ( m in buffer ) <= num_ ) return ; } } catch ( io exception e ) { } }
public static api method process method ( api service api service , method doc method , string base url , boolean is data service ) { try { api method api method desc = new api method ( ) ; api method desc . java method name = method . name ( ) ; api method desc . api service = api service ; api method desc . is data service = is data service ; add path ( method , api method desc , base url ) ; add http method ( method , api method desc ) ; add description ( method , api method desc ) ; add brief description ( method , api method desc ) ; add response description ( method , api method desc ) ; add prerequisites ( method , api method desc ) ; add security ( method , api method desc ) ; if ( is data service ) { add data service information ( method , api method desc ) ; } else { add inputs ( method , api method desc ) ; } add output ( method , api method desc ) ; add query parameters ( method , api method desc ) ; add path parameters ( method , api method desc ) ; add examples ( api method desc ) ; add deprecated ( method , api method desc ) ; return api method desc ; } catch ( exception e ) { throw new runtime exception ( str_ + api service . get fq java class name ( ) + str_ + method . name ( ) , e ) ; } }
protected double transform y ( double value ) { double ty = y axis . transform ( value ) ; if ( ty == double . na n || ty == double . negativ e_ infinity ) { return double . negativ e_ infinity ; } return ( ( ty - y axis . transform ( y axis . get min axis ( ) ) ) * y scale ) + y offset ; }
public static boolean is id embedded in url ( final uri resource uri , uri info uri info ) { arg validator . check uri ( resource uri ) ; return is id embedded in url ( resource uri . to string ( ) , uri info ) ; }
public static void delete node ( document doc , xml entity xml entity ) throws exception { node list nodes = get nodes ( doc , xml entity ) ; if ( nodes != null ) { int length = nodes . get length ( ) ; for ( int i = num_ ; i < length ; i ++ ) { node node = nodes . item ( i ) ; node . get parent node ( ) . remove child ( node ) ; } } }
public void enable debug logging ( boolean enable , string tag ) { check not disposed ( ) ; m debug log = enable ; m debug tag = tag ; }
private static void validate regex ( string field name , string value , string pattern ) throws exception { if ( ! matches ( pattern , value ) ) { throw new exception ( ) ; } }
public void log stack trace ( ) ;
public text title ( string text ) { this ( text , text title . defaul t_ font , text title . defaul t_ tex t_ paint , title . defaul t_ position , title . defaul t_ horizonta l_ alignment , title . defaul t_ vertica l_ alignment , title . defaul t_ padding ) ; }
private static final boolean has wildcard ( string s ) { string test = s . replace ( str_ , str_ ) . replace ( str_ , str_ ) ; return ( test . contains ( str_ ) || test . contains ( str_ ) ) ; }
void assign ( object obj , object rep ) { int index = htab . assign ( obj ) ; while ( index >= reps . length ) { grow ( ) ; } reps [ index ] = rep ; }
public stats get query ( vk api client client , user actor actor ) { super ( client , str_ , utils . build parametrized type ( list . class , period . class ) ) ; access token ( actor . get access token ( ) ) ; }
protected key spec engine get key spec ( secret key key , class < ? > key spec cl ) throws invalid key spec exception { if ( ( key instanceof secret key ) && ( valid types . contains ( key . get algorithm ( ) . to upper case ( locale . english ) ) ) && ( key . get format ( ) . equals ignore case ( str_ ) ) ) { if ( ( key spec cl != null ) && pbe key spec . class . is assignable from ( key spec cl ) ) { byte [ ] passwd bytes = key . get encoded ( ) ; char [ ] passwd chars = new char [ passwd bytes . length ] ; for ( int i = num_ ; i < passwd chars . length ; i ++ ) passwd chars [ i ] = ( char ) ( passwd bytes [ i ] & num_ ) ; pbe key spec ret = new pbe key spec ( passwd chars ) ; java . util . arrays . fill ( passwd chars , str_ ) ; java . util . arrays . fill ( passwd bytes , ( byte ) num_ ) ; return ret ; } else { throw new invalid key spec exception ( str_ ) ; } } else { throw new invalid key spec exception ( str_ + str_ ) ; } }
public apns future send ( byte [ ] device token bytes , apns payload apns payload ) { check closed ( ) ; return this . send ( device token bytes , apns payload , try times ) ; }
public builder with rationale enabled ( boolean enabled ) { build obj . rationale enabled = enabled ; return this ; }
public executor ( logger logger , string cmd ) { this . logger = logger ; this . cmd = cmd ; }
public string generate file count ( ) { int files count = num_ ; int folders count = num_ ; for ( oc file f : m files ) { if ( f . is folder ( ) ) { folders count ++ ; } else { files count ++ ; } } string builder n resources string = new string builder ( ) ; if ( folders count > num_ ) { n resources string . append ( folders count ) . append ( str_ ) . append ( m context . get resources ( ) . get quantity string ( r . plurals . folder _resources , folders count , folders count ) ) ; } if ( files count > num_ && folders count > num_ ) { n resources string . append ( str_ ) ; } if ( files count > num_ ) { n resources string . append ( files count ) . append ( str_ ) . append ( m context . get resources ( ) . get quantity string ( r . plurals . file _resources , files count , files count ) ) ; } return n resources string . to string ( ) ; }
public void draw round rect ( rect f rect , float rx , float ry , paint paint ) { if ( rect == null ) { throw new null pointer exception ( ) ; } native _draw round rect ( m native canvas , rect , rx , ry , paint . m native paint ) ; }
protected abstract string print ( t t ) ;
public static refactoring status check field name ( string name , i java element context ) { return check name ( name , java conventions util . validate field name ( name , context ) ) ; }
public vm pipe acceptor ( executor executor ) { super ( new default vm pipe session config ( ) , executor ) ; idle checker = new idle status checker ( ) ; execute worker ( idle checker . get notifying task ( ) , str_ ) ; }
private boolean is viable node ( int x , int y , int z ) { tile entity tile = pointer . get world obj ( ) . get tile entity ( x , y , z ) ; if ( multiblock manager . are equal ( tile , pointer ) ) { return bool_ ; } return bool_ ; }
protected void check child type ( node n , boolean replace ) { switch ( n . get node type ( ) ) { case elemen t_ node : case processin g_ instructio n_ node : case commen t_ node : case tex t_ node : case cdat a_ sectio n_ node : case entit y_ referenc e_ node : case documen t_ fragmen t_ node : break ; default : throw create dom exception ( dom exception . hierarch y_ reques t_ err , str_ , new object [ ] { new integer ( get node type ( ) ) , get node name ( ) , new integer ( n . get node type ( ) ) , n . get node name ( ) } ) ; } }
public void update logo ( logo logo ) { if ( logo == null ) { update logo ( get default logo ( ) , null , bool_ ) ; } else { string content description = text utils . is empty ( logo . alt text ) ? null : get resources ( ) . get string ( r . string . accessibility _google _doodle , logo . alt text ) ; update logo ( logo . image , content description , bool_ ) ; } }
public token keys bundle read bundle ( ) throws exception { configuration config = _coordinator . query configuration ( signatur e_ ke y_ config , signatur e_ ke y_ id ) ; if ( config == null || config . get config ( signatur e_ key ) == null ) { _log . warn ( str_ ) ; return null ; } string serialized bundle = config . get config ( signatur e_ key ) ; _log . debug ( str_ , serialized bundle ) ; return ( token keys bundle ) serializer utils . deserialize ( serialized bundle ) ; }
public static bit value of ( string bit ) throws number format exception { final int i = integer . parse int ( bit ) ; if ( i != num_ && i != num_ ) { throw new number format exception ( str_ + bit + str_ ) ; } return ( i > num_ ) ? true : false ; }
public void validate storage ( string name , file storage dir ) throws backup exception { string suffix = str_ + name + str_ + storage dir ; if ( ! storage dir . is directory ( ) ) throw new backup exception ( str_ + suffix ) ; else if ( ! storage dir . can read ( ) ) throw new backup exception ( str_ + suffix ) ; }
public static long to millisec ( string datestring ) { date date = parse ( datestring ) ; if ( date == null ) { return null ; } return date . get time ( ) ; }
private long try inc reader overflow ( long s ) { if ( ( s & abits ) == rfull ) { if ( u . compare and swap long ( this , state , s , s | rbits ) ) { ++ reader overflow ; state = s ; return s ; } } else if ( ( lock support . next secondary seed ( ) & overflo w_ yiel d_ rate ) == num_ ) thread . yield ( ) ; return num_ ; }
public static image request builder from request ( image request image request ) { return image request builder . new builder with source ( image request . get source uri ( ) ) . set image decode options ( image request . get image decode options ( ) ) . set cache choice ( image request . get cache choice ( ) ) . set local thumbnail previews enabled ( image request . get local thumbnail previews enabled ( ) ) . set lowest permitted request level ( image request . get lowest permitted request level ( ) ) . set postprocessor ( image request . get postprocessor ( ) ) . set progressive rendering enabled ( image request . get progressive rendering enabled ( ) ) . set request priority ( image request . get priority ( ) ) . set resize options ( image request . get resize options ( ) ) . set request listener ( image request . get request listener ( ) ) . set rotation options ( image request . get rotation options ( ) ) ; }
public boolean allow primary ( ) { return this . allow primary ; }
void run script ( ) { string scr = null ; j option pane dialog = new j option pane ( ) ; scr = dialog . show input dialog ( this , str_ + str_ ) ; if ( scr == null || scr . length ( ) == num_ ) return ; try { script utils . start script ( scr , node ) ; } catch ( no such method exception e ) { show error ( str_ ) ; } catch ( exception e ) { show error ( e . to string ( ) ) ; } }
public void test write whole message ( ) throws exception { test all types message = test util . get all set ( ) ; byte [ ] raw bytes = message . to byte array ( ) ; assert equal bytes ( test util . get golden message ( ) . to byte array ( ) , raw bytes ) ; for ( int block size = num_ ; block size < num_ ; block size *= num_ ) { byte array output stream raw output = new byte array output stream ( ) ; coded output stream output = coded output stream . new instance ( raw output , block size ) ; message . write to ( output ) ; output . flush ( ) ; assert equal bytes ( raw bytes , raw output . to byte array ( ) ) ; } }
private static int clamp shift amt ( int size , long shift amt ) { return ( int ) ( shift amt & ( size - num_ ) ) ; }
public jms message remove ( ) { return queue . get ( ) . remove ( ) ; }
public void de activate route ( ) ;
public void open url ( string url ) ;
public static void ensure offset length ( final int array length , final int offset , final int length ) { if ( offset < num_ ) throw new array index out of bounds exception ( str_ + offset + str_ ) ; if ( length < num_ ) throw new illegal argument exception ( str_ + length + str_ ) ; if ( offset + length > array length ) throw new array index out of bounds exception ( str_ + ( offset + length ) + str_ + array length + str_ ) ; }
public boolean has attribute histogram ( ) { return owner . get extension ( attribute histogram . class ) != null ; }
public static file apply path ( iterable < ? extends file > paths , string rel file ) { file path = search paths ( paths , rel file ) ; if ( path != null ) { return new file ( path , rel file ) ; } return null ; }
public boolean is off ( ) { return ! is on ( ) ; }
public base adapter helper add links ( int view id , int mask ) { text view view = retrieve view ( view id ) ; linkify . add links ( view , mask ) ; return this ; }
public void on screen change ( int current screen , int last screen ) { image view [ ] points = platform grid view . points ; for ( int i = num_ ; i < points . length ; i ++ ) { points [ i ] . set image bitmap ( platform grid view . gray point ) ; } points [ current screen ] . set image bitmap ( platform grid view . blue point ) ; }
private static list < string > as strings ( class ... classes ) { list < string > strings = new array list < > ( ) ; for ( class c : classes ) { strings . add ( c . get name ( ) ) ; } return strings ; }
public void push ( bitmap bitmap ) throws interrupted exception { check not main thread ( ) ; pending . put ( bitmap ) ; ensure scheduled ( ) ; }
public static _ fields find by thrift id or throw ( int field id ) { _ fields fields = find by thrift id ( field id ) ; if ( fields == null ) throw new illegal argument exception ( str_ + field id + str_ ) ; return fields ; }
public memcache client builder < v > with srv record ( final string srv record ) { this . srv record = check not null ( srv record ) ; return this ; }
public topic matcher ( ) { subscriptions store = new subscriptions store ( ) ; subscriptions store . init ( new map based subscription store ( ) ) ; }
public void remove model change ( string table name , model validator listener ) { if ( table name == null || listener == null ) return ; string property name = m _global validators . contains ( listener ) ? table name + str_ : table name + listener . get a d_ client _ id ( ) ; array list < model validator > list = m _model change listeners . get ( property name ) ; if ( list == null ) return ; list . remove ( listener ) ; if ( list . size ( ) == num_ ) m _model change listeners . remove ( property name ) ; }
public builder root view ( int root view res ) { if ( activity == null ) { throw new runtime exception ( str_ ) ; } return root view ( ( view group ) activity . find view by id ( root view res ) ) ; }
private static string names ( token [ ] tokens ) { string builder buf = new string builder ( ) ; for ( token token : tokens ) { if ( is ignored ( token . type ) ) { continue ; } if ( buf . length ( ) > num_ ) { buf . append ( str_ ) ; } buf . append ( token . type ) ; } return buf . to string ( ) ; }
public processing item connect input all stream ( stream input stream ) { return this . add input stream ( input stream , partitioning scheme . broadcast ) ; }
interceptor ( ) { start = num_ ; mid = num_ ; end = num_ ; }
public boolean contains key ( string key ) { return map . contains key ( key ) ; }
private static boolean update index ( final project project , final virtual file root , final collection < file path > added , final collection < file path > removed , final list < vcs exception > exceptions ) { boolean rc = bool_ ; if ( ! added . is empty ( ) ) { try { git file utils . add paths ( project , root , added ) ; } catch ( vcs exception ex ) { exceptions . add ( ex ) ; rc = bool_ ; } } if ( ! removed . is empty ( ) ) { try { git file utils . delete ( project , root , removed , str_ ) ; } catch ( vcs exception ex ) { exceptions . add ( ex ) ; rc = bool_ ; } } return rc ; }
public abstract void on job state changed ( hadoop job metadata meta ) throws ignite checked exception ;
public int gather int ( string error msg , int max value ) throws xmp exception { int value = num_ ; boolean success = bool_ ; char ch = ch ( pos ) ; while ( str_ <= ch && ch <= str_ ) { value = ( value * num_ ) + ( ch - str_ ) ; success = bool_ ; pos ++ ; ch = ch ( pos ) ; } if ( success ) { if ( value > max value ) { return max value ; } else if ( value < num_ ) { return num_ ; } else { return value ; } } else { throw new xmp exception ( error msg , xmp error . badvalue ) ; } }
public boolean has repeating rg channels ( ) { return bool_ ; }
public mms exception ( string message ) { super ( message ) ; }
public sms mwi message ( string text ) { this ( text , sms alphabet . ascii ) ; }
public void update ( byte [ ] b , int off , int len ) ;
public void reset ( ) { m detector . reset ( ) ; }
public class path resource ( string location , class loader class loader ) { this . location = location ; this . class loader = class loader ; }
public void for each top level field ( consumer < field > consumer ) { collection < string > names of dependents = fields by name . values ( ) . stream ( ) . map ( null ) . flat map ( null ) . collect ( collectors . to set ( ) ) ; fields by name . values ( ) . stream ( ) . filter ( null ) . for each ( consumer ) ; }
public final void trim ( ) { set data capacity ( this . size << num_ ) ; }
private boolean fits as single line ( int col ) { return ( col + single line width ( ) <= pcal tla gen . wrap column ) || ( body formulas . sf == null && ( prcd formulas == null || prcd formulas . size ( ) == num_ ) ) ; }
rule based collation key ( string source , string key ) { super ( source ) ; this . key = key ; }
boolean update visibility ( ) { boolean honors visibility ; if ( this . honors visibility == null ) { honors visibility = group layout . this . get honors visibility ( ) ; } else { honors visibility = this . honors visibility ; } boolean new visible = ( honors visibility ) ? component . is visible ( ) : bool_ ; if ( visible != new visible ) { visible = new visible ; return bool_ ; } return bool_ ; }
public boolean is dirty ( ) ;
public void type ( string string ) { for ( int i = num_ ; i < string . length ( ) ; i ++ ) { char c = string . char at ( i ) ; type ( c ) ; } }
string strip whitespaces ( string s ) { return s . trim ( ) ; }
public static < i , f , v > simple fast feature data < i , f , v > load ( stream < tuple 3 < i , f , v > > tuples , fast item index < i > i index , fast feature index < f > f index ) { list < list < tuple 2io < v > > > iidx list = new array list < > ( ) ; for ( int iidx = num_ ; iidx < i index . num items ( ) ; iidx ++ ) { iidx list . add ( null ) ; } list < list < tuple 2io < v > > > fidx list = new array list < > ( ) ; for ( int fidx = num_ ; fidx < f index . num features ( ) ; fidx ++ ) { fidx list . add ( null ) ; } tuples . for each ( null ) ; return new simple fast feature data < > ( iidx list , fidx list , i index , f index ) ; }
public void on finalization ( storage manager storage manager , storage writer storage writer , storage data storage data ) throws exception { }
public native string compiler ( ) ;
public void remove kisk ( kisk kisk ) { for ( int member id : kisk . get current member ids ( ) ) { bound but offline player . remove ( member id ) ; } for ( integer obj : owner player . key set ( ) ) { if ( owner player . get ( obj ) . equals ( kisk ) ) { owner player . remove ( obj ) ; break ; } } for ( player member : kisk . get current member list ( ) ) { member . set kisk ( null ) ; packet send utility . send packet ( member , new s m_ bin d_ poin t_ info ( num_ , num_ , num_ , num_ , member ) ) ; if ( member . get life stats ( ) . is already dead ( ) ) { member . get controller ( ) . send die ( ) ; } } }
public static native void show print preview ( object [ ] components , print properties print properties , string title , print preview callback callback , window print window properties , string print button title ) ;
public void write raw bytes ( final byte [ ] value ) throws io exception { write raw bytes ( value , num_ , value . length ) ; }
public boolean is maintenance mode supported ( ) { return maintenance mode supported ; }
boolean enabled ( ) ;
public void execute ( execution visitor visitor , test check generator gen ) { execute ( visitor , gen , bool_ ) ; }
public boolean commit final result ( string text ) { commit text ( text ) ; m prev text = str_ ; m glue count = num_ ; return bool_ ; }
static int multiply and subtract ( int a [ ] , int start , int b [ ] , int b len , int c ) { long carry 0 = num_ ; long carry 1 = num_ ; for ( int i = num_ ; i < b len ; i ++ ) { carry 0 = t multiplication . unsigned mult add add ( b [ i ] , c , ( int ) carry 0 , num_ ) ; carry 1 = ( a [ start + i ] & num_ ) - ( carry 0 & num_ ) + carry 1 ; a [ start + i ] = ( int ) carry 1 ; carry 1 >>= num_ ; carry 0 >>>= num_ ; } carry 1 = ( a [ start + b len ] & num_ ) - carry 0 + carry 1 ; a [ start + b len ] = ( int ) carry 1 ; return ( int ) ( carry 1 > > num_ ) ; }
public contexted runtime exception ( final throwable cause ) { super ( cause ) ; exception context = new default exception context ( ) ; }
public int dimension ( ) { return components . length ; }
public static user dto update ( user dto new user dto ) { user dto existing user = find by id ( new user dto . get id ( ) ) ; if ( existing user != null ) { bean utils . copy properties ( new user dto , existing user , str_ ) ; existing user . set authorities ( authorities . get ( existing user . get profile ( ) ) ) ; } return null ; }
public peer network clone ( ) { peer network clone = new wifi direct peer network ( new wifi p 2p device ( this . wifi p 2p device ) ) ; return clone ; }
t process ( memory node node ) ;
public void ignorable whitespace ( char ch [ ] , int start , int length ) throws org . xml . sax . sax exception { if ( ! m _should process ) return ; get current processor ( ) . ignorable whitespace ( this , ch , start , length ) ; }
public do m2 dtm ( dtm manager mgr , dom source dom source , int dtm identity , dtmws filter white space filter , xml string factory xstringfactory , boolean do indexing ) { super ( mgr , dom source , dtm identity , white space filter , xstringfactory , do indexing ) ; m _pos = m _root = dom source . get node ( ) ; m _last _parent = m _last _kid = null ; m _last _kid = add node ( m _root , m _last _parent , m _last _kid , null ) ; if ( elemen t_ node == m _root . get node type ( ) ) { named node map attrs = m _root . get attributes ( ) ; int attrsize = ( attrs == null ) ? num_ : attrs . get length ( ) ; if ( attrsize > num_ ) { int attr index = null ; for ( int i = num_ ; i < attrsize ; ++ i ) { attr index = add node ( attrs . item ( i ) , num_ , attr index , null ) ; m _firstch . set element at ( dtm . null , attr index ) ; } m _nextsib . set element at ( dtm . null , attr index ) ; } } m _nodes are processed = bool_ ; }
static public void assert true ( boolean condition ) { assert true ( null , condition ) ; }
public void initialize log rotation policy config ( ) throws config exception , initialization exception { root cfg root = server context . get root config ( ) ; root . add log rotation policy add listener ( this ) ; root . add log rotation policy delete listener ( this ) ; for ( string name : root . list log rotation policies ( ) ) { log rotation policy cfg config = root . get log rotation policy ( name ) ; rotation policy < log rotation policy cfg > rotation policy = get rotation policy ( config ) ; directory server . register rotation policy ( config . dn ( ) , rotation policy ) ; } }
symbol token find ( string text ) { for ( int i = num_ ; i < my imports . length ; i ++ ) { symbol table imported table = my imports [ i ] ; symbol token tok = imported table . find ( text ) ; if ( tok != null ) { int sid = tok . get sid ( ) + my base sids [ i ] ; text = tok . get text ( ) ; assert text != null ; return new symbol token impl ( text , sid ) ; } } return null ; }
protected void on error ( ) { log . e ( zor n_ worke r_ tag , str_ ) ; }
public static void check null ( object o , object value ) { if ( o != null ) error ( string . value of ( value ) ) ; }
public int engine size ( ) { return entries . size ( ) ; }
public boolean has value ( ) { return get value ( ) != null ; }
sorted map < string , string > properties ( ) ;
public void clear ( ) { ored criteria . clear ( ) ; order by clause = null ; distinct = bool_ ; }
public boolean has isdn subaddress ( ) { return has parm ( isub ) ; }
public abstract change tracking set ( collection < k > source ) { super ( source ) ; }
public static string to string ( uri uri ) throws io exception { return to string ( uri , charset . default charset ( ) ) ; }
public static face draw down ( mesh model model , double min x , double min y , double min z , double max x , double max y , double max z , cube texture coordinates texture coordinates ) { face down = new face ( ) ; down . normal = direction . down . to vector ( ) ; down . draw vertex ( new vertex ( max x , min y , max z , texture coordinates . get bottom min u ( ) , texture coordinates . get bottom min v ( ) ) ) ; down . draw vertex ( new vertex ( min x , min y , max z , texture coordinates . get bottom max u ( ) , texture coordinates . get bottom min v ( ) ) ) ; down . draw vertex ( new vertex ( min x , min y , min z , texture coordinates . get bottom max u ( ) , texture coordinates . get bottom max v ( ) ) ) ; down . draw vertex ( new vertex ( max x , min y , min z , texture coordinates . get bottom min u ( ) , texture coordinates . get bottom max v ( ) ) ) ; model . draw face ( down ) ; return down ; }
public project target settings ( final i navi project project ) { this . project = project ; }
public static boolean is empty simple path ( block node start , block node end ) { if ( start == end && start . get instructions ( ) . is empty ( ) ) { return bool_ ; } if ( ! start . get instructions ( ) . is empty ( ) || start . get clean successors ( ) . size ( ) != num_ ) { return bool_ ; } block node block = get next block ( start ) ; while ( block != null && block != end && block . get clean successors ( ) . size ( ) < num_ && block . get predecessors ( ) . size ( ) == num_ && block . get instructions ( ) . is empty ( ) ) { block = get next block ( block ) ; } return block == end ; }
public missing license exception ( string license name ) { super ( str_ + license name ) ; this . license name = license name ; }
void loge ( string tag , string message , throwable e ) ;
private void update progress ( string progress label , int progress ) { if ( my host != null && ( ( progress != previous progress ) || ( ! progress label . equals ( previous progress label ) ) ) ) { my host . update progress ( progress label , progress ) ; } previous progress = progress ; previous progress label = progress label ; }
private boolean is any call ( final list < i navi instruction > instructions , final set < i navi instruction > calls ) { for ( final i navi instruction navi instruction : instructions ) { if ( calls . contains ( navi instruction ) ) { return bool_ ; } } return bool_ ; }
public static void save players ( ) { server . save players ( ) ; }
protected void select word ( ) { if ( match word ( ) ) { if ( start pos == end pos ) f text . set selected range ( start pos , num_ ) ; else f text . set selected range ( start pos + num_ , end pos - start pos - num_ ) ; } }
boolean is recurring ( ) ;
protected date compute ( string date string , string locale string ) { if ( date string == null || locale string == null ) { return null ; } locale locale = new locale ( locale string ) ; date date ; try { date = ( ( date format ) date format . get date instance ( date format . short , locale ) . clone ( ) ) . parse ( date string ) ; calendar cal = calendar . get instance ( locale ) ; cal . set time ( date ) ; return cal . get time ( ) ; } catch ( parse exception e ) { throw new function input exception ( str_ , get function name ( ) ) ; } }
public static _ fields find by thrift id or throw ( int field id ) { _ fields fields = find by thrift id ( field id ) ; if ( fields == null ) throw new illegal argument exception ( str_ + field id + str_ ) ; return fields ; }
public void send to all around ( final mod packet packet , final network registry . target point point ) { ec . send to all around ( get proxy packet ( packet ) , point ) ; }
public batch fraction thread pool ( final string name , final int max threads , final int keep alive time , final time unit keep alive units ) { final thread pool < ? > thread pool = new thread pool < > ( name ) ; thread pool . max threads ( max threads ) . keepalive time ( str_ , integer . to binary string ( keep alive time ) ) . keepalive time ( str_ , keep alive units . name ( ) . to lower case ( locale . root ) ) ; return thread pool ( thread pool ) ; }
public boolean literal ( boolean b ) { m _value = b ; }
private void write attribute ( java . lang . string namespace , java . lang . string att name , java . lang . string att value , javax . xml . stream . xml stream writer xml writer ) throws javax . xml . stream . xml stream exception { if ( namespace . equals ( str_ ) ) { xml writer . write attribute ( att name , att value ) ; } else { register prefix ( xml writer , namespace ) ; xml writer . write attribute ( namespace , att name , att value ) ; } }
private void close all open statements ( ) throws sql exception { sql exception postponed exception = null ; for ( statement stmt : this . open statements ) { try { ( ( statement impl ) stmt ) . real close ( bool_ , bool_ ) ; } catch ( sql exception sql ex ) { postponed exception = sql ex ; } } if ( postponed exception != null ) { throw postponed exception ; } }
animatable value create value ( animation target target , string ns , string ln , boolean is css , string s ) ;
public object clone ( ) ;
public opt record ( int payload size , int xrcode , int version , int flags ) { this ( payload size , xrcode , version , flags , null ) ; }
public e next ( ) ;
protected iterator < k > create key set iterator ( ) { if ( size ( ) == num_ ) { return empty iterator . instance ; } return new key set iterator < k , v > ( this ) ; }
public fxg node parse ( input stream stream , string document name ) throws fxg exception , io exception { try { scanner . set document name ( document name ) ; sax parser factory sax factory = sax parser factory . new instance ( ) ; sax factory . set validating ( bool_ ) ; sax factory . set namespace aware ( bool_ ) ; sax parser parser = sax factory . new sax parser ( ) ; parser . parse ( stream , scanner ) ; fxg node node = scanner . get root node ( ) ; return node ; } catch ( parser configuration exception ex ) { throw new fxg exception ( scanner . get start line ( ) , scanner . get start column ( ) , str_ , ex . get localized message ( ) , ex ) ; } catch ( sax exception ex ) { throw new fxg exception ( scanner . get start line ( ) , scanner . get start column ( ) , str_ , ex . get localized message ( ) , ex ) ; } finally { stream . close ( ) ; } }
public put object result put object ( url signed url , input stream request content , long content length , map < string , string > request headers , boolean use chunk encoding ) throws oss exception , client exception { assert parameter not null ( signed url , str_ ) ; assert parameter not null ( request content , str_ ) ; if ( request headers == null ) { request headers = new hash map < string , string > ( ) ; } request message request = new request message ( ) ; request . set method ( http method . put ) ; request . set absolute url ( signed url ) ; request . set use url signature ( bool_ ) ; request . set content ( request content ) ; request . set content length ( determine input stream length ( request content , content length , use chunk encoding ) ) ; request . set headers ( request headers ) ; request . set use chunk encoding ( use chunk encoding ) ; return do operation ( request , put object reponse parser , null , null , bool_ ) ; }
public void expr set parent ( expression node n ) { super . expr set parent ( n ) ; int n args = m _arg vec . size ( ) ; for ( int i = num_ ; i < n args ; i ++ ) { expression arg = ( expression ) m _arg vec . element at ( i ) ; arg . expr set parent ( n ) ; } }
public void release display ( ) { _release video surface ( ) ; m surface holder = null ; m surface = null ; }
public static normal serializable instance ( ) { return new normal ( num_ , num_ ) ; }
public void node structure changed ( tree node node ) { if ( node != null ) { fire tree structure changed ( this , get path to root ( node ) , null , null ) ; } }
public am search results search filtered roles ( string wildcard , am search control search control ) throws am exception , sso exception { return search filtered roles ( wildcard , null , search control ) ; }
public void line to ( object x 1 , object y 1 ) { if ( size ( ) == num_ || get ( size ( ) - num_ ) . type == seg type . close ) { throw new illegal path state exception ( str_ ) ; } add ( new segment ( seg type . lineto , x 1 , y 1 ) ) ; }
public void add listener ( final i view node listener listener ) { m _listeners . add listener ( listener ) ; }
public illegal channel group exception ( ) { }
public void on error response ( volley error error ) ;
public static boolean after or equal ( final date date , final date date to compare ) { return date . after ( date to compare ) || date . equals ( date to compare ) ; }
public future < job > log ( string msg ) { future < job > future = future . future ( ) ; client . rpush ( redis helper . get key ( str_ + this . id + str_ ) , msg , _completer ( future , this ) ) ; return future . compose ( null ) ; }
public serial message clear association message ( int group ) { logger . debug ( str_ , get node ( ) . get node id ( ) , group ) ; serial message result = new serial message ( get node ( ) . get node id ( ) , serial message class . send data , serial message type . request , serial message class . send data , serial message priority . set ) ; byte array output stream output data = new byte array output stream ( ) ; output data . write ( this . get node ( ) . get node id ( ) ) ; output data . write ( num_ ) ; output data . write ( get command class ( ) . get key ( ) ) ; output data . write ( mult i_ associationcm d_ remove ) ; output data . write ( group ) ; result . set message payload ( output data . to byte array ( ) ) ; return result ; }
public synchronized void pan to abs ( point 2 d p ) { double sx = m _transform . get scale x ( ) ; double sy = m _transform . get scale y ( ) ; double x = p . get x ( ) ; x = ( double . is na n ( x ) ? num_ : x ) ; double y = p . get y ( ) ; y = ( double . is na n ( y ) ? num_ : y ) ; x = get width ( ) / ( num_ * sx ) - x ; y = get height ( ) / ( num_ * sy ) - y ; double dx = x - ( m _transform . get translate x ( ) / sx ) ; double dy = y - ( m _transform . get translate y ( ) / sy ) ; damage report ( ) ; m _transform . translate ( dx , dy ) ; try { m _itransform = m _transform . create inverse ( ) ; } catch ( exception e ) { } }
public t debug ( ) { result . put extra ( extr a_ debu g_ enabled , bool_ ) ; return ( ( t ) this ) ; }
public simple entry ( ) { id = next id ++ ; }
public response timeout exception ( string message , throwable cause ) { super ( message , cause ) ; }
public static byte [ ] encode base 6 4 ( final byte [ ] binary data , final boolean is chunked , final boolean url safe ) { return encode base 6 4 ( binary data , is chunked , url safe , integer . ma x_ value ) ; }
public boolean is ignore comments ( ) { return ignore comments ; }
public aem text area type line ( char sequence text ) { return type ( text ) . type new line ( ) ; }
private void update controlled state ( ) { synchronized ( stat e_ lock ) { if ( controlled state == controlled state . ended ) return ; if ( cancel requested ) { controlled state = controlled state . executin g_ cance l_ requested ; return ; } if ( controlled state != controlled state . paused && pause requested ) { controlled state = controlled state . executin g_ paus e_ requested ; return ; } controlled state = controlled state . executing ; } }
public ab horizontal scroll view ( context context ) { super ( context ) ; }
static synchronized void insert ( controller plan plan ) { num methods scheduled for recomp ++ ; int opt level = plan . get comp plan ( ) . options . get opt level ( ) ; switch ( opt level ) { case num_ : num opt 0 ++ ; break ; case num_ : num opt 1 ++ ; break ; case num_ : num opt 2 ++ ; break ; case num_ : num opt 3 ++ ; break ; case num_ : num opt 4 ++ ; break ; default : if ( vm . verify assertions ) vm . _assert ( no t_ reached , str_ ) ; } linked list < controller plan > plan list = find plan ( plan . get comp plan ( ) . method ) ; if ( plan list == null ) { plan list = new linked list < controller plan > ( ) ; plan list . add last ( plan ) ; table . put ( plan . get comp plan ( ) . method , plan list ) ; } else { synchronized ( plan list ) { plan list . add last ( plan ) ; } } plan . set plan list ( plan list ) ; }
public static number acosh ( number a ) { return fast math . acosh ( a . double value ( ) ) ; }
private da vinci ( int pool size ) { if ( pool size <= num_ ) { pool size = defaul t_ networ k_ threa d_ poo l_ size ; } m default request queue = volley manager . new request queue ( m context , pool size ) ; m default da image loader = new vinci image loader ( m context , m default request queue ) ; }
attached sprite ( sprite sprite , int x , int y ) { this . sprite = sprite ; this . x offset = x ; this . y offset = y ; }
int save validation rule ( validation rule validation rule ) ;
private boolean scroll to child rect ( rect rect , boolean immediate ) { final int delta = compute scroll delta to get child rect on screen ( rect ) ; final boolean scroll = delta != num_ ; if ( scroll ) { if ( immediate ) { scroll by ( delta , num_ ) ; } else { smooth scroll by ( delta , num_ ) ; } } return scroll ; }
public static _ fields find by thrift id ( int field id ) { switch ( field id ) { case num_ : return path ; case num_ : return offse t_ lba ; default : return null ; } }
public void validate business object data ( business object format entity business object format entity , string expected business object data partition value , list < string > expected business object data sub partition values , integer expected business object data version , boolean expected latest version , string expected status code , string expected storage name , string expected storage directory path , list < storage file > expected storage files , list < attribute > expected attributes , business object data actual business object data ) { validate business object data ( null , business object format entity . get business object definition ( ) . get namespace ( ) . get code ( ) , business object format entity . get business object definition ( ) . get name ( ) , business object format entity . get usage ( ) , business object format entity . get file type ( ) . get code ( ) , business object format entity . get business object format version ( ) , expected business object data partition value , expected business object data sub partition values , expected business object data version , expected latest version , expected status code , expected storage name , expected storage directory path , expected storage files , expected attributes , actual business object data ) ; }
public static synchronized boolean is recording macro ( ) { return recording macro ; }
public notification chain basic set event ( expression new event , notification chain msgs ) { expression old event = event ; event = new event ; if ( e notification required ( ) ) { e notification impl notification = new e notification impl ( this , notification . set , stext package . even t_ raisin g_ expressio n _ _ event , old event , new event ) ; if ( msgs == null ) msgs = notification ; else msgs . add ( notification ) ; } return msgs ; }
public action request helper then ( action request helper next action , boolean terminate on failure ) { m next . add ( next action ) ; next action . terminate on failure ( terminate on failure ) ; return this ; }
protected void assert func equals ( final solr query request req , final string ... inputs ) throws exception { final string func name = ( new query parsing . str parser ( inputs [ num_ ] ) ) . get id ( ) ; val parsers tested . add ( func name ) ; assert query equals ( function q parser plugin . name , req , inputs ) ; }
public int index of outermost node ( ) { if ( outer == - num_ ) { point 2 d . double ctr = get center ( ) ; outer = num_ ; double dist = num_ ; for ( int i = num_ , n = size ( ) ; i < n ; i ++ ) { node cp = get ( i ) ; double d = geom . length 2 ( ctr . x , ctr . y , cp . x [ num_ ] , cp . y [ num_ ] ) ; if ( d > dist ) { dist = d ; outer = i ; } } } return outer ; }
private void register achievement to db ( string achievement , string desc , string name ) { string query ; if ( database type == postgresql ) { query = str_ + table prefix + str_ ; } else { query = str_ + table prefix + str_ ; } connection conn = get sql connection ( ) ; try ( prepared statement prep = conn . prepare statement ( query ) ) { prep . set string ( num_ , name ) ; prep . set string ( num_ , achievement ) ; prep . set string ( num_ , desc ) ; prep . set date ( num_ , new java . sql . date ( new java . util . date ( ) . get time ( ) ) ) ; if ( database type == postgresql ) { prep . set string ( num_ , desc ) ; prep . set date ( num_ , new java . sql . date ( new java . util . date ( ) . get time ( ) ) ) ; } prep . execute ( ) ; } catch ( sql exception e ) { plugin . get logger ( ) . log ( level . severe , str_ , e ) ; } }
static void access ( unix path path , int amode ) throws unix exception { native buffer buffer = copy to native buffer ( path ) ; try { access 0 ( buffer . address ( ) , amode ) ; } finally { buffer . release ( ) ; } }
public static int calculate view memory ( int connection server count , int security server count , int v center server count ) { final int cs = integer . parse int ( vdi calculator . defaults . get string ( str_ ) ) * connection server count ; final int ss = integer . parse int ( vdi calculator . defaults . get string ( str_ ) ) * security server count ; final int vc = integer . parse int ( vdi calculator . defaults . get string ( str_ ) ) * security server count ; final int co = integer . parse int ( vdi calculator . defaults . get string ( str_ ) ) ; return cs + ss + vc + co ; }
protected json token _handle invalid number start ( int ch , boolean negative ) throws io exception , json parse exception { if ( ch == str_ ) { if ( _input ptr >= _input end ) { if ( ! load more ( ) ) { _report invalid eof in value ( ) ; } } ch = _input buffer [ _input ptr ++ ] ; if ( ch == str_ ) { string match = negative ? str_ : str_ ; _match token ( match , num_ ) ; if ( is enabled ( feature . allo w_ no n_ numeri c_ numbers ) ) { return reset as na n ( match , negative ? double . negativ e_ infinity : double . positiv e_ infinity ) ; } _report error ( str_ + match + str_ ) ; } else if ( ch == str_ ) { string match = negative ? str_ : str_ ; _match token ( match , num_ ) ; if ( is enabled ( feature . allo w_ no n_ numeri c_ numbers ) ) { return reset as na n ( match , negative ? double . negativ e_ infinity : double . positiv e_ infinity ) ; } _report error ( str_ + match + str_ ) ; } } report unexpected number char ( ch , str_ ) ; return null ; }
public abstract void convert ( ) ;
public boolean supports union all ( ) throws sql exception { return bool_ ; }
private synchronized void add lock object ( absolute table identifier absolute table identifier ) { if ( null == table lock map . get ( absolute table identifier ) ) { table lock map . put ( absolute table identifier , new object ( ) ) ; } }
public boolean is reduced cross talk enabled ( ) { return reduced crosstalk enabled ; }
public polyline create polyline ( point list point list , int color , int stroke width ) { paint paint stroke = android graphic factory . instance . create paint ( ) ; paint stroke . set style ( style . stroke ) ; paint stroke . set stroke join ( join . round ) ; paint stroke . set stroke cap ( cap . round ) ; paint stroke . set color ( color ) ; paint stroke . set stroke width ( stroke width ) ; polyline line = new polyline ( ( paint ) paint stroke , android graphic factory . instance ) ; list < lat long > geo points = line . get lat longs ( ) ; point list tmp = point list ; for ( int i = num_ ; i < point list . get size ( ) ; i ++ ) { geo points . add ( new lat long ( tmp . get latitude ( i ) , tmp . get longitude ( i ) ) ) ; } return line ; }
public static long read swapped unsigned integer ( byte [ ] data , int offset ) { long low = ( ( ( data [ offset + num_ ] & num_ ) << num_ ) + ( ( data [ offset + num_ ] & num_ ) << num_ ) + ( ( data [ offset + num_ ] & num_ ) << num_ ) ) ; long high = data [ offset + num_ ] & num_ ; return ( high << num_ ) + ( num_ & low ) ; }
public abstract xs simple type create type union ( string name , string target namespace , short final set , xs simple type [ ] member types , xs object list annotations ) ;
public static void main ( final string [ ] args ) { dom test case . do main ( get named item n s 0 2 . class , args ) ; }
public static long parse date as epoch ( string date str ) { try { return date utils . parse date ( date str ) . get time ( ) ; } catch ( date parse exception e ) { return num_ ; } }
public concurrent off heap hash map ( page source table source , factory < ? extends storage engine < ? super k , ? super v > > storage engine factory ) { super ( new read write locked off heap hash map factory < k , v > ( table source , storage engine factory ) ) ; }
private void create and open project ( i project project , i project description desc , i progress monitor monitor ) throws svn exception { try { monitor . begin task ( null , num_ ) ; if ( project . exists ( ) ) { if ( desc != null ) { project . move ( desc , bool_ , policy . sub monitor for ( monitor , num_ ) ) ; } } else { if ( desc == null ) { project . create ( policy . sub monitor for ( monitor , num_ ) ) ; } else { project . create ( desc , policy . sub monitor for ( monitor , num_ ) ) ; } } if ( ! project . is open ( ) ) { project . open ( policy . sub monitor for ( monitor , num_ ) ) ; } } catch ( core exception e ) { throw svn exception . wrap exception ( e ) ; } finally { monitor . done ( ) ; } }
public static < m > simple list < m > create ( view view , css css , list item renderer < m > item renderer , list event delegate < m > event delegate ) { return new simple list < m > ( view , view , view , css , item renderer , event delegate ) ; }
public iri create iri ( string iri ) ;
public void update idle time ( long idle time ) ;
public boolean is lock subject ( ) ;
private boolean is pool matches capacity for thick provisioning ( storage pool pool , long required capacity in kb ) { if ( required capacity in kb > pool . get free capacity ( ) ) { _log . info ( string . format ( str_ , pool . get id ( ) , pool . get free capacity ( ) . long value ( ) , required capacity in kb ) ) ; return bool_ ; } if ( ! check thick pool candidacy ( pool , required capacity in kb , _coordinator ) ) { string msg = string . format ( str_ , pool . get id ( ) , num_ - get thick pool free capacity percentage ( pool , required capacity in kb ) , get max pool utilization percentage ( pool , _coordinator ) ) ; _log . info ( msg ) ; return bool_ ; } return bool_ ; }
public boolean is stop on focus lost ( ) { return this . stop on focus lost ; }
protected void update node and children ( node ref node ) { update node [ node . get number ( ) ] = bool_ ; for ( int i = num_ ; i < tree model . get child count ( node ) ; i ++ ) { node ref child = tree model . get child ( node , i ) ; update node [ child . get number ( ) ] = bool_ ; } likelihood known = bool_ ; }
public static void main ( final string [ ] args ) { dom test case . do main ( hc _attrappendchild 5 . class , args ) ; }
protected token token ( token type type , int t start , int t length , int new start , int new length ) { token start = new start ; token length = new length ; return new token ( type , t start , t length ) ; }
public v put ( k key , v value ) ;
public material edit text input size ( float size ) { m input text size = size ; m edit text . set text size ( m input text size ) ; m hint . set text size ( m input text size ) ; return this ; }
public void kill container ( final kill container params params ) throws io exception { try ( docker connection connection = connection factory . open connection ( docker daemon uri ) . method ( str_ ) . path ( api version path prefix + str_ + params . get container ( ) + str_ ) ) { add query param if not null ( connection , str_ , params . get signal ( ) ) ; final docker response response = connection . request ( ) ; if ( n o_ content . get status code ( ) != response . get status ( ) ) { throw get docker exception ( response ) ; } } }
string parse concatenated string ( ) ;
public attribute ( final char sequence name ) { this . name = new mutable string ( name ) ; }
public boolean is class path entry ( final file bean file ) { return is class path entry ( file . get path ( ) ) ; }
public void cancel empty touch area feedback ( ) { remove messages ( empt y_ touc h_ area ) ; if ( m cached touched node != null ) { m cached touched node . recycle ( ) ; m cached touched node = null ; } }
public void event occurred ( database event event ) ;
public link gui list ( link link ) throws io exception { this . link = link ; link . start ( link . gu i_ header ) ; link . dos . write float ( version ) ; }
public texture ( int width , int height , int pixel format ) throws exception { this . id = gl gen textures ( ) ; this . width = width ; this . height = height ; gl bind texture ( g l_ textur e _ 2 d , this . id ) ; gl tex image 2 d ( g l_ textur e _ 2 d , num_ , g l_ dept h_ component , this . width , this . height , num_ , pixel format , g l_ float , ( byte buffer ) null ) ; gl tex parameteri ( g l_ textur e _ 2 d , g l_ textur e_ mi n_ filter , g l_ nearest ) ; gl tex parameteri ( g l_ textur e _ 2 d , g l_ textur e_ ma g_ filter , g l_ nearest ) ; gl tex parameteri ( g l_ textur e _ 2 d , g l_ textur e_ wra p_ s , g l_ clam p_ t o_ edge ) ; gl tex parameteri ( g l_ textur e _ 2 d , g l_ textur e_ wra p_ t , g l_ clam p_ t o_ edge ) ; }
public void reset document locator ( string publicid , string systemid ) ;
int flip triangles ( long [ ] flipped b ) { final int size = tris . size ( ) ; int numflips = num_ ; bits util . zero i ( flipped b ) ; for ( int i = num_ ; i < size ; i ++ ) { if ( ! bits util . get ( flipped b , i ) && flip triangle ( i , flipped b ) >= num_ ) { numflips += num_ ; } } if ( log . is debugging finest ( ) ) { log . debug finest ( str_ + numflips ) ; } return numflips ; }
protected boolean accept file ( string file path str ) { if ( fs . get scheme ( ) . equals ignore case ( str_ ) && file path str . ends with ( fil e_ bein g_ copied ) ) { return bool_ ; } if ( regex != null ) { matcher matcher = regex . matcher ( file path str ) ; if ( ! matcher . matches ( ) ) { return bool_ ; } } if ( ignore regex != null ) { matcher matcher = ignore regex . matcher ( file path str ) ; if ( matcher . matches ( ) ) { return bool_ ; } } return bool_ ; }
public base dialog ( context context ) { super ( context ) ; set dialog theme ( ) ; m context = context ; m tag = get class ( ) . get simple name ( ) ; set canceled on touch outside ( bool_ ) ; log . d ( m tag , str_ ) ; }
public static void main ( final string [ ] args ) { dom test case . do main ( nodesetprefix 0 7 . class , args ) ; }
public static string escape html ( char sequence text ) { string builder out = new string builder ( ) ; within style ( out , text , num_ , text . length ( ) ) ; return out . to string ( ) ; }
public static object serialize and recover ( object o ) { try { byte array output stream bos = new byte array output stream ( ) ; object output stream so = new object output stream ( bos ) ; so . write object ( o ) ; byte array input stream bis = new byte array input stream ( bos . to byte array ( ) ) ; object input stream si = new object input stream ( bis ) ; return si . read object ( ) ; } catch ( io exception ioe ) { return null ; } catch ( class not found exception cnfe ) { return null ; } }
public template value ( template line template line ) { this . template line = template line ; template value = new string builder ( ) ; }
public boolean uses local file per table ( ) throws sql exception { return bool_ ; }
private boolean is similar signature ( method possibly matching method , string desired method name , class < ? > [ ] desired param types ) { return possibly matching method . get name ( ) . equals ( desired method name ) && match ( possibly matching method . get parameter types ( ) , desired param types ) ; }
public boolean is set versions ( ) { return this . versions != null ; }
public i json array add ( i json object value , boolean clone ) ;
public boolean contains ( lalr _item itm ) { return _all . contains key ( itm ) ; }
public void close ( ) throws pcal resource file reader exception { try { input reader . close ( ) ; } catch ( java . io . io exception e ) { throw new pcal resource file reader exception ( str_ + name + str_ + str_ ) ; } ; }
protected string build create schema statement ( ) throws replicator exception { return null ; }
public list < jc type parameter > translate type params ( list < jc type parameter > trees ) { for ( list < jc type parameter > l = trees ; l . non empty ( ) ; l = l . tail ) l . head = translate ( l . head ) ; return trees ; }
protected void profile updated ( profile profile ) { }
< t > description append value list ( string start , string separator , string end , t ... values ) ;
private void show feedback ( string message ) { if ( my host != null ) { my host . show feedback ( message ) ; } else { system . out . println ( message ) ; } }
public boolean is audit enabled ( ) { return audit enabled ; }
protected source process source ( stylesheet handler handler , source source ) { return source ; }
public char [ ] qualified package name ( ) { package binding package binding = get package ( ) ; return package binding == null || package binding . compound name == char operation . n o_ cha r_ char ? char operation . n o_ char : package binding . readable name ( ) ; }
public void enable plugin ( plugin plugin ) ;
public static annotated type mirror replace ( annotated type mirror type , map < ? extends annotated type mirror , ? extends annotated type mirror > replacement map ) { return new visitor ( replacement map ) . visit ( type ) ; }
protected base game activity ( int requested clients ) { super ( ) ; set requested clients ( requested clients ) ; }
public void add value ( point p ) { m series . add ( p . x , p . y ) ; }
public static void i ( string tag , string msg , object ... args ) { if ( s level > leve l_ info ) { return ; } if ( args . length > num_ ) { msg = string . format ( msg , args ) ; } log . i ( tag , msg ) ; }
public void reset state ( ) { session state . clear ( ) ; }
public synchronized void add listener ( update listener listener ) { if ( listener == null ) { throw new illegal argument exception ( str_ ) ; } for ( update listener existing : listeners ) { if ( existing == listener ) { return ; } } listeners = ( update listener [ ] ) collection util . array expand add single ( listeners , listener ) ; }
public storage center find storage center ( string ssn ) throws storage center api exception { storage center [ ] scs = get storage center info ( ) ; for ( storage center sc : scs ) { if ( ssn . equals ( sc . sc serial number ) ) { return sc ; } } throw new storage center api exception ( string . format ( str_ , ssn ) ) ; }
public static boolean is header ( header hdr ) { boolean found = hdr . get boolean value ( simple ) ; if ( ! found ) { string xtension = hdr . get string value ( xtension ) ; xtension = xtension == null ? str_ : xtension . trim ( ) ; if ( xtensio n_ image . equals ( xtension ) || str_ . equals ( xtension ) ) { found = bool_ ; } } if ( ! found ) { return bool_ ; } return ! hdr . get boolean value ( groups ) ; }
protected void dump blocked threads ( ) { vm . sys write ( str_ ) ; entering . dump ( ) ; }
public click guard add ( view view ) { if ( view == null ) { throw new illegal argument exception ( str_ ) ; } on click listener listener = retrieve on click listener ( view ) ; if ( listener == null ) { throw new illegal state exception ( str_ + integer . to hex string ( view . get id ( ) ) + str_ ) ; } view . set on click listener ( wrap on click listener ( listener ) ) ; return this ; }
public custom switch preference ( context context , attribute set attrs ) { super ( context , attrs ) ; }
public void select right ( ) { if ( ! is animation running ) on selected ( bool_ , object y , num_ ) ; }
boolean is inter document cross references enabled ( ) ;
private void check empty ( ) { for ( int i = num_ ; i < grid count ( ) ; i ++ ) { ignite cache < integer , string > cache = jcache ( i ) ; assert equals ( num_ , cache . local size ( ) ) ; assert equals ( num_ , cache . size ( ) ) ; for ( cache peek mode peek mode : cache peek mode . values ( ) ) { assert equals ( num_ , cache . local size ( peek mode ) ) ; assert equals ( num_ , cache . size ( peek mode ) ) ; } } check primary size ( num_ ) ; }
public boolean should stop ( ) { return null != this . max delays && this . max delays <= this . num delays ; }
public static native byte buffer calloc ( int num , int size ) ;
public void modify member ship ( sso token token , set members , string target , int type , int operation ) throws am exception ;
public boolean check authentication ( final http servlet request request ) { return defaul t_ checkauthentication ; }
public static void e ( string tag , string msg ) { if ( s level > leve l_ error ) { return ; } log . e ( tag , msg ) ; }
public static function < string > group concat distinct ( field < ? > field ) { return new distinct argument function < > ( str_ , field ) ; }
public void init components ( ) throws exception { super . init components ( ) ; add help menu ( str_ , bool_ ) ; _memo . get sprog version query ( ) . request version ( this ) ; }
public void reset ( ) { super . reset ( ) ; h1 = num_ ; h2 = num_ ; h3 = num_ ; h4 = num_ ; h5 = num_ ; h6 = num_ ; h7 = num_ ; h8 = num_ ; x off = num_ ; for ( int i = num_ ; i != x . length ; i ++ ) { x [ i ] = num_ ; } }
public static string encode to string ( byte [ ] input , int offset , int len , int flags ) { try { return new string ( encode ( input , offset , len , flags ) , str_ ) ; } catch ( unsupported encoding exception e ) { throw new assertion error ( e ) ; } }
private void save previous image values ( ) { if ( matrix != null && view height != num_ && view width != num_ ) { matrix . get values ( m ) ; prev matrix . set values ( m ) ; prev match view height = match view height ; prev match view width = match view width ; prev view height = view height ; prev view width = view width ; } }
public static list < node pair > all node pairs ( list < node > nodes ) { list < node pair > node pairs = new array list < > ( ) ; for ( int j = num_ ; j < nodes . size ( ) - num_ ; j ++ ) { for ( int k = j + num_ ; k < nodes . size ( ) ; k ++ ) { node pairs . add ( new node pair ( nodes . get ( j ) , nodes . get ( k ) ) ) ; } } return node pairs ; }
protected abstract void verify results ( ) throws exception ;
public upload example ( ) { ored criteria = new array list < criteria > ( ) ; }
private storage port choose candidate ( set < storage port > candidates , map < storage port , long > usage map ) { storage port chosen port = null ; long min usage = long . ma x_ value ; for ( storage port sp : candidates ) { long usage = usage map . get ( sp ) ; _log . debug ( string . format ( str_ , sp . get port name ( ) , usage ) ) ; if ( usage < min usage ) { min usage = usage ; chosen port = sp ; } } return chosen port ; }
public static double [ ] generate uniform ( int l ) { double [ ] ret = new double [ l ] ; java . util . random rgen = new java . util . random ( ) ; for ( int i = num_ ; i < l ; i ++ ) { ret [ i ] = rgen . next double ( ) ; } return ret ; }
public collection < transaction operation > parse ( input stream in ) throws sax exception , io exception { simple sax parser sax parser = new simple sax parser ( ) ; sax parser . set preserve whitespace ( bool_ ) ; transaction sax parser handler = new transaction sax parser ( ) ; sax parser . set listener ( handler ) ; sax parser . parse ( in ) ; return handler . get txn ( ) ; }
public sample collector wait for sample collector ( long timeout ) throws interrupted exception ;
static int decode 4 byte int ( byte [ ] data , int pos ) { int result = data [ pos + num_ ] & num_ ; result = result | ( ( data [ pos + num_ ] & num_ ) << num_ ) ; result = result | ( ( data [ pos + num_ ] & num_ ) << num_ ) ; result = result | ( ( data [ pos ] & num_ ) << num_ ) ; return result ; }
public boolean start prefix mapping ( string prefix , string uri , boolean should flush ) throws org . xml . sax . sax exception { boolean pushed ; int push depth ; if ( should flush ) { flush pending ( ) ; push depth = m _elem context . m _current elem depth + num_ ; } else { push depth = m _elem context . m _current elem depth ; } pushed = m _prefix map . push namespace ( prefix , uri , push depth ) ; if ( pushed ) { m _sax handler . start prefix mapping ( prefix , uri ) ; if ( get should output ns attr ( ) ) { string name ; if ( emptystring . equals ( prefix ) ) { name = str_ ; add attribute always ( xmln s_ uri , name , name , str_ , uri , bool_ ) ; } else { if ( ! emptystring . equals ( uri ) ) { name = str_ + prefix ; add attribute always ( xmln s_ uri , prefix , name , str_ , uri , bool_ ) ; } } } } return pushed ; }
public static void main ( final string [ ] args ) { dom test case . do main ( characterdataindexsizeerrsubstringcountnegative . class , args ) ; }
protected void paint ( synth context context , graphics g ) { }
public int peek eof warning count ( ) { if ( is eof ( ) && get data length ( ) >= num_ ) { return ( byte buffer [ eo f_ warnin g_ coun t_ offset ] & num_ ) | ( ( byte buffer [ eo f_ warnin g_ coun t_ offset + num_ ] & num_ ) << num_ ) ; } return - num_ ; }
private list < container initializer > jsp initializers ( ) { jetty jasper initializer sci = new jetty jasper initializer ( ) ; container initializer initializer = new container initializer ( sci , null ) ; list < container initializer > initializers = new array list < container initializer > ( ) ; initializers . add ( initializer ) ; return initializers ; }
void on remote media player status updated ( ) ;
public static long round ( final double value ) { final long bits = double . double to raw long bits ( value ) ; final int biased exp = ( int ) ( bits > > num_ ) & num_ ; final int shift = num_ - num_ + ma x_ doubl e_ exponent - biased exp ; if ( ( shift & - num_ ) == num_ ) { long extended mantissa = num_ | bits & num_ ; if ( bits < num_ ) { extended mantissa = - extended mantissa ; } return ( extended mantissa > > shift ) + num_ > > num_ ; } else { if ( ant i_ slo w_ casts ) { if ( math . abs ( value ) >= - ( double ) long . mi n_ value ) { return value < num_ ? long . mi n_ value : long . ma x_ value ; } } return ( long ) value ; } }
public void on enter full screen ui hidden ( int adapter index ) ;
public void on close menu ( menu builder menu , boolean all menus are closing ) ;
public final void add element ( e element ) { add ( element ) ; }
public parking agents tracker ( scenario scenario , double distance ) { this . scenario = scenario ; this . distance = distance ; this . car leg agents = new hash set < id > ( ) ; this . link entered agents = new hash set < id > ( ) ; this . selected parkings map = new hash map < id , id > ( ) ; this . last time steps link entered agents = new tree set < id > ( ) ; this . searching agents = new hash set < id > ( ) ; this . next activity facility map = new hash map < id , activity facility > ( ) ; this . agents = new hash map < id , person driver agent impl > ( ) ; }
int peek ( ) throws io exception { return ( peekb >= num_ ) ? peekb : ( peekb = in . read ( ) ) ; }
public void test long string performance ( ) { i spelling corrector sc = get spelling corrector ( ) ; sc . correct ( str_ ) ; }
public static void remove placeholder ( uri uri ) { s sessions to sizes . remove ( uri ) ; s sessions to placeholder bitmap . remove ( uri ) ; s sessions to placeholder versions . remove ( uri ) ; }
statistics statistics ( ) ;
public event spec create event spec ( ) { event spec impl event spec = new event spec impl ( ) ; return event spec ; }
public void destroy sts instance ( server server ) throws sts publish exception ;
public boolean guarantees old value ( ) { return ( this . op details & o p_ detail s_ guarantee s_ ol d_ value ) != num_ ; }
public static void v ( string tag , string msg , throwable tr ) { println ( verbose , tag , msg , tr ) ; }
public void delete ( byte [ ] term hash ) throws io exception ;
private field type signature [ ] parse bounds ( ) { list < field type signature > fts = new array list < > ( num_ ) ; if ( current ( ) == str_ ) { advance ( ) ; switch ( current ( ) ) { case str_ : break ; default : fts . add ( parse field type signature ( ) ) ; } while ( current ( ) == str_ ) { advance ( ) ; fts . add ( parse field type signature ( ) ) ; } } else error ( str_ ) ; return fts . to array ( new field type signature [ fts . size ( ) ] ) ; }
protected enum control ( type type , object [ ] values , object value ) { super ( type ) ; this . values = values ; this . value = value ; }
pooled byte buffer new byte buffer ( input stream input stream ) throws io exception ;
public static list property descriptors ( int api level ) { if ( api level == ast . jl s 2 _ internal ) { return propert y_ descriptor s _ 2 _ 0 ; } else { return propert y_ descriptor s _ 3 _ 0 ; } }
public combo menu ( string label ) { super ( label ) ; icon renderer = new arrow icon ( swing constants . south , bool_ ) ; set border ( new etched border ( ) ) ; set icon ( new blank icon ( null , num_ ) ) ; set horizontal text position ( j button . left ) ; set focus painted ( bool_ ) ; }
public long read long ( string field name ) ;
public void close ( ) { }
public static s m_ syste m_ message st r_ ms g_ comba t_ othe r_ hostil e_ dodge ( string value 0 , string value 1 ) { return new s m_ syste m_ message ( num_ , value 0 , value 1 ) ; }
public void call visitors ( expression owner owner , x path visitor visitor ) { if ( visitor . visit step ( owner , this ) ) { call predicate visitors ( visitor ) ; if ( null != m _next walker ) { m _next walker . call visitors ( this , visitor ) ; } } }
public synchronized boolean contains all ( collection c ) { return super . contains all ( c ) ; }
public necronomicon enchantment ritual ( string unlocalized name , int book type , int dimension , float required energy , enchantment data enchantment , object ... offerings ) { this ( unlocalized name , book type , dimension , required energy , bool_ , enchantment , offerings ) ; }
boolean distribute ( ) { cache distribution advisor advisor = this . r . get cache distribution advisor ( ) ; set recipients = advisor . advise cache op role ( this . role ) ; if ( recipients . is empty ( ) ) { return bool_ ; } reply processor 2 1 processor = new reply processor 2 1 ( this . dm , recipients ) ; send queue message msg = new send queue message ( ) ; msg . set recipients ( recipients ) ; msg . set region path ( this . r . get full path ( ) ) ; msg . set processor id ( processor . get processor id ( ) ) ; msg . set operations ( this . l ) ; dm . put outgoing ( msg ) ; try { processor . wait for replies ( ) ; } catch ( interrupted exception ex ) { thread . current thread ( ) . interrupt ( ) ; } catch ( reply exception ex ) { ex . handle as unexpected ( ) ; } if ( msg . get successful recipients ( ) . is empty ( ) ) { return bool_ ; } this . r . get cache perf stats ( ) . inc reliable queued ops ( - l . size ( ) ) ; this . l . clear ( ) ; return bool_ ; }
public default ( solr resource loader loader , string config set base ) { super ( loader ) ; this . config set base = resolve base directory ( loader , config set base ) ; }
public static void filled circle ( double x , double y , double r ) { if ( r < num_ ) throw new illegal argument exception ( str_ ) ; double xs = scale x ( x ) ; double ys = scale y ( y ) ; double ws = factor x ( num_ * r ) ; double hs = factor y ( num_ * r ) ; if ( ws <= num_ && hs <= num_ ) pixel ( x , y ) ; else offscreen . fill ( new ellipse 2 d . double ( xs - ws / num_ , ys - hs / num_ , ws , hs ) ) ; draw ( ) ; }
public boolean satisfied by obligations ( int [ ] obligation state numbers ) { boolean [ ] child values = new boolean [ obligation state numbers . length ] ; for ( int i = num_ ; i < obligation state numbers . length ; i ++ ) { long bit = num_ << obligation state numbers [ i ] ; child values [ i ] = ( bit & this . set ) != num_ ; } return this . satisfied based on children values ( child values ) ; }
public void fail ( recovery failed exception e , boolean send shard failure ) { if ( finished . compare and set ( bool_ , bool_ ) ) { try { listener . on recovery failure ( state ( ) , e , send shard failure ) ; } finally { try { cancellable threads . cancel ( str_ + e . get message ( ) + str_ ) ; } finally { dec ref ( ) ; } } } }
void rewind ( ) ;
public ts data scan dir ( path dir ) throws io exception { this ( require non null ( dir ) , file _listing _ ( require non null ( dir ) ) . parallel stream ( ) . map ( null ) . flat map ( null ) . sorted ( null ) . collect ( collectors . to list ( ) ) ) ; }
public cannot compile exception ( class format error e , string name ) { this ( str_ + name , e ) ; }
public double remove ( final int key ) { final int hash = hash of ( key ) ; int index = hash & mask ; if ( contains key ( key , index ) ) { return do remove ( index ) ; } if ( states [ index ] == free ) { return missing entries ; } int j = index ; for ( int perturb = perturb ( hash ) ; states [ index ] != free ; perturb >>= pertur b_ shift ) { j = probe ( perturb , j ) ; index = j & mask ; if ( contains key ( key , index ) ) { return do remove ( index ) ; } } return missing entries ; }
public void entered first component ( int component index , byte array component ) ;
boolean is dispatch thread ( ) ;
public matrix 4 trn ( vector 3 vector ) { val [ m 0 3 ] += vector . x ; val [ m 1 3 ] += vector . y ; val [ m 2 3 ] += vector . z ; return this ; }
public void write exif ( input stream jpeg stream , output stream exif out stream ) throws io exception { if ( jpeg stream == null || exif out stream == null ) { throw new illegal argument exception ( nul l_ argumen t_ string ) ; } output stream s = get exif writer stream ( exif out stream ) ; do exif stream io ( jpeg stream , s ) ; s . flush ( ) ; }
public void populate filter resolved info ( dim column resolved filter info visitable obj , filter resolver metadata metadata ) throws filter unsupported exception { dim column filter info resolved filter object = null ; list < string > evaluate result list final ; try { evaluate result list final = metadata . get expression ( ) . evaluate ( null ) . get list as string ( ) ; } catch ( filter illegal member exception e ) { throw new filter unsupported exception ( e ) ; } try { resolved filter object = filter util . get filter values ( metadata . get table identifier ( ) , metadata . get column expression ( ) , evaluate result list final , metadata . is include filter ( ) ) ; if ( ! metadata . is include filter ( ) && null != resolved filter object ) { resolved filter object . get filter list ( ) . add ( carbon common constants . membe r_ defaul t_ va l_ surrogat e_ key ) ; collections . sort ( resolved filter object . get filter list ( ) ) ; } } catch ( query execution exception e ) { throw new filter unsupported exception ( e ) ; } visitable obj . set filter values ( resolved filter object ) ; }
private void show player list ( ) { if ( player list dialog == null ) { player list dialog = new player list dialog ( frame , client ) ; } player list dialog . set visible ( bool_ ) ; }
public static subject key identifier decode ( byte [ ] encoding ) throws io exception { subject key identifier res = new subject key identifier ( ( byte [ ] ) as n1 octet string . get instance ( ) . decode ( encoding ) ) ; res . encoding = encoding ; return res ; }
public void line ( string src name , paint color , string legend ) { line ( src name , color , legend , num_ , bool_ ) ; }
void neuron moved ( network event < neuron > network event ) ;
public static invoke expr new static invoke expr ( soot method ref method ) { return new j static invoke expr ( method , new array list ( ) ) ; }
public final void load ( string locale ) { if ( locale != null ) locale = locale . replace ( str_ , str_ ) ; try { url url = locale == null ? this . get default language file ( ) : this . get class ( ) . get resource ( str_ + locale + str_ ) ; if ( url == null ) { url = this . get default language file ( ) ; } input stream reader reader = new input stream reader ( url . open stream ( ) , standard charsets . ut f _ 8 ) ; this . parse ( new buffered reader ( reader ) ) ; } catch ( io exception ex ) { rewi mod . logger . fatal ( str_ , ex ) ; } }
double distance deg ( double lat 1 , double lng 1 , double lat 2 , double lng 2 ) ;
static boolean is reparse point ( int attributes ) { return ( attributes & fil e_ attribut e_ repars e_ point ) != num_ ; }
void delete namespace from user ( user user , string namespace ) ;
private void select neurons ( ) { list < neuron node > nodes = new array list < neuron node > ( ) ; for ( neuron neuron : neuron group . get neuron list ( ) ) { nodes . add ( ( neuron node ) get network panel ( ) . get object node map ( ) . get ( neuron ) ) ; } get network panel ( ) . clear selection ( ) ; get network panel ( ) . set selection ( nodes ) ; }
public r1 interval expanded ( double radius ) { if ( is empty ( ) ) { return this ; } return new r1 interval ( lo ( ) - radius , hi ( ) + radius ) ; }
private boolean is test mode ( ) { return ( ( system . get property ( str_ ) ) != null && ( system . get property ( str_ ) . equals ( str_ ) ) ) ; }
public string debug tip text ( ) ;
private void assign services ( organization config manager ocm , list new service names ) throws sms exception { try { set assigned services = ocm . get assigned services ( ) ; set all services = new hash set ( new service names . size ( ) + assigned services . size ( ) ) ; all services . add all ( assigned services ) ; all services . add all ( new service names ) ; for ( object tmp : all services ) { string service name = ( string ) tmp ; if ( new service names . contains ( service name ) && assigned services . contains ( service name ) ) { } else if ( new service names . contains ( service name ) && ! assigned services . contains ( service name ) ) { ocm . assign service ( service name , null ) ; } else if ( ! new service names . contains ( service name ) && assigned services . contains ( service name ) ) { ocm . unassign service ( service name ) ; } } } catch ( sms exception smse ) { debug . error ( str_ ) ; throw smse ; } }
public boolean rename ( string name ) { if ( name == null || name . length ( ) <= num_ ) throw new null pointer exception ( str_ ) ; else if ( ! is connected ( ) ) { on error ( one sheeld error . devic e_ no t_ connected ) ; return bool_ ; } else if ( is updating firmware ( ) ) { on error ( one sheeld error . firmwar e_ updat e_ i n_ progress ) ; return bool_ ; } else if ( has renaming started ) { log . i ( str_ + this . name + str_ ) ; return bool_ ; } renaming retries = ma x_ renamin g_ retrie s_ number ; has renaming started = bool_ ; return send renaming request ( name ) ; }
public vector minus ( vector other ) { return new vector ( x - other . x , y - other . y ) ; }
public void add messages ( list < ? extends message > messages ) { if ( sho w_ logs ) logger . v ( tag , str_ + messages ) ; m queue lock . lock ( tag ) ; m player messages queue . add all ( messages ) ; m queue lock . notify ( tag ) ; if ( sho w_ logs ) logger . v ( tag , str_ + messages ) ; m queue lock . unlock ( tag ) ; }
public void take snapshot ( string tag , string ... keyspace names ) throws io exception ;
public cursor query ( sq lite database db , string [ ] projection in , string selection , string [ ] selection args , string group by , string having , string sort order ) { return query ( db , projection in , selection , selection args , group by , having , sort order , null , null ) ; }
public static image source resource ( int res id ) { return new image source ( res id ) ; }
public static void run ( ) { singleton = new api call specialization ( ) ; singleton . find specialized methods ( ) ; }
protected contextual search scene layer create new contextual search scene layer ( ) { return new contextual search scene layer ( m context . get resources ( ) . get display metrics ( ) . density ) ; }
protected void update button day date ( button day button , int year , int current month , int day ) { update button day date ( day button , current month , day ) ; }
private abstract node create higher levels ( list boundables of a level , int level ) { assert . is true ( ! boundables of a level . is empty ( ) ) ; list parent boundables = create parent boundables ( boundables of a level , level + num_ ) ; if ( parent boundables . size ( ) == num_ ) { return ( abstract node ) parent boundables . get ( num_ ) ; } return create higher levels ( parent boundables , level + num_ ) ; }
public raptor state deep copy ( ) { raptor state state = this ; raptor state ret = this . copy ( ) ; raptor state copy = ret ; while ( state . previous != null ) { copy . previous = state . previous . copy ( ) ; copy . previous . previous = null ; state = state . previous ; copy = copy . previous ; } return ret ; }
public static instances remove instance id ( instances data , boolean multilabel ) throws exception { instances filtered data ; int class index = data . class index ( ) ; if ( data . attribute ( constants . i d_ featur e_ name ) != null ) { int instance id offset = data . attribute ( constants . i d_ featur e_ name ) . index ( ) ; remove remove = new remove ( ) ; remove . set attribute indices ( integer . to string ( instance id offset + num_ ) ) ; remove . set invert selection ( bool_ ) ; remove . set input format ( data ) ; filtered data = filter . use filter ( data , remove ) ; } else { filtered data = new instances ( data ) ; } if ( multilabel ) { filtered data . set class index ( class index ) ; } return filtered data ; }
public static com . linkedin . camus . example . records . dummy log 2 . builder new builder ( ) { return new com . linkedin . camus . example . records . dummy log 2 . builder ( ) ; }
private void start animation ( ) { init animation ( ) ; s animations . get ( ) . add ( this ) ; if ( m start delay > num_ && m listeners != null ) { array list < animator listener > tmp listeners = ( array list < animator listener > ) m listeners . clone ( ) ; int num listeners = tmp listeners . size ( ) ; for ( int i = num_ ; i < num listeners ; ++ i ) { tmp listeners . get ( i ) . on animation start ( this ) ; } } }
public reference ( string class name ) { this . class name = class name ; addrs = new vector < > ( ) ; }
int size ( ) ;
public int [ ] indexes ( ) { return _indexes ; }
public ignite checked exception ( string msg ) { super ( msg ) ; }
public void not ( ) { mv . visit insn ( opcodes . icons t _ 1 ) ; mv . visit insn ( opcodes . ixor ) ; }
public boolean refresh ( ) { if ( dbg ) log . d ( tag , str_ + m device . get address ( ) ) ; if ( m service == null || m client if == num_ ) return bool_ ; try { m service . refresh device ( m client if , m device . get address ( ) ) ; } catch ( remote exception e ) { log . e ( tag , str_ , e ) ; return bool_ ; } return bool_ ; }
abstract public void reset timeout ( abstract mr message m ) ;
default completable future < all events slice > read all events backward ( position position , int max count , boolean resolve link tos ) { return read all events backward ( position , max count , resolve link tos , null ) ; }
public void activity stepped ( activity a ) ;
public void add create ( i resource create ) { if ( f create == null ) f create = new array list < i resource > ( num_ ) ; f create . add ( create ) ; if ( f ignore count == num_ ) { internal add ( new create description ( create ) ) ; } }
public void skip bytes ( long total num bytes to skip ) throws io exception { try ( buffered input stream input stream = new buffered input stream ( new file input stream ( this . input file ) ) ) { skip bytes ( input stream , this . position + total num bytes to skip ) ; this . position += total num bytes to skip ; } }
public static s m_ syste m_ message st r_ idshulackshi p_ ope n_ door ( string value 0 , string value 1 ) { return new s m_ syste m_ message ( num_ , value 0 , value 1 ) ; }
public void close ( ) throws cq closed exception , cq exception ;
void draw border ( graphics g , component c , int top and right color , int bottom and left color , int border width ) { g . set color ( top and right color ) ; g . fill rect ( c . get x ( ) , c . get y ( ) , c . get width ( ) , border width ) ; g . fill rect ( c . get x ( ) , c . get y ( ) , border width , c . get height ( ) ) ; g . set color ( bottom and left color ) ; g . fill rect ( c . get x ( ) , c . get y ( ) + c . get height ( ) - border width , c . get width ( ) , border width ) ; g . fill rect ( c . get x ( ) + c . get width ( ) - border width , c . get y ( ) , border width , c . get height ( ) ) ; }
private void downgrade easy correction spans ( ) { char sequence text = m text view . get text ( ) ; if ( text instanceof spannable ) { spannable spannable = ( spannable ) text ; suggestion span [ ] suggestion spans = spannable . get spans ( num_ , spannable . length ( ) , suggestion span . class ) ; for ( int i = num_ ; i < suggestion spans . length ; i ++ ) { int flags = suggestion spans [ i ] . get flags ( ) ; if ( ( flags & suggestion span . fla g_ eas y_ correct ) != num_ && ( flags & suggestion span . fla g_ misspelled ) == num_ ) { flags &= ~ suggestion span . fla g_ eas y_ correct ; suggestion spans [ i ] . set flags ( flags ) ; } } } }
void save gpx command ( int id ) ;
public case switch expression ( ) { }
public void mouse exited ( java . awt . event . mouse event e ) { }
public void on ffmpeg selected ( file selection ) { if ( selection == null ) { system . err . println ( str_ + str_ ) ; } else { string ffmpeg _path = selection . get absolute path ( ) ; settings . put ( setting s_ ffmpe g_ path , ffmpeg _path ) ; start ffmpeg ( ffmpeg _path ) ; } }
public void replace favicon ( bitmap favicon , int fundamental color ) { init ( favicon , fundamental color ) ; request layout ( ) ; }
public set container host mapping ( coordinator stream message message ) { super ( message . get key array ( ) , message . get message map ( ) ) ; }
public static int kronecker delta ( double i , double j ) { return ( i == j ) ? num_ : num_ ; }
protected result plot create chart ( string metric ) { if ( metric . equals ( str_ ) ) { return new approximation set plot ( this , metric ) ; } else { return new line plot ( this , metric ) ; } }
map < string , object > as map ( ) ;
public signature visitor visit array type ( ) { return this ; }
public void add ( log info phase ) { body . put ( phase . get name ( ) , phase ) ; }
boolean is item registered ( string name ) ;
public t delay translation x ( float ... transitions ) { get delayed processor ( ) . add process ( translatio n_ x , transitions ) ; return self ( ) ; }
void count ( key range < string > key range , database count callback callback ) ;
public static list property descriptors ( int api level ) { if ( api level == ast . jl s 2 _ internal ) { return propert y_ descriptor s _ 2 _ 0 ; } else { return propert y_ descriptor s _ 3 _ 0 ; } }
public boolean has sub element ( string name ) { if ( sub elements == null ) { return bool_ ; } return sub elements . contains key ( name ) ; }
public void user session activated ( final user session event e ) ;
public static long [ ] to long array ( double [ ] array ) { long [ ] result = new long [ array . length ] ; for ( int i = num_ ; i < array . length ; i ++ ) { result [ i ] = ( long ) array [ i ] ; } return result ; }
public void send email ( string subject , string message ) { process email ( new email data ( subject , message ) ) ; }
public static distributed log client builder new builder ( ) { return new distributed log client builder ( ) ; }
protected int estimate name value pair len ( final name value pair nvp ) { if ( nvp == null ) return num_ ; int result = nvp . get name ( ) . length ( ) ; final string value = nvp . get value ( ) ; if ( value != null ) { result += num_ + value . length ( ) ; } return result ; }
private static string concat with separator ( collection < string > words , string separator ) { string builder word list = new string builder ( ) ; for ( string word : words ) { word list . append ( new string ( word ) + separator ) ; } return new string ( word list . delete char at ( word list . length ( ) - num_ ) ) ; }
value do value ( lir instruction instruction , value value , operand mode mode , enum set < operand flag > flags ) ;
public void register project type ( project type def project type ) throws project type constraint exception { if ( is name valid ( project type ) && is parent valid ( project type , validated data ) ) { validated data . put ( project type . get id ( ) , project type ) ; init ( project type ) ; } }
private javascript compiler ( string source text , map < string , method > functions ) { if ( source text == null ) { throw new null pointer exception ( ) ; } this . source text = source text ; this . functions = functions ; }
public sort clause ( string item , string order ) { this ( item , order . value of ( order ) ) ; }
public root element ( string local name ) { this ( str_ , local name ) ; }
public char matcher negate ( ) { return new negated ( this ) ; }
public base resource create resource ( final class < ? extends base resource > clazz ) { try { final base resource resource = clazz . new instance ( ) ; injector . inject members ( resource ) ; return resource ; } catch ( final exception e ) { logger . error ( str_ + clazz + str_ , e ) ; throw throwables . propagate ( e ) ; } }
public static path point line to ( float x , float y ) { return new path point ( line , x , y ) ; }
private boolean is load more ( ) { return m next load enable && page size != - num_ && m request load more listener != null && m data . size ( ) >= page size ; }
public result filter only ( list < string > sources ) { result ret = new result ( ) ; for ( result entry l : this . log ) { if ( sources . contains ( l . get source ( ) ) ) { ret . add ( l ) ; } } return ret ; }
public static double log pdf ( double x , double lower , double upper ) { if ( x < lower || x > upper ) return double . negativ e_ infinity ; return - math . log ( upper - lower ) ; }
public boolean is auto tick unit selection ( ) { return this . auto tick unit selection ; }
private tree item map ( ) { create tree item map ( ) ; }
public void remove listener ( env loader listener listener ) { array list < env loader listener > listeners = _listeners ; if ( listeners == null ) return ; synchronized ( listeners ) { for ( int i = listeners . size ( ) - num_ ; i >= num_ ; i -- ) { env loader listener old listener = listeners . get ( i ) ; if ( listener == old listener ) { listeners . remove ( i ) ; return ; } else if ( old listener == null ) listeners . remove ( i ) ; } } }
public int size ( ) { return shards . size ( ) ; }
public boolean segment intersects ( double lat 1 , double lng 1 , double lat 2 , double lng 2 ) { int n vert = points . size ( ) ; lat long last = points . get ( n vert - num_ ) ; double xj = last . lng ; double yj = last . lat ; for ( int i = num_ ; i < n vert ; i ++ ) { double yi = points . get ( i ) . lat ; double xi = points . get ( i ) . lng ; if ( segment intersects ( xj , yj , xi , yi , lng 1 , lat 1 , lng 2 , lat 2 ) ) return bool_ ; xj = xi ; yj = yi ; } return bool_ ; }
public monitored host provider ( host identifier host id ) { this . host id = host id ; this . listeners = new array list < host listener > ( ) ; this . interval = defaul t_ pollin g_ interval ; this . active vms = new hash set < integer > ( ) ; this . vm manager = new local vm manager ( ) ; }
private void reset notes ( ) { if ( error in status 1 ) { if ( edit mode ) { status text 1 . set text ( edit status 1 ) ; } else { status text 1 . set text ( std status 1 ) ; } error in status 1 = bool_ ; } reset notes 2 ( ) ; }
public boolean has operator ( string operator id ) { return adjacency list . contains key ( operator id ) ; }
public java cl settings panel ( ) { init components ( ) ; border border = ui manager . get border ( str_ ) ; if ( border == null ) border = new etched border ( ) ; settings panel . set border ( new titled border ( border , str_ ) ) ; platform combo . set model ( new default combo box model ( get platforms ( ) . to array ( ) ) ) ; platform changed ( null ) ; normal butt action performed ( null ) ; }
public static big integer size of directory as big integer ( file directory ) { check directory ( directory ) ; final file [ ] files = directory . list files ( ) ; if ( files == null ) { return big integer . zero ; } big integer size = big integer . zero ; for ( final file file : files ) { try { if ( ! is symlink ( file ) ) { size = size . add ( big integer . value of ( size of ( file ) ) ) ; } } catch ( io exception ioe ) { } } return size ; }
public void box ( final type type ) { if ( type . get sort ( ) == type . object || type . get sort ( ) == type . array ) { return ; } if ( type == type . voi d_ type ) { push ( ( string ) null ) ; } else { type boxed = get boxed type ( type ) ; new instance ( boxed ) ; if ( type . get size ( ) == num_ ) { dup x2 ( ) ; dup x2 ( ) ; pop ( ) ; } else { dup x1 ( ) ; swap ( ) ; } invoke constructor ( boxed , new method ( str_ , type . voi d_ type , new type [ ] { type } ) ) ; } }
public void update password history ( string username , string hashed password , calendar expire time , boolean b reset ) { password history lph = get password history ( username ) ; boolean is new = bool_ ; if ( lph == null ) { is new = bool_ ; lph = new password history ( ) ; lph . set id ( get local password history uri ( username ) ) ; } calendar now = calendar . get instance ( ) ; if ( ! b reset ) { lph . get user password hash ( ) . put ( hashed password , now . get time in millis ( ) ) ; } lph . set expire date ( expire time ) ; if ( is new ) { db client . create object ( lph ) ; } else { db client . update and reindex object ( lph ) ; } }
public standard session ( manager manager ) { super ( ) ; this . manager = manager ; if ( activit y_ check ) { access count = new atomic integer ( ) ; } }
public void test eof ( ) throws exception { string json = str_ + str_ + str_ ; json factory jf = new json factory ( ) ; object mapper mapper = new object mapper ( ) ; json parser jp = jf . create json parser ( new string reader ( json ) ) ; json node result = mapper . read tree ( jp ) ; assert true ( result . is object ( ) ) ; assert equals ( num_ , result . size ( ) ) ; assert null ( mapper . read tree ( jp ) ) ; }
private static void ensure document builder ( ) throws dss exception { if ( db factory != null ) { return ; } db factory = document builder factory . new instance ( ) ; db factory . set namespace aware ( bool_ ) ; try { db factory . set feature ( str_ , bool_ ) ; db factory . set feature ( str_ , bool_ ) ; db factory . set x include aware ( bool_ ) ; db factory . set expand entity references ( bool_ ) ; } catch ( parser configuration exception e ) { throw new dss exception ( e ) ; } }
private void build address selection pop up ( ) { final c address selection dialog dlg = new c address selection dialog ( m _parent , m _modules ) ; dlg . set visible ( bool_ ) ; final i navi module result = dlg . get selection result ( ) ; final i address address = new c address ( long . parse long ( get text ( ) , num_ ) ) ; zy zoom helpers . zoom to address ( m _graph , address , result , bool_ ) ; }
public static native boolean is supported ( ) ;
private static void throw missing resource exception ( string base name , locale locale , throwable cause ) { if ( cause instanceof missing resource exception ) { cause = null ; } throw new missing resource exception ( str_ + base name + str_ + locale , base name + str_ + locale , str_ , cause ) ; }
public static void drop table ( sq lite database db , boolean if exists ) { string sql = str_ + ( if exists ? str_ : str_ ) + str_ ; db . exec sql ( sql ) ; }
public void init ( boolean for encryption , cipher parameters params ) { reset ( ) ; cipher . init ( for encryption , params ) ; buf = new byte [ cipher . get input block size ( ) + ( for encryption ? num_ : num_ ) ] ; buf off = num_ ; }
protected void fire undoable edit update ( undoable edit event e ) { object [ ] listeners = listener list . get listener list ( ) ; for ( int i = listeners . length - num_ ; i >= num_ ; i -= num_ ) { if ( listeners [ i ] == undoable edit listener . class ) { ( ( undoable edit listener ) listeners [ i + num_ ] ) . undoable edit happened ( e ) ; } } }
public instance convert instance ( instance x ) { int l = x . class index ( ) ; instance x _ = ( instance ) x . copy ( ) ; x _ . set dataset ( null ) ; for ( int i = num_ ; i < l ; i ++ ) x _ . delete attribute at ( num_ ) ; x _ . insert attribute at ( num_ ) ; x _ . set dataset ( m _ instances template ) ; return x _ ; }
int net local group get info ( string server name , string group name , int level , pointer by reference group info ) ;
public i closable iterator < k > keys ( ) ;
public base check box ( string label , direction dir ) { this ( ) ; set text ( label , dir ) ; }
public void remove _item ( brd item p _item ) { if ( p _item == null ) return ; p _item . art _item _clear ( ) ; search _tree _manager . remove ( p _item ) ; undo _items . delete ( p _item ) ; observers . notify _deleted ( p _item ) ; }
private jni server socket impl ( string host , int port ) throws io exception { _fd = bind port ( host , port ) ; _id = host + str_ + port ; _host = host ; if ( _fd != num_ ) { } else if ( port < num_ ) { throw new io exception ( l . l ( str_ , host , port , system . get property ( str_ ) ) ) ; } else { throw new io exception ( l . l ( str_ , host , port , system . get property ( str_ ) ) ) ; } }
public static boolean is build below ( int build version ) { if ( build . version . sd k_ int < build version ) return bool_ ; else return bool_ ; }
public static kind name kind name ( int kind ) { switch ( kind ) { case pck : return kind name . package ; case typ : return kind name . class ; case var : return kind name . var ; case val : return kind name . val ; case mth : return kind name . method ; default : throw new assertion error ( str_ + kind ) ; } }
private boolean snap to top on drag finished ( int fling delta ) { if ( ! has ever touched the top ) { final float predicted scroll past top = get transparent view height ( ) - fling delta ; if ( predicted scroll past top < - snap to top slop height ) { return bool_ ; } if ( get transparent view height ( ) <= transparent start height ) { scroller . force finished ( bool_ ) ; smooth scroll by ( get transparent view height ( ) ) ; return bool_ ; } return bool_ ; } if ( get transparent view height ( ) < dismiss distance on release ) { scroller . force finished ( bool_ ) ; smooth scroll by ( get transparent view height ( ) ) ; return bool_ ; } return bool_ ; }
protected final void ge t_ exceptio n_ object ( instruction s ) { burs . ir . stack manager . force frame allocation ( ) ; int offset = burs . ir . stack manager . allocate space for caught exception ( ) ; register fp = regpool . get physical register set ( ) . as ppc ( ) . get fp ( ) ; location operand loc = new location operand ( - offset ) ; emit ( mi r_ load . mutate ( s , pp c_ l addr , nullary . get clear result ( s ) , a ( fp ) , ic ( offset ) , loc , tg ( ) ) ) ; }
private void add ping time data ( long sample ) { last ping times lock . lock ( ) ; try { if ( last ping times == null ) { last ping times = new long [ pin g_ movin g_ averag e_ window ] ; arrays . fill ( last ping times , sample ) ; } else { system . arraycopy ( last ping times , num_ , last ping times , num_ , last ping times . length - num_ ) ; last ping times [ last ping times . length - num_ ] = sample ; } } finally { last ping times lock . unlock ( ) ; } }
public void prepare matrix value px ( float x chart min , float delta x , float delta y , float y chart min ) { float scale x = ( float ) ( ( m view port handler . content width ( ) ) / delta x ) ; float scale y = ( float ) ( ( m view port handler . content height ( ) ) / delta y ) ; m matrix value to px . reset ( ) ; m matrix value to px . post translate ( - x chart min , - y chart min ) ; m matrix value to px . post scale ( scale x , - scale y ) ; }
public long delete attribute value ( final long attribute value pk ) { final attr value entity category value entity category = attr value entity category dao . find by id ( attribute value pk ) ; if ( etype . imag e_ busines s_ type . equals ( value entity category . get attribute ( ) . get etype ( ) . get businesstype ( ) ) ) { image service . delete image ( value entity category . get val ( ) , constants . categor y_ imag e_ repositor y_ ur l_ pattern , system service . get image repository directory ( ) ) ; } attr value entity category dao . delete ( value entity category ) ; return value entity category . get category ( ) . get category id ( ) ; }
private void show selected payment ( payment payment ) { if ( payment != null && selected payment name tv != null && selected payment price tv != null ) { selected payment name tv . set text ( payment . get name ( ) ) ; if ( payment . get price ( ) != num_ ) { selected payment price tv . set text ( payment . get price formatted ( ) ) ; } else { selected payment price tv . set text ( get text ( r . string . free ) ) ; } order total price = payment . get total price ( ) ; order total price tv . set text ( payment . get total price formatted ( ) ) ; } else { timber . e ( str_ ) ; } }
protected svgom text positioning element ( ) { }
public void visit ( int version , int access , string name , string signature , string super name , string [ ] interfaces ) { if ( cv != null ) { cv . visit ( version , access , name , signature , super name , interfaces ) ; } }
public st andrews social network parser ( network network , message propagation simulation sim ) { this . network = network ; this . sim = sim ; }
abstract void impl reset ( ) ;
public static void approximate ( ir ir , boolean forward ) { lt dominators dom = new lt dominators ( ir , forward ) ; ir . set lt dominators ( dom ) ; dom . analyze ( ir ) ; }
e floor ( e e ) ;
public abstract void accept data set ( data set event e ) ;
public static double cos angle ( double [ ] v 1 , double [ ] v 2 ) { return linear combination ( v 1 , v 2 ) / ( safe norm ( v 1 ) * safe norm ( v 2 ) ) ; }
public boolean is pull to refresh over scroll enabled ( ) ;
public object factory ( ) { }
public static boolean apply to ( image holder image holder , image view image view , string tag ) { if ( image holder != null && image view != null ) { return image holder . apply to ( image view , tag ) ; } return bool_ ; }
private void check pending custom messages ( ) { if ( joining nodes . is empty ( ) && is local node coordinator ( ) ) { tcp discovery custom event message msg ; while ( ( msg = pending custom msgs . poll ( ) ) != null ) { process custom message ( msg ) ; if ( msg . verified ( ) ) msg hist . add ( msg ) ; } } }
public synchronized cluster network reconfig status query cluster network reconfig status ( ) throws exception { cluster network reconfig status ip reconfig status = new cluster network reconfig status ( ) ; config = _coordinator . get coordinator client ( ) . query configuration ( ip reconfig constants . confi g_ kind , ip reconfig constants . confi g_ id ) ; if ( config != null ) { cluster network reconfig status . status status = cluster network reconfig status . status . value of ( config . get config ( ip reconfig constants . confi g_ statu s_ key ) ) ; ip reconfig status . set status ( status ) ; if ( is failed ( config ) ) { string errmsg = config . get config ( ip reconfig constants . confi g_ erro r_ key ) ; ip reconfig status . set message ( errmsg ) ; } ip reconfig status . set expiration ( config . get config ( ip reconfig constants . confi g_ expiratio n_ key ) ) ; } return ip reconfig status ; }
private void validate peers ( data page main dp main ) throws io exception { data page main prev main = _data pages . get ( dp main . _prev page number ) ; if ( prev main != null ) { if ( prev main . _next page number != dp main . _page number ) { throw new illegal state exception ( with error context ( str_ + prev main + str_ + dp main ) ) ; } validate peer status ( dp main , prev main ) ; } data page main next main = _data pages . get ( dp main . _next page number ) ; if ( next main != null ) { if ( next main . _prev page number != dp main . _page number ) { throw new illegal state exception ( with error context ( str_ + next main + str_ + dp main ) ) ; } validate peer status ( dp main , next main ) ; } }
public query index ( string field , boolean asc ) { this ( field , query index type . sorted , asc ) ; }
private void return data ( object ret ) { if ( my host != null ) { my host . return data ( ret ) ; } }
protected abstract void write value ( object output out ) throws io exception ;
public int size ( ) { return n ; }
static void accept ( final annotation visitor av , final string name , final object value ) { if ( av != null ) { if ( value instanceof string [ ] ) { string [ ] typeconst = ( string [ ] ) value ; av . visit enum ( name , typeconst [ num_ ] , typeconst [ num_ ] ) ; } else if ( value instanceof annotation node ) { annotation node an = ( annotation node ) value ; an . accept ( av . visit annotation ( name , an . desc ) ) ; } else if ( value instanceof list ) { annotation visitor v = av . visit array ( name ) ; list < ? > array = ( list < ? > ) value ; for ( int j = num_ ; j < array . size ( ) ; ++ j ) { accept ( v , null , array . get ( j ) ) ; } v . visit end ( ) ; } else { av . visit ( name , value ) ; } } }
public plugin result . post response invoke post response extended plugins ( post response extended operation extended operation ) { plugin result . post response result = null ; for ( directory server plugin p : post response extended plugins ) { if ( is internal operation ( extended operation , p ) ) { continue ; } try { result = p . do post response ( extended operation ) ; } catch ( exception e ) { log exception ( extended operation , p , e , er r_ plugi n_ pos t_ respons e_ plugi n_ exception ) ; } if ( result == null ) { log null result ( extended operation , p , er r_ plugi n_ pos t_ respons e_ plugi n_ returne d_ null ) ; } else if ( ! result . continue plugin processing ( ) ) { return result ; } } if ( result == null ) { result = plugin result . post response . continue operation processing ( ) ; } return result ; }
protected abstract boolean emit _ magic ( method reference magic method ) ;
public static component create hint panel ( final component component , final string message ) { preconditions . check not null ( component , str_ ) ; preconditions . check not null ( message , str_ ) ; final j panel panel = new j panel ( new border layout ( ) ) ; panel . add ( component , border layout . center ) ; final j hint icon hint popup = new j hint icon ( message ) ; hint popup . set border ( new empty border ( num_ , num_ , num_ , num_ ) ) ; panel . add ( hint popup , border layout . east ) ; return panel ; }
public void test message relay abort ( ) { message m 1 = new message ( h 1 , h 2 , msg id 1 , buffe r_ size ) ; h 1 . create new message ( m 1 ) ; check creates ( num_ ) ; h 1 . connect ( h 2 ) ; update all nodes ( ) ; assert true ( mc . next ( ) ) ; assert equals ( mc . typ e_ start , mc . get last type ( ) ) ; assert false ( mc . next ( ) ) ; clock . advance ( num_ ) ; update all nodes ( ) ; assert false ( mc . next ( ) ) ; h 2 . set location ( far away ) ; update all nodes ( ) ; assert true ( mc . next ( ) ) ; assert equals ( mc . typ e_ abort , mc . get last type ( ) ) ; assert equals ( h 1 , mc . get last from ( ) ) ; assert false ( mc . next ( ) ) ; }
public static void initialize default values ( ) { i preference store store = get preference store ( ) ; color registry registry = platform ui . get workbench ( ) . get theme manager ( ) . get current theme ( ) . get color registry ( ) ; string nobackgroundbold = str_ ; string justitalic = str_ ; string justbold = str_ ; string style value = color helper . find rgb string ( registry , i style constants for angular . angula r 2 _ expressio n_ border , num_ , num_ , num_ ) + justbold ; store . set default ( i style constants for angular . angula r 2 _ expressio n_ border , style value ) ; style value = str_ + color helper . find rgb string ( registry , i style constants for angular . angula r 2 _ expression , num_ , num_ , num_ ) + str_ ; store . set default ( i style constants for angular . angula r 2 _ expression , style value ) ; style value = color helper . find rgb string ( registry , i style constants for angular . angula r 2 _ directiv e_ name , num_ , num_ , num_ ) + justbold ; store . set default ( i style constants for angular . angula r 2 _ directiv e_ name , style value ) ; store . set default ( angular 2 ui preference names . highlightin g_ directiv e_ enabled , bool_ ) ; store . set default ( angular 2 ui preference names . highlightin g_ expressio n_ enabled , bool_ ) ; store . set default ( angular 2 ui preference names . typin g_ complet e_ en d_ el , bool_ ) ; }
public void on refresh complete ( ) { log . d ( tag , str_ ) ; reset header ( ) ; if ( get first visible position ( ) == num_ ) { invalidate views ( ) ; set selection ( num_ ) ; } }
protected expression lt ( int op pos ) throws transformer exception { return compile operation ( new lt ( ) , op pos ) ; }
public boolean is arabic numeral ( char c ) { return is half width arabic numeral ( c ) || is full width arabic numeral ( c ) ; }
public static string str replace ( final string a old pattern , final string a new pattern , final string a input ) { if ( a old pattern == null || a old pattern . equals ( str_ ) ) { throw new illegal argument exception ( str_ ) ; } if ( a input == null || a input . equals ( str_ ) ) { return a input ; } if ( a new pattern == null ) { throw new illegal argument exception ( str_ ) ; } if ( a new pattern . equals ( a old pattern ) ) return a input ; final string buffer result = new string buffer ( ) ; int start idx = num_ ; int idx old = num_ ; while ( ( idx old = a input . index of ( a old pattern , start idx ) ) >= num_ ) { result . append ( a input . substring ( start idx , idx old ) ) ; result . append ( a new pattern ) ; start idx = idx old + a old pattern . length ( ) ; } result . append ( a input . substring ( start idx ) ) ; return result . to string ( ) ; }
public simple immutable entry ( entry < ? extends k , ? extends v > entry ) { this . key = entry . get key ( ) ; this . value = entry . get value ( ) ; }
protected final void add view internal ( view child , int index , view group . layout params params ) { super . add view ( child , index , params ) ; }
public abstract boolean write ( object output stream p _stream ) ;
public static boolean compare floats ( float a , float b ) { if ( float . is na n ( a ) && float . is na n ( b ) ) return bool_ ; if ( ! float . is infinite ( a ) && ! float . is infinite ( b ) ) return math . abs ( a - b ) <= epsilon ; return a == b ; }
private static string convert to quoted string ( string string ) { if ( string == null || string . length ( ) == num_ ) { return null ; } if ( string . char at ( num_ ) == str_ && string . char at ( string . length ( ) - num_ ) == str_ ) { return string ; } return str_ + string + str_ ; }
public void write ( int b ) throws io exception { if ( b < num_ ) b += num_ ; if ( specials table [ b ] ) write special ( b ) ; else { char ch = translation table [ b ] ; if ( ch != ( char ) num_ ) write ( ch ) ; } }
private byte [ ] read ( fs data input stream channel , int size , long offset ) { byte [ ] byte bffer = new byte [ size ] ; try { channel . seek ( offset ) ; channel . read fully ( byte bffer ) ; } catch ( exception e ) { logger . error ( e , e . get message ( ) ) ; } return byte bffer ; }
void clear log ( ) ;
public enumerated type set ( t type t , type set environment type set environment ) { super ( type set environment ) ; assert . is not null ( t ) ; f members . add ( t ) ; s count ++ ; }
public dtl z1 ( int number of variables , int number of objectives ) { super ( number of variables , number of objectives ) ; }
private void initialize state ( state current ) { initialization utils . initialize ( current ) ; if ( current . document expiration time micros <= num_ ) { current . document expiration time micros = service utils . compute expiration time ( service utils . defaul t_ do c_ expiratio n_ tim e_ micros ) ; } }
public static void main ( final string [ ] args ) { dom test case . do main ( namednodemapsetnameditemns 0 1 . class , args ) ; }
public static named list read from resource loader ( solr resource loader loader , string name ) { input stream reader reader ; try { reader = new input stream reader ( loader . open resource ( name ) , standard charsets . ut f _ 8 ) ; } catch ( solr resource not found exception ex ) { log . debug ( str_ + ex . get message ( ) ) ; return null ; } catch ( exception ex ) { throw new solr exception ( error code . serve r_ error , str_ + name , ex ) ; } try { return read from input stream ( reader ) ; } finally { io utils . close quietly ( reader ) ; } }
private static int parse v cal int ( string value ) { int negate = num_ ; if ( value . ends with ( str_ ) ) { value = value . substring ( num_ , value . length ( ) - num_ ) ; } else if ( value . ends with ( str_ ) ) { value = value . substring ( num_ , value . length ( ) - num_ ) ; negate = - num_ ; } return integer . parse int ( value ) * negate ; }
public static int check survey response ( delegator delegator , string party id , string product store id , string survey id ) { if ( delegator == null || party id == null || product store id == null ) { return - num_ ; } list < generic value > survey response = null ; try { survey response = entity query . use ( delegator ) . from ( str_ ) . where ( str_ , survey id , str_ , party id ) . query list ( ) ; } catch ( generic entity exception e ) { debug . log error ( e , module ) ; return - num_ ; } if ( util validate . is empty ( survey response ) ) { return num_ ; } else { return survey response . size ( ) ; } }
public static void log initiator ( initiator initiator , network lite network ) { string network name = ( network != null ? network . get label ( ) : str_ ) ; _log . info ( string . format ( str_ , initiator . get initiator port ( ) , initiator . get host name ( ) , network name ) ) ; }
void copy ( string src bean , string dst bean ) throws exception ;
public synchronized ns object [ ] all objects ( ) { return set . to array ( new ns object [ count ( ) ] ) ; }
protected abstract void on current profile changed ( profile old profile , profile current profile ) ;
public static s m_ syste m_ message st r_ skil l_ suc c_ heal _ a_ t o_ self ( string skillcaster , string skillname ) { return new s m_ syste m_ message ( num_ , skillcaster , skillname ) ; }
public void draw ( canvas c , rect bounds ) { final rect f arc bounds = m temp bounds ; arc bounds . set ( bounds ) ; arc bounds . inset ( m stroke inset , m stroke inset ) ; final float start angle = ( m start trim + m rotation ) * num_ ; final float end angle = ( m end trim + m rotation ) * num_ ; float sweep angle = end angle - start angle ; m paint . set color ( m current color ) ; c . draw arc ( arc bounds , start angle , sweep angle , bool_ , m paint ) ; draw triangle ( c , start angle , sweep angle , bounds ) ; if ( m alpha < num_ ) { m circle paint . set color ( m background color ) ; m circle paint . set alpha ( num_ - m alpha ) ; c . draw circle ( bounds . exact center x ( ) , bounds . exact center y ( ) , bounds . width ( ) / num_ , m circle paint ) ; } }
public media wiki parser factory ( language language ) { init variables ( ) ; if ( language . equals ( language . german ) ) { init german variables ( ) ; } else if ( language . equals ( language . english ) ) { init english variables ( ) ; } else { logger . warn ( str_ + language . to string ( ) + str_ ) ; } }
boolean is loaded ( ) ;
private json object transfer to ( string src ur lstr , string dest ur lstr , string new name , boolean move ) throws json exception , no modification allowed exception , io exception , invalid modification exception , encoding exception , file exists exception { if ( src ur lstr == null || dest ur lstr == null ) { throw new file not found exception ( ) ; } local filesystem url src url = local filesystem url . parse ( src ur lstr ) ; local filesystem url dest url = local filesystem url . parse ( dest ur lstr ) ; filesystem src fs = this . filesystem for url ( src url ) ; filesystem dest fs = this . filesystem for url ( dest url ) ; if ( new name != null && new name . contains ( str_ ) ) { throw new encoding exception ( str_ ) ; } return dest fs . copy file to url ( dest url , new name , src fs , src url , move ) ; }
public < e extends layout , ae extends array 1 d < e > > class < ae > gen array 1 d impl ( final class < e > element interface class ) { return gen array 1 d impl ( element interface class , null ) ; }
public void from data ( pdx reader reader ) ;
public void visit enum ( string name , string desc , string value ) { if ( av != null ) { av . visit enum ( name , desc , value ) ; } }
public static byte [ ] hex string 2 byte array ( string hex ) throws illegal argument exception { if ( hex . length ( ) % num_ != num_ ) hex = str_ + hex ; char [ ] chars = hex . to char array ( ) ; byte [ ] bytes = new byte [ chars . length / num_ ] ; int byte cnt = num_ ; for ( int i = num_ ; i < chars . length ; i += num_ ) { int new byte = num_ ; new byte |= hex char to byte ( chars [ i ] ) ; new byte <<= num_ ; new byte |= hex char to byte ( chars [ i + num_ ] ) ; bytes [ byte cnt ] = ( byte ) new byte ; byte cnt ++ ; } return bytes ; }
public void clear ( ) { if ( us e_ memor y_ cache ) { synchronized ( m memory cache ) { m memory cache . evict all ( ) ; } } synchronized ( m entries ) { m entries . clear ( ) ; } file [ ] cache files = m cache dir . list files ( ) ; for ( file file : cache files ) { if ( ! file . delete ( ) ) { log . e ( tag , str_ + file . get path ( ) ) ; } } }
protected synchronized void submit task ( callable < object > task ) { if ( ! cancel ) { work units ++ ; service . submit ( task ) ; } }
public static final short tertiary order ( int order ) { return ( short ) collation element iterator icu . tertiary order ( order ) ; }
public session aware ( probe item descriptor [ ] item descriptors ) { super ( item descriptors ) ; }
public void transmit ( string user id , json object message ) { json object usr msg json = new json object ( ) ; try { usr msg json . put ( pn rtc message . jso n_ usermsg , message ) ; this . pc client . transmit message ( user id , usr msg json ) ; } catch ( json exception e ) { e . print stack trace ( ) ; } }
private copycat server create server ( member member ) { copycat server . builder builder = copycat server . builder ( member . client address ( ) , member . server address ( ) ) . with type ( member . type ( ) ) . with transport ( new local transport ( registry ) ) . with storage ( storage . builder ( ) . with storage level ( storage level . memory ) . with max segment size ( num_ * num_ ) . with compaction threads ( num_ ) . build ( ) ) . with state machine ( null ) ; copycat server server = builder . build ( ) ; server . serializer ( ) . disable whitelist ( ) ; servers . add ( server ) ; return server ; }
boolean is force ( ) ;
public int update name ( long playlist id , string name ) { content values value = new content values ( ) ; value . put ( media store . audio . playlists . name , name ) ; return resolver . update ( media store . audio . playlists . externa l_ conten t_ uri , value , media store . audio . playlists . _ id + str_ , new string [ ] { string . value of ( playlist id ) } ) ; }
public boolean retain entries ( t long object procedure < v > procedure ) { boolean modified = bool_ ; byte [ ] states = _states ; long [ ] keys = _set ; v [ ] values = _values ; temp disable auto compaction ( ) ; try { for ( int i = keys . length ; i -- > num_ ; ) { if ( states [ i ] == full && ! procedure . execute ( keys [ i ] , values [ i ] ) ) { remove at ( i ) ; modified = bool_ ; } } } finally { reenable auto compaction ( bool_ ) ; } return modified ; }
public void remove entry ( string entry name ) { m named gestures . remove ( entry name ) ; m classifier . remove instances ( entry name ) ; m changed = bool_ ; }
public static build version binary version ( ) { return binar y_ version ; }
public vag code stat panel ( ) { init components ( ) ; }
public boolean is set ( _ fields field ) { if ( field == null ) { throw new illegal argument exception ( ) ; } switch ( field ) { case stor e_ name : return is set store name ( ) ; case scope : return is set scope ( ) ; case persist : return is set persist ( ) ; } throw new illegal state exception ( ) ; }
public void remove tokens ( string tokens ) { for ( int col = num_ ; col < get column count ( ) ; col ++ ) { remove tokens ( tokens , col ) ; } }
public static boolean intersect ( long [ ] x , long [ ] y ) { final int min = ( x . length < y . length ) ? x . length : y . length ; for ( int i = num_ ; i < min ; i ++ ) { if ( ( x [ i ] & y [ i ] ) != num_ ) { return bool_ ; } } return bool_ ; }
public step breakpoint hit synchronizer ( final i debugger debugger , final listener provider < i debug event listener > listeners ) { super ( debugger , listeners ) ; }
void decode header ( final byte array scanner scanner , byte ... allowed types ) throws data format exception { final byte msg type = scanner . next byte ( ) ; if ( ! is type allowed ( allowed types , msg type ) ) { throw new data format exception ( str_ + msg type ) ; } final byte version = scanner . next byte ( ) ; if ( msg type == ms g_ typ e_ rep l_ serve r_ star t_ v1 ) { if ( version != protocol version . replicatio n_ protoco l_ v 1 _ real ) { throw new data format exception ( str_ + msg type + str_ + version + str_ + protocol version . replicatio n_ protoco l_ v 1 _ real ) ; } protocol version = protocol version . replicatio n_ protoco l_ v1 ; scanner . skip zero separator ( ) ; generation id = scanner . next long ut f8 ( ) ; } else { if ( version < protocol version . replicatio n_ protoco l_ v2 ) { throw new data format exception ( str_ + msg type + str_ + version + str_ + protocol version . get current version ( ) ) ; } protocol version = version ; generation id = scanner . next long ut f8 ( ) ; group id = scanner . next byte ( ) ; } }
public final boolean player black ( ) { switch ( mode nr ) { case playe r_ black : case tw o_ players : case analysis : case edi t_ game : return bool_ ; default : return bool_ ; } }
public boolean same suit ( card c ) { if ( c == null ) return bool_ ; return ( suit == c . get suit ( ) ) ; }
private boolean is typed time fully legal ( ) { if ( m is 2 4 hour mode ) { int [ ] values = get entered time ( null ) ; return ( values [ num_ ] >= num_ && values [ num_ ] >= num_ && values [ num_ ] < num_ ) ; } else { return ( m typed times . contains ( get am or pm key code ( am ) ) || m typed times . contains ( get am or pm key code ( pm ) ) ) ; } }
private static void update storage ports ( list < uri > ids , virtual array assignment changes changes ) { if ( ids . is empty ( ) ) { return ; } list < storage port rest rep > storage ports = storage port utils . get storage ports ( ids ) ; for ( storage port rest rep storage port : storage ports ) { storage port update update = new storage port update ( ) ; update . set varray changes ( changes ) ; storage port utils . update ( storage port . get id ( ) , update ) ; } }
protected boolean is read allowed ( ) throws io exception { if ( self closed ) { throw new io exception ( str_ ) ; } return ( wrapped stream != null ) ; }
string source form for initializer ( annotation value annotation value , processing environment processing env , string member name , element context ) { source form visitor visitor = new initializer source form visitor ( processing env , member name , context ) ; string builder sb = new string builder ( ) ; visitor . visit ( annotation value , sb ) ; return sb . to string ( ) ; }
public static synchronized token info create token ( token type token type ) { token token = new token ( token type . get module type ( ) , token type . get id ( ) ) ; token . set module id ( token type . get module type ( ) ) ; token . set read only ( token type . is read only ( ) ) ; token . set serial number ( token type . get serial number ( ) ) ; token . set label ( token type . get label ( ) ) ; token . set slot index ( token type . get slot index ( ) ) ; token . set friendly name ( get default friendly name ( token type ) ) ; token . set batch signing enabled ( token type . is batch signing enabled ( ) ) ; token . set available ( bool_ ) ; current tokens . add ( token ) ; return token . to dto ( ) ; }
private void update progress ( int progress ) { if ( my host != null && progress != previous progress ) { my host . update progress ( progress ) ; } previous progress = progress ; }
public gpu image 3x 3 convolution filter ( final float [ ] convolution kernel ) { super ( thre e_ x_ thre e_ textur e_ samplin g_ fragmen t_ shader ) ; m convolution kernel = convolution kernel ; }
public void yypushback ( int number ) { if ( number > yylength ( ) ) zz scan error ( z z_ pushbac k _ 2 big ) ; zz marked pos -= number ; }
void on missed heartbeat ( ) ;
private void record new positions ( i java element new element , int depth ) { if ( depth < this . max depth && new element instanceof i parent ) { java element info info = null ; try { info = ( java element info ) ( ( java element ) new element ) . get element info ( ) ; } catch ( java model exception npe ) { return ; } i java element [ ] children = info . get children ( ) ; if ( children != null ) { insert positions ( children , bool_ ) ; for ( int i = num_ , length = children . length ; i < length ; i ++ ) { record new positions ( children [ i ] , depth + num_ ) ; } } } }
public void test case 6 ( ) { byte a bytes [ ] = { num_ , num_ , num_ , num_ , num_ , - num_ , num_ , - num_ , num_ } ; byte b bytes [ ] = { num_ , num_ , num_ , num_ , num_ , - num_ , num_ , - num_ , num_ } ; int a sign = num_ ; int b sign = num_ ; byte r bytes [ ] = { num_ } ; big integer a number = new big integer ( a sign , a bytes ) ; big integer b number = new big integer ( b sign , b bytes ) ; big integer result = a number . divide ( b number ) ; byte res bytes [ ] = new byte [ r bytes . length ] ; res bytes = result . to byte array ( ) ; for ( int i = num_ ; i < res bytes . length ; i ++ ) { assert true ( res bytes [ i ] == r bytes [ i ] ) ; } assert equals ( str_ , num_ , result . signum ( ) ) ; }
public boolean is sort using collator ( ) { return sort using collator ; }
public common stats flags field data fields ( string ... field data fields ) { this . field data fields = field data fields ; return this ; }
public abstract quick setup step panel create wizard step panel ( wizard step step ) ;
public media ( lib play libplay , file descriptor fd ) { native new from fd ( libplay , fd ) ; m uri = uri from mrl ( native get mrl ( ) ) ; }
< r > r join ( function < first , r > map first , function < second , r > map second , function < third , r > map third ) ;
void dispose ( ) ;
public void test _ select group by ( ) throws sql exception { string select query = str_ + database creator . customer s_ table + str_ ; result set result = statement . execute query ( select query ) ; hash map < integer , integer > values = new hash map < integer , integer > ( ) ; values . put ( num_ , num_ ) ; values . put ( num_ , num_ ) ; values . put ( num_ , num_ ) ; while ( result . next ( ) ) { int rating = result . get int ( str_ ) ; int sum = result . get int ( str_ ) ; assert true ( str_ , values . contains key ( rating ) ) ; assert equals ( str_ , values . get ( rating ) , new integer ( sum ) ) ; assert equals ( new integer ( sum ) , values . remove ( rating ) ) ; } result . close ( ) ; assert true ( str_ , values . is empty ( ) ) ; }
public < t extends point 2 d > t inverse ( double x , double y , t llp ) { if ( llp == null ) { llp = ( t ) new lat lon point . double ( ) ; } pixel to ll ( x , y , llp ) ; return llp ; }
public boolean is menu showing ( ) { return m view above . get current item ( ) == num_ || m view above . get current item ( ) == num_ ; }
public static boolean starts with ignore case ( string s , string prefix ) { final int pl = prefix . length ( ) ; if ( s . length ( ) < pl ) return bool_ ; for ( int i = num_ ; i < pl ; i ++ ) { char sc = s . char at ( i ) ; char pc = prefix . char at ( i ) ; if ( sc != pc ) { sc = character . to upper case ( sc ) ; pc = character . to upper case ( pc ) ; if ( sc != pc ) { sc = character . to lower case ( sc ) ; pc = character . to lower case ( pc ) ; if ( sc != pc ) return bool_ ; } } } return bool_ ; }
public static big decimal round ( big decimal p _ amount , int p _ c_ currency _ id , string p _ costing ) throws sql exception { if ( p _ amount == null ) return null ; if ( p _ amount . signum ( ) == num_ || p _ c_ currency _ id == num_ ) return p _ amount ; boolean costing = p _ costing != null && str_ . equals ( p _ costing ) ; big decimal result = p _ amount ; string sql = str_ + str_ + str_ ; prepared statement pstmt = adempiere . prepare statement ( sql ) ; pstmt . set int ( num_ , p _ c_ currency _ id ) ; result set rs = pstmt . execute query ( ) ; if ( rs . next ( ) ) { int index = costing ? num_ : num_ ; int prec = rs . get int ( index ) ; if ( result . scale ( ) > prec ) result = result . set scale ( prec , big decimal . roun d_ hal f_ up ) ; } rs . close ( ) ; pstmt . close ( ) ; return result ; }
private boolean is default ds type ( final string ds type name ) { return get current distribution set type ( ) != null && get current distribution set type ( ) . get name ( ) . equals ( ds type name ) ; }
public static boolean is audio ( string mime type ) { if ( mime type != null ) { if ( mime type . starts with ( str_ ) ) return bool_ ; else return bool_ ; } else return bool_ ; }
public static float mid x ( cg rect a rect ) { return a rect . origin . x + ( float ) ( a rect . size . width / num_ ) ; }
dead letter job query execution id ( string execution id ) ;
public static class < ? > wrapper ( class < ? > type ) { if ( type == null ) { return null ; } else if ( type . is primitive ( ) ) { if ( boolean . class == type ) { return boolean . class ; } else if ( int . class == type ) { return integer . class ; } else if ( long . class == type ) { return long . class ; } else if ( short . class == type ) { return short . class ; } else if ( byte . class == type ) { return byte . class ; } else if ( double . class == type ) { return double . class ; } else if ( float . class == type ) { return float . class ; } else if ( char . class == type ) { return character . class ; } else if ( void . class == type ) { return void . class ; } } return type ; }
public void parse ( string line ) ;
public final plane normalize ( ) { double length = this . n . get length 3 ( ) ; if ( length == num_ ) return this ; return new plane ( new vec 4 ( this . n . x / length , this . n . y / length , this . n . z / length , this . n . w / length ) ) ; }
public void on session done ( uri media uri ) ;
public static query exp in ( value exp val , value exp value list [ ] ) { return new in query exp ( val , value list ) ; }
public default element selector ( string uri , string name ) { super ( uri , name ) ; }
public void abort ( ) { if ( post != null ) { post . abort ( ) ; to throw = new bosh exception ( str_ ) ; } }
public void delete assignable dynamic groups ( set assignable dynamic group d ns ) throws am exception , sso exception { iterator iter = assignable dynamic group d ns . iterator ( ) ; while ( iter . has next ( ) ) { string assignable dynamic group dn = ( string ) iter . next ( ) ; am assignable dynamic group assignable dynamic group = new am assignable dynamic group impl ( super . token , assignable dynamic group dn ) ; assignable dynamic group . delete ( ) ; } }
public static string encode web safe ( byte [ ] source , boolean do padding ) { return encode ( source , num_ , source . length , websaf e_ alphabet , do padding ) ; }
public void update to game ( ) ;
boolean will chrome handle intent ( intent intent ) ;
public void add log info ( string key , object value ) { log info map . put ( key , value ) ; }
protected void init ( ) { log . info ( str_ + sensor name + str_ + turnout name ) ; turnout = instance manager . turnout manager instance ( ) . provide turnout ( turnout name ) ; sensor = instance manager . sensor manager instance ( ) . provide sensor ( sensor name ) ; now = sensor . get known state ( ) ; set turnout ( now ) ; }
public void rewind ( ) { c list . rewind ( ) ; }
public abstract void initialize for template ( template file template file , template template , string [ ] arguments , int line number , list < localizable message > warnings ) throws initialization exception ;
protected boolean should start gesture ( ) { return bool_ ; }
private void return data ( object ret ) { if ( my host != null ) { my host . return data ( ret ) ; } }
public static int create image texture ( byte buffer data , int width , int height , int format ) { int [ ] texture handles = new int [ num_ ] ; int texture handle ; gle s 2 0 . gl gen textures ( num_ , texture handles , num_ ) ; texture handle = texture handles [ num_ ] ; gl util . check gl error ( str_ ) ; gle s 2 0 . gl bind texture ( gle s 2 0 . g l_ textur e _ 2 d , texture handle ) ; gle s 2 0 . gl tex parameteri ( gle s 2 0 . g l_ textur e _ 2 d , gle s 2 0 . g l_ textur e_ mi n_ filter , gle s 2 0 . g l_ linear ) ; gle s 2 0 . gl tex parameteri ( gle s 2 0 . g l_ textur e _ 2 d , gle s 2 0 . g l_ textur e_ ma g_ filter , gle s 2 0 . g l_ linear ) ; gl util . check gl error ( str_ ) ; gle s 2 0 . gl tex image 2 d ( gle s 2 0 . g l_ textur e _ 2 d , num_ , format , width , height , num_ , format , gle s 2 0 . g l_ unsigne d_ byte , data ) ; gl util . check gl error ( str_ ) ; return texture handle ; }
int is nullable ( int param ) throws sql exception ;
public static < t > response < t > created ( t value ) { return new impl < > ( num_ , value ) ; }
private static native boolean is set uid ( ) ;
private void write q name ( javax . xml . namespace . q name qname , javax . xml . stream . xml stream writer xml writer ) throws javax . xml . stream . xml stream exception { java . lang . string namespace uri = qname . get namespace uri ( ) ; if ( namespace uri != null ) { java . lang . string prefix = xml writer . get prefix ( namespace uri ) ; if ( prefix == null ) { prefix = generate prefix ( namespace uri ) ; xml writer . write namespace ( prefix , namespace uri ) ; xml writer . set prefix ( prefix , namespace uri ) ; } if ( prefix . trim ( ) . length ( ) > num_ ) { xml writer . write characters ( prefix + str_ + org . apache . axis 2 . databinding . utils . converter util . convert to string ( qname ) ) ; } else { xml writer . write characters ( org . apache . axis 2 . databinding . utils . converter util . convert to string ( qname ) ) ; } } else { xml writer . write characters ( org . apache . axis 2 . databinding . utils . converter util . convert to string ( qname ) ) ; } }
public void clear cache ( ) { clear memory cache ( ) ; clear disk cache ( ) ; }
public static string encode to string ( byte [ ] input , int offset , int len , int flags ) { try { return new string ( encode ( input , offset , len , flags ) , str_ ) ; } catch ( unsupported encoding exception e ) { throw new assertion error ( e ) ; } }
public request params ( map < string , string > source ) { init ( ) ; if ( source != null ) { for ( map . entry < string , string > entry : source . entry set ( ) ) { put ( entry . get key ( ) , entry . get value ( ) ) ; } } }
public boolean more ( ) throws json exception { this . next ( ) ; if ( this . end ( ) ) { return bool_ ; } this . back ( ) ; return bool_ ; }
public static string add properties to uri ( uri uri , map < string , string > properties ) throws exception { return add properties to uri ( uri . to string ( ) , properties ) ; }
synchronized void write pointer event ( int x , int y , int modifiers , int pointer mask ) throws io exception { event buf len = num_ ; write modifier key events ( modifiers ) ; event buf [ event buf len ++ ] = ( byte ) pointer event ; event buf [ event buf len ++ ] = ( byte ) pointer mask ; event buf [ event buf len ++ ] = ( byte ) ( ( x > > num_ ) & num_ ) ; event buf [ event buf len ++ ] = ( byte ) ( x & num_ ) ; event buf [ event buf len ++ ] = ( byte ) ( ( y > > num_ ) & num_ ) ; event buf [ event buf len ++ ] = ( byte ) ( y & num_ ) ; if ( pointer mask == num_ ) { write modifier key events ( num_ ) ; } os . write ( event buf , num_ , event buf len ) ; }
protected boolean check if unmodified since ( http servlet request request , http servlet response response , web resource resource ) throws io exception { try { long last modified = resource . get last modified ( ) ; long header value = request . get date header ( str_ ) ; if ( header value != - num_ ) { if ( last modified >= ( header value + num_ ) ) { response . send error ( http servlet response . s c_ preconditio n_ failed ) ; return bool_ ; } } } catch ( illegal argument exception illegal argument ) { return bool_ ; } return bool_ ; }
public void create view ( int tag , string class name , int root view tag , readable map props ) { react shadow node css node = create shadow node ( class name ) ; react shadow node root node = m shadow node registry . get node ( root view tag ) ; css node . set react tag ( tag ) ; css node . set view class name ( class name ) ; css node . set root node ( root node ) ; css node . set themed context ( root node . get themed context ( ) ) ; m shadow node registry . add node ( css node ) ; react styles diff map styles = null ; if ( props != null ) { styles = new react styles diff map ( props ) ; css node . update properties ( styles ) ; } handle create view ( css node , root view tag , styles ) ; }
protected abstract byte buffer convert ( audio packet packet ) ;
public task start task ( string task id ) { task current task = association manager . get task ( ) ; if ( current task != null && current task . get id ( ) . equals ( task id ) ) { return current task ; } task task = process engine . get task service ( ) . create task query ( ) . task id ( task id ) . single result ( ) ; if ( task == null ) { throw new activiti cdi exception ( str_ + task id + str_ ) ; } association manager . set task ( task ) ; associate execution by id ( task . get process instance id ( ) ) ; return task ; }
public static date parse xs date ( string date str , time zone default time zone , calendar fields to date converter cal to date converter ) throws date parse exception { matcher m = patter n_ x s_ date . matcher ( date str ) ; if ( ! m . matches ( ) ) { throw new date parse exception ( str_ + patter n_ x s_ date ) ; } return parse date _parse matcher ( m , default time zone , bool_ , cal to date converter ) ; }
public synchronized void println ( string s , int log ) throws output exception { if ( log == n o_ logs ) return ; println ( s , v_ verbose , log ) ; }
public string to string ( ) { string buffer b = new string buffer ( ) ; if ( is child list property ( ) ) { b . append ( str_ ) ; } if ( is child property ( ) ) { b . append ( str_ ) ; } if ( is simple property ( ) ) { b . append ( str_ ) ; } b . append ( str_ ) ; if ( this . node class != null ) { b . append ( this . node class . get name ( ) ) ; } b . append ( str_ ) ; if ( this . property id != null ) { b . append ( this . property id ) ; } b . append ( str_ ) ; return b . to string ( ) ; }
public void write ( output stream out , document doc , int pos , int len ) throws io exception , bad location exception { rtf generator . write document ( doc , out ) ; }
private void push ( final class writer cw , final string desc ) { int type = type ( cw , desc ) ; if ( type != num_ ) { push ( type ) ; if ( type == long || type == double ) { push ( top ) ; } } }
private void search entry ( string base dn , result code expected rc ) throws exception { search request request = new search request ( dn . value of ( base dn ) , search scope . bas e_ object ) ; search operation search = get root connection ( ) . process search ( request ) ; assert equals ( search . get result code ( ) , expected rc ) ; }
public boolean is socket connect ( ) { if ( m socket == null ) return bool_ ; return m socket . connected ( ) ; }
private void validate storage unit notification registration create request ( storage unit notification registration create request request ) { assert . not null ( request , str_ ) ; validate storage unit notification registration key ( request . get storage unit notification registration key ( ) ) ; assert . has text ( request . get storage unit event type ( ) , str_ ) ; request . set storage unit event type ( request . get storage unit event type ( ) . trim ( ) ) ; validate storage unit notification filter ( request . get storage unit notification filter ( ) ) ; validate notification actions ( request . get job actions ( ) ) ; if ( request . get notification registration status ( ) != null ) { request . set notification registration status ( request . get notification registration status ( ) . trim ( ) ) ; } }
public void decrease speed ( ) { animation . set rate ( animation . get rate ( ) > num_ ? animation . get rate ( ) - num_ : num_ ) ; }
public handler registration add tab context menu handler ( com . smartgwt . client . widgets . tab . events . tab context menu handler handler ) { if ( get handler count ( com . smartgwt . client . widgets . tab . events . tab context menu event . get type ( ) ) == num_ ) setup tab context menu event ( ) ; return do add handler ( handler , com . smartgwt . client . widgets . tab . events . tab context menu event . get type ( ) ) ; }
public static boolean is null ( comparable word that ) { return that . equal ( null pointer ( ) ) ; }
public static synchronized void remove provider ( int provider number ) { provider p = providers . remove ( provider number - num_ ) ; providers names . remove ( p . get name ( ) ) ; set need refresh ( ) ; }
public static < t > boolean remove if ( iterable < t > remove from , predicate < ? super t > predicate ) { if ( remove from instanceof random access && remove from instanceof list ) { return remove if from random access list ( ( list < t > ) remove from , check not null ( predicate ) ) ; } return iterators . remove if ( remove from . iterator ( ) , predicate ) ; }
public account header builder with on account header listener ( account header . on account header listener on account header listener ) { this . m on account header listener = on account header listener ; return this ; }
private string builder children ( entry hierarchy data parent ) throws io exception { string builder children = new string builder ( ) ; for ( final entry hierarchy data child : parent . get immediate children ( ) ) { children . append ( siblings ( child ) ) ; } if ( children . length ( ) > num_ ) { final string builder temp = new string builder ( ) ; temp . append ( str_ ) ; temp . append ( children ) ; children = temp ; children . append ( str_ ) ; } return children ; }
public static parsed url data parse url ( string url str ) { parsed url protocol handler handler = get handler ( get protocol ( url str ) ) ; return handler . parse url ( url str ) ; }
public void inject skin ( view view ) { list < skin view > skin views = new array list < skin view > ( ) ; skin attr support . add skin views ( view , skin views ) ; for ( skin view skin view : skin views ) { skin view . apply ( ) ; } }
public boolean has handled ( ) ;
public boolean is regenerate ( ) { return trap code == runtime entrypoints . tra p_ regenerate ; }
public void dispose ( ) throws io exception { reader . close ( ) ; reader = null ; }
public void resize frame with contents ( ) { int window width = settings . custo m_ clien t_ siz e_ x + get insets ( ) . left + get insets ( ) . right ; int window height = settings . custo m_ clien t_ siz e_ y + get insets ( ) . top + get insets ( ) . bottom ; set size ( window width , window height ) ; }
private void return data ( object ret ) { if ( my host != null ) { my host . return data ( ret ) ; } }
public static < l , r > either < l , r > create ( l l , r r ) { if ( l == null && r != null ) { return create right ( r ) ; } else if ( l != null && r == null ) { return create left ( l ) ; } else { if ( l == null ) { throw new illegal argument exception ( str_ ) ; } else { throw new illegal argument exception ( str_ + l + str_ + r ) ; } } }
public boolean is invul ( ) { return invul ; }
public boolean is omit null attributes ( ) { return omit null attributes ; }
boolean is blocked ( x dialog peer dialog , x window peer win ) ;
public document set ( string s base dir , double d training percent ) { training percent = d training percent ; base dir = s base dir ; training files = new array list ( ) ; test files = new array list ( ) ; categories = new array list ( ) ; }
public static void main ( final string [ ] args ) { dom test case . do main ( get elements by tag name n s 0 6 . class , args ) ; }
public yarn container runner ( config config , yarn configuration yarn configuration ) { this . config = config ; this . yarn configuration = yarn configuration ; this . nm client = nm client . create nm client ( ) ; nm client . init ( this . yarn configuration ) ; this . yarn config = new yarn config ( config ) ; }
public final request async task execute async ( ) { return request . execute batch async ( this ) ; }
public void change password ( string old password , string new password ) throws id repo exception , sso exception { id services id services = id services factory . get data store services ( ) ; id services . change password ( token , type , name , old password , new password , org name , get dn ( ) ) ; }
protected void disown ( abstract node child ) throws illegal state exception { ensure parentage ( child ) ; child . parent = null ; }
public boolean is domain suffix ( string extension ) { return domains . contains key ( extension ) ; }
public static void initialize loggers ( ) { initialize log 4 j ( ) ; initialize java logger ( ) ; }
public double utc offset ( ) { return utc offset ; }
private void fill border ( puzzle piece piece ) { piece . get matrix ( ) . reset ( ) ; final rect f rect f = piece . get border ( ) . get rect ( ) ; float offset x = rect f . center x ( ) - piece . get width ( ) / num_ ; float offset y = rect f . center y ( ) - piece . get height ( ) / num_ ; piece . get matrix ( ) . post translate ( offset x , offset y ) ; float scale = calculate fill scale factor ( piece ) ; piece . get matrix ( ) . post scale ( scale , scale , rect f . center x ( ) , rect f . center y ( ) ) ; if ( piece . get rotation ( ) != num_ ) { rotate ( piece , piece . get rotation ( ) , bool_ ) ; } if ( piece . is need horizontal flip ( ) ) { flip horizontally ( piece , bool_ ) ; } if ( piece . is need vertical flip ( ) ) { flip vertically ( piece , bool_ ) ; } piece . set translate x ( num_ ) ; piece . set translate y ( num_ ) ; piece . set scale factor ( num_ ) ; }
public boolean can read ( permission p ) { if ( permissions != null ) { return permissions [ p . value ] [ num_ ] ; } return bool_ ; }
public void write ( byte array output stream tag buffer ) { set text encoding ( i d3 text encoding conversion . get text encoding ( get header ( ) , get text encoding ( ) ) ) ; if ( ! ( ( text encoded string null terminated ) get object ( data types . ob j_ description ) ) . can be encoded ( ) ) { this . set text encoding ( i d3 text encoding conversion . get unicode text encoding ( get header ( ) ) ) ; } super . write ( tag buffer ) ; }
protected void put ( string prop name , object prop value ) { properties . put ( prop name , prop value ) ; }
public enumeration < permission > elements ( ) { synchronized ( this ) { return collections . enumeration ( perms ) ; } }
private void finalize destination file ( state state ) throws stop request { sync destination ( state ) ; string temp filename = state . m filename ; string final filename = helpers . generate save file name ( m service , m info . m file name ) ; if ( ! state . m filename . equals ( final filename ) ) { file start file = new file ( temp filename ) ; file dest file = new file ( final filename ) ; if ( m info . m total bytes != - num_ && m info . m current bytes == m info . m total bytes ) { if ( ! start file . rename to ( dest file ) ) { throw new stop request ( downloader service . statu s_ fil e_ error , str_ ) ; } } else { throw new stop request ( downloader service . statu s_ fil e_ delivere d_ incorrectly , str_ ) ; } } }
public boolean has page ( int page num ) { return pages . contains key ( page num ) ; }
public pa enc ts enc ( der value encoding ) throws asn 1 exception , io exception { der value der ; if ( encoding . get tag ( ) != der value . tag _ sequence ) { throw new asn 1 exception ( krb 5 . as n 1 _ ba d_ id ) ; } p a time stamp = kerberos time . parse ( encoding . get data ( ) , ( byte ) num_ , bool_ ) ; if ( encoding . get data ( ) . available ( ) > num_ ) { der = encoding . get data ( ) . get der value ( ) ; if ( ( der . get tag ( ) & num_ ) == num_ ) { p au sec = new integer ( der . get data ( ) . get big integer ( ) . int value ( ) ) ; } else throw new asn 1 exception ( krb 5 . as n 1 _ ba d_ id ) ; } if ( encoding . get data ( ) . available ( ) > num_ ) throw new asn 1 exception ( krb 5 . as n 1 _ ba d_ id ) ; }
public boolean add assembler recipe ( item stack a input 1 , item stack a input 2 , item stack a output 1 , int a duration , int a e ut ) ;
public static void add nature ( i project project , string nature id ) throws core exception { if ( ! project . is open ( ) || project . has nature ( nature id ) ) { return ; } add natures ( project , collections . singleton list ( nature id ) ) ; }
public boolean supports thread dump ( application application ) { if ( application . get state ( ) != stateful . stat e_ available ) return bool_ ; return jvm factory . get jvm for ( application ) . is take thread dump supported ( ) ; }
void on opened ( ) ;
private static void d _ua col sum eq ne ( matrix block in , matrix block out , double [ ] bv , binary operator b op ) throws dml runtime exception { int agg 0 = sum eq ne ( num_ , bv , b op ) ; int m = in . clen ; for ( int i = num_ ; i < m ; i ++ ) { double ai = in . quick get value ( num_ , i ) ; int cnt = ( ai == num_ ) ? agg 0 : sum eq ne ( ai , bv , b op ) ; out . quick set value ( num_ , i , cnt ) ; } }
public boolean user can view group ( int connected user id , string entidad ) throws exception ;
list < string > search mb ( map < string , object > criteria map , list < object > parameter list ) ;
public boolean is primitive ( ) ;
public static org . oscm . internal . vo . vo gathered event convert to up ( org . oscm . vo . vo gathered event old vo ) { if ( old vo == null ) { return null ; } org . oscm . internal . vo . vo gathered event new vo = new org . oscm . internal . vo . vo gathered event ( ) ; new vo . set occurrence time ( old vo . get occurrence time ( ) ) ; new vo . set actor ( old vo . get actor ( ) ) ; new vo . set event id ( old vo . get event id ( ) ) ; new vo . set multiplier ( old vo . get multiplier ( ) ) ; new vo . set unique id ( old vo . get unique id ( ) ) ; return new vo ; }
public boolean equals ( object obj ) { if ( this == obj ) { return bool_ ; } if ( obj instanceof ec field f 2m ) { ec field f 2m o = ( ec field f 2m ) obj ; if ( this . m == o . m ) { if ( this . rp == null ) { if ( o . rp == null ) { return bool_ ; } } else { return arrays . equals ( this . ks , o . ks ) ; } } } return bool_ ; }
public void clear ( ) { headers . clear ( ) ; }
void show ( ) ;
private void init primary only components ( ) throws space components initialize exception { for ( iterator < i space components handler > iterator = _components handlers . iterator ( ) ; iterator . has next ( ) ; ) { i space components handler handler = iterator . next ( ) ; handler . init components ( bool_ ) ; } }
private void return data ( object ret ) { if ( my host != null ) { my host . return data ( ret ) ; } }
public leather armor meta builder start ( final leather armor meta meta ) { return new leather armor meta builder ( meta ) ; }
public void encode ( der output stream out ) throws io exception { der output stream tmp = new der output stream ( ) ; name . encode ( tmp ) ; int name type = name . get type ( ) ; if ( name type == general name interface . nam e_ any || name type == general name interface . nam e_ x 4 0 0 || name type == general name interface . nam e_ edi ) { out . write implicit ( der value . create tag ( der value . ta g_ context , bool_ , ( byte ) name type ) , tmp ) ; } else if ( name type == general name interface . nam e_ directory ) { out . write ( der value . create tag ( der value . ta g_ context , bool_ , ( byte ) name type ) , tmp ) ; } else { out . write implicit ( der value . create tag ( der value . ta g_ context , bool_ , ( byte ) name type ) , tmp ) ; } }
public gestion previsiones bi lookup gestion previsiones bi ( ) { idb entity factory db entity factory = db entity factory . get instance ( service client . get db factory class ( ) ) ; i service base service = new gestion previsiones bi impl ( db entity factory . get prevision db entity ( service session . get transaction manager ( ) ) , db entity factory . get archivo db entity ( service session . get transaction manager ( ) ) , db entity factory . get n sec db entity ( service session . get transaction manager ( ) ) , db entity factory . get detalle prevision db entity ( service session . get transaction manager ( ) ) , db entity factory . get relacion db entity ( service session . get transaction manager ( ) ) , db entity factory . get productor serie db entity ( service session . get transaction manager ( ) ) , db entity factory . get organo productor db entity ( service session . get transaction manager ( ) ) , db entity factory . get serie db entity ( service session . get transaction manager ( ) ) ) ; service . attach to session ( this . service session ) ; service . set security manager ( security manager locator . loockup transferencias sm ( ) ) ; return ( gestion previsiones bi ) configure service ( gestion previsiones bi . class , service ) ; }
protected boolean is test thread ( ) { assert not null ( str_ , thread and test name rule . test case thread ) ; return thread . current thread ( ) == thread and test name rule . test case thread ; }
public definition generator ( log log , swagger swagger , set < string > example class names , set < class < ? > > model classes , xsd parser xsd parser ) throws mojo execution exception { this . log = log ; this . swagger = swagger ; this . example class names = example class names ; this . model classes = model classes ; this . xsd parser = xsd parser ; generate definitions ( ) ; }
public static native long elapsed realtime nanos ( ) ;
public static _ fields find by thrift id ( int field id ) { switch ( field id ) { case num_ : return key ; case num_ : return value ; case num_ : return annotatio n_ type ; case num_ : return host ; default : return null ; } }
public static boolean is brief mode ( ) { shared preferences prefs = preference manager . get default shared preferences ( app . s context ) ; return prefs . get boolean ( app . s context . get string ( r . string . switch _preference _key _list _item _brief _mode ) , bool_ ) ; }
public void clear ( ) { for ( node < e > x = first ; x != null ; ) { node < e > next = x . next ; x . item = null ; x . next = null ; x . prev = null ; x = next ; } first = last = null ; size = num_ ; mod count ++ ; }
public builder ( abstract managed object definition < ? , ? > pd , string name , string plural name , abstract managed object definition < c , s > cd ) { super ( pd , name , cd ) ; this . plural name = plural name ; }
private void assert rejected file ( file reject , boolean should be empty ) throws exception { try { final root cfg root = directory server . get instance ( ) . get server context ( ) . get root config ( ) ; final string error msg = str_ + read file ( reject ) + str_ + root . get backend ( be id ) . get base dn ( ) + str_ ; assert equals ( reject . length ( ) == num_ , should be empty , error msg ) ; } finally { reject . delete ( ) ; } }
public boolean need save ( int new row ) { return need save ( new row , bool_ ) ; }
public abstract void test start ( test info test info ) ;
public boolean click ( ) { return bool_ ; }
private void attach to root ( ) { wait for async utils . wait for async fx ( num_ , null ) ; wait for async utils . wait for fx events ( ) ; }
private static boolean is handoff ( android first run persistent data persistent data ) { if ( installer data . exists ( ) ) { if ( ! persistent data . is sdk up to date ( ) || ! persistent data . is same timestamp ( installer data . get ( ) . get timestamp ( ) ) ) { return installer data . get ( ) . is current version ( ) ; } } return bool_ ; }
public void test no api name attribute ( ) { do test ( ) ; }
public void reflow ( boolean flush cache ) { composite c = ( composite ) get content ( ) ; rectangle client area = get client area ( ) ; if ( c == null ) return ; point new size = c . compute size ( client area . width , swt . default , flush cache ) ; set min size ( new size ) ; update page increment ( ) ; layout ( flush cache ) ; }
public int delete back ( ) { int old back = get back ( ) ; size = size - num_ ; return old back ; }
public object column value ( object key , object val , int col ) ;
public string to string ( ) { string builder result = new string builder ( ) ; result . append ( str_ ) . append ( utils . to command line ( m _ classifier ) ) . append ( str_ ) ; result . append ( str_ ) . append ( m _ relation ) . append ( str_ ) ; result . append ( super . to string ( ) ) ; return result . to string ( ) ; }
private static int [ ] [ ] parse ( int [ ] [ ] members ) { vector ranges = new vector ( ) ; int n = ( members == null ? num_ : members . length ) ; for ( int i = num_ ; i < n ; ++ i ) { int lb , ub ; if ( members [ i ] . length == num_ ) { lb = ub = members [ i ] [ num_ ] ; } else if ( members [ i ] . length == num_ ) { lb = members [ i ] [ num_ ] ; ub = members [ i ] [ num_ ] ; } else { throw new illegal argument exception ( ) ; } if ( lb <= ub && lb < num_ ) { throw new illegal argument exception ( ) ; } accumulate ( ranges , lb , ub ) ; } return canonical array form ( ranges ) ; }
protected void engine update ( byte buffer input ) { message digest . update ( input ) ; needs reset = bool_ ; }
private double [ ] to display coordinates ( node node , boolean is geographical ) { double [ ] position = node . get position ( ) ; double x = position [ num_ ] ; double y = position [ num_ ] ; if ( is geographical ) { x = geographical distance . to geographical ( x ) ; y = geographical distance . to geographical ( y ) ; x = num_ * math . log ( ( num_ + math . sin ( x ) ) / ( num_ - math . sin ( x ) ) ) ; } return new double [ ] { x , y } ; }
public static string generate filename ( string topology name , string role , string tag , int version , string extension ) { return string . format ( str_ , topology name , role , tag , version , new random ( ) . next long ( ) , extension ) ; }
public synchronized void add series ( xy series series ) { m series . add ( series ) ; }
public void append newline ( ) { document . append ( str_ ) ; document . append ( str_ ) ; last was control word = bool_ ; }
private egl surface create offscreen surface ( final int width , final int height ) { if ( debug ) log . v ( tag , str_ ) ; final int [ ] surface attribs = { eg l 1 4 . eg l_ width , width , eg l 1 4 . eg l_ height , height , eg l 1 4 . eg l_ none } ; egl surface result = null ; try { result = eg l 1 4 . egl create pbuffer surface ( m egl display , m egl config , surface attribs , num_ ) ; check egl error ( str_ ) ; if ( result == null ) { throw new runtime exception ( str_ ) ; } } catch ( final illegal argument exception e ) { log . e ( tag , str_ , e ) ; } catch ( final runtime exception e ) { log . e ( tag , str_ , e ) ; } return result ; }
public boolean is context specific ( byte cntxt tag ) { if ( ! is context specific ( ) ) { return bool_ ; } return ( ( tag & num_ ) == cntxt tag ) ; }
public float [ ] generate transformed values bar chart ( list < ? extends entry > entries , int data set , bar data bd , float phase y ) { float [ ] value points = new float [ entries . size ( ) * num_ ] ; int set count = bd . get data set count ( ) ; float space = bd . get group space ( ) ; for ( int j = num_ ; j < value points . length ; j += num_ ) { entry e = entries . get ( j / num_ ) ; float x = e . get x index ( ) + ( j / num_ * ( set count - num_ ) ) + data set + space * ( j / num_ ) + space / num_ ; float y = e . get val ( ) ; value points [ j ] = x ; value points [ j + num_ ] = y * phase y ; } point values to pixel ( value points ) ; return value points ; }
public string to xml string ( ) throws xacml exception { return this . to xml string ( bool_ , bool_ ) ; }
early reference check decorator ( offset offset , magic generator generator ) { this . offset = offset ; this . generator = generator ; }
public final void close and clear token information ( ) { if ( this . token caching strategy != null ) { this . token caching strategy . clear ( ) ; } utility . clear facebook cookies ( static context ) ; utility . clear caches ( static context ) ; close ( ) ; }
request < list < workspace > > all ( ) ;
public static boolean is auto degrade max size ( ) { return auto degrade max size ; }
protected void on store ( int len ) { }
public static void init ( context context ) { if ( camera manager == null ) { camera manager = new camera manager ( context ) ; } }
private void delay audio notification ( ) { m notification countdown = num_ ; }
default boolean is retracting ( ) { return get direction ( ) == direction . retracting ; }
public clob create clob ( ) throws sql exception ;
public static void delete tag sub tree ( final j frame parent , final i tag manager tag manager , final i tree node < c tag > tag ) { if ( c message box . show yes no question ( parent , string . format ( str_ , tag . get object ( ) . get name ( ) ) ) == j option pane . ye s_ option ) { try { tag manager . delete tag sub tree ( tag ) ; } catch ( final couldnt delete exception e ) { c utility functions . log exception ( e ) ; final string inner message = str_ + str_ ; final string inner description = c utility functions . create description ( string . format ( str_ , tag . get object ( ) . get name ( ) ) , new string [ ] { str_ } , new string [ ] { str_ } ) ; navi error dialog . show ( parent , inner message , inner description , e ) ; } } }
public int dict copy ( ) { int dict outgoing = new int dict ( count ) ; system . arraycopy ( keys , num_ , outgoing . keys , num_ , count ) ; system . arraycopy ( values , num_ , outgoing . values , num_ , count ) ; for ( int i = num_ ; i < count ; i ++ ) { outgoing . indices . put ( keys [ i ] , i ) ; } outgoing . count = count ; return outgoing ; }
public static boolean is infinite ( double d ) { return ( d == positiv e_ infinity ) || ( d == negativ e_ infinity ) ; }
public cg point convert to world space ar ( float x , float y ) { cg point node point = cg point . make ( x , y ) ; node point = cg point . ccp add ( node point , anchor point in pixels _ ) ; return convert to world space ( node point . x , node point . y ) ; }
browser refresh ( ) ;
public void unbind textures ( ) { int num = m texture list . size ( ) ; if ( m plugins != null ) for ( i material plugin plugin : m plugins ) plugin . unbind textures ( ) ; for ( int i = num_ ; i < num ; i ++ ) { a texture texture = m texture list . get ( i ) ; gle s 2 0 . gl bind texture ( texture . get gl texture type ( ) , num_ ) ; } gle s 2 0 . gl bind buffer ( gle s 2 0 . g l_ arra y_ buffer , num_ ) ; }
public void remove row ( assignment head ) { table . remove ( head ) ; }
public void resume view ( ) { }
enumeration < permission > permissions ( ) ;
protected abstract void init listeners ( ) ;
public void column removed ( table column model event e ) ;
public static boolean is prime ( int number ) { for ( int divisor = num_ ; divisor <= number / num_ ; divisor ++ ) { if ( number % divisor == num_ ) { return bool_ ; } } return bool_ ; }
private static map < direction , sprite [ ] > split tiles ( sprite store st , sprite orig ) { int twidth = nu m_ attac k_ frames * til e_ size ; int theight = num_ * til e_ size ; map < direction , sprite [ ] > map = new enum map < direction , sprite [ ] > ( direction . class ) ; int y = num_ ; map . put ( direction . up , st . get tiles ( orig , num_ , y , nu m_ attac k_ frames , twidth , theight ) ) ; y += theight ; map . put ( direction . right , st . get tiles ( orig , num_ , y , nu m_ attac k_ frames , twidth , theight ) ) ; y += theight ; map . put ( direction . down , st . get tiles ( orig , num_ , y , nu m_ attac k_ frames , twidth , theight ) ) ; y += theight ; map . put ( direction . left , st . get tiles ( orig , num_ , y , nu m_ attac k_ frames , twidth , theight ) ) ; return map ; }
private void update progress ( string progress label , int progress ) { if ( my host != null && ( ( progress != previous progress ) || ( ! progress label . equals ( previous progress label ) ) ) ) { my host . update progress ( progress label , progress ) ; } previous progress = progress ; previous progress label = progress label ; }
private void build slots ( object stream field [ ] fields ) { slots to serialize = new object slot [ fields . length ] ; for ( int i = num_ ; i < fields . length ; i ++ ) { object slot s = new object slot ( ) ; slots to serialize [ i ] = s ; s . field = fields [ i ] ; } }
private void finish clicked ( ) { final wizard step c step = get current step ( ) ; if ( application . finish clicked ( c step , this ) ) { update user data ( c step ) ; } }
static int find best sample size ( int actual width , int actual height , int desired width , int desired height ) { double wr = ( double ) actual width / desired width ; double hr = ( double ) actual height / desired height ; double ratio = math . min ( wr , hr ) ; float n = num_ ; while ( ( n * num_ ) <= ratio ) { n *= num_ ; } return ( int ) n ; }
public void mouse dragged ( mouse event e ) { fire mouse location ( e ) ; super . mouse dragged ( e ) ; }
private void add row ( dimension dim , int row width , int row height ) { dim . width = math . max ( dim . width , row width ) ; if ( dim . height > num_ ) { dim . height += get vgap ( ) ; } dim . height += row height ; }
public static void log and show ( activity activity , string tag , throwable t ) { log . e ( tag , str_ , t ) ; string message = t . get message ( ) ; if ( t instanceof google json response exception ) { google json error details = ( ( google json response exception ) t ) . get details ( ) ; if ( details != null ) { message = details . get message ( ) ; } } else if ( t . get cause ( ) instanceof google auth exception ) { message = ( ( google auth exception ) t . get cause ( ) ) . get message ( ) ; } show error ( activity , message ) ; }
public static builder create builder ( abstract managed object definition < ? , ? > d , string property name ) { return new builder ( d , property name ) ; }
public static void main ( final string [ ] args ) { dom test case . do main ( namednodemapsetnameditemns 0 3 . class , args ) ; }
public final boolean is missing ( ) { return missing ; }
public string remove after ( string original , string marker ) { int index = original . index of ( marker ) ; if ( index != - num_ ) { return original . substring ( num_ , index ) ; } return original ; }
private double [ ] cu scores for children ( instance new instance ) throws exception { double [ ] category utils = new double [ m _children . size ( ) ] ; for ( int i = num_ ; i < m _children . size ( ) ; i ++ ) { c node temp = m _children . get ( i ) ; temp . update stats ( new instance , bool_ ) ; category utils [ i ] = category utility ( ) ; temp . update stats ( new instance , bool_ ) ; } return category utils ; }
public entry link ( class < e > entry class ) { this . entry class = entry class ; }
public static jmrix config pane create new panel ( ) { int last index = - num_ ; connection config [ ] connections = instance manager . get default ( connection config manager . class ) . get connections ( ) ; if ( connections . length != num_ ) { last index = connections . length ; } for ( int key : config pane table . key set ( ) ) { if ( key > last index ) { last index = key ; } } last index ++ ; return create panel ( last index ) ; }
public void swipe finished ( ) ;
public boolean is pretty print ( ) { return writer . is pretty print ( ) ; }
public void add ( iterable < ? extends statement > statements , resource ... contexts ) throws repository exception ;
private list reverse ( list seq ) { linked list new seq = new linked list ( ) ; for ( iterator i = seq . iterator ( ) ; i . has next ( ) ; ) { directed edge de = ( directed edge ) i . next ( ) ; new seq . add first ( de . get sym ( ) ) ; } return new seq ; }
public abstract boolean is enabled ( config feature f ) ;
private c undo functions ( ) { }
observable < k > client getname ( ) ;
public static < t > list < t > as synchronized ( list < t > self ) { return collections . synchronized list ( self ) ; }
public boolean remove ( object target child ) { return remove ( target child , bool_ ) ; }
static public final float max ( float [ ] list ) { if ( list . length == num_ ) { throw new array index out of bounds exception ( erro r_ mi n_ max ) ; } float max = list [ num_ ] ; for ( int i = num_ ; i < list . length ; i ++ ) { if ( list [ i ] > max ) max = list [ i ] ; } return max ; }
protected int find in sorted suballocated int vector ( suballocated int vector vector , int lookfor ) { int i = num_ ; if ( vector != null ) { int first = num_ ; int last = vector . size ( ) - num_ ; while ( first <= last ) { i = ( first + last ) / num_ ; int test = lookfor - vector . element at ( i ) ; if ( test == num_ ) { return i ; } else if ( test < num_ ) { last = i - num_ ; } else { first = i + num_ ; } } if ( first > i ) { i = first ; } } return - num_ - i ; }
public void test get f 2 3 ( ) { abstract throttle instance = new abstract throttle impl ( ) ; boolean exp result = bool_ ; boolean result = instance . get f 2 3 ( ) ; assert equals ( exp result , result ) ; }
public void start ( string tag , array list names , array list values , int nattr ) { tag ( tag , names , values , nattr , bool_ ) ; }
public boolean is finalizado ( ) { return ( get fecha salida ( ) != null ) ; }
protected void send test message ( serial message m , serial listener l ) { if ( log . is debug enabled ( ) ) { log . debug ( str_ + m + str_ ) ; } notify message ( m , l ) ; return ; }
public static < t > int detect index ( t [ ] object array , predicate < ? super t > predicate ) { if ( object array == null ) { throw new illegal argument exception ( str_ ) ; } return internal array iterate . detect index ( object array , object array . length , predicate ) ; }
public void inject ( grid resource method mtd , object target , class < ? > dep cls , grid deployment dep ) throws ignite checked exception ;
private void show feedback ( string feedback ) { if ( my host != null ) { my host . show feedback ( feedback ) ; } else { system . out . println ( feedback ) ; } }
private void store signature in request ( soap message context ctx , signature signature ) { assert ctx != null ; assert signature != null ; servlet request request = ( servlet request ) ctx . get ( message context . servle t_ request ) ; request . set attribute ( ws constants . signatur e_ key , signature ) ; }
public static void main ( final string [ ] args ) { dom test case . do main ( nodevalue 0 2 . class , args ) ; }
public boolean mark supported ( ) { return in . mark supported ( ) ; }
public void clear ( ) throws io exception { nio file . truncate ( heade r_ length ) ; }
public static boolean calc draw sloppy edges ( final zy graph graph ) { preconditions . check not null ( graph , str_ ) ; final edge hiding mode mode = graph . get settings ( ) . get edge settings ( ) . get edge hiding mode ( ) ; return ( mode == edge hiding mode . hid e_ never ) || ( ( mode == edge hiding mode . hid e_ o n_ threshold ) && ( graph . get settings ( ) . get edge settings ( ) . get edge hiding threshold ( ) > graph . get edge count ( ) ) ) ; }
public emr cluster definition information delete emr cluster definition ( emr cluster definition key emr cluster definition key ) throws exception ;
public zoom event ( boolean in , float rate ) { m zoom in = in ; m zoom rate = rate ; }
public boolean is jmx engine metrics ( ) { return jmx engine metrics ; }
void on conversation click ( atlas conversations adapter adapter , conversation conversation ) ;
public synchronized void abort ( ) { check not closed or editing concurrently ( ) ; close ( ) ; m is closed = bool_ ; m cache . abort edit ( m entry ) ; }
public q name ( string qname , stack namespaces ) { this ( qname , namespaces , bool_ ) ; }
public boolean implements interface ( string name ) { check level ( hierarchy ) ; iterator < soot class > interface it = get interfaces ( ) . iterator ( ) ; while ( interface it . has next ( ) ) { soot class soot class = interface it . next ( ) ; if ( soot class . get name ( ) . equals ( name ) ) return bool_ ; } return bool_ ; }
public static pie dataset create pie dataset for column ( category dataset dataset , comparable column key ) { int column = dataset . get column index ( column key ) ; return create pie dataset for column ( dataset , column ) ; }
public static byte [ ] a trans op to xr quality name ( int affine tranform op ) { switch ( affine tranform op ) { case affine transform op . typ e_ neares t_ neighbor : return fas t_ name ; case affine transform op . typ e_ bilinear : return goo d_ name ; case affine transform op . typ e_ bicubic : return bes t_ name ; } return null ; }
void fill page ( ) { if ( trace . is debug enabled ( ) ) { trace . debug ( str_ + data . get pos ( ) ) ; } reserve ( data . get remaining ( ) + num_ ) ; reserved -= data . get remaining ( ) ; data . write ( ) ; init next data ( ) ; }
public static void main ( final string [ ] args ) { dom test case . do main ( documentcreateelement n s 0 1 . class , args ) ; }
private static boolean skip _scope ( gui config scanner p _scanner ) { int open _bracked _count = num_ ; while ( open _bracked _count > num_ ) { object curr _token = null ; try { curr _token = p _scanner . next _token ( ) ; } catch ( exception e ) { system . out . println ( str_ ) ; system . out . println ( e ) ; return bool_ ; } if ( curr _token == null ) { return bool_ ; } if ( curr _token == gui config keyword . ope n_ bracket ) { ++ open _bracked _count ; } else if ( curr _token == gui config keyword . close d_ bracket ) { -- open _bracked _count ; } } system . out . println ( str_ ) ; return bool_ ; }
public roster frame action ( string p name , boolean allow quit ) { super ( p name ) ; this . allow quit = allow quit ; }
jvm mem mgr pool rel table cache ( jvm mem mgr pool rel table meta impl meta , long validity ) { this . validity = validity ; this . meta = meta ; }
public string to string ( ) ;
public boolean defines scale grid ( ) { return defines scale grid ; }
private static uri build service uri ( service host host , class service , string path ) { uri service uri ; string error ; if ( path != null ) { service uri = uri utils . build uri ( host , path ) ; error = string . format ( str_ , path ) ; } else { service uri = uri utils . build uri ( host , service ) ; error = string . format ( str_ , service . get canonical name ( ) ) ; } if ( service uri == null ) { throw new invalid parameter exception ( error ) ; } return service uri ; }
bit sieve ( big integer base , int search len ) { bits = new long [ ( unit index ( search len - num_ ) + num_ ) ] ; length = search len ; int start = num_ ; int step = small sieve . sieve search ( small sieve . length , start ) ; int converted step = ( step * num_ ) + num_ ; mutable big integer b = new mutable big integer ( base ) ; mutable big integer q = new mutable big integer ( ) ; do { start = b . divide one word ( converted step , q ) ; start = converted step - start ; if ( start % num_ == num_ ) start += converted step ; sieve single ( search len , ( start - num_ ) / num_ , converted step ) ; step = small sieve . sieve search ( small sieve . length , step + num_ ) ; converted step = ( step * num_ ) + num_ ; } while ( step > num_ ) ; }
public method accessor generate method ( class < ? > declaring class , string name , class < ? > [ ] parameter types , class < ? > return type , class < ? > [ ] checked exceptions , int modifiers ) { return ( method accessor ) generate ( declaring class , name , parameter types , return type , checked exceptions , modifiers , bool_ , bool_ , null ) ; }
public void visit all ( traversal visitor visitor ) { while ( ! tri queue . is empty ( ) ) { quad edge triangle tri = ( quad edge triangle ) tri queue . remove first ( ) ; process ( tri , visitor ) ; } }
location location ( ) ;
< m extends model > m parse model ( file model file , class < m > model class ) ;
public boolean is network resource management supported ( ) { return network resource management supported ; }
public void add field ( string field name , string type , short flags , long value ) { short field name index = its constant pool . add utf 8 ( field name ) ; short type index = its constant pool . add utf 8 ( type ) ; class file field field = new class file field ( field name index , type index , flags ) ; field . set attributes ( its constant pool . add utf 8 ( str_ ) , ( short ) num_ , ( short ) num_ , its constant pool . add constant ( value ) ) ; its fields . add ( field ) ; }
void check size put ( ) { if ( deleted count > size ) { rehash ( level ) ; } if ( size + deleted count >= max size ) { rehash ( level + num_ ) ; } }
private void go to nav drawer item ( int item ) { switch ( item ) { case r . id . nav _quotes : start activity ( new intent ( this , list activity . class ) ) ; finish ( ) ; break ; case r . id . nav _samples : start activity ( new intent ( this , view samples activity . class ) ) ; break ; case r . id . nav _settings : start activity ( new intent ( this , settings activity . class ) ) ; break ; } }
public simple boolean property expanded property ( ) { return expanded property ; }
public void deploy context ( string path , url config ) throws tomcat manager exception , io exception { deploy context ( path , config , bool_ ) ; }
private void write file post resource ( string builder sb , string path ) { sb . append ( str_ + di r_ resourc e_ set + str_ ) ; sb . append ( get file handler ( ) . get parent ( path ) . replace ( str_ , str_ ) ) ; sb . append ( str_ ) ; sb . append ( get file handler ( ) . get name ( path ) . replace ( str_ , str_ ) ) ; }
public static terms query builder terms query ( string name , object ... values ) { return new terms query builder ( name , values ) ; }
public final boolean invoke for internal operations ( ) { return invoke for internal ops ; }
public void action performed ( action event ev ) { execute ( str_ + calculate ecological indices . goodal l_ normalized + str_ ) ; }
public device automator press delete ( ) { m device . press delete ( ) ; return this ; }
public boolean has thumbnail ( ) { return m has thumbnail ; }
public t image ( string url , boolean mem cache , boolean file cache , int target width , int fallback id , bitmap preset , int anim id , float ratio ) { return image ( url , mem cache , file cache , target width , fallback id , preset , anim id , ratio , num_ , null ) ; }
public boolean equals ( object o ) { if ( this == o ) return bool_ ; if ( o instanceof jar package fragment root ) { jar package fragment root other = ( jar package fragment root ) o ; return this . jar path . equals ( other . jar path ) ; } return bool_ ; }
public static boolean is valid method signature ( string sig ) { int len = sig . length ( ) ; if ( len == num_ ) return bool_ ; int i = num_ ; char c = sig . char at ( i ++ ) ; if ( c != str_ ) return bool_ ; if ( i >= len ) return bool_ ; while ( sig . char at ( i ) != str_ ) { i = check type signature ( sig , i , len , bool_ ) ; if ( i == - num_ ) return bool_ ; if ( i >= len ) return bool_ ; } ++ i ; i = check type signature ( sig , i , len , bool_ ) ; return i == len ; }
public void wait for frame ( string jump label ) throws io exception ;
public string fetch node name ( string replica fq name ) { string node name = replica fq name . split ( str_ ) [ num_ ] . split ( str_ ) [ num_ ] ; if ( local run ) { if ( zk cluster data . get private ip to public host name map ( ) != null ) { node name = zk cluster data . get private ip to public host name map ( ) . get ( node name ) ; } else { throw new runtime exception ( str_ + node name ) ; } } return node name ; }
private void raise error event ( int dialog timeout error ) { raise error event ( dialog timeout error , null ) ; }
protected boolean scroll page down ( text view widget , spannable buffer ) { final layout layout = widget . get layout ( ) ; final int inner height = get inner height ( widget ) ; final int bottom = widget . get scroll y ( ) + inner height + inner height ; int bottom line = layout . get line for vertical ( bottom ) ; if ( bottom line <= layout . get line count ( ) - num_ ) { touch . scroll to ( widget , layout , widget . get scroll x ( ) , layout . get line top ( bottom line + num_ ) - inner height ) ; return bool_ ; } return bool_ ; }
boolean is compatible ( t t , u u ) ;
private py system state config from properties ( integer app id , integer db id , long wh exec id , properties properties ) { this . prop = properties ; if ( app id != null ) prop . set property ( constant . ap p_ i d_ key , string . value of ( app id ) ) ; if ( db id != null ) prop . set property ( constant . d b_ i d_ key , string . value of ( db id ) ) ; prop . set property ( constant . w h_ exe c_ i d_ key , string . value of ( wh exec id ) ) ; py dictionary config = new py dictionary ( ) ; for ( string key : prop . string property names ( ) ) { string value = prop . get property ( key ) ; config . put ( new py string ( key ) , new py string ( value ) ) ; } py system state sys = new py system state ( ) ; sys . argv . append ( config ) ; return sys ; }
observable < membership event > listen membership ( ) ;
base tweet view ( context context , attribute set attrs , int def style , dependency provider dependency provider ) { super ( context , attrs , def style ) ; this . dependency provider = dependency provider ; init xml attributes ( context , attrs ) ; inflate view ( context ) ; }
protected object evaluate left less right ( structured content element , string lvalue , string rvalue ) { return null ; }
public io utils ( ) { super ( ) ; }
private void append textures ( print writer out ) { for ( uv uv : export tex coords ) { big decimal u round = new big decimal ( uv . u ) . set scale ( num_ , rounding mode . hal f_ up ) ; big decimal v round = new big decimal ( uv . v ) . set scale ( num_ , rounding mode . hal f_ up ) ; out . print ( str_ + u round . to plain string ( ) + str_ + v round . to plain string ( ) ) ; out . println ( ) ; } }
private void obtain styled attributes ( attribute set attrs ) { final typed array attributes = get context ( ) . obtain styled attributes ( attrs , r . styleable . horizontal progress bar with number ) ; m text color = attributes . get color ( r . styleable . horizontal progress bar with number _progress _text _color , defaul t_ tex t_ color ) ; m text size = ( int ) attributes . get dimension ( r . styleable . horizontal progress bar with number _progress _text _size , m text size ) ; m reached bar color = attributes . get color ( r . styleable . horizontal progress bar with number _progress _reached _color , m text color ) ; m un reached bar color = attributes . get color ( r . styleable . horizontal progress bar with number _progress _unreached _color , defaul t_ colo r_ unreache d_ color ) ; m reached progress bar height = ( int ) attributes . get dimension ( r . styleable . horizontal progress bar with number _progress _reached _bar _height , m reached progress bar height ) ; m un reached progress bar height = ( int ) attributes . get dimension ( r . styleable . horizontal progress bar with number _progress _unreached _bar _height , m un reached progress bar height ) ; m text offset = ( int ) attributes . get dimension ( r . styleable . horizontal progress bar with number _progress _text _offset , m text offset ) ; int text visible = attributes . get int ( r . styleable . horizontal progress bar with number _progress _text _visibility , visible ) ; if ( text visible != visible ) { m if draw text = bool_ ; } attributes . recycle ( ) ; }
public builder merge varint field ( final int number , final int value ) { if ( number == num_ ) { throw new illegal argument exception ( str_ ) ; } get field builder ( number ) . add varint ( value ) ; return this ; }
public boolean is validation enabled ( ) { if ( coordinator != null ) { return boolean . value of ( controller utils . get property value from coordinator ( coordinator , validatio n_ chec k_ property ) ) ; } else { log . error ( str_ ) ; } return bool_ ; }
public boolean is null ( ) { return is null ( encrypted string ) ; }
public lalr _item shift ( ) throws internal _error { lalr _item result ; if ( dot _at _end ( ) ) throw new internal _error ( str_ ) ; result = new lalr _item ( the _production ( ) , dot _pos ( ) + num_ , new terminal _set ( lookahead ( ) ) ) ; add _propagate ( result ) ; return result ; }
public long round trip time ( ) throws interrupted exception { latch . await ( ) ; return received - sent ; }
private void push low double as int ( fpr reg ) { if ( vm . verify assertions ) validate stack push ( byte s_ i n_ double ) ; asm . emit stfd ( reg , sp top offset - byte s_ i n_ double , fp ) ; sp top offset -= byte s_ i n_ stackslot ; }
public void add file ( string filename ) { synchronized ( files ) { if ( ! files . contains ( filename ) ) { files . add ( filename ) ; } } }
final void remove ( local region region , disk entry entry , boolean async , boolean is clear ) throws region cleared exception { disk region dr = region . get disk region ( ) ; if ( ! async ) { acquire read lock ( dr ) ; } try { if ( dr . is region closed ( ) ) { throw new region destroyed exception ( localized strings . disk region _ th e_ diskregio n_ ha s_ bee n_ close d_ o r_ destroyed . to localized string ( ) , dr . get name ( ) ) ; } if ( ! dr . did clear count change ( ) ) { long start = this . stats . start remove ( ) ; oplog set oplog set = get oplog set ( dr ) ; oplog set . remove ( region , entry , async , is clear ) ; dr . get stats ( ) . end remove ( start , this . stats . end remove ( start ) ) ; } else { throw new region cleared exception ( localized strings . disk region _ clea r_ operatio n_ abortin g_ th e_ ongoin g_ entr y_ destructio n_ operatio n_ fo r_ entr y_ wit h_ diski d _ 0 . to localized string ( entry . get disk id ( ) ) ) ; } } finally { if ( ! async ) { release read lock ( dr ) ; } } }
public void destroy gracefully ( boolean soft kill ) { runner mediator . destroy process ( this , soft kill ) ; }
void accept ( double value ) ;
private internal session resolve token ( session id token ) throws session exception { internal session sess = session access manager . get internal session ( token ) ; if ( sess == null ) { sess = resolve restricted token ( token , bool_ ) ; } if ( sess == null ) { throw new invalid session id exception ( token ) ; } return sess ; }
public map < string , object > process inputs ( map < string , object > inputs , cwl port processor callback port processor ) throws cwl port processor exception { return process values ( inputs , job . get app ( ) . get inputs ( ) , cwl input port . class , port processor ) ; }
public void dispose ( ) throws io exception { input stream . close ( ) ; input stream = null ; }
public void close file ( boolean show cancel ) { if ( get current index ( ) == - num_ ) { return ; } if ( ! save changes ( show cancel ) ) { return ; } m _ tabbed pane . remove tab at ( get current index ( ) ) ; update frame title ( ) ; system . gc ( ) ; }
public static void show auth dialog ( string redirect url ) { intent intent = new intent ( droid nube kit . get instance ( ) . get context ( ) , dnk web view auth activity . class ) ; intent . put extra ( droid nube kit constants . webvie w_ redirec t_ ur l_ extra , redirect url ) ; intent . put extra ( droid nube kit constants . webvie w_ redirec t_ patter n_ extra , droid nube kit constants . webvie w_ redirec t_ ur l_ prefix + droid nube kit . get instance ( ) . app container identifier . to lower case ( ) ) ; intent . set flags ( intent . fla g_ activit y_ ne w_ task ) ; droid nube kit . get instance ( ) . get context ( ) . start activity ( intent ) ; }
public void handle http download info available ( ) { for ( ims session listener listener : get listeners ( ) ) { ( ( file sharing session listener ) listener ) . on http download info available ( ) ; } }
private void update progress ( int progress ) { if ( my host != null && progress != previous progress ) { my host . update progress ( progress ) ; } previous progress = progress ; }
protected int read byte ( ) throws io exception { if ( comm port != null && comm port . is open ( ) ) { byte [ ] buffer = new byte [ num_ ] ; int cnt = comm port . read bytes ( buffer , num_ ) ; if ( cnt != num_ ) { throw new io exception ( str_ ) ; } else { return buffer [ num_ ] & num_ ; } } else { throw new io exception ( str_ ) ; } }
private boolean pagination workaround ( terminal terminal ) { return ( paginatio n_ workaround && ( skip > num_ || limit > num_ ) && ( terminal == terminal . ge t_ cursor || terminal == terminal . ge t_ one || terminal == terminal . explai n_ plan ) && ! where clause required ( ) && ! has filter spec order by ( ) ) ; }
public utility function copy ( ) ;
public static void main ( final string [ ] args ) { dom test case . do main ( nodereplacechildnewchildexists . class , args ) ; }
public boolean is optimized drawing enabled ( ) { return optimized drawing possible ; }
public input stream reader ( input stream in , charset decoder dec ) { super ( in ) ; if ( dec == null ) throw new null pointer exception ( str_ ) ; sd = stream decoder . for input stream reader ( in , this , dec ) ; }
public static object to cf typex ( sql item item ) throws page exception { try { return _to cf typex ( item ) ; } catch ( page exception e ) { if ( item . is nulls ( ) ) return item . get value ( ) ; throw e ; } }
public int int value ( ) { return num_ ; }
public sam l2 config builder signature key password ( byte [ ] signature key password ) { this . signature key password = signature key password ; return this ; }
protected abstract resource description ( i resource resource ) { super ( ) ; parent = resource . get parent ( ) ; if ( resource . is accessible ( ) ) { modification stamp = resource . get modification stamp ( ) ; local time stamp = resource . get local time stamp ( ) ; resource attributes = resource . get resource attributes ( ) ; try { i marker [ ] markers = resource . find markers ( null , bool_ , i resource . dept h_ infinite ) ; marker descriptions = new marker description [ markers . length ] ; for ( int i = num_ ; i < markers . length ; i ++ ) { marker descriptions [ i ] = new marker description ( markers [ i ] ) ; } } catch ( core exception e ) { } } }
public boolean contains module name ( string module name ) ;
string segment ( int index ) ;
public frame body ti t1 ( byte buffer byte buffer , int frame size ) throws invalid tag exception { super ( byte buffer , frame size ) ; }
list < string > class path ( ) ;
public void delete ( int key ) { int i = container helpers . binary search ( m keys , m size , key ) ; if ( i >= num_ ) { if ( m values [ i ] != deleted ) { m values [ i ] = deleted ; m garbage = bool_ ; } } }
public native boolean is open ( tree node node ) ;
public void add panel ( abstract panel panel , panel type panel type ) { validate not null ( panel , str_ ) ; validate not null ( panel type , str_ ) ; add panel ( get tabbed full ( ) , panel ) ; switch ( panel type ) { case select : add panel ( get tabbed select ( ) , panel ) ; get tabbed select ( ) . revalidate ( ) ; break ; case status : add panel ( get tabbed status ( ) , panel ) ; get tabbed status ( ) . revalidate ( ) ; break ; case work : add panel ( get tabbed work ( ) , panel ) ; get tabbed work ( ) . revalidate ( ) ; break ; default : break ; } if ( layout == layout . full ) { get tabbed full ( ) . set visible panels ( get tabbed full ( ) . get visible panels ( ) ) ; } }
private void read object ( object input stream in ) throws io exception , class not found exception { in . default read object ( ) ; if ( lineno < num_ ) throw new invalid object exception ( str_ + str_ ) ; if ( override < num_ ) throw new invalid object exception ( str_ + str_ ) ; if ( description == null ) throw new invalid object exception ( str_ + str_ ) ; if ( t instanceof error ) throw new invalid object exception ( str_ + str_ ) ; }
public abstract instant max timestamp ( ) ;
public collection < update repository job > force all cmr repositories online status update ( ) { list < update repository job > jobs = new array list < > ( ) ; for ( cmr repository definition cmr repository definition : cmr repository definitions ) { jobs . add ( this . force cmr repository online status update ( cmr repository definition ) ) ; } return jobs ; }
public multiple category series ( string title ) { m title = title ; }
protected void create x _axis ( int i ) { if ( largest _value _set . get ( num_ ) . get labels ( ) != null ) horizontal _width = ( ( graphwidth / size ) * i ) + horstart ; else horizontal _width = ( ( graphwidth / label _size ) * i ) + horstart ; horizontal _width _list . add ( horizontal _width ) ; if ( i == num_ ) { canvas . draw line ( horizontal _width , graphheight + border , horizontal _width , border , paint ) ; } else { canvas . draw line ( horizontal _width , graphheight + border , horizontal _width , graphheight + ( num_ * border ) , paint ) ; } if ( largest _value _set . get ( num_ ) . get labels ( ) != null ) draw labels ( i ) ; else draw explicit labels ( i ) ; }
void on uninstall activity returned ( boolean result ) ;
public set progress action ( string text , boolean ongoing , int percentage , context context ) { this . text = text ; this . ongoing = ongoing ; this . percentage = percentage ; this . context = context ; }
protected abstract void purchase ( boolean purchase for bid , int p us to spend , i purchase delegate purchase delegate , game data data , player id player ) ;
public bundler ( ) { this ( null ) ; }
public static byte [ ] decode ( final string base 6 4 string ) { return new base 6 4 ( ) . decode ( base 6 4 string ) ; }
public abstract void read ( byte buffer dst ) ;
public final static int memcmp ( byte [ ] s 1 , int s 1offset , byte [ ] s 2 , int s 2offset ) { int n = s 1 . length - s 1offset ; if ( n > ( s 2 . length - s 2offset ) ) { n = s 2 . length - s 2offset ; } for ( int i = num_ ; i < n ; i ++ ) { if ( s 1 [ i + s 1offset ] != s 2 [ i + s 2offset ] ) { return s 1 [ i + s 1offset ] < s 2 [ i + s 2offset ] ? - num_ : num_ ; } } return num_ ; }
public void remove selection listener ( final selection listener listener ) { this . check widget ( ) ; this . selection listeners . remove ( listener ) ; }
public void zero shift ( int shift ) { zero shift ( x , shift ) ; }
protected abstract void handle start progress event ( int action code , motion event event ) ;
public boolean begin content static warning display ( child display event event ) { lock warning = ac . get lockout msg ( ) ; account locked = ac . is locked out ( ) ; if ( login debug . message enabled ( ) ) { login debug . message ( str_ + lock warning ) ; } return ( ( lock warning != null ) && ( lock warning . length ( ) > num_ ) ) ; }
public ads get accounts query ( vk api client client , user actor actor ) { super ( client , str_ , utils . build parametrized type ( list . class , account . class ) ) ; access token ( actor . get access token ( ) ) ; }
public void run test ( ) throws throwable { document doc ; node list element list ; element test addr ; attr addr attr ; string attr namespace uri ; doc = ( document ) load ( str_ , bool_ ) ; element list = doc . get elements by tag name ( str_ ) ; test addr = ( element ) element list . item ( num_ ) ; assert not null ( str_ , test addr ) ; addr attr = test addr . get attribute node ns ( str_ , str_ ) ; attr namespace uri = addr attr . get namespace uri ( ) ; assert equals ( str_ , str_ , attr namespace uri ) ; }
public ecma script single test config provider ( string validator list file name , string ... blacklist file names ) throws io exception { super ( blacklist file names ) ; validators = read modifier files ( validator list file name ) ; }
void destroy ( ) ;
public static file descriptor create socket ( ) throws io exception { if ( ! is supported ) throw new unsupported operation exception ( str_ ) ; int fd val = create 0 ( ) ; file descriptor fd = new file descriptor ( ) ; fd access . set ( fd , fd val ) ; return fd ; }
public vertex basic get source ( ) { if ( e container feature id ( ) != s graph package . transitio n _ _ source ) return null ; return ( vertex ) e internal container ( ) ; }
public static string double to string ( double d ) { if ( double . is infinite ( d ) || double . is na n ( d ) ) { return str_ ; } string string = double . to string ( d ) ; if ( string . index of ( str_ ) > num_ && string . index of ( str_ ) < num_ && string . index of ( str_ ) < num_ ) { while ( string . ends with ( str_ ) ) { string = string . substring ( num_ , string . length ( ) - num_ ) ; } if ( string . ends with ( str_ ) ) { string = string . substring ( num_ , string . length ( ) - num_ ) ; } } return string ; }
public static byte [ ] int to two bytes ( int i ) throws sam l2 exception { if ( i < num_ || i > num_ ) { debug . error ( str_ ) ; throw new sam l2 exception ( bundle . get string ( str_ ) ) ; } string hex str = integer . to hex string ( i ) ; int len = hex str . length ( ) ; string norm = null ; if ( len > num_ ) { norm = hex str . substring ( num_ , num_ ) ; } else { switch ( len ) { case num_ : norm = str_ + hex str ; break ; case num_ : norm = str_ + hex str ; break ; case num_ : norm = str_ + hex str ; break ; default : norm = hex str ; } } byte [ ] bytes = hex string to byte array ( norm ) ; return bytes ; }
public void remove component ( component cmp ) { content pane . remove component ( cmp ) ; }
public com . sun . identity . liberty . ws . soapbinding . jaxb 1 1 . extension element create extension element ( ) throws javax . xml . bind . jaxb exception { return new com . sun . identity . liberty . ws . soapbinding . jaxb 1 1 . impl . extension element impl ( ) ; }
public static void complete background tasks ( long timeout millis ) { boolean fifo empty = bool_ ; boolean async threads completed = bool_ ; long abs timeout = system . current time millis ( ) + timeout millis ; while ( system . current time millis ( ) < abs timeout ) { synchronized ( fifo ) { fifo empty = fifo . size ( ) == num_ ; } synchronized ( j google analytics tracker . class ) { async threads completed = async threads running == num_ ; } if ( fifo empty && async threads completed ) break ; try { thread . sleep ( num_ ) ; } catch ( interrupted exception e ) { break ; } } }
public list < vertex > find all query ( string query ) { return new array list < vertex > ( ) ; }
protected double now ( ) { return system . current time millis ( ) ; }
public boolean needs foreground scaling ( ) { return this == launcher ; }
public static object execute script ( string file path , string function name , map < string , object > context , object [ ] args ) { try { if ( file path . ends with ( str_ ) ) { return groovy util . run script at location ( file path , function name , context ) ; } return execute script ( file path , function name , create script context ( context ) , args ) ; } catch ( exception e ) { string err msg = str_ + file path + str_ + e . to string ( ) ; debug . log warning ( e , err msg , module ) ; throw new illegal argument exception ( err msg , e ) ; } }
public static additional log item key only ( final class < ? > source , final string key ) { reject . if null ( source , key ) ; return new additional log item ( source , key , null , bool_ ) ; }
public abstract boolean is valid ( char c ) ;
public void on tab reselected ( tab tab , fragment transaction ft ) ;
private workflow . method create rollback forget volumes method ( uri vplex system uri , list < uri > volume ur is ) { return new workflow . method ( r b_ forge t_ volume s_ metho d_ name , vplex system uri , volume ur is ) ; }
public void allow detach to release ( boolean allow release ) { m _allow release = allow release ; }
protected association change notification ( ) { }
public extractor exception ( string msg ) { this ( msg , null , null ) ; }
public static void w ( string tag , string msg ) { if ( s level > leve l_ warning ) { return ; } log . w ( tag , msg ) ; }
protected void show page ( int page ) { boolean is empty = page == pag e_ empty ; control control = is empty ? ( control ) f empty page label : get control ( ) ; if ( is empty ) { set content description ( str_ ) ; clear viewer ( ) ; } f pagebook . show page ( control ) ; }
public grid concurrent linked hash set ( int init cap , float load factor , int con level ) { super ( new concurrent linked hash map < e , e > ( init cap , load factor , con level ) ) ; }
void on custom tabs disconnected ( ) ;
public void test add math context equal scale pos pos ( ) { string a = str_ ; int a scale = num_ ; string b = str_ ; int b scale = num_ ; string c = str_ ; int c scale = - num_ ; big decimal a number = new big decimal ( new big integer ( a ) , a scale ) ; big decimal b number = new big decimal ( new big integer ( b ) , b scale ) ; math context mc = new math context ( num_ , rounding mode . up ) ; big decimal result = a number . add ( b number , mc ) ; assert equals ( str_ , c , result . to string ( ) ) ; assert equals ( str_ , c scale , result . scale ( ) ) ; }
public static int compare ( comparable c 1 , comparable c 2 , boolean null greater ) { if ( c 1 == c 2 ) { return num_ ; } else if ( c 1 == null ) { return ( null greater ? num_ : - num_ ) ; } else if ( c 2 == null ) { return ( null greater ? - num_ : num_ ) ; } return c 1 . compare to ( c 2 ) ; }
private static boolean is same tree path ( tree path tp 1 , tree path tp 2 ) { if ( ( tp 1 == null ) || ( tp 2 == null ) ) { return bool_ ; } return ( tp 1 . to string ( ) . compare to ( tp 2 . to string ( ) ) == num_ ) ; }
public data source create isilon unmanaged file system locations data source ( storage system storage system ) { return create data source ( custom config constants . isilo n_ unmanage d_ fil e_ syste m_ locations , new data object [ ] { storage system } ) ; }
public void move east ( double amount ) { if ( ! is blocked ( ) ) { set x ( get x ( ) + ( float ) amount ) ; } }
public void add panels ( list < abstract panel > panels , panel type panel type ) { validate not null ( panels , str_ ) ; validate not null ( panel type , str_ ) ; add panels ( get tabbed full ( ) , panels ) ; switch ( panel type ) { case select : add panels ( get tabbed select ( ) , panels ) ; break ; case status : add panels ( get tabbed status ( ) , panels ) ; break ; case work : add panels ( get tabbed work ( ) , panels ) ; break ; default : break ; } if ( layout == layout . full ) { get tabbed full ( ) . set visible panels ( get tabbed full ( ) . get visible panels ( ) ) ; } }
private void adjust child z order ( ) { for ( int i = buffe r_ size - num_ ; i >= num_ ; i -- ) { if ( m view items [ i ] == null ) { continue ; } m view items [ i ] . bring view to front ( ) ; } bring child to front ( m zoom view ) ; }
public is o _ 8 8 5 9 _ 1 decoder ( input stream is ) { super ( is ) ; }
void after blockbreak ( item stack drill , item stack head , entity player player ) ;
public abstract void read ( packet buffer buf ) ;
private static void paint breakpoints ( final breakpoint manager manager , final navi node node ) { if ( node . get raw node ( ) instanceof i navi code node ) { paint breakpoints ( manager , node , ( i navi code node ) node . get raw node ( ) ) ; } else if ( node . get raw node ( ) instanceof i navi function node ) { paint breakpoints ( manager , node , ( i navi function node ) node . get raw node ( ) ) ; } }
public static int next greater value to target ( int current index , fixed length dimension data chunk dim column data chunk , byte [ ] compare value , int numer of rows ) { while ( current index + num_ < numer of rows && byte util . unsafe comparer . instance . compare to ( dim column data chunk . get complete data chunk ( ) , ( current index + num_ ) * compare value . length , compare value . length , compare value , num_ , compare value . length ) <= num_ ) { ++ current index ; } return ++ current index ; }
private void write cyclic reference ( int handle ) throws io exception { output . write byte ( t c_ reference ) ; output . write int ( handle ) ; }
public static boolean is vcf extension ( file f ) { return f . get name ( ) . ends with ( vc f_ suffix ) || f . get name ( ) . ends with ( vc f_ suffix + file utils . g z_ suffix ) ; }
public void reset zoom ( ) { normalized scale = num_ ; fit image to view ( ) ; }
public byte [ ] generate seed ( int num bytes ) { return fill data ( new byte [ num bytes ] ) ; }
public boolean is applicable ( ) { compare window viewer = ( compare window ) get parent ( ) ; return viewer != null && viewer . get j list ( ) . get selected values list ( ) . size ( ) >= num_ ; }
public static double regularized gamma q ( double a , double x ) { return regularized gamma q ( a , x , defaul t_ epsilon , integer . ma x_ value ) ; }
public transmission history model ( type units ) { this ( transmissio n_ histor y_ model , units ) ; }
public int next ( int context , int current ) { return get next sibling ( current ) ; }
private void remove get ( string url ) { if ( _get cache . key set ( ) . contains ( url ) ) { _log . info ( str_ + url ) ; _get cache . remove ( url ) ; } else _log . info ( str_ + url + str_ ) ; }
public void request password changed time ( ) { operations . add ( password policy state operation type . ge t_ passwor d_ change d_ time ) ; }
private boolean is ble enabled ( ) { final bluetooth manager bm = ( bluetooth manager ) get system service ( bluetoot h_ service ) ; final bluetooth adapter ba = bm . get adapter ( ) ; return ba != null && ba . is enabled ( ) ; }
public boolean is modified ( ) { return _is digest modified || _jar depend . is modified ( ) ; }
public boolean intersects ( coordinate p 0 , coordinate p 1 ) { if ( scale factor == num_ ) return intersects scaled ( p 0 , p 1 ) ; copy scaled ( p 0 , p 0 scaled ) ; copy scaled ( p 1 , p 1 scaled ) ; return intersects scaled ( p 0 scaled , p 1 scaled ) ; }
public void stop hardware clock ( ) { if ( debu g_ sho w_ publi c_ calls && log . is debug enabled ( ) ) { log . debug ( str_ ) ; } issue clock stop ( ) ; }
public string identify ( ) { int port = get port ( ) ; ip address configuration ip address = get config ( ) . get my address ( ) ; if ( ip address != null ) { if ( ip address . get port ( ) > num_ ) port = ip address . get port ( ) ; if ( ip address . get ip address ( ) != null && ! ip address . get ip address ( ) . trim ( ) . is empty ( ) ) { return ip address . get ip address ( ) . trim ( ) + str_ + port ; } } return get my ip address ( ) + str_ + port ; }
private void on copy file operation finish ( copy file operation operation , remote operation result result ) { if ( result . is success ( ) ) { refresh list of files fragment ( ) ; } else { try { toast msg = toast . make text ( file display activity . this , error message adapter . get error cause message ( result , operation , get resources ( ) ) , toast . lengt h_ long ) ; msg . show ( ) ; } catch ( not found exception e ) { log _ oc . e ( tag , str_ , e ) ; } } }
public list simulate ( ) { list [ ] val = new list [ num_ ] ; for ( int i = num_ ; i >= num_ ; i -- ) { village v = forward [ i ] ; if ( v != null ) { val [ i ] = v . simulate ( ) ; } } for ( int i = num_ ; i >= num_ ; i -- ) { list l = val [ i ] ; if ( l != null ) { for ( enumeration e = l . elements ( ) ; e . has more elements ( ) ; ) { patient p = ( patient ) e . next element ( ) ; hospital . put in hospital ( p ) ; } } } hospital . check patients inside ( returned ) ; list up = hospital . check patients assess ( this ) ; hospital . check patients waiting ( ) ; patient p = generate patient ( ) ; if ( p != null ) { hospital . put in hospital ( p ) ; } return up ; }
protected void handle job response ( string ticket , jobs api request api request , async response async response ) { api request . get job view observable ( ticket ) . map ( null ) . map ( null ) . on error return ( null ) . subscribe ( null ) ; }
private static int check formal type parameters ( final string signature , int pos ) { pos = check char ( str_ , signature , pos ) ; pos = check formal type parameter ( signature , pos ) ; while ( get char ( signature , pos ) != str_ ) { pos = check formal type parameter ( signature , pos ) ; } return pos + num_ ; }
public boolean anchor panel ( ) { if ( m first layout ) { m slide state = slide state . anchored ; return bool_ ; } else { return expand panel ( m anchor point ) ; } }
private optional < channel instance > find by name ( final string name ) { if ( name == null ) { return empty ( ) ; } final string id = this . manager . access call ( ke y_ storage , channel service access . class , null ) ; return find by id ( id ) ; }
public object run safely ( catbert . fast stack stack ) throws exception { ui manager ui mgr = stack . get ui mgr ( ) ; if ( ui mgr == null ) return new integer ( num_ ) ; else { java . awt . dimension d = ui mgr . get ui display resolution ( ) ; return ( d == null ) ? new integer ( num_ ) : new integer ( d . height ) ; } }
public static void main ( string [ ] args ) { test class cross references tester = new test class cross references ( ) ; run ( tester , args , test , negate d_ test ) ; tester . print summary ( ) ; }
public synchronized boolean is closed ( ) { return journal writer == null ; }
public dummy data state tracker ( int net type , string tag ) { m network info = new network info ( net type ) ; }
public ssl micro network module ( string host , int port ) { this . uri = str_ + host + str_ + port ; }
public boolean is explicit store ( ) { return ( traits & store ) != num_ ; }
public abstract flexible buffer append ( char ch ) ;
private void advance ( ) { next = null ; while ( msg it . has next ( ) ) { tcp discovery abstract message msg 0 = msg it . next ( ) ; if ( msg 0 instanceof tcp discovery custom event message ) { if ( skip custom msg ) { assert custom discard id != null ; if ( f . eq ( custom discard id , msg 0 . id ( ) ) ) skip custom msg = bool_ ; continue ; } } else { if ( skip msg ) { assert discard id != null ; if ( f . eq ( discard id , msg 0 . id ( ) ) ) skip msg = bool_ ; continue ; } } next = msg 0 ; break ; } }
public project extension manager ( string extension name , string extension version , string extension targets , string [ ] extension dependencies , string ant task library ) { this . extension name = extension name ; this . extension version = extension version ; this . extension targets = extension targets ; this . extension dependencies = extension dependencies ; this . ant task library = ant task library ; }
public date query parser ( string [ ] date fields ) { this . date fields = date fields . clone ( ) ; this . solr date math pattern = pattern . compile ( str_ ) ; this . instant date pattern = pattern . compile ( str_ ) ; }
public image fetcher ( context context ) { super ( context ) ; set params ( new image fetcher params ( ) ) ; }
public player player for uri ( string uri , air launch info air launch info ) ;
private void read object ( object input stream s ) throws class not found exception , io exception , headless exception { s . default read object ( ) ; if ( columns < num_ ) { columns = num_ ; } object key or null ; while ( null != ( key or null = s . read object ( ) ) ) { string key = ( ( string ) key or null ) . intern ( ) ; if ( action listener k == key ) { add action listener ( ( action listener ) ( s . read object ( ) ) ) ; } else { s . read object ( ) ; } } }
void add target ( string log name , i frameable target < string , time separator > target ) throws ade exception ;
public static boolean is connected ( context context ) { network info info = nt con detector . get network info ( context ) ; return ( info != null && info . is connected ( ) ) ; }
private void load string value ( j text field comp , final string element name , final string default text ) { string prop value = properties . get value ( element name ) ; if ( prop value != null && ! prop value . is empty ( ) ) { comp . set text ( prop value ) ; } else { comp . set text ( default text ) ; } }
private void describe danger ( int danger level ) { glass pane . set tool tip text ( danger level strings [ danger level ] ) ; }
public void on last item visible ( ) ;
public csv writer ( writer writer , char separator , char quotechar , char escapechar , string line end ) { this . writer = writer ; this . separator = separator ; this . quotechar = quotechar ; this . escapechar = escapechar ; this . line end = line end ; }
boolean is valid ( ) ;
public static void main ( string [ ] argv ) { run filter ( new add ( ) , argv ) ; }
void enable job type ( string job type ) ;
public static buffered image byte array to image ( byte [ ] image data , string img file name ) throws open stego exception { buffered image image = null ; try { if ( image data == null ) { return null ; } image = image io . read ( new byte array input stream ( image data ) ) ; if ( image == null ) { throw new open stego exception ( null , open stego . namespace , open stego exception . imag e_ fil e_ invalid , img file name ) ; } return image ; } catch ( io exception io ex ) { throw new open stego exception ( io ex ) ; } }
public void copy pair flags and speeds ( edge other ) { int fore edge = pair index * num_ ; int back edge = fore edge + num_ ; int other fore edge = other . pair index * num_ ; int other back edge = other fore edge + num_ ; flags . set ( fore edge , other . get edge store ( ) . flags . get ( other fore edge ) ) ; flags . set ( back edge , other . get edge store ( ) . flags . get ( other back edge ) ) ; speeds . set ( fore edge , other . get edge store ( ) . speeds . get ( other fore edge ) ) ; speeds . set ( back edge , other . get edge store ( ) . speeds . get ( other back edge ) ) ; osmids . set ( pair index , other . pair index ) ; }
public void remove all version query callbacks ( ) { version query callbacks . clear ( ) ; }
public static void writeln ( char [ ] ca , int len ) { writeln ( ca , len , bool_ ) ; }
protected abstract region painter ( ) { }
private static reg exp compile ( character class ... regex pattern ) { list < string > ss = from ( regex pattern ) ; string pattern = list helper . join ( ss , str_ ) ; return reg exp . compile ( pattern , str_ ) ; }
public boolean can multithread ( ) { return can multithread ; }
public socket create socket ( inet address address , int port , inet address client address , int client port ) throws io exception { return new socket ( address , port , client address == null ? bind address : client address , client port ) ; }
public void restore secondary namespace ( ) { this . secondary namespace = this . secondary namespaces . pop ( ) ; }
public svg flow root element bridge ( ) { }
boolean is fractal noise ( ) ;
public rectangular position area ( string sidc ) { super ( sidc ) ; }
public combined osm reader ( string output crs , map < string , string > osm land use to matsim type map , map < string , string > osm building to matsim type map , map < string , string > osm amenity to matsim type map , map < string , string > osm leisure to matsim type map , map < string , string > osm tourism to matsim type map , list < string > unmanned entities list , double building type from vicinity range ) { log . info ( str_ ) ; this . output crs = output crs ; this . osm land use to matsim type map = osm land use to matsim type map ; this . osm building to matsim type map = osm building to matsim type map ; this . osm amenity to matsim type map = osm amenity to matsim type map ; this . osm leisure to matsim type map = osm leisure to matsim type map ; this . osm tourism to matsim type map = osm tourism to matsim type map ; this . unmanned entities list = unmanned entities list ; this . facilities = facilities utils . create activity facilities ( str_ ) ; this . building type from vicinity range = building type from vicinity range ; }
public void post response ( request < ? > request , response < ? > response , runnable runnable ) ;
public boolean can produce yeast ( ) { if ( fluid slot . get amount ( ) < consumption ) return bool_ ; final item stack yeast item = inv slot . get ( ) ; if ( yeast item != null ) { if ( ! can replicate yeast ( yeast item ) ) return bool_ ; } return core registry . instance ( ) . fluid dictionary ( ) . has fluid tags ( fluid slot . get fluid ( ) , booze tag . young ) ; }
public static void clear all ( ) { unscoped cache . clear ( ) ; scoped cache . clear ( ) ; }
public string permutedvectorfile ( ) { return permutedvectorfile ; }
void reset system counters ( ) ;
public graph read graph ( url url ) throws data io exception ;
public static void main ( string [ ] args ) throws exception { server server = new server ( z streaming config . get jetty server port num ( ) ) ; handler collection handlers = new handler collection ( ) ; handlers . add handler ( new process start action handler ( ) ) ; handlers . add handler ( new process stop action handler ( ) ) ; handlers . add handler ( new time range ohlc action handler ( ) ) ; handlers . add handler ( new time range streaming quote action handler ( ) ) ; server . set handler ( handlers ) ; server . start ( ) ; server . join ( ) ; }
public fork join worker thread new thread ( fork join pool pool ) ;
public object min max ( select column func column , i query result set < i entry packet > entries , boolean is max ) { object value , max min = null ; iterator < i entry packet > iter = entries . iterator ( ) ; while ( iter . has next ( ) ) { i entry packet entry = iter . next ( ) ; value = entries . get field value ( func column , entry ) ; if ( value == null ) continue ; if ( max min != null ) if ( is max ) max min = ( ( ( comparable ) value ) . compare to ( max min ) > num_ ) ? value : max min ; else max min = ( ( ( comparable ) value ) . compare to ( max min ) < num_ ) ? value : max min ; else max min = value ; } return max min ; }
public boolean is empty ( ) { return ( ( values == null ) || ( values . is empty ( ) ) ) ; }
public void test single line false ( ) throws exception { delete manifest ( ) ; my fixture . copy file to project ( bas e_ pat h_ global + str_ , str_ ) ; my fixture . enable inspections ( new android lint inspection tool provider . android lint deprecated inspection ( ) ) ; my fixture . configure from existing virtual file ( my fixture . copy file to project ( bas e_ path + str_ , str_ ) ) ; final intention action action = android test utils . get intention action ( my fixture , str_ ) ; assert null ( action ) ; }
public segment ( ) { this ( null , num_ , num_ ) ; }
public final void rename attribute ( int att , string name ) { attribute new att = attribute ( att ) . copy ( name ) ; fast vector new vec = new fast vector ( num attributes ( ) ) ; for ( int i = num_ ; i < num attributes ( ) ; i ++ ) { if ( i == att ) { new vec . add element ( new att ) ; } else { new vec . add element ( attribute ( i ) ) ; } } m _ attributes = new vec ; }
public string id ( ) ;
private boolean fetch chunk ( ) throws io exception { h table messages = null ; try { byte [ ] cp = bytes . to bytes ( chunk pos ) ; messages = new h table ( conf , table name ) ; get get = new get ( key ) ; get . add column ( cf , cp ) ; get . set max versions ( num_ ) ; result result = messages . get ( get ) ; if ( ! result . is empty ( ) ) { chunk = result . get value ( cf , cp ) ; chunk pos ++ ; pos = num_ ; return bool_ ; } else { return bool_ ; } } catch ( io exception e ) { throw new io exception ( str_ , e ) ; } finally { if ( messages != null ) { messages . close ( ) ; } } }
public void paint split pane background ( synth context context , graphics g , int x , int y , int w , int h ) { paint background ( context , g , x , y , w , h , null ) ; }
public boolean save ( file file , boolean async ) { this . file = file ; return save ( async ) ; }
public void associate with task ( dns task task , dns state state ) ;
public http transport ( final string host ) { super ( str_ + host + str_ + port + str_ ) ; this . host = host ; cookies = null ; stop = bool_ ; }
void verify exception captured ( of message err , class < ? extends throwable > expected exception class ) { throwable caught ex = null ; try { switch handler . process of message ( err ) ; } catch ( exception e ) { caught ex = e ; } assert that ( caught ex , core matchers . instance of ( expected exception class ) ) ; }
boolean exists ( ) ;
public boolean delete road name ( string road ) { if ( ! _road list . contains ( road ) ) { return bool_ ; } _road list . remove ( road ) ; log . debug ( str_ + get name ( ) + str_ + road ) ; set dirty and fire property change ( road s_ change d_ property , _road list . size ( ) + num_ , _road list . size ( ) ) ; return bool_ ; }
public boolean can break on module unload ( ) { return can break on module unload ; }
static label node clone ( final label node label , final map < label node , label node > map ) { return map . get ( label ) ; }
public boolean is tick marks visible ( ) { return this . tick marks visible ; }
public compute node result compute result ( ) { if ( computed result == null ) { computed result = new compute node result ( feature functions , get rule ( ) , get tail nodes ( ) , get last covered ( ) , get phrase end ( ) , null , sentence ) ; } return computed result ; }
public static string create composite setting ( final string caption , final string [ ] settings ) { assert . is not null ( caption ) ; assert . is not null ( settings ) ; final string buffer buffer = new string buffer ( num_ ) ; for ( int index = num_ ; index < settings . length ; index ++ ) { if ( settings [ index ] != null && ! str_ . equals ( settings [ index ] ) ) { buffer . append ( lin e_ delimiter ) ; buffer . append ( elemen t_ delimiter ) ; buffer . append ( settings [ index ] ) ; } else { buffer . append ( lin e_ delimiter ) ; buffer . append ( elemen t_ delimiter ) ; buffer . append ( refactoring core messages . java refactoring descriptor _not _available ) ; } } if ( buffer . length ( ) > num_ ) buffer . insert ( num_ , caption ) ; return buffer . to string ( ) ; }
public void add action listener ( action listener al ) { action listener = al ; }
public boolean is user exists ( string user id ) throws data store provider exception ;
private void create initial state ( ) { long [ ] precalc = ( long [ ] ) initia l_ states . get ( variant identifier ( get block size ( ) , get output size ( ) ) ) ; if ( ( key == null ) && ( precalc != null ) ) { chain = arrays . clone ( precalc ) ; } else { chain = new long [ get block size ( ) / num_ ] ; if ( key != null ) { ubi complete ( skein parameters . para m_ typ e_ key , key ) ; } ubi complete ( para m_ typ e_ config , new configuration ( output size bytes * num_ ) . get bytes ( ) ) ; } if ( pre message parameters != null ) { for ( int i = num_ ; i < pre message parameters . length ; i ++ ) { parameter param = pre message parameters [ i ] ; ubi complete ( param . get type ( ) , param . get value ( ) ) ; } } initial state = arrays . clone ( chain ) ; }
private list < bookmark > list ( ) { check not main thread ( ) ; return bookmark . all ( database . value ( ) ) ; }
public void validate fill ( ) { assert free list manager . tin y_ multiple == num_ ; long start address = get address ( ) + mi n_ chun k_ size ; int size = get size ( ) - mi n_ chun k_ size ; for ( int i = num_ ; i < size ; i += free list manager . tin y_ multiple ) { if ( addressable memory manager . read long ( start address + i ) != fil l_ pattern ) { throw new illegal state exception ( str_ + get address ( ) + str_ + get size ( ) ) ; } } }
public double reduce ( string numeric column name , numeric reduce function function ) { column column = column ( numeric column name ) ; return function . reduce ( column . to double array ( ) ) ; }
public der set ( as n1 encodable [ ] a ) { super ( a , bool_ ) ; }
public static style create line style ( ) { final stroke stroke = style factory . create stroke ( filter factory . literal ( color . blue ) , filter factory . literal ( num_ ) ) ; final line symbolizer sym = style factory . create line symbolizer ( stroke , null ) ; final rule rule = style factory . create rule ( ) ; rule . symbolizers ( ) . add ( sym ) ; final feature type style fts = style factory . create feature type style ( new rule [ ] { rule } ) ; final style style = style factory . create style ( ) ; style . feature type styles ( ) . add ( fts ) ; return style ; }
public static filter stream create ( filter filter , string stream name ) { return new filter stream ( filter , stream name ) ; }
public string codenvy json file location ( ) { return this . codenvy json file location ; }
protected string create cache key ( int position ) { return stat e_ pag e_ ke y_ prefix + position ; }
public com . sun . identity . liberty . ws . common . jaxb . xmlsig . x 5 0 9 data type . x 5 0 9 ski create x 5 0 9 data type x 5 0 9 ski ( ) throws javax . xml . bind . jaxb exception { return new com . sun . identity . liberty . ws . common . jaxb . xmlsig . impl . x 5 0 9 data type impl . x 5 0 9 ski impl ( ) ; }
public c check box ( action a ) { super ( a ) ; init ( ) ; }
public node remove ( coordinate pt ) { return ( node ) node map . remove ( pt ) ; }
private void translate matrix after rotate ( int axis , float trans , float prev image size , float image size , int prev view size , int view size , int drawable size ) { if ( image size < view size ) { m [ axis ] = ( view size - ( drawable size * m [ matrix . mscal e_ x ] ) ) * num_ ; } else if ( trans > num_ ) { m [ axis ] = - ( ( image size - view size ) * num_ ) ; } else { float percentage = ( math . abs ( trans ) + ( num_ * prev view size ) ) / prev image size ; m [ axis ] = - ( ( percentage * image size ) - ( view size * num_ ) ) ; } }
public boolean is serialized ( metadata class reference class , boolean is for map key ) { return is valid serialized type ( reference class ) ; }
public sequence for my sql ( session s , string s seq table ) { sent 1 = new static sentence ( s , str_ + s seq table + str_ ) ; sent 2 = new static sentence ( s , str_ , null , serializer read integer . instance ) ; }
public gen panel ( ) { init components ( ) ; }
public journal ( final properties properties ) { this ( properties , null ) ; }
private json writer close ( int empty , int nonempty , string close bracket ) throws io exception { int context = peek ( ) ; if ( context != nonempty && context != empty ) { throw new illegal state exception ( str_ ) ; } if ( deferred name != null ) { throw new illegal state exception ( str_ + deferred name ) ; } stack size -- ; if ( context == nonempty ) { newline ( ) ; } out . write ( close bracket ) ; return this ; }
public static string to tool tip text ( color c ) { if ( formatter == null ) { formatter = new color tool tip text formatter ( ) ; } try { return formatter . value to string ( c ) ; } catch ( parse exception ex ) { internal error error = new internal error ( str_ + c ) ; error . init cause ( ex ) ; throw error ; } }
public int addr int ( ) { return _my addr int ; }
public boolean can traverse outside subtree ( ) { if ( null != m _parts ) { int n = m _parts . size ( ) ; for ( int i = num_ ; i < n ; i ++ ) { avt part part = ( avt part ) m _parts . element at ( i ) ; if ( part . can traverse outside subtree ( ) ) return bool_ ; } } return bool_ ; }
public boolean is expired on ( final date date ) { if ( ( x 5 0 9 certificate == null ) || ( date == null ) ) { return bool_ ; } return x 5 0 9 certificate . get not after ( ) . before ( date ) ; }
public levy distribution ( final double mu , final double c ) { super ( ) ; this . mu = mu ; this . c = c ; this . half c = num_ * c ; }
float read float ( long offset ) ;
public void start apps search ( ) { if ( m search bar controller != null ) { m search bar controller . focus search field ( ) ; } }
public void start preview ( ) { if ( camera != null && ! previewing ) { camera . start preview ( ) ; previewing = bool_ ; } }
public void increment receive count ( ) { receive count ++ ; last received = calendar . get instance ( ) . get time ( ) ; }
void unexecute ns decls ( transformer impl transformer , string ignore prefix ) throws transformer exception { try { if ( null != m _prefix table ) { serialization handler rhandler = transformer . get result tree handler ( ) ; int n = m _prefix table . size ( ) ; for ( int i = num_ ; i < n ; i ++ ) { xmlns decl decl = ( xmlns decl ) m _prefix table . get ( i ) ; if ( ! decl . get is excluded ( ) && ! ( null != ignore prefix && decl . get prefix ( ) . equals ( ignore prefix ) ) ) { rhandler . end prefix mapping ( decl . get prefix ( ) ) ; } } } } catch ( org . xml . sax . sax exception se ) { throw new transformer exception ( se ) ; } }
private static boolean has response body ( int request method , int response code ) { return request method != request . method . head && ! ( http status . s c_ continue <= response code && response code < http status . s c_ ok ) && response code != http status . s c_ n o_ content && response code != http status . s c_ no t_ modified ; }
public static < t > collection < t > not empty ( collection < t > list , string name ) { not null ( list , name ) ; if ( list . is empty ( ) ) { throw new illegal argument exception ( string . format ( str_ , name ) ) ; } return list ; }
public native void select all records ( int col num ) ;
public boolean is coin base ( ) { maybe parse ( ) ; return outpoint . get hash ( ) . equals ( sha 2 5 6 hash . zer o_ hash ) && ( outpoint . get index ( ) & num_ ) == num_ ; }
private void type insn ( final int opcode , final type type ) { mv . visit type insn ( opcode , type . get internal name ( ) ) ; }
private object [ ] [ ] prefetch records from file ( int number of records ) throws carbon sort key and group by exception { object [ ] [ ] records = new object [ number of records ] [ ] ; for ( int i = num_ ; i < number of records ; i ++ ) { records [ i ] = get row from stream ( ) ; } return records ; }
public boolean is empty ( ) ;
void raise ( ) { final container parent = get parent ( ) ; if ( parent instanceof j layered pane ) { ( ( j layered pane ) parent ) . move to front ( internal managed window . this ) ; } }
public boolean in same l2 domain ( datapath id switch 1 , datapath id switch 2 ) ;
public void re connect ( ) { if ( m bluetooth le service != null ) { m bluetooth le service . re connect ( ) ; } }
public builder cache control ( duration cache control ) { this . cache control = cache control ; return this ; }
private void validate startup ( string [ ] args ) { if ( startup settings . ru n_ o n_ startup . get value ( ) ) { thread . yield ( ) ; } if ( os utils . is mac osx ( ) ) { mac osx utils . set login status ( startup settings . ru n_ o n_ startup . get value ( ) ) ; } if ( args . length >= num_ && str_ . equals ( args [ num_ ] ) ) is startup = bool_ ; if ( is startup ) { if ( ! startup settings . ru n_ o n_ startup . get value ( ) ) system . exit ( num_ ) ; } }
public void add date ( i cal date date , boolean floating , time zone tz ) { if ( date != null && date . has time ( ) && ! floating && tz != null ) { dates . add ( date ) ; } }
public int add new divider ( string name , int parent id , boolean is fixed ) throws exception { folder token divider div ; int id ; id = super . generate next new node id ( ) ; div = new folder token divider ( id , name , parent id , is fixed , folder edit flag . new ) ; super . add ( div ) ; return id ; }
private int scan token ( int start pos ) { int position = start pos ; while ( position < max position ) { if ( ! has surrogates ) { char c = str . char at ( position ) ; if ( ( c <= max delim code point ) && ( delimiters . index of ( c ) >= num_ ) ) break ; position ++ ; } else { int c = str . code point at ( position ) ; if ( ( c <= max delim code point ) && is delimiter ( c ) ) break ; position += character . char count ( c ) ; } } if ( ret delims && ( start pos == position ) ) { if ( ! has surrogates ) { char c = str . char at ( position ) ; if ( ( c <= max delim code point ) && ( delimiters . index of ( c ) >= num_ ) ) position ++ ; } else { int c = str . code point at ( position ) ; if ( ( c <= max delim code point ) && is delimiter ( c ) ) position += character . char count ( c ) ; } } return position ; }
public boolean is cell selected ( int row , int column ) { if ( ! get row selection allowed ( ) && ! get column selection allowed ( ) ) { return bool_ ; } return ( ! get row selection allowed ( ) || is row selected ( row ) ) && ( ! get column selection allowed ( ) || is column selected ( column ) ) ; }
private void generate template indices ( wikipedia template info info , set < string > template names ) { try { for ( string name : template names ) { int id = info . check template id ( name ) ; if ( id != - num_ ) { tpl name to tpl id . put ( name , id ) ; } } } catch ( wiki api exception e ) { } }
void print ( string message ) ;
public void add ( final b op stats o ) { if ( this == o ) { return ; } elapsed . add ( o . elapsed . get ( ) ) ; op count . add ( o . op count . get ( ) ) ; chunks in . add ( o . chunks in . get ( ) ) ; units in . add ( o . units in . get ( ) ) ; units out . add ( o . units out . get ( ) ) ; chunks out . add ( o . chunks out . get ( ) ) ; type errors . add ( o . type errors . get ( ) ) ; mutation count . add ( o . mutation count . get ( ) ) ; }
public static byte [ ] object to byte buffer ( object obj ) throws exception { byte [ ] result = null ; synchronized ( out stream ) { out stream . reset ( ) ; object output stream out = new object output stream ( out stream ) ; out . write object ( obj ) ; out . flush ( ) ; result = out stream . to byte array ( ) ; out . close ( ) ; } return result ; }
public abstract enumeration < k > keys ( ) ;
public boolean has tracking script ( ) { return has extension ( gwo tracking script . class ) ; }
public void update ( i block access access , multiblock mb , block pos anchor pos ) { original block access = access ; multiblock = mb ; this . anchor pos = anchor pos ; has block access = access != null ; }
public void test verbose fs no such file exception ( ) throws io exception { path dir = wrap ( create temp dir ( ) ) ; try { asynchronous file channel . open ( dir . resolve ( str_ ) ) ; fail ( str_ ) ; } catch ( no such file exception nsfe ) { } try { file channel . open ( dir . resolve ( str_ ) ) ; fail ( str_ ) ; } catch ( no such file exception nsfe ) { } try { files . new byte channel ( dir . resolve ( str_ ) ) ; fail ( str_ ) ; } catch ( no such file exception nsfe ) { } }
public snmp msg decode message ( byte [ ] input bytes , int byte count , inet address address , int port ) throws snmp status exception , snmp security exception ;
void disable ecas ( ) ;
public m tree ( properties ctx , int a d_ tree _ id , boolean editable , boolean client tree , string trx name ) { this ( ctx , a d_ tree _ id , editable , client tree , bool_ , trx name ) ; }
public boolean is vlan override allowed ( ) { return vlan override allowed ; }
public immutable list < r > row key list ( ) { return row list ; }
public boolean on fall ( float distance ) { return next mod != null && next mod . on fall ( distance ) ; }
private void normalized power fft ( double [ ] re ) { double [ ] im = new double [ re . length ] ; double r , i ; fft ( re , im , ff t_ forward ) ; for ( int j = num_ ; j < re . length ; j ++ ) { r = re [ j ] / window function sum * num_ ; i = im [ j ] / window function sum * num_ ; re [ j ] = r * r + i * i ; } }
public final am access audit event builder for request ( request request , context context ) { string client ip address = client utils . get client ip address ( context , request ) ; string ip addr header = system properties manager . get ( constants . clien t_ i p_ add r_ header ) ; if ( ip address header property is set ( ip addr header ) && request has ip address header ( request , ip addr header ) ) { client ( client ip address ) ; } else { client context client context = context . as context ( client context . class ) ; client ( client ip address , client context . get remote port ( ) ) ; } mutable uri uri = request . get uri ( ) ; string uri scheme = request . get uri ( ) . get scheme ( ) ; if ( string utils . is not empty ( uri scheme ) ) { uri scheme = uri scheme . to lower case ( ) ; } boolean is secure = str_ . equals ( uri scheme ) ; http request ( is secure , request . get method ( ) , uri . get scheme ( ) + str_ + uri . get host ( ) + str_ + uri . get port ( ) + uri . get path ( ) , get query parameters as map ( request . get form ( ) ) , get headers as map ( request . get headers ( ) ) ) ; return this ; }
public com . linkedin . camus . example . records . dummy log . builder clear log time ( ) { field set flags ( ) [ num_ ] = bool_ ; return this ; }
string to json ( ) ;
sensor matrix create sensor matrix ( final filter default filter ) throws sensor matrix editor exception ;
void declare output fields ( output fields declarer declarer ) ;
private events raw times ( ) { }
public void install ( pivot tracing update update ) { if ( update . has remove all ( ) && update . get remove all ( ) ) { weave manager . remove all ( ) ; } for ( byte string weave id to remove : update . get remove list ( ) ) { weave manager . unweave ( weave id to remove ) ; } for ( weave spec weave : update . get weave list ( ) ) { weave manager . weave ( weave . get id ( ) , weave ) ; } weave manager . install ( ) ; report status ( weave manager . problems ( ) ) ; }
public void disconnect ( ) { if ( s logger . is activated ( ) ) { s logger . info ( str_ ) ; } m ip address = null ; }
module assembly module ( string name ) ;
public void update all components ( final abstract field < ? > component ) { all components . add ( component ) ; component . add value change listener ( new change listener ( component ) ) ; }
protected void merge properties ( properties a target , properties a source ) { for ( object key : a source . key set ( ) ) { if ( ! a target . contains key ( key ) ) { a target . put ( key , a source . get ( key ) ) ; } } }
iterator < e > descending iterator ( ) ;
private void apply style attribute ( html element element , html component html c ) { string style str = element . get attribute by id ( html element . att r_ style ) ; if ( style str != null ) { css element style = null ; style str = str_ + style str + str_ ; try { style = css parser . get instance ( ) . parse css ( new input stream reader ( new byte array input stream ( style str . get bytes ( ) ) ) , html c ) ; apply style ( element , style , html c ) ; } catch ( io exception ex ) { ex . print stack trace ( ) ; } } }
private void sift up ( int k , runnable scheduled future < ? > key ) { while ( k > num_ ) { int parent = ( k - num_ ) > > > num_ ; runnable scheduled future < ? > e = queue [ parent ] ; if ( key . compare to ( e ) >= num_ ) break ; queue [ k ] = e ; set index ( e , k ) ; k = parent ; } queue [ k ] = key ; set index ( key , k ) ; }
public sendable sticker message . sendable sticker message builder disable notification ( boolean disable notification ) { this . disable notification = disable notification ; return this ; }
public int hash code ( ) { return value & num_ ; }
public void call emc home ( ) { try { if ( license info == null ) { _log . warn ( str_ ) ; return ; } synchronized ( send event . class ) { _log . info ( str_ ) ; _file id = license info . get product id ( ) ; ema api connect home alert file = new ema api connect home ( ) ; ema api log type log = new ema api log type ( ) ; log . set log to directory ( lo g_ path ) ; log . set log to filename ( lo g_ fil e_ name + _file id + str_ ) ; build identifier section ( alert file ) ; build connection section ( alert file ) ; build alert file ( alert file , log ) ; _log . info ( str_ ) ; } } catch ( api exception api ) { throw api ; } catch ( exception e ) { _log . error ( str_ , e ) ; throw api exception . internal server errors . send event error ( e . get message ( ) ) ; } }
public static void remove storage files ( file backend dir ) { if ( ! backend dir . exists ( ) ) { return ; } if ( ! backend dir . is directory ( ) ) { throw new storage runtime exception ( er r_ director y_ invalid . get ( backend dir . get path ( ) ) . to string ( ) ) ; } try { file [ ] files = backend dir . list files ( ) ; for ( file f : files ) { f . delete ( ) ; } } catch ( exception e ) { throw new storage runtime exception ( er r_ remov e_ fail . get ( e . get message ( ) ) . to string ( ) , e ) ; } }
public static void add attributes ( serialization handler handler , int src ) throws transformer exception { transformer impl transformer = ( transformer impl ) handler . get transformer ( ) ; dtm dtm = transformer . get x path context ( ) . get dtm ( src ) ; for ( int node = dtm . get first attribute ( src ) ; dtm . null != node ; node = dtm . get next attribute ( node ) ) { add attribute ( handler , node ) ; } }
void remove column ( int col index ) ;
public double norm ( ) { return math . sqrt ( x * x + y * y + z * z ) ; }
public string find coord transform name ( int code ) { if ( ( code < num_ ) || ( code >= coord transform name . length ) ) { return ( null ) ; } return ( coord transform name [ code ] ) ; }
public grid distributed cache entry entry exx ( key cache object key , affinity topology version top ver , boolean allow detached ) { return allow detached && ! ctx . affinity ( ) . primary ( ctx . local node ( ) , key , top ver ) ? create entry ( key ) : entry exx ( key , top ver ) ; }
public transformer exception ( string message , source locator locator , throwable e ) { super ( message ) ; this . contained exception = e ; this . locator = locator ; }
public void permissions changed ( string permission changed ) ;
protected void clear copy in table schema ( list < string > table names ) { if ( table names != null && ! table names . is empty ( ) ) { string builder delete data = new string builder ( str_ ) ; delete data . append ( const . table schema . tabl e_ name ) . append ( str_ ) ; boolean need or = bool_ ; for ( string table name : table names ) { if ( need or ) { delete data . append ( str_ ) ; } need or = bool_ ; delete data . append ( str_ ) . append ( const . table schema . colum n_ name ) . append ( str_ ) ; delete data . append ( str_ ) . append ( str_ ) . append ( table name ) . append ( str_ ) ; } log util . d ( tag , str_ + delete data ) ; string [ ] sqls = { delete data . to string ( ) } ; execute ( sqls , m db ) ; } }
public synchronized void import merge ( vertex source , map < vertex , vertex > identity set ) { vertex target = import vertex ( source , identity set ) ; for ( iterator < relationship > relationships = source . all relationships ( ) ; relationships . has next ( ) ; ) { relationship source relationship = relationships . next ( ) ; vertex target relationship type = import vertex ( source relationship . get type ( ) , identity set ) ; vertex target relationship target = import vertex ( source relationship . get target ( ) , identity set ) ; relationship target relationship = target . add relationship ( target relationship type , target relationship target , source relationship . get index ( ) , bool_ ) ; if ( ! source relationship . is inverse ( ) ) { target relationship . set correctness ( math . max ( target relationship . get correctness ( ) , source relationship . get correctness ( ) ) ) ; } else { target relationship . set correctness ( math . min ( target relationship . get correctness ( ) , source relationship . get correctness ( ) ) ) ; } target relationship . set index ( source relationship . get index ( ) ) ; add relationship ( target relationship ) ; } }
promise < uri , discovery exception > perform open id issuer discovery ( final context context , final account identifier account ) { return discovery handler . handle ( context , build web finger request ( account ) ) . then ( extract well known uri ( ) , responses . < uri , discovery exception > noop exception function ( ) ) ; }
public annotation ( int start , string text ) { this ( start , integer . ma x_ value , text ) ; }
public boolean allow paypal donations ( ) { return bool_ ; }
public check basic get check ( ) { return check ; }
public interval marker ( double start , double end , paint paint , stroke stroke , paint outline paint , stroke outline stroke , float alpha ) { super ( paint , stroke , outline paint , outline stroke , alpha ) ; this . start value = start ; this . end value = end ; this . gradient paint transformer = null ; set label offset type ( length adjustment type . contract ) ; }
public void reset all counters ( ) ;
public final void increase scheduled write messages ( ) { scheduled write messages . increment and get ( ) ; if ( get service ( ) instanceof abstract io service ) { ( ( abstract io service ) get service ( ) ) . get statistics ( ) . increase scheduled write messages ( ) ; } }
public void send chat ( string message ) { send ( new packet ( packet . comman d_ chat , message ) ) ; flush conn ( ) ; }
static string description ( object reference ref ) { reference type clazz = ref . reference type ( ) ; long id = ref . unique id ( ) ; if ( clazz == null ) { return to hex ( id ) ; } else { return message output . format ( str_ , new object [ ] { clazz . name ( ) , to hex ( id ) } ) ; } }
worker thread ( int worker num , racing threads test test ) { super ( str_ + worker num ) ; this . test = test ; this . worker num = worker num ; }
public void add description ( description description ) { get descriptions ( ) . add ( description ) ; }
private static boolean create account ( context context ) { account account = get account ( ) ; account manager account manager = ( account manager ) context . get system service ( accoun t_ service ) ; if ( account manager . add account explicitly ( account , null , null ) ) { content resolver . set is syncable ( account , contracts . conten t_ authority , num_ ) ; content resolver . set sync automatically ( account , contracts . conten t_ authority , bool_ ) ; bundle b = new bundle ( ) ; b . put boolean ( sync option . ful l_ sync . name ( ) , bool_ ) ; content resolver . add periodic sync ( account , contracts . conten t_ authority , b , syn c_ period ) ; return bool_ ; } return bool_ ; }
public void notify data set invalidated ( ) { m data set observable . notify invalidated ( ) ; }
private double compute explained variance ( sorted eigen pairs eigen pairs , int filtered eigen pairs ) { double strongsum = num_ ; double weaksum = num_ ; for ( int i = num_ ; i < eigen pairs . size ( ) ; i ++ ) { if ( i <= filtered eigen pairs ) { strongsum += eigen pairs . eigen value ( i ) ; } else { weaksum += eigen pairs . eigen value ( i ) ; } } return strongsum / ( strongsum / weaksum ) ; }
public boolean is active ( ) { return m state != invite state . none && m state != invite state . terminating && m state != invite state . terminated ; }
private void paste ( final diff block cur b ) { string text = buffer map . remove ( cur b . get id ( ) ) ; diff part action = new diff part ( diff action . paste ) ; action . set start ( version . length ( ) ) ; codec data . check blocksize s ( version . length ( ) ) ; action . set text ( integer . to string ( cur b . get id ( ) ) ) ; codec data . check blocksize b ( cur b . get id ( ) ) ; diff . add ( action ) ; version . append ( text ) ; }
boolean has another master ( ) ;
static private string to 6 4 ( long v , int size ) { final string buffer result = new string buffer ( ) ; while ( -- size >= num_ ) { result . append ( itoa 6 4 . char at ( ( int ) ( v & num_ ) ) ) ; v >>>= num_ ; } return result . to string ( ) ; }
public void add ( string field , boolean ascend ) { string [ ] f = new string [ m _fields . length + num_ ] ; system . arraycopy ( m _fields , num_ , f , num_ , m _fields . length ) ; f [ m _fields . length ] = field ; m _fields = f ; boolean [ ] b = new boolean [ m _fields . length + num_ ] ; system . arraycopy ( m _ascend , num_ , b , num_ , m _ascend . length ) ; b [ m _ascend . length ] = ascend ; m _ascend = b ; }
public double length ( ) { return math . sqrt ( length squared ( ) ) ; }
public frame ( final frame < ? extends v > src ) { this ( src . locals , src . values . length - src . locals ) ; init ( src ) ; }
public boolean has alpha changed from ( float v ) { return ( float . compare ( alpha , v ) != num_ ) ; }
public void clear password ( ) { if ( input password != null ) { for ( int i = num_ ; i < input password . length ; i ++ ) input password [ i ] = str_ ; } }
void load ( g l 1 0 gl ) ;
void reverse order ( ) { m pol = get element reverse order ( ) ; }
private void init value source parsers ( ) { init plugins ( value source parsers , value source parser . class ) ; for ( map . entry < string , value source parser > entry : value source parser . standard value source parsers . entry set ( ) ) { try { string name = entry . get key ( ) ; if ( null == value source parsers . get ( name ) ) { value source parser value source parser = entry . get value ( ) ; value source parsers . put ( name , value source parser ) ; value source parser . init ( null ) ; } } catch ( exception e ) { throw new solr exception ( solr exception . error code . serve r_ error , e ) ; } } }
void on blacklisted ( string id , long expiry time ) ;
public spider clear pipeline ( ) { pipelines = new array list < pipeline > ( ) ; return this ; }
private void build creature tables ( ) { class to creature = new lower case map < default creature > ( ) ; final creature groups xml loader loader = new creature groups xml loader ( str_ ) ; final list < default creature > creatures = loader . load ( ) ; for ( final default creature creature : creatures ) { final string id = creature . get tile id ( ) ; final string clazz = creature . get creature name ( ) ; if ( class to creature . contains key ( clazz ) ) { logger . warn ( str_ + clazz ) ; } if ( ! creature . verify items ( this ) ) { logger . warn ( str_ + clazz + str_ ) ; } class to creature . put ( clazz , creature ) ; id to class . put ( id , clazz ) ; word list . get instance ( ) . register name ( creature . get creature name ( ) , expression type . subject ) ; } }
public static map < string , object > update electronic text ( dispatch context dctx , map < string , ? extends object > context ) { map < string , object > result = update electronic text method ( dctx , context ) ; return result ; }
public void train ( ) { for ( int i cnt = i min char n gram ; i cnt <= i max char n gram ; i cnt ++ ) { distribution document d cur = distro docs . get ( i cnt ) ; if ( d cur != null ) d cur . set data string ( full text data string , i cnt , bool_ ) ; } for ( int i cnt = i min word n gram ; i cnt <= i max word n gram ; i cnt ++ ) { distribution word document d word cur = distro word docs . get ( i cnt ) ; if ( d word cur != null ) d word cur . set data string ( full text data string , i cnt , bool_ ) ; } }
protected void trigger shutdown ( ) { }
public void update ( graphics g , j component c ) { paint ( g , c ) ; }
public void add listener ( final trainer listener trainer listener ) { if ( listeners == null ) { listeners = new array list < trainer listener > ( ) ; } listeners . add ( trainer listener ) ; }
public signature util ( pdf document document ) { this . document = document ; this . acro form = pdf acro form . get acro form ( document , bool_ ) ; }
public void run test ( ) throws throwable { document doc ; node list address list ; node test node ; named node map attributes ; attr street attr ; boolean state ; doc = ( document ) load ( str_ , bool_ ) ; address list = doc . get elements by tag name ( str_ ) ; test node = address list . item ( num_ ) ; ( ( element ) test node ) . remove attribute ( str_ ) ; attributes = test node . get attributes ( ) ; street attr = ( attr ) attributes . get named item ( str_ ) ; assert not null ( str_ , street attr ) ; state = street attr . get specified ( ) ; assert false ( str_ , state ) ; }
public boolean can dispatch ( string namespace uri , string type ) ;
private void use game ( ) { close action = close action . game ; set visible ( bool_ ) ; }
public static boolean send push message ( string body , string device key , boolean production , string google auth key , string ios certificate url , string ios certificate password , string bb url , string bb app , string bb pass , string bb port ) { connection request cr = create push message ( body , device key , production , google auth key , ios certificate url , ios certificate password , bb url , bb app , bb pass , bb port ) ; network manager . get instance ( ) . add to queue and wait ( cr ) ; if ( cr . get respose code ( ) == num_ ) { return bool_ ; } return bool_ ; }
private static void init game folder ( ) { string default folder = system . get property ( str_ ) + stendha l_ folder ; string unix likes = str_ ; string system = system . get property ( str_ ) ; if ( system . matches ( unix likes ) ) { file f = new file ( default folder + str_ ) ; if ( ! f . exists ( ) ) { game folder = system . get property ( str_ ) + separator + str_ + separator + stendha l_ folder ; return ; } } game folder = default folder ; }
public count request routing ( string ... routings ) { this . routing = strings . array to comma delimited string ( routings ) ; return this ; }
public void zoom out ( ) { zoom out ( null ) ; }
public static < e > set < e > singleton ( e object ) { return new singleton set < e > ( object ) ; }
public boolean has fragment ( ) { return ( _fragment != null ) ; }
public test timer to timer ( ) { return new stepping timer ( this ) ; }
private void ensure file open ( ) { if ( saving disabled ) { log . e ( tag , str_ ) ; return ; } if ( save file stream != null ) return ; file save file = new file ( ctx . get files dir ( ) , savefile ) ; try { file output stream file output = null ; data output stream out = null ; if ( save file . exists ( ) ) { file output = ctx . open file output ( savefile , context . mod e_ append ) ; out = new data output stream ( new buffered output stream ( file output ) ) ; } else { file output = ctx . open file output ( savefile , context . mod e_ private ) ; out = new data output stream ( new buffered output stream ( file output ) ) ; out . write int ( track point . forma t_ version ) ; saved track points = num_ ; } save file stream = out ; } catch ( exception e ) { mark saving broken ( str_ , e ) ; } }
private boolean check ready ( ) { if ( m map == null ) { toast . make text ( this , r . string . map _not _ready , toast . lengt h_ short ) . show ( ) ; return bool_ ; } return bool_ ; }
public default giga map ( i map map , transaction provider tx provider , exception translator ex translator , int default isolation level ) { this . map = map ; this . lock manager = new lock manager ( map ) ; this . tx provider = tx provider ; this . ex translator = ex translator ; switch ( default isolation level ) { case transaction definition . isolatio n_ default : this . default isolation level = read modifiers . repeatabl e_ read ; break ; case transaction definition . isolatio n_ rea d_ uncommitted : this . default isolation level = read modifiers . dirt y_ read ; break ; case transaction definition . isolatio n_ rea d_ committed : this . default isolation level = read modifiers . rea d_ committed ; break ; case transaction definition . isolatio n_ repeatabl e_ read : this . default isolation level = read modifiers . repeatabl e_ read ; break ; case transaction definition . isolatio n_ serializable : throw new illegal argument exception ( str_ ) ; } }
public final void add exceptions ( collection < ? extends throwable > ex ) { get exceptions ( ) . add all ( ex ) ; }
public void on first run check done ( ) { m first run check is pending = bool_ ; if ( is sign in allowed ( ) ) { notify sign in allowed changed ( ) ; } }
protected static boolean create directory ( final string path ) { file dir = new file ( path ) ; try { boolean dir created = dir . mkdirs ( ) ; return dir created ; } catch ( security exception e ) { logger . error ( str_ + str_ + dir . get absolute path ( ) , e ) ; throw new illegal state exception ( str_ + path + str_ , e ) ; } }
action make decision ( state state ) ;
public static < s extends has no click handlers & has handlers > void fire ( s source , java script object js obj ) { if ( type != null ) { no click event event = new no click event ( js obj ) ; source . fire event ( event ) ; } }
private void return data ( object ret ) { if ( my host != null ) { my host . return data ( ret ) ; } }
private void update cv for addr change ( ) { for ( int i = num_ ; i < first free space ; i ++ ) { cv value cv = _cv map . get ( cv numbers [ i ] ) ; if ( cv == null ) { continue ; } if ( ! cv numbers [ i ] . equals ( cv . number ( ) ) ) { log . error ( str_ + cv numbers [ i ] + str_ + cv . number ( ) ) ; } cv . set to write ( bool_ ) ; cv . set state ( edited ) ; if ( log . is debug enabled ( ) ) { log . debug ( str_ + cv . number ( ) ) ; } } }
public static void reveal in editor ( i project project , method model method , boolean activate ) { source location tag line = get line ( method ) ; if ( line != null ) { reveal in editor ( project , line , activate ) ; } }
public void stop ( ) { try { if ( this . running . compare and set ( bool_ , bool_ ) ) { do stop ( ) ; } } finally { do shutdown ( ) ; } }
public linked list node add first ( linked list node node ) { node . next = head . next ; node . previous = head ; node . previous . next = node ; node . next . previous = node ; return node ; }
public boolean is configured ( ) ;
public void check text only ( ) { for ( int i = num_ ; i < size ; i ++ ) { ( ( char sequence ) parts [ i ] ) . get class ( ) ; } }
promise < string > expand ( ) ;
public static int hash code ( int pre , string s ) { int h = ( s != null ? s . hash code ( ) : num_ ) ; return num_ * pre + h ; }
public boolean delete ( e e ) ;
public replication failure exception ( string message ) { super ( message ) ; }
void parse ( element element , element metadata < ? , ? > metadata , object value ) throws parse exception ;
private static int check type arguments ( final string signature , int pos ) { pos = check char ( str_ , signature , pos ) ; pos = check type argument ( signature , pos ) ; while ( get char ( signature , pos ) != str_ ) { pos = check type argument ( signature , pos ) ; } return pos + num_ ; }
public boolean is spinning ( ) { return is spinning ; }
public boolean is set register response ( ) { return this . register response != null ; }
public node de registration response deregister node ( final string node id ) throws required input missing exception , remote client connection failed exception { if ( string utils . is blank ( node id ) ) throw new required input missing exception ( str_ ) ; string buffer url = new string buffer ( this . resource manager service base url ) . append ( str_ ) . append ( node id ) ; if ( logger . is debug enabled ( ) ) logger . debug ( str_ + node id + str_ + url . to string ( ) ) ; try { final web target web target = this . rest client . target ( url . to string ( ) ) ; return web target . request ( media type . applicatio n_ json ) . accept ( media type . applicatio n_ json ) . delete ( node de registration response . class ) ; } catch ( exception e ) { throw new remote client connection failed exception ( str_ + url . to string ( ) + str_ + e . get message ( ) ) ; } }
public storage base ( context context , int encryption mode ) throws illegal argument exception { if ( encryption mode != encryptio n_ none ) { throw new illegal argument exception ( str_ + encryption mode + str_ ) ; } store = context . get shared preferences ( stor e_ fil e_ name , context . mod e_ private ) ; editor = store . edit ( ) ; }
public java . lang . string to string ( ) { return null ; }
public void scroll to finish activity ( ) { final int child width = m content view . get width ( ) ; final int child height = m content view . get height ( ) ; int left = num_ , top = num_ ; if ( ( m edge flag & edg e_ left ) != num_ ) { left = child width + overscrol l_ distance ; m tracking edge = edg e_ left ; } else if ( ( m edge flag & edg e_ right ) != num_ ) { left = - child width - overscrol l_ distance ; m tracking edge = edg e_ right ; } else if ( ( m edge flag & edg e_ bottom ) != num_ ) { top = - child height - overscrol l_ distance ; m tracking edge = edg e_ bottom ; } m drag helper . smooth slide view to ( m content view , left , top ) ; invalidate ( ) ; }
void init component impl ( ) { if ( ! initialized ) { initialized = bool_ ; ui manager manager = get ui manager ( ) ; style stl = get style ( ) ; lock style images ( stl ) ; manager . get look and feel ( ) . bind ( this ) ; check animation ( ) ; if ( is rtl ( ) && is scrollable x ( ) ) { set scroll x ( get scroll dimension ( ) . get width ( ) - get width ( ) ) ; } init component ( ) ; } }
private void check and display matrix ( ) { if ( check matrix bounds ( ) ) { set image view matrix ( get draw matrix ( ) ) ; } }
handler registration add cell context click handler ( cell context click handler handler ) ;
private static void hook load patch ( patch callback callback ) { synchronized ( loaded patch callbacks ) { loaded patch callbacks . add ( callback ) ; } }
m case of test ( predicate < arg > tester , supplier < res > proc ) ;
public void gui toggled ( ) ;
public static < t > void assert 2 d array equals ( t [ ] [ ] array 1 , t [ ] [ ] array 2 ) { assert . assert equals ( array 1 . length , array 2 . length ) ; for ( int i = num_ ; i < array 1 . length ; ++ i ) { assert . assert equals ( array 1 [ i ] , array 2 [ i ] ) ; } }
public void send ( message message ) { transport smtp = null ; try { smtp = _session . get transport ( str_ ) ; smtp . connect ( ) ; smtp . send ( message , _to ) ; log . fine ( this + str_ + _to [ num_ ] ) ; } catch ( runtime exception e ) { throw e ; } catch ( exception e ) { throw new runtime exception ( e ) ; } finally { try { if ( smtp != null ) smtp . close ( ) ; } catch ( exception e ) { log . log ( level . finer , e . to string ( ) , e ) ; } } }
public bits xor set ( bits xs ) { assert . check ( current state != bits state . unknown ) ; size to ( xs . bits . length ) ; for ( int i = num_ ; i < xs . bits . length ; i ++ ) { bits [ i ] = bits [ i ] ^ xs . bits [ i ] ; } current state = bits state . normal ; return this ; }
public void add connections ( ) ;
public flip detector ( flip listener flip listener ) { super ( typ e_ accelerometer ) ; this . flip listener = flip listener ; }
public boolean is add current folder ( ) { return add current folder ; }
< t > void publish with initializer ( service wrapper service wrapper , provider initializer < t > initializer , executor executor ) ;
private string [ ] new ldif entries ( ) { return new string [ ] { str_ + base dn + str_ + str_ + str_ + str_ + str_ , str_ + base dn + str_ + str_ + str_ + str_ + str_ , str_ + base dn + str_ + str_ + str_ + str_ + str_ + str_ + str_ + str_ + str_ + str_ + str_ , str_ + base dn + str_ + str_ + str_ + str_ + str_ + str_ + str_ + str_ + str_ + str_ + str_ } ; }
public void test _ prepared properties not contain old values ( ) throws exception { string namespace = str_ ; properties properties = new properties ( ) ; properties . put ( remote repository . optio n_ creat e_ k b_ namespace , namespace ) ; properties . put ( str_ + remote repository . defaul t_ namespace + str_ , str_ ) ; properties . put ( str_ + remote repository . defaul t_ namespace + str_ , str_ ) ; final properties p = m _mgr . get prepared properties ( namespace , properties ) ; assert false ( p . contains key ( str_ + remote repository . defaul t_ namespace + str_ ) ) ; assert false ( p . contains key ( str_ + remote repository . defaul t_ namespace + str_ ) ) ; }
public object clone ( ) { return new bidi attributed character iterator ( ( attributed character iterator ) reordered aci . clone ( ) , frc , chunk start , ( int [ ] ) new char order . clone ( ) ) ; }
public bptt creation dialog ( final network panel panel ) { this . panel = panel ; set title ( str_ ) ; tf num inputs outputs . set columns ( num_ ) ; prefs panel . add item ( str_ , tf num inputs outputs ) ; prefs panel . add item ( str_ , tf num hidden ) ; tf num inputs outputs . set text ( str_ + num_ ) ; tf num hidden . set text ( str_ + num_ ) ; set content pane ( prefs panel ) ; }
public boolean matches ( interaction interaction , collection < word token > words ) { string interaction type = interaction . get relationship type ( ) ; string interaction sub type = interaction . get relation sub type ( ) ; boolean type match = type . equals ignore case ( interaction type ) && sub type . equals ignore case ( interaction sub type ) ; if ( words == null || words . is empty ( ) ) { return type match ; } else { return type match && words . stream ( ) . any match ( null ) ; } }
values initialize values ( thread current ) { return current . local values = new values ( ) ; }
protected void add channel id ( string user id , string channel , string channel id ) { if ( ! user channels . contains key ( user id ) ) { user channels . put if absent ( user id , new concurrent hash map < string , set < string > > ( estimate d_ use r_ channel s_ pe r_ application ) ) ; } concurrent map < string , set < string > > channel ids = user channels . get ( user id ) ; if ( ! channel ids . contains key ( channel ) ) { channel ids . put if absent ( channel , synchronized set ( new hash set < string > ( estimate d_ use r_ channel s_ pe r_ session ) ) ) ; } channel ids . get ( channel ) . add ( channel id ) ; }
public boolean is stopped ( ) { return m direction == stopped ; }
public int next ( ) { int node ; do { node = _current node ; _current node = m _traverser . next ( _start node , _current node ) ; } while ( node != dtm . null && ( get expanded type id ( node ) != _node type && get node type ( node ) != _node type ) ) ; return ( node == dtm . null ? dtm . null : return node ( node ) ) ; }
public boolean is use average ( ) { return use avg ; }
public boolean equals ( peer p ) { if ( p == null ) { return bool_ ; } else if ( p . get network ( ) == null ) { return p . get network ( ) == network ; } else { return p . get network ( ) . equals ( network ) ; } }
message decoder result decodable ( io session session , io buffer in ) ;
public synchronized boolean is closed ( ) { return journal writer == null ; }
private void update progress ( int progress ) { if ( my host != null && progress != previous progress ) { my host . update progress ( progress ) ; } previous progress = progress ; }
public static pattern create pattern ( string [ ] patterns , boolean is case sensitive ) throws pattern syntax exception { string buffer pattern = new string buffer ( ) ; for ( int i = num_ ; i < patterns . length ; i ++ ) { if ( i > num_ ) { pattern . append ( str_ ) ; } append as reg ex ( bool_ , patterns [ i ] , pattern ) ; } return create pattern ( pattern . to string ( ) , bool_ , bool_ , is case sensitive , bool_ ) ; }
public static list < element > find children ( node parent , string localname , string namespaceuri ) { return find children ( parent , localname , namespaceuri , bool_ ) ; }
public void add all ( long ... values ) { for ( long value : values ) { add ( value ) ; } }
public string visit ( symbol s , locale locale ) { return s . accept ( this , locale ) ; }
public short compare document position ( node other ) throws dom exception { return num_ ; }
public static string format millis to seconds ( long time ) { double sec = time / num_ ; return millis format . format ( sec ) + str_ ; }
public void on websocket handshake sent as client ( web socket conn , client handshake request ) throws invalid data exception ;
protected string build write expression ( string widget property path , string ui object variable ) throws no such field exception { string builder write expression = new string builder ( ) ; string ui object var = get ui object var ( widge t_ va r_ ref ) ; boolean has ui object variable = ! string utils . is empty ( ui object variable ) ; boolean create auxiliary variable = has ui object expression ( ) && ! has ui object variable ; ui object variable = create auxiliary variable ? view factory creator . create variable name ( str_ ) : ( has ui object variable ? ui object variable : ui object var ) ; if ( create auxiliary variable ) { write expression . append ( get ui object class name ( ) + str_ + ui object variable + str_ + ui object var + str_ ) ; } write expression . append ( str_ + ui object variable + str_ ) ; if ( native wrapper or element ) { string property setter = data binding native type resolver . resolve type for property ( widget property path ) . get setter ( ) ; write expression . append ( ui object variable + str_ + property setter + str_ + escape utils . quote ( widget property path ) + str_ + get data object read expression ( ) + str_ ) ; } else { j class utils . build set value expression ( write expression , ui object type , widget property path , ui object variable , get data object read expression ( ) ) ; } return write expression . to string ( ) ; }
public static border create etched lowered ( int highlight , int shadow ) { border b = new border ( ) ; b . type = typ e_ etche d_ lowered ; b . theme colors = bool_ ; b . color a = shadow ; b . color b = highlight ; return b ; }
void vm status changed ( vm status change event event ) ;
private default dimension config ( data table column data table column , plot dimension dimension , int id ) { super ( dimension ) ; this . id = id ; this . data table column = data table column ; set user defined range ( new numerical value range ( num_ , num_ , - num_ , bool_ , bool_ ) ) ; set auto label if enabled ( ) ; }
public faces config ordering test case ( string name ) { super ( name ) ; }
boolean can publish ( ) ;
public static test suite ( ) { return ( new test suite ( select many collection it case . class ) ) ; }
public void bind all ( ) { if ( is unbound ( ) ) { unbound map . entry set ( ) . remove if ( null ) ; } }
public static frame from ( final byte buffer byte buffer ) { return pool . acquire frame ( byte buffer ) ; }
protected void update ok button action ( ) { ok button . set enabled ( ! text field . get text ( ) . equals ( str_ ) ) ; }
public static map < string , string > parse element ( list < element > element list ) { if ( element list == null ) { throw new null pointer exception ( str_ ) ; } map < string , string > elment map = new hash map < string , string > ( ) ; for ( element element : element list ) { string example xml = filter example xml ( element . get child text ( constants . elemen t_ exampl e_ xm l_ node ) . trim ( ) ) ; elment map . put ( element . get attribute value ( constants . attribut e_ name ) . trim ( ) , example xml ) ; } return elment map ; }
public access denied exception ( string file , string other , string reason ) { super ( file , other , reason ) ; }
public boolean is constant ( ) { return bool_ ; }
protected void prepare ( ) { process info parameter [ ] para = get parameter ( ) ; for ( int i = num_ ; i < para . length ; i ++ ) { string name = para [ i ] . get parameter name ( ) ; if ( para [ i ] . get parameter ( ) == null ) ; else if ( name . equals ( str_ ) ) m _ a d_ client _ id = ( ( big decimal ) para [ i ] . get parameter ( ) ) . int value ( ) ; else if ( name . equals ( str_ ) ) m _ p a_ report line set _ id = ( ( big decimal ) para [ i ] . get parameter ( ) ) . int value ( ) ; else if ( name . equals ( str_ ) ) m _delete old imported = str_ . equals ( para [ i ] . get parameter ( ) ) ; else log . log ( level . severe , str_ + name ) ; } if ( m _ date value == null ) m _ date value = new timestamp ( system . current time millis ( ) ) ; }
public static _ fields find by thrift id or throw ( int field id ) { _ fields fields = find by thrift id ( field id ) ; if ( fields == null ) throw new illegal argument exception ( str_ + field id + str_ ) ; return fields ; }
public void put attribute ( final ldap entry attribute vo ldap entry attr ) { if ( map == null ) { map = new hash map ( ) ; } map . put ( ldap entry attr . get id attr ( ) . to lower case ( ) , ldap entry attr ) ; }
public final void clear may throw uncaught exception ( ) { flags &= ~ implici t_ exi t_ edge ; }
protected void paint map ( java . awt . graphics 2 d g 2 ) { map env map = get map env ( ) . get map ( ) ; for ( string l 1 : env map . get locations ( ) ) { point 2 d pt 1 = env map . get position ( l 1 ) ; list < string > linked locs = env map . get possible next locations ( l 1 ) ; for ( string l 2 : linked locs ) { point 2 d pt 2 = env map . get position ( l 2 ) ; g 2 . set color ( color . light gray ) ; g 2 . draw line ( x ( pt 1 ) , y ( pt 1 ) , x ( pt 2 ) , y ( pt 2 ) ) ; } } }
public friends get suggestions query offset ( integer value ) { return unsafe param ( str_ , value ) ; }
public final set < class < ? extends annotation > > load external annotation classes from directory ( final string dir name ) { file root directory = new file ( dir name ) ; set < string > anno names = get annotation names from directory ( str_ , dir name , root directory , jav a_ suffix ) ; return load annotation classes ( anno names ) ; }
private void socks request connection ( inet address application server address , int application server port ) throws io exception { socks send request ( socks 4 message . comman d_ connect , application server address , application server port ) ; socks 4 message reply = socks read reply ( ) ; if ( reply . get command or result ( ) != socks 4 message . retur n_ success ) { throw new io exception ( reply . get error string ( reply . get command or result ( ) ) ) ; } }
private void send click event ( final boolean is long click ) { if ( get parent ( ) instanceof adapter view ) { final adapter view adapter view = ( adapter view ) get parent ( ) ; final int position = adapter view . get position for view ( this ) ; final long id = adapter view . get item id at position ( position ) ; if ( is long click ) { if ( adapter view . get on item long click listener ( ) != null ) adapter view . get on item long click listener ( ) . on item long click ( adapter view , this , position , id ) ; } else { if ( adapter view . get on item click listener ( ) != null ) adapter view . get on item click listener ( ) . on item click ( adapter view , this , position , id ) ; } } }
private void update timer ( ) { update time handler . remove messages ( ms g_ updat e_ time ) ; if ( should timer be running ( ) ) { update time handler . send empty message ( ms g_ updat e_ time ) ; } }
protected void update metrics ( ) { component host = get container ( ) ; font f = host . get font ( ) ; if ( font != f ) { calculate longest line ( ) ; tab size = get tab size ( ) * metrics . char width ( str_ ) ; } }
static object do strict floor mod ( long x , long y ) { try { return strict math . floor mod ( x , y ) ; } catch ( arithmetic exception ae ) { return ae ; } }
private static i multi point [ ] random points ( int n , int d , int scale ) { i multi point points [ ] = new i multi point [ n ] ; for ( int i = num_ ; i < n ; i ++ ) { string builder sb = new string builder ( ) ; for ( int j = num_ ; j < d ; j ++ ) { sb . append ( r gen . next double ( ) * scale ) ; if ( j < d - num_ ) { sb . append ( str_ ) ; } } points [ i ] = new hyperpoint ( sb . to string ( ) ) ; } return points ; }
public type script indenter ( i document document , java heuristic scanner scanner ) { this ( document , scanner , null ) ; }
public void end put ( long start ) { long ts = distribution stats . get stat time ( ) ; this . stats . inc int ( events queued id , num_ ) ; long elapsed = ts - start ; this . stats . inc long ( event queue time id , elapsed ) ; }
public chunk coords in dimension ( world world ) { return new chunk coords ( world . provider . dimension id , x , y , z ) ; }
static void sleep ( long ms , int ns ) throws interrupted exception { rvm thread . sleep ( ms , ns ) ; }
public void java _io _ object output stream _get object field value ( soot method method , reference variable this var , reference variable return var , reference variable params [ ] ) { throw new native method not supported exception ( method ) ; }
public boolean is currency ( int column ) throws sql exception ;
public boolean isvalue ( int i ) { return i > num_ && i <= narg ( ) ; }
public matrix 4d assume perspective ( ) { properties = propert y_ perspective ; return this ; }
public static int determine threads ( output output , parameter database parameters , parameter thread parameter ) { int thread = num_ ; string tmp _s = parameters . get string ( thread parameter , null ) ; if ( tmp _s == null ) { output . fatal ( str_ , thread parameter , null ) ; } else if ( v_ thread s_ auto . equals ignore case ( tmp _s ) ) { runtime runtime = runtime . get runtime ( ) ; try { return ( ( integer ) runtime . get class ( ) . get method ( str_ , ( class [ ] ) null ) . invoke ( runtime , ( object [ ] ) null ) ) . int value ( ) ; } catch ( exception e ) { output . fatal ( str_ + str_ , thread parameter , null ) ; } } else { try { thread = parameters . get int ( thread parameter , null ) ; if ( thread <= num_ ) output . fatal ( str_ , thread parameter , null ) ; } catch ( number format exception e ) { output . fatal ( str_ + thread + str_ , thread parameter , null ) ; } } return thread ; }
public void hide ( ) { m current state manager . get current state ( ) . hide ( ) ; }
public void delete cifs share ( string share name ) { if ( log . is debug enabled ( ) ) { log . debug ( str_ + share name ) ; } file share share = new file share ( server . get na server ( ) , str_ ) ; share . delete cifs share ( share name ) ; }
public static void show settings dialog ( final window parent ) { final c settings dialog dlg = new c settings dialog ( parent ) ; gui helper . center child to parent ( parent , dlg , bool_ ) ; dlg . set visible ( bool_ ) ; }
public void on wake lock released ( int flags , string tag , int owner uid , int owner pid , work source work source ) { if ( debug ) { slog . d ( tag , str_ + flags + str_ + tag + str_ + owner uid + str_ + owner pid + str_ + work source ) ; } try { final int monitor type = get battery stats wake lock monitor type ( flags ) ; if ( work source != null ) { m battery stats . note stop wakelock from source ( work source , owner pid , tag , monitor type ) ; } else { m battery stats . note stop wakelock ( owner uid , owner pid , tag , monitor type ) ; } } catch ( remote exception ex ) { } }
public void new function ( editor state editor state , string name ) { new function ( editor state , name , num_ ) ; }
public void stop ( ) { if ( m cache dispatcher != null ) { m cache dispatcher . quit ( ) ; } for ( int i = num_ ; i < m dispatchers . length ; i ++ ) { if ( m dispatchers [ i ] != null ) { m dispatchers [ i ] . quit ( ) ; } } }
public static boolean is array byte base 6 4 ( byte [ ] array octect ) { array octect = discard whitespace ( array octect ) ; int length = array octect . length ; if ( length == num_ ) { return bool_ ; } for ( int i = num_ ; i < length ; i ++ ) { if ( ! is base 6 4 ( array octect [ i ] ) ) { return bool_ ; } } return bool_ ; }
public void paint slider track border ( synth context context , graphics g , int x , int y , int w , int h ) { }
private request manager ( ) { }
void end json ( ) throws parse exception , io exception ;
void execution started ( firebird row updater updater ) throws sql exception ;
public boolean is connected ( int p , int q ) { int p root = find ( p ) ; int q root = find ( q ) ; return p root == q root ; }
public static void copy ( input stream i , output stream o , int buffer size ) throws io exception { try { copy no close ( i , o , buffer size ) ; } finally { util . get implementation ( ) . cleanup ( o ) ; util . get implementation ( ) . cleanup ( i ) ; } }
public void process command line args ( string [ ] args ) ;
public static boolean is between ( final double x , final double a , final double b , final double offset ) { return ( a > b ) ? x <= a + offset && x >= b - offset : x <= b + offset && x >= a - offset ; }
public void toggle playback ( ) throws cast exception , transient network disconnection exception , no connection exception { check connectivity ( ) ; boolean is playing = is remote movie playing ( ) ; if ( is playing ) { pause ( ) ; } else { if ( m state == media status . playe r_ stat e_ idle && m idle reason == media status . idl e_ reaso n_ finished ) { load media ( get remote media information ( ) , bool_ , num_ ) ; } else { play ( ) ; } } }
public static byte as byte ( int a ) { if ( a != ( byte ) a ) { throw new arithmetic exception ( str_ + a ) ; } return ( byte ) a ; }
public void remove property ( string property name ) { this . bot . memory ( ) . remove property ( property name ) ; }
public void balance ( ) { int i = num_ , n = length ; string [ ] k = new string [ n ] ; char [ ] v = new char [ n ] ; iterator iter = new iterator ( ) ; while ( iter . has more elements ( ) ) { v [ i ] = iter . get value ( ) ; k [ i ++ ] = iter . next element ( ) ; } init ( ) ; insert balanced ( k , v , num_ , n ) ; }
public object read object ( abstract hessian input in , object [ ] fields ) throws io exception ;
public void clear unit boxes ( ) ;
void close ( ) { if ( vdbg ) log ( str_ ) ; i bluetooth manager mgr = m adapter . get bluetooth manager ( ) ; if ( mgr != null ) { try { mgr . unregister state change callback ( m bluetooth state change callback ) ; } catch ( exception e ) { log . e ( tag , str_ , e ) ; } } synchronized ( m connection ) { if ( m service != null ) { try { m service = null ; m context . unbind service ( m connection ) ; } catch ( exception re ) { log . e ( tag , str_ , re ) ; } } } m service listener = null ; }
public synchronized void update object ( int column index , object x , sql type target sql type ) throws sql exception { super . update object internal ( column index , jdb c 4 2 helper . convert java time to java sql ( x ) , translate and check sql type ( target sql type ) , num_ ) ; }
private static int find nal start code ( byte [ ] data , int index ) { int end index = data . length - na l_ star t_ code . length ; for ( int i = index ; i <= end index ; i ++ ) { if ( is nal start code ( data , i ) ) { return i ; } } return - num_ ; }
public attractive sector ( int number of variables , double [ ] xopt ) { super ( number of variables ) ; this . xopt = xopt ; }
protected boolean read receive delay ( ) { try { receive delay = integer . parse int ( receive delay field . get text ( ) ) ; } catch ( exception e ) { status text 1 . set text ( rb . get string ( str_ ) ) ; status text 1 . set visible ( bool_ ) ; receive delay = num_ ; error in status 1 = bool_ ; reset notes 2 ( ) ; return ( bool_ ) ; } if ( receive delay < num_ ) { status text 1 . set text ( rb . get string ( str_ ) ) ; status text 1 . set visible ( bool_ ) ; receive delay = num_ ; error in status 1 = bool_ ; reset notes 2 ( ) ; return ( bool_ ) ; } if ( receive delay > num_ ) { status text 1 . set text ( rb . get string ( str_ ) ) ; status text 1 . set visible ( bool_ ) ; receive delay = num_ ; error in status 1 = bool_ ; reset notes 2 ( ) ; return ( bool_ ) ; } return bool_ ; }
public static s m_ syste m_ message st r_ guil d_ invit e_ h e_ rejecte d_ invitation ( string value 0 ) { return new s m_ syste m_ message ( num_ , value 0 ) ; }
public boolean exists ( ) { return bool_ ; }
public evaluation metric helper ( evaluation eval ) { for ( int i = num_ ; i < evaluation . buil t_ i n_ eva l_ metrics . length ; i ++ ) { m _builtin . put ( evaluation . buil t_ i n_ eva l_ metrics [ i ] . to lower case ( ) , i ) ; } set evaluation ( eval ) ; }
public boolean is editing ( ) { return display . get instance ( ) . is text editing ( this ) ; }
public void test delay assignment client join ( ) throws exception { ignite ignite 0 = start server ( num_ , num_ ) ; test recording communication spi spi = ( test recording communication spi ) ignite 0 . configuration ( ) . get communication spi ( ) ; block supply send ( spi , cach e_ nam e1 ) ; start server ( num_ , num_ ) ; start client ( num_ , num_ ) ; check affinity ( num_ , top ver ( num_ , num_ ) , bool_ ) ; spi . stop block ( ) ; check affinity ( num_ , top ver ( num_ , num_ ) , bool_ ) ; }
public boolean is final ( ) { return bool_ ; }
private boolean zz refill ( ) throws java . io . io exception { return bool_ ; }
private void update progress ( string progress label , int progress ) { if ( my host != null && ( ( progress != previous progress ) || ( ! progress label . equals ( previous progress label ) ) ) ) { my host . update progress ( progress label , progress ) ; } previous progress = progress ; previous progress label = progress label ; }
public void apply modifications ( list < modification > mods ) throws directory exception { for ( modification m : mods ) { apply modification ( m ) ; } }
public shard parse exception ( string message , throwable cause ) { super ( message , cause ) ; }
private void map application user id to license ( list < usage license > licenses , user [ ] created users ) { if ( created users == null ) { return ; } string application user id ; for ( usage license license : licenses ) { for ( user created user : created users ) { application user id = created user . get application user id ( ) ; if ( created user . get user id ( ) . equals ( license . get user ( ) . get user id ( ) ) && application user id != null ) { license . set application user id ( application user id ) ; break ; } } } }
public bytes reference source ref ( ) { try { this . source = compressor factory . uncompress if needed ( this . source ) ; return this . source ; } catch ( io exception e ) { throw new elasticsearch parse exception ( str_ , e ) ; } }
protected attribute ( final string type ) { this . type = type ; }
public void reverse ( ) { final array list < animator > animators = m animated vector state . m animators ; final int size = animators . size ( ) ; for ( int i = num_ ; i < size ; i ++ ) { final animator animator = animators . get ( i ) ; if ( can reverse ( animator ) ) { reverse ( animator ) ; } else { log . w ( logtag , str_ ) ; } } }
public void add new equations to work list ( ) { if ( debug ) { system . out . println ( str_ ) ; } for ( d f_ equation eq : new equations ) { if ( debug ) { system . out . println ( eq . to string ( ) ) ; } add to work list ( eq ) ; } new equations . clear ( ) ; if ( debug ) { system . out . println ( str_ ) ; } }
public static boolean is presto library installed ( context context ) { return is intent available ( context , service backed media player . inten t_ name ) ; }
public void test directory filter ( ) throws io exception { string name = str_ ; directory dir = get directory ( create temp dir ( str_ ) ) ; try { dir . create output ( name , new io context ( random ( ) ) ) . close ( ) ; assert true ( slow file exists ( dir , name ) ) ; assert true ( arrays . as list ( dir . list all ( ) ) . contains ( name ) ) ; } finally { dir . close ( ) ; } }
protected void on successful app call ( string app call id , string action , bundle extras ) { }
private void broadcast start ( ) { send broadcast ( new intent ( main activity . missio n_ start ) ) ; }
protected boolean joins with ( final bs bs , final i key builder key builder , final h tree right solutions , final h tree right solutions without subquery result ) { return joins with ( bs , key builder , right solutions ) || joins with ( bs , key builder , right solutions without subquery result ) ; }
protected void succeeded ( description description ) { logger extension . clear ( ) ; fake database . clear ( ) ; }
public object clone ( ) { try { x 5 0 9 cert selector copy = ( x 5 0 9 cert selector ) super . clone ( ) ; if ( subject alternative names != null ) { copy . subject alternative names = clone set ( subject alternative names ) ; copy . subject alternative general names = clone set ( subject alternative general names ) ; } if ( path to general names != null ) { copy . path to names = clone set ( path to names ) ; copy . path to general names = clone set ( path to general names ) ; } return copy ; } catch ( clone not supported exception e ) { throw new internal error ( e . to string ( ) , e ) ; } }
history create history ( string message , jpa entity entity , job status job status , long wait time , long execution time , object ... params ) ;
public exception occurred synchronizer ( final i debugger debugger , final listener provider < i debug event listener > listeners ) { super ( debugger , listeners ) ; }
private attr read attribute from data store ( string attr name ) throws ums exception { attr attr = data layer . get instance ( ) . get attribute ( get principal ( ) , get guid ( ) , attr name ) ; if ( m _attr set == null ) { m _attr set = new attr set ( ) ; } if ( m _null attributes == null ) { m _null attributes = new array list ( ) ; } if ( attr != null ) { m _attr set . replace ( attr ) ; } else if ( ! m _null attributes . contains ( attr name ) ) { m _null attributes . add ( attr name ) ; } return attr ; }
public void append compilation unit label ( i compilation unit cu , long flags ) { if ( get flag ( flags , java element labels . c u_ qualified ) ) { i package fragment pack = ( i package fragment ) cu . get parent ( ) ; if ( ! pack . is default package ( ) ) { append package fragment label ( pack , ( flags & qualifie r_ flags ) ) ; f buffer . append ( str_ ) ; } } f buffer . append ( cu . get element name ( ) ) ; if ( get flag ( flags , java element labels . c u_ pos t_ qualified ) ) { int offset = f buffer . length ( ) ; f buffer . append ( java element labels . conca t_ string ) ; append package fragment label ( ( i package fragment ) cu . get parent ( ) , flags & qualifie r_ flags ) ; } }
private read stream open read ( long address , int size ) { in store in store = _store . open read ( address , size ) ; in store stream is = new in store stream ( in store , address , address + size ) ; return new read stream ( new vfs stream ( is ) ) ; }
public static test suite ( ) { return ( new test suite ( component it case . class ) ) ; }
union 3 < first , second , third > third ( third value ) ;
public static int cs _reach ( dcs g , dcs b , int k , int [ ] xi , int [ ] pinv ) { int p , n , top , bp [ ] , bi [ ] , gp [ ] ; if ( ! dcs _util . c s_ csc ( g ) || ! dcs _util . c s_ csc ( b ) || xi == null ) return ( - num_ ) ; n = g . n ; bp = b . p ; bi = b . i ; gp = g . p ; top = n ; for ( p = bp [ k ] ; p < bp [ k + num_ ] ; p ++ ) { if ( ! dcs _util . c s_ marked ( gp , bi [ p ] ) ) { top = dcs _dfs . cs _dfs ( bi [ p ] , g , top , xi , num_ , xi , n , pinv , num_ ) ; } } for ( p = top ; p < n ; p ++ ) dcs _util . c s_ mark ( gp , xi [ p ] ) ; return ( top ) ; }
public static void main ( final string [ ] args ) { dom test case . do main ( hc _attrchildnodes 2 . class , args ) ; }
public string check start block ( int mode ) { if ( log . is debug enabled ( ) ) log . debug ( str_ + get display name ( ) + str_ ) ; block order bo = _orders . get ( num_ ) ; o block block = bo . get block ( ) ; string msg = block . allocate ( this ) ; if ( msg != null ) { return msg ; } msg = bo . set path ( this ) ; if ( msg != null ) { return msg ; } int state = block . get state ( ) ; if ( ( state & o block . dark ) != num_ || _temp run blind ) { msg = bundle . get message ( str_ , block . get display name ( ) ) ; } else if ( ( state & o block . occupied ) == num_ ) { if ( mode == mod e_ learn ) { msg = str_ ; } else { msg = str_ ; } msg = bundle . get message ( msg , get train name ( ) , block . get display name ( ) ) ; } else { tracker table action . stop tracker in ( block ) ; } return msg ; }
public boolean should send volume keys ( bluetooth device device ) { if ( is enabled ( ) && is valid device ( device ) ) { parcel uuid [ ] uuids = device . get uuids ( ) ; if ( uuids == null ) return bool_ ; for ( parcel uuid uuid : uuids ) { if ( bluetooth uuid . is avrcp target ( uuid ) ) { return bool_ ; } } } return bool_ ; }
void ensure width ( final execution unit execution unit , final int width ) { dimension old = new dimension ( ( int ) model . get process width ( execution unit ) , ( int ) model . get process height ( execution unit ) ) ; if ( width > old . get width ( ) ) { model . set process width ( execution unit , width ) ; balance ( ) ; model . fire process size changed ( ) ; } }
void on nothing selected ( ) ;
private boolean both links have same link stats ( link link a , link link b ) { boolean both links have same link stats = bool_ ; if ( ! link a . get allowed modes ( ) . equals ( link b . get allowed modes ( ) ) ) { both links have same link stats = bool_ ; } if ( link a . get freespeed ( ) != link b . get freespeed ( ) ) { both links have same link stats = bool_ ; } if ( link a . get capacity ( ) != link b . get capacity ( ) ) { both links have same link stats = bool_ ; } if ( link a . get number of lanes ( ) != link b . get number of lanes ( ) ) { both links have same link stats = bool_ ; } return both links have same link stats ; }
public static void remove markers ( i resource res ) throws core exception { res . delete markers ( find bugs marker . name , bool_ , i resource . dept h_ infinite ) ; if ( res instanceof i project ) { i project project = ( i project ) res ; findbugs plugin . clear bug collection ( project ) ; } }
private void compute tip visible bounds ( ) { rectangle r = tip window . get bounds ( ) ; point p = r . get location ( ) ; swing utilities . convert point from screen ( p , text area ) ; r . set location ( p ) ; tip visible bounds . set bounds ( r . x , r . y - num_ , r . width , r . height + num_ * num_ ) ; }
public level filter ( log . level level ) { if ( level == null ) { throw new invalid parameter exception ( str_ ) ; } this . level = level ; }
private void display title ( player player , string name to show user , string msg ) { try { packet sender . send title packet ( player , str_ + name to show user + str_ , str_ + msg + str_ ) ; } catch ( exception e ) { plugin . get logger ( ) . log ( level . severe , str_ , e ) ; } }
public void on message send failed ( status status ) ;
public boolean want ( edge e ) ;
abstract string builder ( int capacity ) { value = new char [ capacity ] ; }
private void assert exactly ( list < string > proposals , list < string > required , i comma separated values expectation expectation ) { if ( proposals . size ( ) != required . size ( ) ) throw new comparison failure ( str_ + proposals . size ( ) + str_ + required . size ( ) + str_ , required . stream ( ) . collect ( collectors . joining ( str_ ) ) , proposals . stream ( ) . collect ( collectors . joining ( str_ ) ) ) ; assert containing match all ( proposals , required , expectation ) ; }
public sparse boolean array ( ) { this ( num_ ) ; }
public boolean is 1 9 ( ) { return bool_ ; }
private boolean is archive ( file file ) { string n = string utils . to lower case ( file . get name ( ) ) ; return fs info . is file ( file ) && ( n . ends with ( str_ ) || n . ends with ( str_ ) ) ; }
void ide setup workspace ( ) throws exception { if ( workspace exists ( ) ) { project . get logger ( ) . lifecycle ( str_ + oomph ide plugin . id e_ setu p_ workspace + str_ + oomph ide plugin . id e_ clean + str_ ) ; } file workspace dir = get workspace dir ( ) ; file misc . clean dir ( workspace dir ) ; workspace to content . for each ( null ) ; internal setup ( get ide dir ( ) ) ; }
public static void main ( final string [ ] args ) { dom test case . do main ( nodehasattributes 0 1 . class , args ) ; }
public advance for feint ( string sidc ) { super ( sidc , num_ ) ; this . paths [ num_ ] . set attributes ( this . dashed attributes ) ; }
public static gs client packet handle ( byte buffer data , gs connection client ) { gs client packet msg = null ; state state = client . get state ( ) ; int id = data . get ( ) & num_ ; switch ( state ) { case connected : { switch ( id ) { case num_ : msg = new c m_ c s_ auth ( data , client ) ; break ; default : unknown packet ( state , id ) ; } break ; } case authed : { switch ( id ) { case num_ : msg = new c m_ playe r_ auth ( data , client ) ; break ; case num_ : msg = new c m_ playe r_ logout ( data , client ) ; break ; case num_ : msg = new c m_ playe r_ gag ( data , client ) ; break ; default : unknown packet ( state , id ) ; } break ; } } if ( msg != null ) { msg . set connection ( client ) ; msg . set buffer ( data ) ; } return msg ; }
public boolean has purchase ( string sku ) { return m purchase map . contains key ( sku ) ; }
public static tuple max ( iterator tuples , string field ) { return max ( tuples , field , default literal comparator . get instance ( ) ) ; }
public void on paused ( activity activity ) ;
public final void force finished ( boolean finished ) { m finished = finished ; }
public string to xml string ( boolean include ns prefix , boolean declare ns ) throws sam l2 exception ;
public final double grid 3 d multiply ( int grid 3 d with this ) { check bounds ( with this ) ; int [ ] [ ] [ ] other field = with this . field ; int [ ] [ ] ofieldx = null ; int [ ] ofieldxy = null ; double [ ] [ ] fieldx = null ; double [ ] fieldxy = null ; final int width = this . width ; final int height = this . height ; final int length = this . length ; for ( int x = num_ ; x < width ; x ++ ) { fieldx = field [ x ] ; ofieldx = other field [ x ] ; for ( int y = num_ ; y < height ; y ++ ) { ofieldxy = ofieldx [ y ] ; fieldxy = fieldx [ y ] ; for ( int z = num_ ; z < length ; z ++ ) fieldxy [ z ] *= ofieldxy [ z ] ; } } return this ; }
void generate leaves ( ) { int var 1 = num_ ; for ( int var 2 = this . leaf nodes . length ; var 1 < var 2 ; ++ var 1 ) { int var 3 = this . leaf nodes [ var 1 ] [ num_ ] ; int var 4 = this . leaf nodes [ var 1 ] [ num_ ] ; int var 5 = this . leaf nodes [ var 1 ] [ num_ ] ; this . generate leaf node ( var 3 , var 4 , var 5 ) ; } }
public < t > grid closeable iterator < t > iterator ( c x2 < t2 < long , integer > , t2 < long , integer > , t > c ) ;
public static void create column data for ( binary table table ) throws fits exception { table . create table ( ) ; }
boolean delete old rdn ( ) ;
private void parse error expected ( string expected ) throws parse exception { if ( tokenizer . ttype == stream tokenizer . t t_ number ) assert . should never reach here ( str_ ) ; if ( tokenizer . ttype == stream tokenizer . t t_ eol ) assert . should never reach here ( str_ ) ; string token str = token string ( ) ; parse error with line ( str_ + expected + str_ + token str ) ; }
public string dont filter after first batch tip text ( ) { return str_ + str_ + str_ + str_ ; }
public static big integer factorial ( big integer n ) { if ( n . equals ( big integer . zero ) ) return big integer . one ; else return n . multiply ( factorial ( n . subtract ( big integer . one ) ) ) ; }
public boolean is sub title ( ) { return is sub title ; }
public void run test ( ) throws throwable { document doc ; node list element list ; element test employee ; attr street attr ; attr removed attr ; string removed value ; doc = ( document ) load ( str_ , bool_ ) ; element list = doc . get elements by tag name ( str_ ) ; test employee = ( element ) element list . item ( num_ ) ; street attr = test employee . get attribute node ( str_ ) ; removed attr = test employee . remove attribute node ( street attr ) ; removed value = removed attr . get value ( ) ; assert equals ( str_ , str_ , removed value ) ; }
public static < k , v > boolean is empty ( map < k , v > map ) { return ( null == map || map . is empty ( ) ) ; }
public int conf ( ) { string s = soot . phase options . get string ( options , str_ ) ; if ( s . equals ignore case ( str_ ) ) return conf _ofcg ; if ( s . equals ignore case ( str_ ) ) return conf _cha ; if ( s . equals ignore case ( str_ ) ) return conf _cha _aot ; if ( s . equals ignore case ( str_ ) ) return conf _ofcg _aot ; if ( s . equals ignore case ( str_ ) ) return conf _cha _context _aot ; if ( s . equals ignore case ( str_ ) ) return conf _ofcg _context _aot ; if ( s . equals ignore case ( str_ ) ) return conf _cha _context ; if ( s . equals ignore case ( str_ ) ) return conf _ofcg _context ; throw new runtime exception ( str_ + s + str_ ) ; }
public skill fake definition create skill fake definition ( ) { skill fake definition impl skill fake definition = new skill fake definition impl ( ) ; return skill fake definition ; }
public blink conn ( sender sender , send delivery send delivery , receiver receiver , receive delivery receive delivery , resource resource ) { m sender = sender ; m receiver = receiver ; m resource = resource ; m send delivery = send delivery ; m receive delivery = receive delivery ; init ( ) ; }
public boolean is constant integer ( ) { return is constant ( ) && ( value instanceof integer ) ; }
public string invert selection tip text ( ) { return str_ + str_ ; }
public flow radio group ( context context ) { this ( context , null ) ; }
public void yypushback ( int number ) { if ( number > yylength ( ) ) zz scan error ( z z_ pushbac k _ 2 big ) ; zz marked pos -= number ; }
void on touch ( float distance ) ;
public el exception ( string p message , throwable p root cause ) { super ( p message , p root cause ) ; }
public boolean is armed ( ) { button model model = get model ( ) ; return model . is armed ( ) ; }
public void add sample ( int weight , float value ) { ensure sorted by index ( ) ; sample new sample = recycled sample count > num_ ? recycled samples [ -- recycled sample count ] : new sample ( ) ; new sample . index = next sample index ++ ; new sample . weight = weight ; new sample . value = value ; samples . add ( new sample ) ; total weight += weight ; while ( total weight > max weight ) { int excess weight = total weight - max weight ; sample oldest sample = samples . get ( num_ ) ; if ( oldest sample . weight <= excess weight ) { total weight -= oldest sample . weight ; samples . remove ( num_ ) ; if ( recycled sample count < ma x_ recycle d_ samples ) { recycled samples [ recycled sample count ++ ] = oldest sample ; } } else { oldest sample . weight -= excess weight ; total weight -= excess weight ; } } }
static void append bytes ( string content , mode mode , bit array bits , string encoding ) throws writer exception { switch ( mode ) { case numeric : append numeric bytes ( content , bits ) ; break ; case alphanumeric : append alphanumeric bytes ( content , bits ) ; break ; case byte : append 8 bit bytes ( content , bits , encoding ) ; break ; case kanji : append kanji bytes ( content , bits ) ; break ; default : throw new writer exception ( str_ + mode ) ; } }
public abstract void output ( ) ;
public boolean has possible static method ( string name , expression arguments ) { return class node utils . has possible static method ( this , name , arguments , bool_ ) ; }
public void on page selected ( int position ) ;
private static tree multimap < string , uri > build volumes to export masks map ( db client db client , export group export group ) { tree multimap < string , uri > volumes to export masks = tree multimap . create ( ) ; list < export mask > export masks = export mask utils . get export masks ( db client , export group ) ; for ( export mask export mask : export masks ) { if ( export mask . get user added volumes ( ) != null ) { for ( string vol uri str : export mask . get user added volumes ( ) . values ( ) ) { volumes to export masks . put ( vol uri str , export mask . get id ( ) ) ; } } } return volumes to export masks ; }
private void attach header ( sip header h ) { if ( h == null ) throw new illegal argument exception ( str_ ) ; try { if ( h instanceof sip header list ) { sip header list < ? > hl = ( sip header list < ? > ) h ; if ( hl . is empty ( ) ) { return ; } } attach header ( h , bool_ , bool_ ) ; } catch ( sip duplicate header exception ex ) { } }
private boolean is future ( date date ) { return m now . compare to ( date ) < num_ ; }
public brazilian analyzer ( char array set stopwords , char array set stem exclusion set ) { this ( stopwords ) ; excltable = char array set . unmodifiable set ( char array set . copy ( stem exclusion set ) ) ; }
public static void download image to storage ( string url , string file name , success callback < image > on success ) { download image to storage ( url , file name , on success , new callback adapter < image > ( ) ) ; }
public void queue event ( runnable r ) { if ( r == null ) { throw new illegal argument exception ( str_ ) ; } synchronized ( s gl thread manager ) { m event queue . add ( r ) ; s gl thread manager . notify all ( ) ; } }
public static void main ( final string [ ] args ) { dom test case . do main ( nodenotationnodeattributes . class , args ) ; }
public byte [ ] array ( ) { return _temp buffer ; }
public static graph subscan ( object o ) { return subscan ( o , bool_ ) ; }
process instance query process definition name ( string process definition name ) ;
private boolean is user admin ( ) { boolean is admin = bool_ ; if ( ( null != m room ) && ( null != m session ) ) { power levels power levels ; if ( null != ( power levels = m room . get live state ( ) . get power levels ( ) ) ) { string user id = m session . get my user id ( ) ; is admin = ( null != user id ) ? ( power levels . get user power level ( user id ) >= common activity utils . util s_ powe r_ leve l_ admin ) : bool_ ; } } return is admin ; }
public abstract method expression create method expression ( el context context , string expression , class < ? > expected return type , class < ? > [ ] expected param types ) ;
void accept ( t t ) throws interrupted exception ;
default boolean is default ( ) { throw new unsupported operation exception ( ) ; }
private static xjc rde deposit unmarshal full deposit ( ) throws exception { return unmarshal ( xjc rde deposit . class , new byte array input stream ( rd e_ deposi t_ full . get bytes ( ut f _ 8 ) ) ) ; }
public c store action ( final i navi module module ) { super ( str_ ) ; m _module = module ; put value ( action . smal l_ icon , new image icon ( c main . class . get resource ( str_ ) ) ) ; }
public final int hash code ( ) { return super . hash code ( ) ; }
public int length ( ) { return length ; }
public void clear cache ( ) { if ( m memory cache != null ) { m memory cache . evict all ( ) ; log . d ( tag , str_ ) ; } }
public static object invoke swing utilities 2 static method ( string method name , class [ ] params type , object [ ] params value ) { return reflect helper . invoke static method ( reflect helper . get class ( get swing utilities 2 class name ( ) ) , method name , params type , params value ) ; }
protected list selector add list setting ( string name , int width , int height , boolean enable sorting buttons ) { list selector result = new list selector ( this , enable sorting buttons ) ; result . set preferred size ( new dimension ( width , height ) ) ; list settings . put ( name , result ) ; return result ; }
case insensitive map impl ( object 2 object map < string , v > m , float f ) { super ( m , f , case insensitive hashing strategy . instance ) ; }
public void flatten transform ( ) { if ( get ( transform ) != null ) { path . transform ( get ( transform ) ) ; set ( transform , null ) ; } invalidate ( ) ; }
public void on open gui ( ) { }
public index shard repository index shard repository ( string repository ) { repository holder holder = repositories . get ( repository ) ; if ( holder != null ) { return holder . index shard repository ; } throw new repository missing exception ( repository ) ; }
public float ( float x , float y , float w , float h , float start , float extent , int type ) { super ( type ) ; this . x = x ; this . y = y ; this . width = w ; this . height = h ; this . start = start ; this . extent = extent ; }
public static s m_ syste m_ message st r_ guil d_ dispers e_ done ( string value 0 ) { return new s m_ syste m_ message ( num_ , value 0 ) ; }
public static double volume union ( spatial comparable box 1 , spatial comparable box 2 ) { final int dim = assert same dimensionality ( box 1 , box 2 ) ; double volume = num_ ; for ( int i = num_ ; i < dim ; i ++ ) { final double min = math . min ( box 1 . get min ( i ) , box 2 . get min ( i ) ) ; final double max = math . max ( box 1 . get max ( i ) , box 2 . get max ( i ) ) ; volume *= ( max - min ) ; } return volume ; }
public country ( ) { super ( key ) ; }
public classification ( collection < t > featureset , k category , float probability ) { this . featureset = featureset ; this . category = category ; this . probability = probability ; }
private list < parameter > load ( commented line reader reader ) throws io exception { list < parameter > parameters = new array list < parameter > ( ) ; string line = null ; try { while ( ( line = reader . read line ( ) ) != null ) { string [ ] tokens = line . split ( str_ ) ; if ( tokens . length != num_ ) { throw new io exception ( str_ ) ; } parameters . add ( new parameter ( tokens [ num_ ] , double . parse double ( tokens [ num_ ] ) , double . parse double ( tokens [ num_ ] ) ) ) ; } } finally { if ( reader != null ) { reader . close ( ) ; } } return parameters ; }
public void evaluate cross validation ( int folds , random rand ) { if ( folds < num_ ) throw new untrained model exception ( str_ + folds + str_ ) ; list < regression data set > lcds = data set . cv set ( folds , rand ) ; evaluate cross validation ( lcds ) ; }
public org title ( string value ) { this ( ) ; set value ( value ) ; }
protected abstract hashed map ( int initial capacity , float load factor ) { super ( ) ; if ( initial capacity < num_ ) { throw new illegal argument exception ( str_ ) ; } if ( load factor <= num_ || float . is na n ( load factor ) ) { throw new illegal argument exception ( str_ ) ; } this . load factor = load factor ; initial capacity = calculate new capacity ( initial capacity ) ; this . threshold = calculate threshold ( initial capacity , load factor ) ; this . data = new hash entry [ initial capacity ] ; init ( ) ; }
public autowire bean factory object post processor ( autowire capable bean factory autowire bean factory ) { assert . not null ( autowire bean factory , str_ ) ; this . autowire bean factory = autowire bean factory ; }
public static byte [ ] convert to bytes ( string str value ) { int length = str value . length ( ) ; byte [ ] bytes = new byte [ length ] ; for ( int i = num_ ; i < length ; i ++ ) { int c = str value . char at ( i ) & num_ ; if ( c > num_ ) { c = - ( c - num_ ) ; } bytes [ i ] = ( byte ) c ; } return bytes ; }
public boolean validate write sets ( ) { final iterator < map . entry < string , i local b tree view > > itr = indices . entry set ( ) . iterator ( ) ; while ( itr . has next ( ) ) { final map . entry < string , i local b tree view > entry = itr . next ( ) ; final string name = entry . get key ( ) ; final isolated fused view isolated = ( isolated fused view ) entry . get value ( ) ; final abstract b tree [ ] sources = resource manager . get index sources ( name , unisolated ) ; if ( sources == null ) { log . warn ( str_ + name ) ; return bool_ ; } if ( ! isolated . validate ( sources ) ) { if ( log . is info enabled ( ) ) log . info ( str_ + name ) ; return bool_ ; } } return bool_ ; }
void shutdown ( ) ;
public void destroy ( ) ;
public void on update ( ) ;
private iv best effort label ( ) { if ( ! rdfs label iv ( ) . equals ( resolved label type ) ) { return null ; } bigdata value value = lexicon relation . get term ( resolved subject ) ; string best effort label = value . string value ( ) ; if ( best effort label . starts with ( uris ( ) . entity ( ) ) ) { best effort label = best effort label . substring ( uris ( ) . entity ( ) . length ( ) ) ; } return mock ( new literal impl ( best effort label ) ) ; }
public void on page scrolled ( int position , float position offset , int position offset pixels ) ;
public static void main ( final string [ ] args ) { dom test case . do main ( elementremoveattributenodenomodificationallowederr ee . class , args ) ; }
public void output ( session description sd , output stream out ) throws io exception ;
public attribute set copy attributes ( ) { return this ; }
public void on error ( string message ) { if ( db . error handler != null ) { db . error handler . on error ( message ) ; } }
public static boolean is status client error ( int status ) { return ( status >= num_ && status < num_ ) ; }
public boolean add cifs share ( string mount path , string share name , string comment , int maxusers , string forcegroup ) { if ( log . is debug enabled ( ) ) { log . debug ( str_ + mount path + str_ + share name + str_ + comment + str_ + maxusers ) ; } flex file share share = new flex file share ( server . get na server ( ) , mount path ) ; return share . add cifs share ( share name , comment , maxusers , forcegroup ) ; }
public potential consumer create potential consumer ( final object base object , final attribute type type ) { string method name = type . get method name ( ) ; class < ? > data type = type . get data type ( ) ; potential consumer consumer = create potential consumer ( base object , method name , data type ) ; string description = type . get base description ( ) ; consumer . set custom description ( description ) ; return consumer ; }
boolean is method ( ) ;
public boolean is aggregation packet ( ) { return decode nal unit type == nal unit type . sta p_ a || decode nal unit type == nal unit type . sta p_ b || decode nal unit type == nal unit type . mta p 1 6 || decode nal unit type == nal unit type . mta p 2 4 ; }
private void fill in base timeline exclusions as exceptions ( segmented timeline timeline , long from , long to ) { timeline . add base timeline exclusions ( from , to ) ; for ( segmented timeline . segment segment 1 = timeline . get base timeline ( ) . get segment ( from ) ; segment 1 . get segment start ( ) <= to ; segment 1 . inc ( ) ) { if ( segment 1 . in exclude segments ( ) ) { for ( segmented timeline . segment segment 2 = timeline . get segment ( segment 1 . get segment start ( ) ) ; segment 2 . get segment start ( ) <= segment 1 . get segment end ( ) ; segment 2 . inc ( ) ) { if ( ! segment 2 . in exclude segments ( ) ) { assert true ( segment 2 . in exception segments ( ) ) ; } } } } }
private void edit world action ( ) { synchronized ( simulation . lock ) { edit world dialog . show ( control utilities . get parent window ( this ) , this . simulation . get world ( ) ) ; } this . model . node changed ( this . root ) ; }
protected external definition _ impl ( ) { super ( ) ; }
public boolean is focused ( ) { return get boolean property ( boolea n_ propert y_ focused ) ; }
public browser launcher 2 web browser ( ) { try { browser launcher = new browser launcher ( ) ; } catch ( browser launching initializing exception e ) { e . print stack trace ( ) ; } catch ( unsupported operating system exception e ) { e . print stack trace ( ) ; } }
public static void inherit gwt module ( path path , string inheritable module logical name ) throws io exception { final string inherits string = str_ + inheritable module logical name + str_ ; list < string > content = files . read all lines ( path , ut f _ 8 ) ; int i = num_ , last inherits line = num_ ; for ( string str : content ) { i ++ ; if ( str . contains ( str_ ) ) { last inherits line = i ; } } content . add ( last inherits line , inherits string ) ; files . write ( path , content , ut f _ 8 ) ; }
public void tree expanded ( tree expansion event event ) { get handler ( ) . tree expanded ( event ) ; }
public dunn index ( intra cluster evaluation ice , cluster dissimilarity cd ) { this . ice = ice ; this . cd = cd ; }
public int size ( ) { return super . size ( ) ; }
public account header builder with saved instance ( bundle saved instance ) { this . m saved instance = saved instance ; return this ; }
public static byte [ ] encrypt ( byte [ ] bytes ) throws general security exception { secret key spec skey spec = new secret key spec ( base 6 4 . decode base 6 4 ( encryptio n_ key ) , str_ ) ; cipher cipher = cipher . get instance ( str_ ) ; cipher . init ( cipher . encryp t_ mode , skey spec ) ; byte [ ] encrypted = cipher . do final ( bytes ) ; return base 6 4 . encode base 6 4 ( encrypted ) ; }
private boolean is widget newly created ( ) { long current folder = m preferences . get long ( stat e_ curren t_ folder , chrome browser provider client . invali d_ bookmar k_ id ) ; return current folder == chrome browser provider client . invali d_ bookmar k_ id ; }
public static void tag node ( final j frame parent , final navi node node , final c tag tag ) { try { node . get raw node ( ) . tag node ( tag ) ; } catch ( final couldnt save data exception e ) { c utility functions . log exception ( e ) ; final string inner message = str_ + str_ ; final string inner description = c utility functions . create description ( string . format ( str_ , tag . get name ( ) ) , new string [ ] { str_ } , new string [ ] { str_ } ) ; navi error dialog . show ( parent , inner message , inner description , e ) ; } }
public type member create union member ( final base type containing type , final base type member type , final string member name , int member offset ) throws couldnt save data exception ;
public studio grouper media file node ( basic media source in source , basic media node in parent , string in group label , java . util . vector in descendants ) { super ( in source , in parent , in group label , datatyp e_ virtual , null , in descendants ) ; }
public void ensure visible ( component c ) { test utils . ensure visible ( c ) ; }
protected void on adjust child views ( boolean down ) { if ( down ) correct too high ( get child count ( ) ) ; else correct too low ( get child count ( ) ) ; }
public abstract i resource create resource ( i progress monitor monitor ) throws core exception ;
public void test get public id ( ) throws throwable { document doc ; document type doc type ; string public id ; doc = ( document ) load ( str_ , builder ) ; doc type = doc . get doctype ( ) ; public id = doc type . get public id ( ) ; assert equals ( str_ , str_ , public id ) ; }
public speech data ( audio format format ) { data = new byte [ num_ ] ; this . format = format ; }
public static < t , p > boolean none satisfy with ( iterable < t > iterable , predicate 2 < ? super t , ? super p > predicate , p parameter ) { if ( iterable instanceof mutable collection ) { return ( ( mutable collection < t > ) iterable ) . none satisfy with ( predicate , parameter ) ; } if ( iterable instanceof array list ) { return array list iterate . none satisfy with ( ( array list < t > ) iterable , predicate , parameter ) ; } if ( iterable instanceof random access ) { return random access list iterate . none satisfy with ( ( list < t > ) iterable , predicate , parameter ) ; } if ( iterable != null ) { return iterable iterate . none satisfy with ( iterable , predicate , parameter ) ; } throw new illegal argument exception ( str_ ) ; }
public static i reorg destination create destination ( object destination ) { return create destination ( destination , i reorg destination . locatio n_ on ) ; }
public static file based argument key store password file argument ( ) throws argument exception { return file based argument . builder ( optio n_ lon g_ keystor e_ pw d_ file ) . short identifier ( optio n_ shor t_ keystor e_ pw d_ file ) . description ( inf o_ argumen t_ descriptio n_ keystorepasswor d_ file . get ( ) ) . value placeholder ( inf o_ keystor e_ pw d_ fil e_ placeholder . get ( ) ) . build argument ( ) ; }
protected elem variable create global pseudo var decl ( q name unique pseudo var name , stylesheet root stylesheet root , loc path iterator lpi ) throws org . w 3c . dom . dom exception { elem variable psuedo var = new elem variable ( ) ; psuedo var . set is top level ( bool_ ) ; x path xpath = new x path ( lpi ) ; psuedo var . set select ( xpath ) ; psuedo var . set name ( unique pseudo var name ) ; vector global vars = stylesheet root . get variables and params composed ( ) ; psuedo var . set index ( global vars . size ( ) ) ; global vars . add element ( psuedo var ) ; return psuedo var ; }
void on changed ( wheel view wheel , int old value , int new value ) ;
protected boolean has rows ( string table name ) { final string sql = str_ + table name + str_ ; try { return jdbc template . query for row set ( sql ) . next ( ) ; } catch ( bad sql grammar exception ex ) { return bool_ ; } }
protected binary bitwise expression impl ( ) { super ( ) ; }
protected void session running ( x data source ) { }
public optional int execute if absent ( runnable action ) { if ( ! is present ( ) ) action . run ( ) ; return this ; }
private void calculate collapsed large title padding ( ) { collapsed title bottom margin = ( minimum header height - large text view . get measured height ( ) ) / num_ ; }
static final double honey to nectar ( double honey ) { return honey / honey expand factor ; }
public static void reset dist cache ( ) { for ( distributed cache input dc input : dc values . values ( ) ) dc input . reset ( ) ; dc values . clear ( ) ; }
public static rich diagnostic formatter instance ( context context ) { rich diagnostic formatter instance = context . get ( rich diagnostic formatter . class ) ; if ( instance == null ) instance = new rich diagnostic formatter ( context ) ; return instance ; }
public boolean is service registered ( ) { return server api utils . is ims connected ( ) ; }
public boolean is incoming broadcast allowed ( datapath id sw , of port port id , boolean tunnel enabled ) ;
static < f extends enum < f > & mapper config . config feature > int collect feature defaults ( class < f > enum class ) { int flags = num_ ; for ( f value : enum class . get enum constants ( ) ) { if ( value . enabled by default ( ) ) { flags |= value . get mask ( ) ; } } return flags ; }
public hadoop daemon ( thread group grp , runnable runnable ) { super ( grp , runnable ) ; this . runnable = runnable ; this . set name ( runnable . to string ( ) ) ; enqueue if needed ( ) ; }
private char property unicode block property for ( string name ) { final character . unicode block block ; try { block = character . unicode block . for name ( name ) ; } catch ( illegal argument exception iae ) { throw error ( str_ + name + str_ ) ; } return new block ( block ) ; }
protected void handle listener exception ( throwable ex ) { if ( ex instanceof exception ) { invoke exception listener ( ( exception ) ex ) ; } if ( is active ( ) ) { increment failed events ( ) ; logger . error ( message ( str_ ) , ex ) ; } else { logger . debug ( message ( str_ ) , ex ) ; } }
public boolean is rebate period active ( ) { boolean is active = bool_ ; final date today = new date ( ) ; rebate period rebate period = rebate period service . get rebate for curr installment ( property tax common utils . get current installment ( ) . get id ( ) ) ; if ( rebate period != null && today . before ( rebate period . get rebate date ( ) ) ) is active = bool_ ; return is active ; }
public batched image request ( request < ? > request , image container container ) { m request = request ; m containers . add ( container ) ; }
public not found exception ( ) { super ( ) ; }
public int hash code ( ) { int retval = num_ ; for ( int i = num_ ; i < octet string . length ; i ++ ) retval += octet string [ i ] * i ; return retval ; }
public boolean divide and draw ( g l2 gl , point 2 d center 1 , point 2 d center 2 , quad curve 2 d curve , gl entity shape 1 , gl entity shape 2 , quad curve 2 d last ) { quad curve 2 d left = new quad curve 2 d . float ( ) ; quad curve 2 d right = new quad curve 2 d . float ( ) ; curve . subdivide ( left , right ) ; boolean res l = draw curve ( gl , center 1 , center 2 , left , shape 1 , shape 2 , last ) ; boolean res r = draw curve ( gl , center 1 , center 2 , right , shape 1 , shape 2 , last ) ; return res l || res r ; }
public string sel ( ) { return m selection . to string ( ) ; }
public static void copy ( file from , charset charset , appendable to ) throws io exception { as char source ( from , charset ) . copy to ( to ) ; }
public void to all in radius ( int dimension , vec 3i pos , double radius ) { to all in radius ( dimension , new vec 3d ( pos . get x ( ) + num_ , pos . get y ( ) + num_ , pos . get z ( ) + num_ ) , radius ) ; }
public final void sub ( matrix 3d m 1 , matrix 3d m 2 ) { this . m 0 0 = m 1 . m 0 0 - m 2 . m 0 0 ; this . m 0 1 = m 1 . m 0 1 - m 2 . m 0 1 ; this . m 0 2 = m 1 . m 0 2 - m 2 . m 0 2 ; this . m 1 0 = m 1 . m 1 0 - m 2 . m 1 0 ; this . m 1 1 = m 1 . m 1 1 - m 2 . m 1 1 ; this . m 1 2 = m 1 . m 1 2 - m 2 . m 1 2 ; this . m 2 0 = m 1 . m 2 0 - m 2 . m 2 0 ; this . m 2 1 = m 1 . m 2 1 - m 2 . m 2 1 ; this . m 2 2 = m 1 . m 2 2 - m 2 . m 2 2 ; }
public boolean is case sensitive ( ) { boolean b = ( boolean ) get client property ( cas e_ sensitiv e_ property ) ; return ( b != null ) && b . boolean value ( ) ; }
public abstract void update ( double data item ) ;
public subnetwork node ( network panel network panel , subnetwork group ) { this . network panel = network panel ; this . subnetwork = group ; outlined objects = new outlined objects ( ) ; outlined objects . set fill background ( bool_ ) ; interaction box = new subnetwork node interaction box ( network panel ) ; interaction box . set text ( group . get label ( ) ) ; add child ( outlined objects ) ; add child ( interaction box ) ; interaction box . update text ( ) ; set context menu ( this . get default context menu ( ) ) ; add property change listener ( propert y_ ful l_ bounds , this ) ; }
private boolean is valid search ( map < string , list < string > > params , string [ ] criterias ) { for ( string search : criterias ) { if ( params . contains key ( search ) ) { return bool_ ; } } return bool_ ; }
protected synchronized runnable wait for work ( ) { while ( tasks . size ( ) == num_ ) { try { wait ( ) ; } catch ( interrupted exception ie ) { return null ; } } runnable work = tasks . first element ( ) ; tasks . remove element at ( num_ ) ; return work ; }
public static final int days between ( calendar early , calendar late ) { return ( int ) ( to julian ( late ) - to julian ( early ) ) ; }
static void validate ( vo discount vo obj ) throws validation exception { bl validator . is not null ( fiel d_ nam e_ value , vo obj . get value ( ) ) ; bl validator . is in range ( fiel d_ nam e_ value , vo obj . get value ( ) , mi n_ discoun t_ value , ma x_ discoun t_ value ) ; bl validator . is equal ( fiel d_ nam e_ value , vo obj . get value ( ) , big decimal . zero ) ; bl validator . is valid price scale ( fiel d_ nam e_ value , vo obj . get value ( ) ) ; if ( vo obj . get start time ( ) != null ) { bl validator . is in range ( fiel d_ nam e_ startdate , vo obj . get start time ( ) . long value ( ) , vo obj . get start time ( ) , vo obj . get end time ( ) ) ; } }
public void on drawer opened ( view drawer view ) ;
public boolean has arg name ( ) { return arg name != null && arg name . length ( ) > num_ ; }
private void return data ( object ret ) { if ( my host != null ) { my host . return data ( ret ) ; } }
public static list < map . entry < list < string > , list < double > > > sort ( map < list < string > , list < double > > aggregated result , list < sort option > sort options , int top n ) { sorted set < map . entry < list < string > , list < double > > > all list = sort by value ( aggregated result , sort options ) ; list < map . entry < list < string > , list < double > > > result = new array list < map . entry < list < string > , list < double > > > ( ) ; for ( map . entry < list < string > , list < double > > entry : all list ) { result . add ( entry ) ; if ( top n > num_ && result . size ( ) >= top n ) { break ; } } return result ; }
public static void on event begin ( final context context , final string event _id , final string label ) { log . on event begin ( context , event _id , label ) ; }
void initialize for branch ( schema schema , template file template file , branch branch , string [ ] arguments , int line number , list < localizable message > warnings ) throws decode exception { }
public static boolean has super class ( resource sub class , resource super class ) { return has super class ( sub class , super class , new hash set < resource > ( ) ) ; }
private void add object if not found ( object obj , vector v ) { int n = v . size ( ) ; boolean add it = bool_ ; for ( int i = num_ ; i < n ; i ++ ) { if ( v . element at ( i ) == obj ) { add it = bool_ ; break ; } } if ( add it ) { v . add element ( obj ) ; } }
private string encode for html ( string description ) { return esapi . encoder ( ) . encode for html ( description ) ; }
public boolean route exists ( long src , long dst ) ;
public text area painter ( j edit text area text area , text area defaults defaults ) { this . text area = text area ; set autoscrolls ( bool_ ) ; set double buffered ( bool_ ) ; set opaque ( bool_ ) ; tool tip manager . shared instance ( ) . register component ( this ) ; current line = new segment ( ) ; current line index = - num_ ; set cursor ( cursor . get predefined cursor ( cursor . tex t_ cursor ) ) ; set font ( new font ( str_ , font . plain , num_ ) ) ; set foreground ( color . black ) ; set background ( color . white ) ; block caret = defaults . block caret ; styles = defaults . styles ; cols = defaults . cols ; rows = defaults . rows ; caret color = defaults . caret color ; selection color = defaults . selection color ; line highlight color = defaults . line highlight color ; line highlight = defaults . line highlight ; bracket highlight color = defaults . bracket highlight color ; bracket highlight = defaults . bracket highlight ; paint invalid = defaults . paint invalid ; eol marker color = defaults . eol marker color ; eol markers = defaults . eol markers ; }
public void fire data status e event ( string a d_ message , string info , boolean is error ) { m _m table . fire data status e event ( a d_ message , info , is error ) ; }
public boolean is supported ( chronology chronology ) { return get field ( chronology ) . is supported ( ) ; }
public async http client ( int http port ) { this ( bool_ , http port , num_ ) ; }
public static void fill ( long [ ] a , long val ) { for ( int i = num_ , len = a . length ; i < len ; i ++ ) a [ i ] = val ; }
protected void walk parse tree ( parse tree parse tree , ast builder listener listener , i element type root , psi builder builder ) { psi builder . marker root marker = builder . mark ( ) ; parse tree walker . default . walk ( listener , parse tree ) ; while ( ! builder . eof ( ) ) { builder . advance lexer ( ) ; } root marker . done ( root ) ; }
public static void register necronomicon data ( necro data data , int book type ) { if ( book type <= num_ && book type >= num_ ) necro data . put ( data , book type ) ; else fml log . log ( str_ , level . error , str_ , book type ) ; }
public void run test ( ) throws throwable { document doc ; document new doc ; dom implementation dom impl ; document type null doc type = null ; node list child list ; node imported ; node employee elem ; attr attr node ; string attr value ; string null ns = null ; doc = ( document ) load ( str_ , bool_ ) ; child list = doc . get elements by tag name ns ( str_ , str_ ) ; employee elem = child list . item ( num_ ) ; dom impl = get implementation ( ) ; new doc = dom impl . create document ( null ns , str_ , null doc type ) ; imported = new doc . import node ( employee elem , bool_ ) ; attr node = ( ( element ) imported ) . get attribute node ns ( null ns , str_ ) ; assert null ( str_ , attr node ) ; attr value = ( ( element ) imported ) . get attribute ns ( str_ , str_ ) ; assert equals ( str_ , str_ , attr value ) ; }
public void restore ( string file name ) throws io exception , mc bad request exception { if ( file name == null ) { throw new mc bad request exception ( str_ ) ; } string backup canonical path = file utils . get file ( app properties . get instance ( ) . get backup settings ( ) . get backup location ( ) ) . get canonical path ( ) ; string file full name = app properties . get instance ( ) . get backup settings ( ) . get backup location ( ) + file name ; if ( mc utils . is in scope ( backup canonical path , file full name ) ) { file bkp file = file utils . get file ( file full name ) ; backup file backup file = backup file . builder ( ) . name ( bkp file . get name ( ) ) . canonical path ( bkp file . get canonical path ( ) ) . timestamp ( bkp file . last modified ( ) ) . size ( bkp file . length ( ) ) . build ( ) ; new thread ( new restore ( backup file ) ) . start ( ) ; _logger . info ( str_ ) ; } else { throw new mc bad request exception ( str_ ) ; } }
public conversation ( plugin plugin , conversable for whom , prompt first prompt , map < object , object > initial session data ) { this . first prompt = first prompt ; this . context = new conversation context ( plugin , for whom , initial session data ) ; this . modal = bool_ ; this . local echo enabled = bool_ ; this . prefix = new null conversation prefix ( ) ; this . cancellers = new array list < conversation canceller > ( ) ; this . abandoned listeners = new array list < conversation abandoned listener > ( ) ; }
public boolean is replication enabled ( ) { return server . is replication enabled ( ) ; }
public void flush update ( ) { flush updates and terminates ( ) ; }
public boolean is other writable ( ) { return is ( encoded permission , othe r_ writable ) ; }
public boolean put long ( long value , int row , int column ) { acquire reference ( ) ; try { return native put long ( m window ptr , value , row - m start pos , column ) ; } finally { release reference ( ) ; } }
public static option builder has optional arg ( ) { option builder . number of args = num_ ; option builder . optional arg = bool_ ; return instance ; }
public static byte parse byte ( java . lang . string s , int radix ) throws java . lang . number format exception { int int value = integer . parse int ( s , radix ) ; byte result = ( byte ) int value ; if ( result == int value ) { return result ; } throw new number format exception ( str_ + s + str_ ) ; }
public concurrent linked deque ( ) { head = tail = new node < e > ( null ) ; }
public int hash code ( ) { return get envelope internal ( ) . hash code ( ) ; }
boolean unregister permission ( permission pattern pat ) ;
private synchronized void cleanup is complex type attribute ( ) { first attribute = null ; remaining attributes . clear ( ) ; is complex type attribute = bool_ ; }
public void test _ select left outer join ( ) throws sql exception { string sql = str_ + database creator . customer s_ table + str_ + database creator . salespeopl e_ table + str_ ; result set result = statement . execute query ( sql ) ; hash map < integer , integer > value = new hash map < integer , integer > ( ) ; value . put ( num_ , num_ ) ; value . put ( num_ , num_ ) ; value . put ( num_ , num_ ) ; value . put ( num_ , num_ ) ; value . put ( num_ , num_ ) ; while ( result . next ( ) ) { int key = result . get int ( str_ ) ; object val = result . get object ( str_ ) ; assert true ( str_ , value . contains key ( key ) ) ; assert equals ( str_ , value . get ( key ) , ( integer ) val ) ; value . remove ( key ) ; } assert true ( str_ , value . is empty ( ) ) ; result . close ( ) ; }
protected void async op release ( ) { if ( async ops sem != null ) async ops sem . release ( ) ; }
public a add element ( string hashcode , string element ) { add element to registry ( hashcode , element ) ; return ( this ) ; }
public parse query < t > where greater than ( string key , object value ) { check if running ( ) ; builder . add condition ( key , str_ , value ) ; return this ; }
public com . sun . identity . liberty . ws . idpp . jaxb . greet sound element create greet sound element ( ) throws javax . xml . bind . jaxb exception { return new com . sun . identity . liberty . ws . idpp . jaxb . impl . greet sound element impl ( ) ; }
public final int _exptype 2 type ( int exptype ) { if ( null != exptype ) return m _extended types [ exptype ] . get node type ( ) ; else return null ; }
public raster plot component ( final string name ) { super ( name ) ; model = new raster model ( ) ; initialize attributes ( ) ; add listener ( ) ; model . default init ( ) ; }
public com . wipro . ats . bdre . imcrawler . mr . contents . builder clear path ( ) { path = null ; field set flags ( ) [ num_ ] = bool_ ; return this ; }
protected final void add view internal ( view child , int index , view group . layout params params ) { super . add view ( child , index , params ) ; }
static public boolean is inner cause ( throwable t , class cls ) { return get inner cause ( t , cls ) != null ; }
public void refresh ( ) { logger . debug ( str_ ) ; try { repository connection cleanup con = get system repository ( ) . get connection ( ) ; try { synchronized ( initialized repositories ) { iterator < map . entry < string , repository > > iter = initialized repositories . entry set ( ) . iterator ( ) ; while ( iter . has next ( ) ) { map . entry < string , repository > entry = iter . next ( ) ; string repository id = entry . get key ( ) ; repository repository = entry . get value ( ) ; if ( ! system repository . id . equals ( repository id ) ) { iter . remove ( ) ; refresh repository ( cleanup con , repository id , repository ) ; } } } } finally { cleanup con . close ( ) ; } } catch ( repository exception re ) { logger . error ( str_ , re ) ; } }
protected void sequence _ unit ref ( i serialization context context , unit name semantic object ) { if ( error acceptor != null ) { if ( transient values . is value transient ( semantic object , gaml package . literals . uni t_ nam e _ _ ref ) == value transient . yes ) error acceptor . accept ( diagnostic provider . create feature value missing ( semantic object , gaml package . literals . uni t_ nam e _ _ ref ) ) ; } sequence feeder feeder = create sequencer feeder ( context , semantic object ) ; feeder . accept ( grammar access . get unit ref access ( ) . get ref unit fake definition id terminal rule call _ 1 _ 0 _ 1 ( ) , semantic object . get ref ( ) ) ; feeder . finish ( ) ; }
protected void remove all indexes ( ) { indexes . clear ( ) ; }
protected abstract k new context ( ) ;
abstract double cool down interval micros ( ) ;
private static permission collection create all permissions ( ) { permissions permissions = new permissions ( ) ; permissions . add ( new all permission ( ) ) ; return permissions ; }
public void clear ( ) { int max = bits . length ; for ( int i = num_ ; i < max ; i ++ ) { bits [ i ] = num_ ; } }
public abstract void recover from light cycle ( ) ;
public static pair < agg , string > split agg ( string var name ) { if ( var name . to upper case ( ) . equals ( agg . count . to string ( ) ) ) { return pair . of ( agg . count , str_ ) ; } int split index = var name . index of ( str_ ) ; if ( split index < num_ ) { return null ; } try { string var = var name . substring ( split index + num_ , var name . length ( ) - num_ ) ; agg agg = agg . value of ( var name . substring ( num_ , split index ) . to upper case ( ) ) ; return pair . of ( agg , var ) ; } catch ( exception e ) { return null ; } }
public token validation extra info extra info ( ) { return extra info ; }
public l z1 ( ) { super ( num_ , num_ , num_ , num_ , num_ ) ; }
public boolean remove from replication group ( uri storage , uri consistency group , string rep group name , list < uri > add volumes list , string op id ) throws controller exception { task completer task completer = new block consistency group update completer ( consistency group , op id ) ; try { list < string > lock keys = new array list < > ( ) ; lock keys . add ( controller locking util . get replication group storage key ( _db client , rep group name , storage ) ) ; workflow service workflow service = _block device controller . get workflow service ( ) ; workflow service . acquire workflow step locks ( op id , lock keys , lock timeout value . get ( lock type . arra y_ cg ) ) ; storage system storage system = _db client . query object ( storage system . class , storage ) ; _block device controller . get device ( storage system . get system type ( ) ) . do remove from replication group ( storage system , consistency group , rep group name , add volumes list , task completer ) ; } catch ( exception e ) { service error service error = device controller exception . errors . job failed ( e ) ; task completer . error ( _db client , service error ) ; workflow step completer . step failed ( op id , service error ) ; return bool_ ; } return bool_ ; }
public object run safely ( catbert . fast stack stack ) throws exception { return permissions . get default security profile ( ) ; }
public limit input stream ( input stream in , long limit ) { super ( in ) ; this . limit = limit ; left = limit ; }
boolean is magic property ( ) ;
public void insert before ( final abstract insn node location , final insn list insns ) { if ( insns . size == num_ ) { return ; } size += insns . size ; abstract insn node ifirst = insns . first ; abstract insn node ilast = insns . last ; abstract insn node prev = location . prev ; if ( prev == null ) { first = ifirst ; } else { prev . next = ifirst ; } location . prev = ilast ; ilast . next = location ; ifirst . prev = prev ; cache = null ; insns . remove all ( bool_ ) ; }
void add input format ( input format format ) ;
void return connection ( connection connection ) ;
public boolean is not blank ( final char sequence cs ) { return ! is blank ( cs ) ; }
public word alternative ( double confidence , string word ) { this . confidence = confidence ; this . word = word ; }
public java word iterator ( ) { f iterator = new java break iterator ( ) ; first ( ) ; }
public delaunay triangulation ( delaunay triangle triangle ) { tri graph = new undirected graph < delaunay triangle > ( ) ; tri graph . add ( triangle ) ; most recent = triangle ; }
public static crop of ( uri source , uri destination ) { return new crop ( source , destination ) ; }
public void test byte overflow metadata ( ) throws exception { byte array input stream bais 1 = new byte array input stream ( raw 5 ) ; byte array input stream bais 2 = new byte array input stream ( raw 5 ) ; byte array input stream bais 3 = new byte array input stream ( raw 5 ) ; web socket codec codec = new web socket codec ( bool_ , bool_ ) ; string s = new string ( codec . decode ( bais 1 ) ) ; system . out . println ( s ) ; assert true ( s . starts with ( str_ ) ) ; s = new string ( codec . decode ( bais 2 ) ) ; system . out . println ( s ) ; s = new string ( codec . decode ( bais 3 ) ) ; system . out . println ( s ) ; assert not null ( s ) ; assert true ( s . starts with ( str_ ) ) ; }
public static boolean have cache ( ) { return mary cache != null ; }
public static traza vo transform to traza ( logging event event ) { traza vo traza = new traza vo ( ) ; traza . set cod error ( event . get cod error ( ) ) ; traza . set dir ip ( event . get user ( ) . get ip ( ) ) ; traza . set accion ( event . get action ( ) ) ; traza . set modulo ( event . get module ( ) ) ; traza . set id usuario ( event . get user ( ) . get id ( ) ) ; traza . set time stamp ( new date ( ) ) ; return traza ; }
public static string size to setting string ( size size ) { return size . width ( ) + siz e_ settin g_ strin g_ dimensio n_ delimiter + size . height ( ) ; }
public double accrued amount ( ) { return accrued amount ( new date ( ) ) ; }
public cursor fetch ( long data type id ) { if ( data type id == null ) { throw new illegal argument exception ( str_ ) ; } cursor m cursor = database . query ( bool_ , databas e_ table , keys , ke y_ datatypeid + str_ + data type id , null , null , null , null , null ) ; if ( m cursor != null ) { m cursor . move to first ( ) ; } return m cursor ; }
int length ( ) ;
public static jmx manager locator response send ( string locator host , int locator port , int ms timeout , map < string , string > ssl config props ) throws io exception { properties distribution config props = new properties ( ) ; inet address network address = inet address . get by name ( locator host ) ; try { if ( ssl config props != null ) { distribution config props . put all ( ssl config props ) ; } tcp client client = new tcp client ( new distribution config impl ( distribution config props ) ) ; object response from server = client . request to server ( network address , locator port , singleton , ms timeout ) ; return ( jmx manager locator response ) response from server ; } catch ( class not found exception unexpected ) { throw new illegal state exception ( unexpected ) ; } catch ( class cast exception unexpected ) { throw new illegal state exception ( unexpected ) ; } finally { distribution config props . clear ( ) ; } }
public disjoint extended ( ) { super ( null , null ) ; }
public monitor skip ( ) ;
void explain ( explain request request , action listener < explain response > listener ) ;
protected void remove url highlight color ( text view text view ) { if ( ! is url highlighted ) { return ; } is url highlighted = bool_ ; final spannable text = ( spannable ) text view . get text ( ) ; background color span [ ] highlight spans = text . get spans ( num_ , text . length ( ) , background color span . class ) ; for ( background color span highlight span : highlight spans ) { text . remove span ( highlight span ) ; } text view . set text ( text ) ; selection . remove selection ( text ) ; }
public name static pair ( string name , boolean is static ) { if ( name == null ) { throw new illegal argument exception ( str_ ) ; } this . name = name ; this . is static = is static ; }
protected static void close all ( ) { settings . clear ( ) ; }
public com . sun . identity . liberty . ws . idpp . jaxb . resource id element create resource id element ( ) throws javax . xml . bind . jaxb exception { return new com . sun . identity . liberty . ws . idpp . jaxb . impl . resource id element impl ( ) ; }
optional < channel id > find channel id by name ( channel name name ) throws io exception , slack api exception ;
t build ( ) ;
public prototype undump ( input stream stream , string chunkname ) throws io exception { if ( stream . read ( ) != lu a_ signature [ num_ ] || stream . read ( ) != lu a_ signature [ num_ ] || stream . read ( ) != lu a_ signature [ num_ ] || stream . read ( ) != lu a_ signature [ num_ ] ) return null ; string sname = get source name ( chunkname ) ; load state s = new load state ( stream , sname ) ; s . load header ( ) ; switch ( s . luac number format ) { case numbe r_ forma t_ float s_ o r_ doubles : case numbe r_ forma t_ int s_ only : case numbe r_ forma t_ nu m_ patc h_ in t 3 2 : break ; default : throw new lua error ( str_ ) ; } return s . load function ( lua string . value of ( sname ) ) ; }
public string startlistfile ( ) { return startlistfile ; }
void show content ( ) ;
public final segments stats segments stats ( ) { ensure open ( ) ; try ( final searcher searcher = acquire searcher ( str_ , bool_ ) ) { segments stats stats = new segments stats ( ) ; for ( leaf reader context reader : searcher . reader ( ) . leaves ( ) ) { final segment reader segment reader = segment reader ( reader . reader ( ) ) ; stats . add ( num_ , segment reader . ram bytes used ( ) ) ; stats . add terms memory in bytes ( guarded ram bytes used ( segment reader . get postings reader ( ) ) ) ; stats . add stored fields memory in bytes ( guarded ram bytes used ( segment reader . get fields reader ( ) ) ) ; stats . add term vectors memory in bytes ( guarded ram bytes used ( segment reader . get term vectors reader ( ) ) ) ; stats . add norms memory in bytes ( guarded ram bytes used ( segment reader . get norms reader ( ) ) ) ; stats . add doc values memory in bytes ( guarded ram bytes used ( segment reader . get doc values reader ( ) ) ) ; } writer segment stats ( stats ) ; return stats ; } }
protected i content proposal [ ] content proposals from ( list < i edit proposal > edit proposals ) { i content proposal [ ] content proposals = new i content proposal [ edit proposals . size ( ) ] ; for ( int i = num_ ; i < edit proposals . size ( ) ; i ++ ) { content proposals [ i ] = new edit proposal wrapper ( edit proposals . get ( i ) ) ; } return content proposals ; }
public static boolean is unicode identifier part ( int code point ) { return is unicode identifier part impl ( code point ) ; }
public byte [ ] convert hex string to binary ( string hex string ) throws illegal argument exception { int length = hex string . length ( ) ; if ( length % num_ != num_ ) { throw new illegal argument exception ( str_ + length + str_ + hex string ) ; } byte [ ] binary = new byte [ length / num_ ] ; for ( int i = num_ ; i < length ; i += num_ ) { char high bits char = hex string . char at ( i ) ; char low bits char = hex string . char at ( i + num_ ) ; int high bits = hex char to int ( high bits char , hex string ) << num_ ; int low bits = hex char to int ( low bits char , hex string ) ; binary [ i / num_ ] = ( byte ) ( high bits + low bits ) ; } return binary ; }
public void post rotate ( float delta angle ) { post rotate ( delta angle , m crop rect . center x ( ) , m crop rect . center y ( ) ) ; }
public default boolean is empty ( ) { return keys ( ) . size ( ) == num_ ; }
public rpc client peer with ( peer info server info , bootstrap bootstrap ) throws io exception { return peer with ( server info , bootstrap , null ) ; }
public void fatal error ( sax parse exception ex ) { print ( str_ + print ( ex ) ) ; }
public boolean is table exists ( ) throws sql exception ;
public void terminated by server ( ) { if ( ! m subscribed ) { return ; } if ( logger . is activated ( ) ) { logger . info ( str_ ) ; } stop timer ( ) ; reset dialog path ( ) ; m subscribed = bool_ ; }
public static string pad ( string o , int len ) { if ( o . length ( ) >= len ) { return o ; } return o + whitespace ( len - o . length ( ) ) ; }
protected boolean js confirm ( string url , string message ) { return m callback proxy . on js confirm ( url , message ) ; }
public static void show in out ( int window no , string value ) { info panel info = new info in out panel ( window no , bool_ , num_ , value , bool_ , bool_ , str_ ) ; a env . show window ( info ) ; }
public void remove connection listener ( connection listener listener ) ;
public static org . oscm . internal . vo . vo billing contact convert to up ( org . oscm . vo . vo billing contact old vo ) { if ( old vo == null ) { return null ; } org . oscm . internal . vo . vo billing contact new vo = new org . oscm . internal . vo . vo billing contact ( ) ; new vo . set key ( old vo . get key ( ) ) ; new vo . set version ( old vo . get version ( ) ) ; new vo . set email ( old vo . get email ( ) ) ; new vo . set company name ( old vo . get company name ( ) ) ; new vo . set address ( old vo . get address ( ) ) ; new vo . set org address used ( old vo . is org address used ( ) ) ; new vo . set id ( old vo . get id ( ) ) ; return new vo ; }
private void pop ( final int elements ) { if ( output stack top >= elements ) { output stack top -= elements ; } else { owner . input stack top -= elements - output stack top ; output stack top = num_ ; } }
public static ml reader < cmm model > read ( ) { return new cmm model reader ( ) ; }
public long minflt ( ) { return long . parse long ( fields [ num_ ] ) ; }
builder clear ( ) ;
public static int min index ( double [ ] [ ] matrix , int column ) { double min = matrix [ num_ ] [ column ] ; int min index = num_ ; for ( int i = num_ ; i < matrix . length ; i ++ ) { if ( double . is na n ( min ) || ( matrix [ i ] [ column ] < min ) ) { min = matrix [ i ] [ column ] ; min index = i ; } } return min index ; }
public static complex value of ( double real part , double imaginary part ) { if ( double . is na n ( real part ) || double . is na n ( imaginary part ) ) { return na n ; } return new complex ( real part , imaginary part ) ; }
public verlet physics 2 d ( ) { this ( null , num_ , num_ , num_ ) ; }
public static bitmap decode sampled bitmap from resource ( resources res , int res id , int req width , int req height , image cache cache ) { final bitmap factory . options options = new bitmap factory . options ( ) ; options . in just decode bounds = bool_ ; bitmap factory . decode resource ( res , res id , options ) ; options . in sample size = calculate in sample size ( options , req width , req height ) ; if ( utils . has honeycomb ( ) ) { add in bitmap options ( options , cache ) ; } options . in just decode bounds = bool_ ; return bitmap factory . decode resource ( res , res id , options ) ; }
public boolean has name ( string name to check ) { return names lowercase . contains ( name to check . to lower case ( ) ) ; }
public search source builder internal builder ( ) { return source builder ( ) ; }
void pause ( ) { image loader . pause ( ) ; }
public string to string ( ) { return m obj . to string simple ( ) ; }
private static temporary store temporary store ( ) { if ( temporary store != null ) { return temporary store ; } uncaught exception handler uncaught exception handler = thread . get default uncaught exception handler ( ) ; temporary store = new temporary store ( ) ; thread . set default uncaught exception handler ( uncaught exception handler ) ; return temporary store ; }
public boolean dot _at _end ( ) { return _dot _pos >= _the _production . rhs _length ( ) ; }
public void modification ( chromosome individual ) ;
public bookmark id add bookmark ( bookmark id parent , int index , string title , string url ) { assert parent . get type ( ) == bookmark type . normal ; assert index >= num_ ; assert title != null ; assert url != null ; return native add bookmark ( m native bookmarks bridge , parent , index , title , url ) ; }
private void create consumers ( list < object > consumers config ) { for ( object obj consumer : consumers config ) { string class name = cpe builder utils . get class name from config ( obj consumer ) ; map < string , object > params = cpe builder utils . get params from config ( obj consumer ) ; optional < analysis engine description > desc = create consumer ( class name , params , consume r_ defaul t_ package ) ; if ( desc . is present ( ) ) { string name = cpe builder utils . get component name ( get consumer names ( ) , str_ + class name ) ; add consumer ( name , desc . get ( ) ) ; } } }
public void init ( extended properties configuration ) { rsvc . info ( str_ ) ; rsvc . info ( str_ ) ; }
public static void put byte ( long addr , byte val ) { unsafe . put byte ( addr , val ) ; }
public cuda channel format desc ( ) { }
protected void on page bigger than max size ( string url str , long page size ) { logger . warn ( str_ , url str , page size ) ; }
int insert ( files record ) ;
private void mark subroutines ( ) { bit set anyvisited = new bit set ( ) ; mark subroutine walk ( main subroutine , num_ , anyvisited ) ; for ( iterator < map . entry < label node , bit set > > it = subroutine heads . entry set ( ) . iterator ( ) ; it . has next ( ) ; ) { map . entry < label node , bit set > entry = it . next ( ) ; label node lab = entry . get key ( ) ; bit set sub = entry . get value ( ) ; int index = instructions . index of ( lab ) ; mark subroutine walk ( sub , index , anyvisited ) ; } }
public string convert additive operator to string ( e data type e data type , object instance value ) { return instance value == null ? null : instance value . to string ( ) ; }
boolean add device syn ( final i esp device device ) ;
public static boolean kill process ( final string process name ) { return get internals ( ) . kill process ( process name ) ; }
public void restart ( ) { int width = get width ( ) ; int height = get height ( ) ; if ( width == num_ || height == num_ ) { throw new unsupported operation exception ( str_ ) ; } update viewport ( width , height ) ; update drawable bounds ( ) ; if ( has bounds ( ) ) { start new transition ( ) ; } }
public long length ( ) throws io exception { return check input file ( ) . length ( ) ; }
public alt format lookup type ( content type content type ) { alt format format = type map . get ( content type . get media type ( ) ) ; if ( format == null ) { for ( alt format test format : type map . values ( ) ) { if ( content type . match ( test format . get content type ( ) ) ) { format = test format ; break ; } } } if ( format == null && delegate != null ) { return delegate . lookup type ( content type ) ; } return format ; }
public static response create binding error response ( char error code , string reason phrase , char [ ] unknown attributes ) throws illegal argument exception { response binding error response = new response ( ) ; binding error response . set message type ( message . bindin g_ erro r_ response ) ; unknown attributes attribute unknown attributes attribute = null ; error code attribute error code attribute = attribute factory . create error code attribute ( error code , reason phrase ) ; binding error response . put attribute ( error code attribute ) ; if ( unknown attributes != null ) { unknown attributes attribute = attribute factory . create unknown attributes attribute ( ) ; for ( int i = num_ ; i < unknown attributes . length ; i ++ ) { unknown attributes attribute . add attribute id ( unknown attributes [ i ] ) ; } binding error response . put attribute ( unknown attributes attribute ) ; } return binding error response ; }
dead letter job query exception message ( string exception message ) ;
protected event impl ( ) { super ( ) ; }
protected static bit set [ ] de interleave ( bit set bits ) { bit set [ ] sets = new bit set [ ] { new bit store ( ) , new bit store ( ) } ; int n = bits . size ( ) ; for ( int i = num_ ; i < n ; i ++ ) { sets [ i % num_ ] . set ( ( n - i - num_ ) / num_ , bits . get ( n - i - num_ ) ) ; } return sets ; }
public void add to suppress lld ps ( datapath id sw , of port port ) ;
public static field < boolean > of boolean ( string name , string description ) { return new field < > ( name , boolean . class , description ) ; }
protected void collect properties ( class < ? > type , type < ? > reference type , map < string , property > properties ) { try { bean info bean info = introspector . get bean info ( type ) ; property descriptor [ ] descriptors = bean info . get property descriptors ( ) ; for ( final property descriptor pd : descriptors ) { try { method read method = get read method ( pd , type ) ; method write method = get write method ( pd , type , null ) ; property property = process property ( pd . get name ( ) , pd . get property type ( ) , read method , write method , type , reference type , properties ) ; post process property ( property , pd , read method , write method , type , reference type , properties ) ; } catch ( final exception e ) { throw new runtime exception ( str_ + reference type . get canonical name ( ) + str_ + pd . get name ( ) + str_ , e ) ; } } } catch ( introspection exception e ) { throw new runtime exception ( e ) ; } }
public static boolean is url local file ( url url ) { return url . get protocol ( ) . equals ( str_ ) ; }
public final void activate ( ) { m is activated = bool_ ; log . i ( str_ + m name ) ; on command activated ( ) ; }
private static int remove white space ( char [ ] data ) { if ( data == null ) { return num_ ; } int new size = num_ ; int len = data . length ; for ( int i = num_ ; i < len ; i ++ ) { if ( ! is white space ( data [ i ] ) ) { data [ new size ++ ] = data [ i ] ; } } return new size ; }
public backprop network node ( final network panel network panel , final backprop network group ) { super ( network panel , group ) ; set context menu ( ) ; }
public locale handler ( string languages , string charsets ) { locale default locale = new locale ( str_ , str_ ) ; string default charset = str_ ; if ( languages == null ) { m _chosen locale = default locale ; m _chosen charset = default charset ; return ; } string tokenizer lang tokenizer = new string tokenizer ( languages , str_ ) ; while ( lang tokenizer . has more tokens ( ) ) { string lang = lang tokenizer . next token ( ) ; locale loc = get locale for language ( lang ) ; string charset = get charset for locale ( loc , charsets ) ; if ( charset == null ) continue ; m _chosen locale = loc ; m _chosen charset = charset ; return ; } m _chosen locale = default locale ; m _chosen charset = default charset ; }
void clear cache ( ) ;
public void send heartbeat ( string ip address , int port ) throws io exception ;
public void on configuration ( contacts ops . view view , boolean first time in ) { m impl . on configuration ( view , first time in ) ; }
protected void config dialog property change ( property change event event ) { log . debug ( str_ ) ; fire property change ( property change id . confi g_ change , event . get old value ( ) , event . get new value ( ) ) ; }
void on transfer end ( ) ;
public object run safely ( catbert . fast stack stack ) throws exception { return sage . ma c_ o s_ x ? boolean . true : boolean . false ; }
public static http request trace ( final char sequence url ) throws http request exception { return new http request ( url , metho d_ trace ) ; }
public void init ( context context ) { if ( ! m not found classes map . is empty ( ) ) { build installed packages cache ( context ) ; } m package monitor . register ( context ) ; }
public void changed ( ) { version ++ ; }
public void dump baseless keys ( writer writer ) throws io exception { dump entries ( writer , blamer . get baseless keys ( ) ) ; }
public collection < graph node > compute nodes ( ) { return collapser . compute nodes ( ) ; }
public simple fragment intent < f > put extra ( string name , boolean [ ] value ) { if ( extras == null ) { extras = new bundle ( ) ; } extras . put boolean array ( name , value ) ; return this ; }
public static v alarm display ( trigger trigger , string display text ) { v alarm alarm = new v alarm ( action . display ( ) , trigger ) ; alarm . set description ( display text ) ; return alarm ; }
public string generate column label ( category dataset dataset , int column ) ;
short read short ( ) ;
public string to int table ( int blocksize ) { m _blocksize = blocksize ; m _map size = blocksize ; m _map = new string [ blocksize ] ; m _values = new int [ m _blocksize ] ; }
public double calc angle with ratios ( entry p 1 , entry p 2 ) { float dx = p 2 . get x index ( ) * m delta ratio - p 1 . get x index ( ) * m delta ratio ; float dy = p 2 . get val ( ) * m scale ratio - p 1 . get val ( ) * m scale ratio ; double angle = math . atan 2 ( dy , dx ) * num_ / math . pi ; return angle ; }
private windows file attributes ( int file attrs , long creation time , long last access time , long last write time , long size , int reparse tag , int vol serial number , int file index high , int file index low ) { this . file attrs = file attrs ; this . creation time = creation time ; this . last access time = last access time ; this . last write time = last write time ; this . size = size ; this . reparse tag = reparse tag ; this . vol serial number = vol serial number ; this . file index high = file index high ; this . file index low = file index low ; }
public string request wiktionary ( string message , string botid , string server , string apikey , int limit , string hint , network network ) throws exception { try { log ( str_ , level . info , message ) ; vertex word = network . create word ( message ) ; vertex result = get bot ( ) . awareness ( ) . get sense ( wiktionary . class ) . define ( word , word ) ; if ( result != null ) { vertex description = result . get relationship ( primitive . sentence ) ; if ( description != null ) { return description . print string ( ) ; } } } catch ( exception exception ) { log ( exception ) ; } return null ; }
public void add edge ( final instruction begin instruction , final instruction end instruction ) { if ( begin instruction == null || end instruction == null ) { return ; } if ( ! begin instruction . all succ ( ) . contains ( end instruction ) ) { begin instruction . all succ ( ) . add ( end instruction ) ; } if ( ! end instruction . all pred ( ) . contains ( begin instruction ) ) { end instruction . all pred ( ) . add ( begin instruction ) ; } }
private synchronized void add tracker ( string path , object marker , file delete strategy delete strategy ) { if ( exit when finished ) { throw new illegal state exception ( str_ ) ; } if ( reaper == null ) { reaper = new reaper ( ) ; reaper . start ( ) ; } trackers . add ( new tracker ( path , delete strategy , marker , q ) ) ; }
public vertex parse function byte code ( vertex equation , binary data data , network network ) throws io exception { return parse equation byte code ( equation , data , network ) ; }
private message new enemy prototype ( ) throws io exception { message village = message factory . new message ( enemy home data ) ; village . set ( str_ , ( int ) ( system . current time millis ( ) / num_ ) ) ; village . set ( str_ , num_ ) ; return village ; }
private static void multiple senders ( context context , hash map < long , array list < message item > > conversations , set < long > old threads , notification compat . builder builder ) { set < long > thread ids = conversations . key set ( ) ; for ( long thread id : thread ids ) { if ( ! old threads . contains ( thread id ) ) { conversation prefs helper conversation prefs = new conversation prefs helper ( context , thread id ) ; integer private notification = conversation prefs . get private notifications setting ( ) ; if ( conversations . get ( thread id ) . size ( ) == num_ ) { single message ( context , conversations . get ( thread id ) , thread id , copy builder ( builder ) , conversation prefs , private notification ) ; } else { single sender ( context , conversations . get ( thread id ) , thread id , copy builder ( builder ) , conversation prefs , private notification ) ; } } } }
int code length ( int col , byte buffer buf ) ;
public log stream print ( double d ) { if ( ps != null ) { indent ( ) ; line buffer . append ( d ) ; } return this ; }
public datagram socket socket ( ) { return _my datagram socket ; }
public manipulation ( variable source variable source ) { if ( variable source == null ) { throw new null pointer exception ( ) ; } this . variable source = variable source ; this . manipulated = new boolean [ get num nodes ( ) ] ; }
statement pattern node stmt pattern with var ( final string var name ) { return stmt pattern with var ( var name , bool_ ) ; }
public boolean is removable ( ) { component comp = get component ( ) ; if ( ( comp != null ) && ( comp instanceof layer ) ) { this . removable = ( ( layer ) comp ) . is removable ( ) ; } return removable ; }
public connection config ( jmri . jmrix . network port adapter p ) { super ( p ) ; }
protected void disable buttons ( ) { set fire enabled ( bool_ ) ; set skip enabled ( bool_ ) ; set twist enabled ( bool_ ) ; set spot enabled ( bool_ ) ; set find club enabled ( bool_ ) ; buttons . get ( firing command . fir e_ more ) . set enabled ( bool_ ) ; set next enabled ( bool_ ) ; but done . set enabled ( bool_ ) ; set next target enabled ( bool_ ) ; set flip arms enabled ( bool_ ) ; set fire mode enabled ( bool_ ) ; set fire called enabled ( bool_ ) ; set fire clear turret enabled ( bool_ ) ; set fire clear weapon jam enabled ( bool_ ) ; set strafe enabled ( bool_ ) ; }
public boolean was double clicked ( int code ) { mouse button mb = this . buttons . get ( code ) ; if ( mb == null ) { return bool_ ; } return mb . was double clicked ( ) ; }
public boolean is paint all bars ( ) { return paint all bars ; }
public static void main ( string [ ] args ) throws ignite exception { try { server . create tcp server ( str_ ) . start ( ) ; populate database ( ) ; jdbc connection pool data src = jdbc connection pool . create ( str_ , str_ , str_ ) ; run script . execute ( data src . get connection ( ) , new string reader ( creat e_ perso n_ table ) ) ; run script . execute ( data src . get connection ( ) , new string reader ( populat e_ perso n_ table ) ) ; } catch ( sql exception e ) { throw new ignite exception ( str_ , e ) ; } try { do { system . out . println ( str_ ) ; } while ( str_ != system . in . read ( ) ) ; } catch ( io exception ignored ) { } }
protected void make verified ( u user ) { user . get roles ( ) . remove ( role . unverified ) ; user . set verification code ( null ) ; }
public static < p > pointer < pointer < p > > allocate pointers ( class < p > target type , int array length ) { return allocate pointers ( ( type ) target type , array length ) ; }
public static string to null if empty or whitespace ( string s ) { return ( string util . is empty or whitespace ( s ) ) ? null : s ; }
public token ( int kind ) { this ( kind , null ) ; }
public void close ( ) { close ( bool_ ) ; }
public boolean add undirected edge ( node node 1 , node node 2 ) { throw new unsupported operation exception ( ) ; }
public static string collection to delimited string ( collection < string > coll , string delim ) { return collection to delimited string ( coll , delim , str_ , str_ ) ; }
public boolean is base language ( ) ;
public x 5 0 9 certificate holder ( certificate x 5 0 9 certificate ) { this . x 5 0 9 certificate = x 5 0 9 certificate ; this . extensions = x 5 0 9 certificate . get tbs certificate ( ) . get extensions ( ) ; }
public abstract cpe config api servlet ( string type , abstract cpe manager < t > manager , class < ? extends abstract api servlet > clazz ) { super ( logger , clazz ) ; this . type = type ; this . manager = manager ; }
public static method find method ( class clazz , string name , string desc ) { method m = find method 2 ( clazz , name , desc ) ; if ( m == null ) error ( clazz , name , desc ) ; return m ; }
public coin fiat to coin ( fiat convert fiat ) { check argument ( convert fiat . currency code . equals ( fiat . currency code ) , str_ , convert fiat . currency code , fiat . currency code ) ; final big integer converted = big integer . value of ( convert fiat . value ) . multiply ( big integer . value of ( coin . value ) ) . divide ( big integer . value of ( fiat . value ) ) ; if ( converted . compare to ( big integer . value of ( long . ma x_ value ) ) > num_ || converted . compare to ( big integer . value of ( long . mi n_ value ) ) < num_ ) throw new arithmetic exception ( str_ ) ; try { return coin . value of ( converted . long value ( ) ) ; } catch ( illegal argument exception x ) { throw new arithmetic exception ( str_ + x . get message ( ) ) ; } }
public static void prune ( tree node visitor root , pruning method method , list < data point pair < integer > > test set ) { if ( method == pruning method . none ) return ; else if ( method == pruning method . reduce d_ error ) prune reduce error ( null , - num_ , root , test set ) ; else if ( method == pruning method . erro r_ based ) prune error based ( null , - num_ , root , test set , num_ ) ; else throw new runtime exception ( str_ ) ; }
public t remove item by position ( int position ) { if ( position < m objects . size ( ) && position != invali d_ position ) { m object deleted = m objects . remove ( position ) ; m has deleted position = position ; notify data set changed ( ) ; return m object deleted ; } else { throw new index out of bounds exception ( str_ ) ; } }
public static void create snapshot ( string working directory , modes 4 accessibility mode , string os name ) { if ( os name . contains ( str_ ) || os name . contains ( str_ ) ) { string cmd = str_ + working directory + str_ + mode + str_ + str_ + working directory + str_ + mode + str_ ; string stdout file name = working directory + str_ + mode + str_ ; int timeout = num_ ; exe runner . run ( cmd , stdout file name , timeout ) ; } else if ( os name . contains ( str_ ) || os name . contains ( str_ ) ) { string cmd = str_ + working directory + str_ + mode + str_ + str_ + working directory + str_ + mode + str_ ; string stdout file name = working directory + str_ + mode + str_ ; int timeout = num_ ; exe runner . run ( cmd , stdout file name , timeout ) ; } else { log . warn ( str_ + system . get property ( str_ ) ) ; } }
public void add option ( string option ) { synchronized ( this ) { if ( ! m codec option set && option . starts with ( str_ ) ) m codec option set = bool_ ; } native add option ( option ) ; }
protected void update controls ( ) { }
private sc server hba find server hba ( string ssn , string iqn or wwn ) { sc server hba result = null ; payload filter filter = new payload filter ( ) ; filter . append ( str_ , ssn ) ; filter . append ( str_ , iqn or wwn ) ; rest result rr = rest client . post ( str_ , filter . to json ( ) ) ; if ( check results ( rr ) ) { sc server hba [ ] hbas = gson . from json ( rr . get result ( ) , sc server hba [ ] . class ) ; for ( sc server hba hba : hbas ) { result = hba ; break ; } } return result ; }
public void reverse ( ) { float tmp ; int limit = size ( ) / num_ ; int j = size ( ) - num_ ; for ( int i = num_ ; i < limit ; ) { tmp = get quick ( i ) ; set quick ( i ++ , get quick ( j ) ) ; set quick ( j -- , tmp ) ; } }
public void clear ( ) { arrays . fill ( vals , null ) ; size = num_ ; }
public void save public key ( public key store public key ) ;
public static cpc local runner serializable instance ( ) { return new cpc local runner ( dag . serializable instance ( ) , new parameters ( ) ) ; }
public boolean child objects focusable ( ) ;
public void update ( ) { final shared preferences settings = get shared preferences for current user ( ) ; if ( settings . get boolean ( blu e_ button , bool_ ) ) { blue swatch . set background drawable ( get resources ( ) . get drawable ( r . drawable . swatchblue ) ) ; } else { blue swatch . set background drawable ( get resources ( ) . get drawable ( r . drawable . swatchbluelocked ) ) ; } if ( settings . get boolean ( purpl e_ button , bool_ ) ) { purple swatch . set background drawable ( get resources ( ) . get drawable ( r . drawable . swatchpurple ) ) ; } else { purple swatch . set background drawable ( get resources ( ) . get drawable ( r . drawable . swatchpurplelocked ) ) ; } if ( settings . get boolean ( gree n_ button , bool_ ) ) { green swatch . set background drawable ( get resources ( ) . get drawable ( r . drawable . swatchgreen ) ) ; } else { green swatch . set background drawable ( get resources ( ) . get drawable ( r . drawable . swatchgreenlocked ) ) ; } num clicks = settings . get int ( nu m_ clicks , num_ ) ; clicks left . set text ( str_ + num clicks ) ; }
private static random random ( ) { return randomized context . current ( ) . get random ( ) ; }
private j menu create edit menu ( ) { j menu edit = new j menu ( str_ ) ; j menu item copy = new j menu item ( new copy subgraph action ( this ) ) ; j menu item paste = new j menu item ( new paste subgraph action ( this ) ) ; copy . set accelerator ( key stroke . get key stroke ( key event . v k_ c , action event . ctr l_ mask ) ) ; paste . set accelerator ( key stroke . get key stroke ( key event . v k_ v , action event . ctr l_ mask ) ) ; edit . add ( copy ) ; edit . add ( paste ) ; return edit ; }
public boolean is same types ( list < type > ts , list < type > ss ) { return is same types ( ts , ss , bool_ ) ; }
public property year ( ) { return new property ( this , get chronology ( ) . year ( ) ) ; }
public boolean is enable decluttering ( ) { return this . enable decluttering ; }
private void parse object metrics ( string name prefix , json object obj ) { for ( object key : obj . key set ( ) ) { object val = obj . get ( key ) ; if ( val instanceof json object ) { parse object metrics ( name prefix + str_ + key , ( json object ) val ) ; } else { if ( gauge filter . get ( ) . contains ( ( string ) key ) ) { process gauge metric ( name prefix + str_ + ( string ) key , ( long ) val ) ; } else { process counter metric ( name prefix + str_ + ( string ) key , ( long ) val ) ; } } } }
private void show feedback ( string message ) { if ( my host != null ) { my host . show feedback ( message ) ; } else { system . out . println ( message ) ; } }
public file extract jni ( string libname ) throws io exception ;
public observable < rx camera data > periodic data request ( long interval mills ) { return new periodic data request ( rx camera , interval mills ) . get ( ) ; }
private void create client server configuration ( ) { int por t1 = ( ( integer ) server 1 . invoke ( null ) ) . int value ( ) ; client 1 . invoke ( null ) ; }
public static byte [ ] build audio specific config ( int audio object type , int sample rate index , int channel config ) { byte [ ] audio specific config = new byte [ num_ ] ; audio specific config [ num_ ] = ( byte ) ( ( audio object type << num_ ) & num_ | ( sample rate index > > num_ ) & num_ ) ; audio specific config [ num_ ] = ( byte ) ( ( sample rate index << num_ ) & num_ | ( channel config << num_ ) & num_ ) ; return audio specific config ; }
public double summary set operations ( final mode summary mode ) { summary mode _ = summary mode ; }
boolean is empty ( ) ;
ioc config < t > to provider ( class < ? extends ioc provider < ? extends t > > provider class ) ;
private void handle method exit node ( ccfg node node , ccfg method entry node investigated method , set < map < string , variable definition > > active defs , set < bytecode instruction > free uses ) { ccfg method exit node exit node = ( ccfg method exit node ) node ; if ( exit node . is exit of method entry ( investigated method ) ) { remember active defs ( exit node . get method ( ) , active defs ) ; remember free uses ( exit node . get method ( ) , free uses ) ; } }
void shutdown ( gs event registration registration ) ;
public datacenter broker ( string name ) throws exception { super ( name ) ; set vm list ( new array list < vm > ( ) ) ; set vms created list ( new array list < vm > ( ) ) ; set cloudlet list ( new array list < cloudlet > ( ) ) ; set cloudlet submitted list ( new array list < cloudlet > ( ) ) ; set cloudlet received list ( new array list < cloudlet > ( ) ) ; cloudlets submitted = num_ ; set vms requested ( num_ ) ; set vms acks ( num_ ) ; set vms destroyed ( num_ ) ; set datacenter ids list ( new linked list < integer > ( ) ) ; set datacenter requested ids list ( new array list < integer > ( ) ) ; set vms to datacenters map ( new hash map < integer , integer > ( ) ) ; set datacenter characteristics list ( new hash map < integer , datacenter characteristics > ( ) ) ; }
public stochastic gradient boosting ( regressor weak learner , int max iterations , double learning rate ) { this ( weak learner , max iterations , learning rate , defaul t_ trainin g_ proportion ) ; }
public coap endpoint ( final connector connector , final network config config , final message exchange store exchange store ) { this . config = config ; this . connector = connector ; this . connector . set raw data receiver ( new inbox impl ( ) ) ; this . exchange store = exchange store ; if ( connector instanceof tcp connector ) { this . matcher = new tcp matcher ( config ) ; this . coapstack = new coap tcp stack ( config , new outbox impl ( ) ) ; this . serializer = new tcp data serializer ( ) ; this . parser = new tcp data parser ( ) ; } else { this . matcher = new udp matcher ( config ) ; this . coapstack = new coap udp stack ( config , new outbox impl ( ) ) ; this . serializer = new udp data serializer ( ) ; this . parser = new udp data parser ( ) ; } }
public boolean equals ( object o ) { if ( o == this ) { return bool_ ; } if ( ! ( o instanceof lagged factor ) ) { return bool_ ; } lagged factor c = ( lagged factor ) o ; return c . get factor ( ) . equals ( this . get factor ( ) ) && c . get lag ( ) == this . get lag ( ) ; }
public object factory ( ) { }
public static org . oscm . internal . vo . vo service feedback convert to up ( org . oscm . vo . vo service feedback old vo ) { if ( old vo == null ) { return null ; } org . oscm . internal . vo . vo service feedback new vo = new org . oscm . internal . vo . vo service feedback ( ) ; new vo . set reviews ( convert to up vo service review ( old vo . get reviews ( ) ) ) ; new vo . set average rating ( old vo . get average rating ( ) ) ; new vo . set allowed to write review ( old vo . is allowed to write review ( ) ) ; new vo . set service key ( old vo . get service key ( ) ) ; return new vo ; }
public polygon 2 d flip vertex order ( ) { collections . reverse ( vertices ) ; return this ; }
boolean accept ( literal literal ) ;
private exceptions ( ) { }
public void dispose ( ) { }
public string to string ( ) { string builder result = new string builder ( ) ; result . append ( str_ + role name ) ; if ( role value != null ) { result . append ( str_ ) ; for ( iterator < object name > obj name iter = role value . iterator ( ) ; obj name iter . has next ( ) ; ) { object name curr obj name = obj name iter . next ( ) ; result . append ( curr obj name . to string ( ) ) ; if ( obj name iter . has next ( ) ) { result . append ( str_ ) ; } } } result . append ( str_ + problem type ) ; return result . to string ( ) ; }
void yrot ( double theta ) { theta *= ( pi / num_ ) ; double ct = math . cos ( theta ) ; double st = math . sin ( theta ) ; float nxx = ( float ) ( xx * ct + zx * st ) ; float nxy = ( float ) ( xy * ct + zy * st ) ; float nxz = ( float ) ( xz * ct + zz * st ) ; float nxo = ( float ) ( xo * ct + zo * st ) ; float nzx = ( float ) ( zx * ct - xx * st ) ; float nzy = ( float ) ( zy * ct - xy * st ) ; float nzz = ( float ) ( zz * ct - xz * st ) ; float nzo = ( float ) ( zo * ct - xo * st ) ; xo = nxo ; xx = nxx ; xy = nxy ; xz = nxz ; zo = nzo ; zx = nzx ; zy = nzy ; zz = nzz ; }
private void return data ( object ret ) { if ( my host != null ) { my host . return data ( ret ) ; } }
private formatting ( ) { instance not allowed ( get class ( ) ) ; }
public event ( long event time ) { super ( ) ; this . event time = event time ; validate ( ) ; }
public static boolean is water ( fluid stack a fluid ) { if ( a fluid == null ) return bool_ ; return a fluid . is fluid equal ( get water ( num_ ) ) || a fluid . is fluid equal ( get distilled water ( num_ ) ) ; }
protected void add internal trim ( rectangle trim ) { rectangle text trim = f text . compute trim ( num_ , num_ , num_ , num_ ) ; trim . x += text trim . x ; trim . y += text trim . y ; trim . width += text trim . width ; trim . height += text trim . height ; if ( f status field != null ) { trim . height += f separator . compute size ( swt . default , swt . default ) . y ; trim . height += f status field . compute size ( swt . default , swt . default ) . y ; trim . height += num_ ; } }
public void read buckets from prefs ( ) { shared preferences prefs = m context . get shared preferences ( share d_ prefs , num_ ) ; set < string > buckets = prefs . get string set ( pre f_ bucket s_ ids , new tree set < string > ( ) ) ; m buckets . clear ( ) ; for ( string bucket id : buckets ) { auto mix bucket bucket = restore bucket from id ( bucket id ) ; m buckets . add ( bucket ) ; } }
private static string extract shortcut ( string pattern ) { char [ ] wildcard chars = new char [ ] { str_ , str_ } ; int start index = num_ ; int end index = string utils . index of any ( pattern , wildcard chars ) ; if ( end index < num_ ) { return pattern ; } string shortcut = end index == start index ? string utils . empty : pattern . substring ( start index , end index - start index ) ; while ( end index >= num_ ) { start index = start index + end index + num_ ; if ( pattern . length ( ) <= start index ) { break ; } end index = string utils . index of any ( pattern . substring ( start index ) , wildcard chars ) ; string tmp shortcut = end index < num_ ? pattern . substring ( start index ) : pattern . substring ( start index , end index + start index ) ; if ( tmp shortcut . length ( ) > shortcut . length ( ) ) { shortcut = tmp shortcut ; } } return shortcut ; }
public void save ( ) throws io exception { if ( ! props . is empty ( ) ) { configuration util . save configuration properties ( props , props file , bool_ ) ; } configuration util . save configuration properties ( props , new file ( props file . get parent file ( ) , props file . get name ( ) + str_ ) , bool_ ) ; }
public void action performed ( final action event e ) { if ( e . get source ( ) . equals ( update drag ) ) { j check box test = ( j check box ) e . get source ( ) ; if ( ! test . is selected ( ) ) { initiate movement . set selected ( bool_ ) ; initiate movement . set enabled ( bool_ ) ; repaint ( ) ; } else if ( test . is selected ( ) ) { initiate movement . set enabled ( bool_ ) ; repaint ( ) ; } } else if ( e . get source ( ) . equals ( color choice ) ) { the color = get color ( ) ; } }
public string name ( ) ;
public client comms ( i mqtt async client client , mqtt client persistence persistence , mqtt ping sender ping sender ) throws mqtt exception { this . con state = disconnected ; this . client = client ; this . persistence = persistence ; this . ping sender = ping sender ; this . ping sender . init ( this ) ; this . token store = new comms token store ( get client ( ) . get client id ( ) ) ; this . callback = new comms callback ( this ) ; this . client state = new client state ( persistence , token store , this . callback , this , ping sender ) ; callback . set client state ( client state ) ; log . set resource name ( get client ( ) . get client id ( ) ) ; }
public abstract token stream create ( token stream input ) ;
private void load properties ( ) { string property = system . get property ( str_ ) ; if ( null == property ) { property = carbon common constants . carbo n_ propertie s_ fil e_ path ; } file file = new file ( property ) ; logger . info ( str_ + file . get absolute path ( ) ) ; file input stream fis = null ; try { if ( file . exists ( ) ) { fis = new file input stream ( file ) ; carbon properties . load ( fis ) ; } } catch ( file not found exception e ) { logger . error ( str_ + carbon common constants . carbo n_ propertie s_ fil e_ path + str_ ) ; } catch ( io exception e ) { logger . error ( str_ + carbon common constants . carbo n_ propertie s_ fil e_ path ) ; } finally { if ( null != fis ) { try { fis . close ( ) ; } catch ( io exception e ) { logger . error ( str_ + carbon common constants . carbo n_ propertie s_ fil e_ path ) ; } } } print ( ) ; }
private async future < find tags > find single ( final string tag ) throws exception { final filter filter = modifier . remove tag ( this . filter , tag ) ; final filter builder f = ctx . filter ( filter ) ; return findtags ( setup , ctx , f , tag ) ; }
public ads update target group query update target group ( user actor actor , int account id , int target group id , string name ) { return new ads update target group query ( get client ( ) , actor , account id , target group id , name ) ; }
public boolean create full copy orchestration rollback steps ( uri parent workflow , string orchestration step id , string token ) throws workflow exception { _workflow service . rollback child workflow ( parent workflow , orchestration step id , token ) ; return bool_ ; }
public static class < ? > load class ( string codebase , string name , class loader default loader ) throws malformed url exception , class not found exception { if ( loader log . is loggable ( log . brief ) ) { loader log . log ( log . brief , str_ + name + str_ + str_ + ( codebase != null ? codebase : str_ ) + str_ + ( default loader != null ? str_ + default loader : str_ ) ) ; } url [ ] urls ; if ( codebase != null ) { urls = path to ur ls ( codebase ) ; } else { urls = get default codebase ur ls ( ) ; } if ( default loader != null ) { try { class < ? > c = load class for name ( name , bool_ , default loader ) ; if ( loader log . is loggable ( log . verbose ) ) { loader log . log ( log . verbose , str_ + name + str_ + str_ + c . get class loader ( ) ) ; } return c ; } catch ( class not found exception e ) { } } return load class ( urls , name ) ; }
public half edge add edge ( coordinate orig , coordinate dest ) { if ( ! is valid edge ( orig , dest ) ) return null ; half edge e adj = ( half edge ) vertex map . get ( orig ) ; half edge e same = null ; if ( e adj != null ) { e same = e adj . find ( dest ) ; } if ( e same != null ) { return e same ; } half edge e = insert ( orig , dest , e adj ) ; return e ; }
public double sum with weights ( ) { double d sum = num_ ; for ( t key type d key : h distro . key set ( ) ) { if ( d key instanceof double ) d sum += ( ( double ) d key * get value ( d key ) ) ; else d sum += get value ( d key ) ; } return d sum ; }
public json writer ( writer w ) { this . comma = bool_ ; this . mode = str_ ; this . stack = new json object [ maxdepth ] ; this . top = num_ ; this . writer = w ; }
private void validate table meta data single row ( string table name pattern , string [ ] types , map < table meta data , object > validation rules ) throws exception { check validation rules complete ( validation rules ) ; try ( result set tables = dbmd . get tables ( null , null , table name pattern , types ) ) { assert true ( str_ , tables . next ( ) ) ; validate row values ( tables , validation rules ) ; assert false ( str_ , tables . next ( ) ) ; } }
private void on shut down ( ) { if ( container process manager != null ) { try { container process manager . stop ( ) ; } catch ( throwable e ) { log . error ( str_ , e ) ; } log . info ( str_ ) ; } if ( jmx server != null ) { try { jmx server . stop ( ) ; log . info ( str_ ) ; } catch ( throwable e ) { log . error ( str_ , e ) ; } } }
public e peek ( ) ;
public void run test ( ) throws throwable { document doc ; node list element list ; node name node ; character data child ; string child data ; doc = ( document ) load ( str_ , bool_ ) ; element list = doc . get elements by tag name ( str_ ) ; name node = element list . item ( num_ ) ; child = ( character data ) name node . get first child ( ) ; child . replace data ( num_ , num_ , str_ ) ; child data = child . get data ( ) ; assert equals ( str_ , str_ , child data ) ; }
public void reset interpreter ( interpreter interpreter ) { interpreter . clear stacks ( ) ; }
public boolean is set ( _ fields field ) { if ( field == null ) { throw new illegal argument exception ( ) ; } switch ( field ) { } throw new illegal state exception ( ) ; }
public final void dispatch event ( awt event e ) { dispatch event impl ( e ) ; }
protected void _remove unwanted properties ( ) { iterator < map . entry < string , pojo property builder > > it = _properties . entry set ( ) . iterator ( ) ; while ( it . has next ( ) ) { map . entry < string , pojo property builder > entry = it . next ( ) ; pojo property builder prop = entry . get value ( ) ; if ( ! prop . any visible ( ) ) { it . remove ( ) ; continue ; } if ( prop . any ignorals ( ) ) { _add ignored ( prop ) ; if ( ! prop . any explicit names ( ) ) { it . remove ( ) ; continue ; } prop . remove ignored ( ) ; } prop . remove non visible ( ) ; } }
protected double calculate multiplier ( instance inst , int index ) { double result ; double value ; value = inst . value ( m _ attribute indices [ index ] ) ; result = ( value - m _ median [ index ] ) / m _ iqr [ index ] ; return result ; }
public boolean has annotation ( class clz ) { method info mi = get method info 2 ( ) ; annotations attribute ainfo = ( annotations attribute ) mi . get attribute ( annotations attribute . invisible tag ) ; annotations attribute ainfo 2 = ( annotations attribute ) mi . get attribute ( annotations attribute . visible tag ) ; return ct class type . has annotation type ( clz , get declaring class ( ) . get class pool ( ) , ainfo , ainfo 2 ) ; }
public void add char ( char ch ) { ch = normalize ( ch ) ; char lastchar = grams _ . char at ( grams _ . length ( ) - num_ ) ; if ( lastchar == str_ ) { grams _ = new string buffer ( str_ ) ; capitalword _ = bool_ ; if ( ch == str_ ) return ; } else if ( grams _ . length ( ) >= n_ gram ) { grams _ . delete char at ( num_ ) ; } grams _ . append ( ch ) ; if ( character . is upper case ( ch ) ) { if ( character . is upper case ( lastchar ) ) capitalword _ = bool_ ; } else { capitalword _ = bool_ ; } }
public timeline push pause ( float time ) { if ( is built ) throw new runtime exception ( str_ ) ; current . children . add ( tween . mark ( ) . delay ( time ) ) ; return this ; }
void process server response ( int response , response data raw data ) ;
public boolean write header ( output stream os ) { try { write int ( os , cach e_ magic ) ; write string ( os , key ) ; write string ( os , etag == null ? str_ : etag ) ; write long ( os , server date ) ; write long ( os , last modified ) ; write long ( os , ttl ) ; write long ( os , soft ttl ) ; write string string map ( response headers , os ) ; os . flush ( ) ; return bool_ ; } catch ( io exception e ) { volley log . d ( str_ , e . to string ( ) ) ; return bool_ ; } }
public static type reference new formal parameter reference ( int param index ) { return new type reference ( ( metho d_ forma l_ parameter << num_ ) | ( param index << num_ ) ) ; }
public static void assert u ( string update ) { assert u ( null , update ) ; }
private byte buffer read ( file channel channel , int size , long offset ) { byte buffer byte bffer = byte buffer . allocate ( size ) ; try { channel . position ( offset ) ; channel . read ( byte bffer ) ; } catch ( exception e ) { logger . error ( e , e . get message ( ) ) ; } byte bffer . rewind ( ) ; return byte bffer ; }
default void remove title ( ) { this . set title ( null ) ; }
protected void register self ( ) { log . debug ( str_ ) ; }
private void declare extensions ( ) { new collection feed ( ) . declare extensions ( ext profile ) ; new volume feed ( ) . declare extensions ( ext profile ) ; batch utils . declare extensions ( ext profile ) ; }
public property year ( ) { return new property ( this , year ) ; }
public linked list ( ) { }
public session create session ( string session id , boolean distribute ) { delta session session = ( delta session ) super . create session ( session id ) ; if ( distribute ) { send create session ( session . get id ( ) , session ) ; } if ( log . is debug enabled ( ) ) log . debug ( sm . get string ( str_ , session . get id ( ) , integer . value of ( sessions . size ( ) ) ) ) ; return ( session ) ; }
private string constant to object name ( string string ) { if ( ! character . is upper case ( string . char at ( num_ ) ) ) { string = string utils . capitalize ( string ) ; int length = string . length ( ) ; for ( int i = num_ ; i < length ; i ++ ) { char character = string . char at ( i ) ; if ( character == str_ . char at ( num_ ) ) { string first part = string . substring ( num_ , i ) ; string second part = string . substring ( i + num_ , length ) ; string new second part = string utils . capitalize ( second part ) ; string = first part + new second part ; i = first part . length ( ) ; length -- ; } } } return string ; }
public static void register entity ( entity definition entity def ) { register entity ( entity def . get service ( ) , entity def ) ; }
void detach frame ( string caption ) ;
public static byte [ ] decode ( string s ) { return decode ( s . to char array ( ) ) ; }
public void add axiom ( int i , int j , rule rule , source path src path ) { if ( null == this . cells . get ( i , j ) ) { this . cells . set ( i , j , new cell ( this , this . goal symbol id ) ) ; } this . cells . get ( i , j ) . add hyper edge in cell ( new compute node result ( this . feature functions , rule , null , i , j , src path , sentence ) , rule , i , j , null , src path , bool_ ) ; }
public static x 5 0 9 certificate create certificate ( ) throws io exception { try ( input stream cert = test utils . class . get resource as stream ( str_ ) ) { certificate factory certificate factory = certificate factory . get instance ( str_ ) ; return ( x 5 0 9 certificate ) certificate factory . generate certificate ( cert ) ; } catch ( certificate exception ex ) { throw new io exception ( ex ) ; } }
public text column ( ) { super ( column type . text ) ; }
object lookup ( object obj ) { int index = htab . lookup ( obj ) ; return ( index >= num_ ) ? reps [ index ] : obj ; }
protected smash error parse network error ( smash error error ) { try { if ( error . get data ( ) != null && error . get data ( ) . source != null ) { error . set content ( okio . buffer ( error . get data ( ) . source ) . read utf 8 ( ) ) ; } } catch ( io exception ioe ) { throw new runtime exception ( str_ , ioe ) ; } return error ; }
boolean contain relay state ( string relay state ) { return relay state map . contains key ( relay state ) ; }
public static integer [ ] transform int array ( int [ ] source ) { integer [ ] destin = new integer [ source . length ] ; for ( int i = num_ ; i < source . length ; i ++ ) { destin [ i ] = source [ i ] ; } return destin ; }
public void or ( int size , register dst , register src 1 , register src 2 ) { super . orr ( size , dst , src 1 , src 2 , shift type . lsl , num_ ) ; }
boolean is before end ( concurrent skip list map . node < k , v > n , comparator < ? super k > cmp ) { if ( n == null ) return bool_ ; if ( hi == null ) return bool_ ; k k = n . key ; if ( k == null ) return bool_ ; int c = cpr ( cmp , k , hi ) ; if ( c > num_ || ( c == num_ && ! hi inclusive ) ) return bool_ ; return bool_ ; }
public boolean is item force ( ) ;
public conversion from ( string ... fields ) { conversion . from = join ( str_ , fields ) ; return this ; }
void on factory name changed ( string factory name ) ;
public void add totals ( info _ column [ ] layout ) { add totals ( ( column info [ ] ) layout ) ; }
public criteria create criteria ( ) { criteria criteria = create criteria internal ( ) ; if ( ored criteria . size ( ) == num_ ) { ored criteria . add ( criteria ) ; } return criteria ; }
private void process to many relations ( query object < ? > query object ) throws illegal query state exception { list < entity > loaded entities = entity loaders . get entities for query object ( query object ) ; if ( loaded entities . is empty ( ) ) { return ; } for ( entity loaded entity : loaded entities ) { for ( to many node to many node : loaded entity . get children ( to many node . class ) ) { if ( find join ( to many node . get name ( ) , query object ) != null ) { to many node . set fetched ( bool_ ) ; } } } for ( q join join : query object . get joins ( ) ) { process to many relations ( join . get to ( ) ) ; } }
public static int read orientation from tiff ( input stream is , int length ) throws io exception { tiff header tiff header = new tiff header ( ) ; length = read tiff header ( is , length , tiff header ) ; int to skip = tiff header . first ifd offset - num_ ; if ( length == num_ || to skip > length ) { return num_ ; } is . skip ( to skip ) ; length -= to skip ; length = move to tiff entry with tag ( is , length , tiff header . is little endian , tif f_ ta g_ orientation ) ; return get orientation from tiff entry ( is , length , tiff header . is little endian ) ; }
public boolean is spring damper ( ) { return this . frequency > num_ && this . damping ratio > num_ ; }
public static int [ ] normalize rect ( settings decoder decoder , string key , int device density , int setting density ) { int [ ] rect = decoder . get rect ( key ) ; for ( int i = num_ ; i < num_ ; i ++ ) { rect [ i ] = rect [ i ] * device density / setting density ; } try { decoder . settings . put ( key , background section . get str ( rect ) ) ; } catch ( exception e ) { } return rect ; }
public play action ( tic tac toe board board ) { this . board = board ; }
public boolean is unresolved ( ) { return ( this . status == droidsafe issue resolution status . unresolved ) ; }
public static progress dialog fragment new instance ( int indeterminate drawable , string message ) { progress dialog fragment f = new progress dialog fragment ( ) ; bundle args = new bundle ( ) ; args . put int ( str_ , indeterminate drawable ) ; args . put string ( str_ , message ) ; f . set arguments ( args ) ; return f ; }
void on details read ( int index , int id , string url , boolean is incognito , boolean is standard active index , boolean is incognito active index ) ;
void on search ( string result ) ;
public void to all in radius ( int dimension , vec 3d pos , double radius ) { to all in radius ( open mod loader . get sided handler ( ) . get server ( ) . world server for dimension ( dimension ) , pos , radius ) ; }
public boolean is repeat ( ) { return script details . is repeat ( ) ; }
public abstract association association ( ) ;
private analysis result set make log anal ( report description description , integer target date int ) { set < string > level set = new hash set < > ( ) ; level set . add ( level . error . to string ( ) ) ; level set . add ( level . warn . to string ( ) ) ; level set . add ( level . fatal . to string ( ) ) ; list < string > group = new array list < > ( ) ; group . add ( str_ ) ; group . add ( str_ ) ; group . add ( str_ ) ; log analysis request req = new log analysis request ( ) ; req . set filter rabbits ( description . get targets ( ) ) ; req . set filter begin date ( target date int ) ; req . set filter end date ( target date int ) ; req . set filter levels ( level set ) ; req . set group ( group ) ; logger . trace ( str_ + req ) ; return analyzer . aggregation ( req ) ; }
public abstract void on removed from list ( ) ;
public name join ( name rhs ) { list < name piece > new piece list = new array list < > ( ) ; new piece list . add all ( name pieces ) ; new piece list . add all ( rhs . name pieces ) ; return new name ( new piece list ) ; }
public void add plugin ( final i plugin < i plugin interface > plugin ) { preconditions . check not null ( plugin , str_ ) ; m _registry . add plugin ( plugin ) ; }
private void resume ( final int id ) { final data helper datahelper = new data helper ( this . get activity ( ) ) ; final session check = datahelper . load session ( id ) ; if ( check != null && ! check . has been exported ( ) ) { ( ( session fragement listener ) get activity ( ) ) . resume command ( id ) ; } else { toast . make text ( this . get activity ( ) , r . string . warning _session _closed , toast . lengt h_ short ) . show ( ) ; } }
public matrix 3f m 2 2 ( float m 2 2 ) { this . m 2 2 = m 2 2 ; return this ; }
public void save selection ( i mini table mini table ) { log . info ( str_ ) ; array list < integer > results = new array list < integer > ( ) ; set selection ( null ) ; int rows = mini table . get row count ( ) ; for ( int i = num_ ; i < rows ; i ++ ) { id column id = ( id column ) mini table . get value at ( i , num_ ) ; if ( id != null && id . is selected ( ) ) results . add ( id . get record _ id ( ) ) ; } if ( results . size ( ) == num_ ) return ; log . config ( str_ + results . size ( ) ) ; set selection ( results ) ; }
public boolean provides ( class < ? > c ) { return bool_ ; }
protected void respond ( claim builder cb ) { cb . put ( ke y_ type , get type ( ) ) ; }
public static buffered image scale image ( buffered image image , int width , int height ) { assert ( width > num_ && height > num_ ) ; buffered image img = new buffered image ( width , height , buffered image . typ e_ in t_ rgb ) ; graphics g = img . get graphics ( ) ; ( ( graphics 2 d ) g ) . set rendering hint ( rendering hints . ke y_ interpolation , rendering hints . valu e_ interpolatio n_ bilinear ) ; g . draw image ( image , num_ , num_ , img . get width ( ) , img . get height ( ) , null ) ; return img ; }
public att remove att ( string q name ) { for ( int i = num_ ; i < attributes . size ( ) ; i ++ ) { att att = attributes . get ( i ) ; if ( att . get q name ( ) . equals ( q name ) ) { attributes . remove ( i ) ; return att ; } } return null ; }
public boolean has same values ( configurable compared configurable ) ;
protected void _write external ( object output out ) throws io exception { if ( entry info != null ) { out . write boolean ( bool_ ) ; if ( entry info . m _ uid != null ) { out . write boolean ( bool_ ) ; out . write utf ( entry info . m _ uid ) ; } else { out . write boolean ( bool_ ) ; } out . write int ( entry info . m _ version id ) ; out . write long ( entry info . m _ time to live ) ; } else { out . write boolean ( bool_ ) ; } out . write boolean ( is fifo ) ; out . write boolean ( is transient ) ; out . write boolean ( m _ no write lease mode ) ; }
protected abstract boolean is expandable ( object object ) ;
private static native void init i ds ( ) ;
public final < u > parallel publisher < u > map ( function < ? super t , ? extends u > mapper ) { objects . require non null ( mapper , str_ ) ; if ( is ordered ( ) ) { return new parallel ordered map < > ( ( parallel ordered base < t > ) this , mapper ) ; } return new parallel unordered map < > ( this , mapper ) ; }
public static void write static field ( final field field , final object value ) throws illegal access exception { field utils . write static field ( field , value , bool_ ) ; }
public final void to string ( string buffer sb , string padding ) { tree node tree node = get tree node ( ) ; if ( tree node instanceof syntax tree node && system . get property ( semantic node . class . get name ( ) + str_ ) != null ) { syntax tree node stn = ( syntax tree node ) tree node ; sb . append ( stn . get human readable image ( ) ) ; } else { sb . append ( this . get location ( ) ) ; } }
public int iterator rows ( boolean reverse ) { return new row iterator ( reverse ) ; }
public void update is delivered ( ) throws sql exception { string query = str_ ; prepared statement ps = db . prepare statement ( query , get _ trx name ( ) ) ; ps . set int ( num_ , get _ id ( ) ) ; result set rs = ps . execute query ( ) ; if ( rs . next ( ) ) { int delta = rs . get int ( num_ ) ; if ( delta == num_ ) { set is delivered ( bool_ ) ; } else { set is delivered ( bool_ ) ; } } rs . close ( ) ; ps . close ( ) ; }
private void return data ( object ret ) { if ( my host != null ) { my host . return data ( ret ) ; } }
public flow set clone ( ) ;
public void on exception ( final exception exception ) ;
private bookmarkable page link create remove one sku link ( final string sku code ) { final page parameters params map = new page parameters ( ) ; params map . set ( shopping cart command . cm d_ removeonesku , sku code ) ; return new bookmarkable page link < page > ( remov e_ on e_ link , get page ( ) . get page class ( ) , params map ) ; }
public void damage percentage max ( double value ) { damage ( value / num_ * max value ) ; }
public void paint tool tip border ( synth context context , graphics g , int x , int y , int w , int h ) { }
public void reset ( ) { stay awake ( bool_ ) ; _reset ( ) ; m event handler . remove callbacks and messages ( null ) ; close fd ( ) ; }
public abstract void seek ( ) ;
public compound button on check ( final int id , final on checked change listener listener ) { compound button checkable = find ( id ) ; checkable . set on checked change listener ( listener ) ; return checkable ; }
public boolean equals ( object obj ) { if ( this == obj ) return bool_ ; if ( obj instanceof ec field fp ) { return ( p . equals ( ( ( ec field fp ) obj ) . p ) ) ; } return bool_ ; }
public void on scratch value changed ( scratch bank bank , byte [ ] value ) ;
public jetty solr runner start jetty solr runner ( string name , string host context , jetty config config ) throws exception { path runner path = create instance path ( name ) ; string context = get host context suitable for servlet context ( host context ) ; jetty config new config = jetty config . builder ( config ) . set context ( context ) . build ( ) ; jetty solr runner jetty = new jetty solr runner ( runner path . to string ( ) , new config ) ; jetty . start ( ) ; jettys . add ( jetty ) ; return jetty ; }
protected void verify system for volume to be added to cg ( volume volume , block consistency group cg , storage system cg storage system ) { uri volume system uri = volume . get storage controller ( ) ; if ( ! volume system uri . equals ( cg storage system . get id ( ) ) ) { throw api exception . bad requests . invalid parameter consistency group storagey system mismatch ( volume . get id ( ) ) ; } }
public void add request ( record request request ) { if ( request . get request size ( ) + get request size ( ) > num_ ) { throw new illegal argument exception ( ) ; } if ( records == null ) { records = new record request [ num_ ] ; } else { record request old [ ] = records ; records = new record request [ old . length + num_ ] ; system . arraycopy ( old , num_ , records , num_ , old . length ) ; } records [ records . length - num_ ] = request ; set data length ( get request size ( ) ) ; }
static string escape string for ascii ( string s ) { string out = str_ ; char [ ] c array = s . to char array ( ) ; for ( int i = num_ ; i < c array . length ; i ++ ) { char c = c array [ i ] ; if ( c > num_ ) { out += str_ ; string hex = integer . to hex string ( c ) ; while ( hex . length ( ) < num_ ) hex = str_ + hex ; out += hex ; } else if ( c == str_ ) { out += str_ ; } else if ( c == str_ ) { out += str_ ; } else if ( c == str_ ) { out += str_ ; } else if ( c == str_ ) { out += str_ ; } else if ( c == str_ ) { out += str_ ; } else if ( c == str_ ) { out += str_ ; } else { out += c ; } } return out ; }
protected boolean is allowed to dequeue one to one file transfer ( contact id contact , file transfer service impl file transfer service ) { if ( file transfer service . get file transfer protocol for one to one file transfer ( contact ) == null ) { if ( m logger . is activated ( ) ) { m logger . debug ( new string builder ( str_ ) . append ( contact ) . append ( str_ ) . to string ( ) ) ; } return bool_ ; } return is allowed to dequeue file transfer ( ) ; }
private void update time ( ) { compute time ( ) ; is time set = bool_ ; }
string do convert short to str ( jbbp text writer context , int value ) throws io exception ;
public in memory document ( final input stream input stream , final string name ) throws dss exception { this ( dss utils . to byte array ( input stream ) , name ) ; }
public void update standard attribute ( attribute type attr , schema schema ) { standard attribute panel . update ( attr , schema ) ; schema element panel = standard attribute panel ; ( ( card layout ) main panel . get layout ( ) ) . show ( main panel , standard attribute panel . get title ( ) . to string ( ) ) ; }
protected void check cache load ( ) { ignite cache < object , object > c 1 = grid ( ) . cache ( cach e_ name ) ; c 1 . load cache ( null ) ; assert equals ( organizatio n_ cnt + perso n_ cnt , c 1 . size ( ) ) ; }
public where < t > reset ( ) { clause = null ; return this ; }
public int find last visible item position ( ) { final view child = find one visible child ( layout manager . get child count ( ) - num_ , - num_ , bool_ , bool_ ) ; return child == null ? recycler view . n o_ position : recycler view . get child adapter position ( child ) ; }
public static string extract ( string value ) { string extracted value = value ; if ( is attribute ( value ) ) { extracted value = value . substring ( attribut e_ start . length ( ) , value . length ( ) - attribut e_ end . length ( ) ) ; } return extracted value ; }
private void update progress ( string progress label , int progress ) { if ( my host != null && ( ( progress != previous progress ) || ( ! progress label . equals ( previous progress label ) ) ) ) { my host . update progress ( progress label , progress ) ; } previous progress = progress ; previous progress label = progress label ; }
public mem buffer holder < a > create buffer ( long size ) ;
public com . sun . identity . liberty . ws . common . jaxb . xmlsig . key value type create key value type ( ) throws javax . xml . bind . jaxb exception { return new com . sun . identity . liberty . ws . common . jaxb . xmlsig . impl . key value type impl ( ) ; }
private void init class path ( ) { string builder cpath = new string builder ( ) ; string sep = system . get property ( str_ ) ; cpath . append ( options . get scratch dir ( ) + sep ) ; string cp = ( string ) context . get attribute ( constants . servle t_ classpath ) ; if ( cp == null || cp . equals ( str_ ) ) { cp = options . get class path ( ) ; } if ( cp != null ) { classpath = cpath . to string ( ) + cp ; } if ( classpath != null ) { try { classpath = url decoder . decode ( classpath , str_ ) ; } catch ( unsupported encoding exception e ) { if ( log . is loggable ( level . fine ) ) log . log ( level . fine , str_ + classpath , e ) ; } } }
public boolean should enable view ( ) { if ( like dialog . can show native dialog ( ) || like dialog . can show web fallback ( ) ) { return bool_ ; } if ( object is page || ( object type == like view . object type . page ) ) { return bool_ ; } access token token = access token . get current access token ( ) ; return token != null && token . get permissions ( ) != null && token . get permissions ( ) . contains ( str_ ) ; }
public void load functions from script ( final string script name ) { final script script = get script ( script name , date utils . today ( ) ) ; final script engine engine = script engine provider . get script engine ( script . get type ( ) ) ; execute script ( script , engine , engine . get context ( ) ) ; }
public void update weight distribution ( column example table column table , int row , weight distribution distribution ) ;
public docker slave template ( ) { this . id = uuid . random uuid ( ) . to string ( ) ; }
private flexible node read internal node ( taxon list taxon list ) throws io exception , import exception { flexible node node = new flexible node ( ) ; final char ch = read character ( ) ; assert ch == str_ ; node . add child ( read branch ( taxon list ) ) ; if ( get last delimiter ( ) != str_ ) { throw new bad format exception ( str_ + ( char ) get last delimiter ( ) + str_ ) ; } do { node . add child ( read branch ( taxon list ) ) ; } while ( get last delimiter ( ) == str_ ) ; if ( get last delimiter ( ) != str_ ) { throw new bad format exception ( str_ ) ; } try { string label = read token ( str_ ) ; if ( label . length ( ) > num_ ) { node . set attribute ( str_ , label ) ; } } catch ( io exception ioe ) { } return node ; }
eval < optional long > max long ( to long function < ? super t > fn ) ;
public static map < string , object > prod find distinct variants ( dispatch context dctx , map < string , ? extends object > context ) { return service util . return failure ( ) ; }
public rendered image create rendering ( render context rc ) { return get source ( ) . create rendering ( rc ) ; }
private distribution manager ( internal distributed system system , remote transport config transport ) { this ( transport , system ) ; boolean finished constructor = bool_ ; try { is startup thread . set ( boolean . true ) ; start threads ( ) ; membership manager . start event processing ( ) ; for ( ; ; ) { this . get cancel criterion ( ) . check cancel in progress ( null ) ; boolean interrupted = thread . interrupted ( ) ; try { membership manager . wait for event processing ( ) ; break ; } catch ( interrupted exception e ) { interrupted = bool_ ; } finally { if ( interrupted ) { thread . current thread ( ) . interrupt ( ) ; } } } synchronized ( distribution manager . class ) { open d ms ++ ; } finished constructor = bool_ ; } finally { if ( ! finished constructor ) { ask threads to stop ( ) ; } } }
public void request update from layout ( ) ;
public static boolean is default to portrait ( activity activity ) { display current display = activity . get window manager ( ) . get default display ( ) ; point display size = new point ( ) ; current display . get size ( display size ) ; int orientation = current display . get rotation ( ) ; int natural width , natural height ; if ( orientation == surface . rotatio n _ 0 || orientation == surface . rotatio n _ 1 8 0 ) { natural width = display size . x ; natural height = display size . y ; } else { natural width = display size . y ; natural height = display size . x ; } return natural width < natural height ; }
public abstract closeable reference < bitmap > create bitmap internal ( int width , int height , bitmap . config bitmap config ) ;
public int compare to ( cp _info constant _pool [ ] , cp _info cp , cp _info cp _constant _pool [ ] ) { int i ; if ( tag != cp . tag ) return tag - cp . tag ; constan t_ name and type _info cu = ( constan t_ name and type _info ) cp ; i = ( ( constan t_ utf 8 _info ) ( constant _pool [ name _index ] ) ) . compare to ( cp _constant _pool [ cu . name _index ] ) ; if ( i != num_ ) return i ; return ( ( constan t_ utf 8 _info ) ( constant _pool [ descriptor _index ] ) ) . compare to ( cp _constant _pool [ cu . descriptor _index ] ) ; }
public long create ( answer answer ) { return m dao session . get answer dao ( ) . insert ( answer ) ; }
public boolean is applicable ( ) { return get viewer ( ) . get selected component ( ) == get viewer ( ) . get pcoa tab ( ) ; }
public static component ui create ui ( j component text area ) { return new r text area ui ( text area ) ; }
public void romove entry from monitoring region map ( distributed member member ) { monitoring region map . remove ( member ) ; }
public task stack builder add next intent ( intent next intent ) { m intents . add ( next intent ) ; return this ; }
void remove response interceptor by class ( class clazz ) ;
private void write attribute ( java . lang . string namespace , java . lang . string att name , java . lang . string att value , javax . xml . stream . xml stream writer xml writer ) throws javax . xml . stream . xml stream exception { if ( namespace . equals ( str_ ) ) { xml writer . write attribute ( att name , att value ) ; } else { register prefix ( xml writer , namespace ) ; xml writer . write attribute ( namespace , att name , att value ) ; } }
public exception [ ] cancel all ( string [ ] entry uids , string [ ] class names , int [ ] object types ) { array list < exception > exceptions list = new array list < exception > ( num_ ) ; for ( int i = num_ ; i < entry uids . length ; i ++ ) { try { cancel ( entry uids [ i ] , class names [ i ] , object types [ i ] , bool_ , bool_ , bool_ ) ; } catch ( exception ex ) { exceptions list . add ( ex ) ; } } return exceptions list . to array ( new exception [ exceptions list . size ( ) ] ) ; }
public int index of ( int c , int start ) { if ( c > num_ ) { return index of supplementary ( c , start ) ; } return fast index of ( c , start ) ; }
public array real vector ( double [ ] d ) { data = new double [ d . length ] ; for ( int i = num_ ; i < d . length ; i ++ ) { data [ i ] = d [ i ] . double value ( ) ; } }
private timeout controller ( ) { }
public synchronized vertex create timestamp ( ) { long nanos = system . nano time ( ) % num_ ; long millis = system . current time millis ( ) ; timestamp timestamp = new timestamp ( millis ) ; timestamp . set nanos ( ( int ) nanos ) ; return create vertex ( timestamp ) ; }
public points to set reaching objects ( context c , local l ) { var node n = find context var node ( l , c ) ; if ( n == null ) { return empty points to set . v ( ) ; } return n . get p2 set ( ) ; }
public abstract boolean translate ( int codepoint , writer out ) throws io exception ;
public static tuple median ( tuple set tuples , string field , comparator cmp ) { if ( tuples instanceof table ) { table table = ( table ) tuples ; column metadata md = table . get metadata ( field ) ; return table . get tuple ( md . get median row ( ) ) ; } else { return median ( tuples . tuples ( ) , field , cmp ) ; } }
public string to localized pattern ( ) { return translate pattern ( pattern , date format symbols . pattern chars , format data . get local pattern chars ( ) ) ; }
public security access exception ( throwable cause ) { super ( cause . get message ( ) , cause ) ; }
public input method highlight ( boolean selected , int state , int variation , map < text attribute , ? > style ) { this . selected = selected ; if ( ! ( state == ra w_ text || state == converte d_ text ) ) { throw new illegal argument exception ( str_ ) ; } this . state = state ; this . variation = variation ; this . style = style ; }
public static i editor part open editor unchecked ( string editor id , i editor input input , boolean activate ) throws part init exception { final i workbench page active page = get active page ( ) ; if ( active page != null ) { final i editor part open editor = active page . open editor ( input , editor id , activate ) ; get active window ( ) . set active page ( null ) ; get active window ( ) . set active page ( active page ) ; return open editor ; } return null ; }
public node list apply to ( string xpath spec , list node set ) { return new node list ( x path cache . get x path ( xpath spec ) . apply to ( node set ) , bool_ ) ; }
q order by ( expression < ? > ... expressions ) ;
public assert statement new assert statement ( ) { return new assert statement ( this ) ; }
public static j menu left shift ( j menu self , component component ) { self . add ( component ) ; return self ; }
protected boolean is annotation compatible ( ) { return compiler configuration . is post jd k5 ( this . source . get configuration ( ) . get target bytecode ( ) ) ; }
public int compare ( file file 1 , file file 2 ) { return case sensitivity . check compare to ( file 1 . get name ( ) , file 2 . get name ( ) ) ; }
public static kafka stream of ( final map < string , object > cfg ) { return new kafka stream ( cfg ) ; }
has value < boolean > source check box ( ) ;
private static native void init i ds ( ) ;
public boolean is text ( ) { return bool_ ; }
public static _ fields find by thrift id or throw ( int field id ) { _ fields fields = find by thrift id ( field id ) ; if ( fields == null ) throw new illegal argument exception ( str_ + field id + str_ ) ; return fields ; }
public map < string , string > obtain proxy properties ( ) { map < string , string > proxy properties = new hash map < > ( ) ; map < string , string > environment = get environment ( ) ; if ( environment . contains key ( config . syste m_ htt p_ proxy ) ) { proxy properties . put ( config . syste m_ htt p_ proxy , environment . get ( config . syste m_ htt p_ proxy ) ) ; } if ( environment . contains key ( config . syste m_ http s_ proxy ) ) { proxy properties . put ( config . syste m_ http s_ proxy , environment . get ( config . syste m_ http s_ proxy ) ) ; } if ( environment . contains key ( config . syste m_ n o_ proxy ) ) { proxy properties . put ( config . syste m_ n o_ proxy , environment . get ( config . syste m_ n o_ proxy ) ) ; } return proxy properties ; }
public static record new record ( name name , int type , int dclass ) { return new record ( name , type , dclass , num_ ) ; }
public option set remove block 1 ( ) { this . block 1 = null ; return this ; }
public boolean is empty ( ) ;
default void log error ( string message , throwable throwable ) { log status ( new status exception ( severity . error , message , throwable ) ) ; }
public final static boolean is class file name ( string name ) { int name length = name == null ? num_ : name . length ( ) ; int suffix length = suffi x_ class . length ; if ( name length < suffix length ) return bool_ ; for ( int i = num_ ; i < suffix length ; i ++ ) { char c = name . char at ( name length - i - num_ ) ; int suffix index = suffix length - i - num_ ; if ( c != suffi x _class [ suffix index ] && c != suffi x_ class [ suffix index ] ) return bool_ ; } return bool_ ; }
public example set meta data modify example set ( example set meta data meta data ) throws undefined parameter error { return meta data ; }
void to string ( string builder buffer ) ;
private void update progress ( int progress ) { if ( my host != null ) { my host . update progress ( progress ) ; } else { system . out . println ( str_ + progress + str_ ) ; } }
public object remove ( int index ) { return index >= num_ && index < this . length ( ) ? this . my array list . remove ( index ) : null ; }
path append ( path rel path ) ;
public thread ( final target process thread thread ) { preconditions . check not null ( thread , str_ ) ; m _thread = thread ; m _thread . add listener ( m _listener ) ; }
void transferables flavors changed ( ) ;
public object run safely ( catbert . fast stack stack ) throws exception { string remote name = get string ( stack ) ; int port num = get int ( stack ) ; sfir tuner tun = external tuning manager . get ir tuner plugin ( get string ( stack ) , port num ) ; if ( tun != null ) return new long ( tun . get remote info ( remote name ) . carrier _freq ) ; else return new long ( num_ ) ; }
void increment drawn frames ( int drawn frames ) ;
public c unstar modules action ( final j frame parent , final i navi module [ ] modules ) { super ( str_ ) ; m _parent = parent ; m _modules = modules . clone ( ) ; }
public final boolean has messages ( int what , object object ) { return m exec . has messages ( what , object ) ; }
protected boolean has regression test ( ) { return bool_ ; }
public boolean is captured view under ( int x , int y ) { return is view under ( m captured view , x , y ) ; }
public void start ( ) { if ( log . is debug enabled ( ) ) { log . debug ( str_ ) ; } if ( state != num_ ) { log . error ( str_ + state + str_ ) ; } if ( programmer != null ) { saved mode = programmer . get mode ( ) ; } state = num_ ; retry = num_ ; test 1 ( ) ; }
public static double [ ] convert floats to doubles ( float [ ] input ) { if ( input == null ) return null ; double [ ] output = new double [ input . length ] ; for ( int i = num_ ; i < input . length ; ++ i ) { output [ i ] = ( double ) input [ i ] ; } return output ; }
public static boolean is network connected ( context context ) { connectivity manager connectivity manager = ( connectivity manager ) context . get system service ( context . connectivit y_ service ) ; network info network info = connectivity manager . get active network info ( ) ; return network info != null && network info . is connected ( ) ; }
public void clear ( ) { is clear = bool_ ; }
protected public key engine generate public ( key spec key spec ) throws invalid key spec exception { if ( key spec != null ) { if ( key spec instanceof dsa public key spec ) { return new dsa public key impl ( ( dsa public key spec ) key spec ) ; } if ( key spec instanceof x 5 0 9 encoded key spec ) { return new dsa public key impl ( ( x 5 0 9 encoded key spec ) key spec ) ; } } throw new invalid key spec exception ( str_ ) ; }
public final native void open confirm ( element template , cm dialog callback overlay callback , cm dialog options overlay options ) ;
public boolean can override ( glow block block , block face face , item stack holding ) { return block . is liquid ( ) ; }
public add image resource ( java . awt . frame parent , boolean modal , editable resources res ) { super ( parent , modal ) ; init components ( ) ; modifiable j option pane . reverse ok cancel ( ok , cancel ) ; name . set text ( add resource dialog . next available name ( res , str_ ) ) ; pack ( ) ; set location by platform ( bool_ ) ; set visible ( bool_ ) ; }
private void resize column width ( ) { final table column model column model = table . get column model ( ) ; for ( int column = num_ ; column < table . get column count ( ) ; column ++ ) { int width = num_ ; for ( int row = num_ ; row < table . get row count ( ) ; row ++ ) { table cell renderer renderer = table . get cell renderer ( row , column ) ; component comp = table . prepare renderer ( renderer , row , column ) ; width = math . max ( comp . get preferred size ( ) . width , width ) ; } width += colum n_ margi n_ px ; column model . get column ( column ) . set preferred width ( width ) ; column model . get column ( column ) . set max width ( width ) ; if ( column <= num_ ) { column model . get column ( column ) . set min width ( width ) ; } } }
public static void fill matrix _ 3 d ( int n 1 , int n 2 , int n 3 , double [ ] [ ] [ ] m ) { random r = new random ( num_ ) ; for ( int i = num_ ; i < n 1 ; i ++ ) { for ( int j = num_ ; j < n 2 ; j ++ ) { for ( int k = num_ ; k < n 3 ; k ++ ) { m [ i ] [ j ] [ k ] = r . next double ( ) ; } } } }
public static string format ( locale l , string format , object ... args ) { return new formatter ( l ) . format ( format , args ) . to string ( ) ; }
public static range scale ( range base , double factor ) { param checks . null not permitted ( base , str_ ) ; if ( factor < num_ ) { throw new illegal argument exception ( str_ ) ; } return new range ( base . get lower bound ( ) * factor , base . get upper bound ( ) * factor ) ; }
public import exception ( string details ) { super ( str_ , new object [ ] { details } ) ; bean . set details ( details ) ; }
public void on drawer closed ( view view ) { super . on drawer closed ( view ) ; }
int size ( ) { if ( m garbage ) { gc ( ) ; } return m size ; }
public static byte [ ] encode ( byte [ ] input , int flags ) { return encode ( input , num_ , input . length , flags ) ; }
string find seo uri by product sku id ( long sku id ) ;
boolean is suspended ( ) ;
public output stream put ( string key ) throws file not found exception { return new x file output stream ( m cache . new file ( key ) ) ; }
public static cipher text iv mac encrypt ( string plaintext , secret keys secret keys , string encoding ) throws unsupported encoding exception , general security exception { return encrypt ( plaintext . get bytes ( encoding ) , secret keys ) ; }
public matrix 3f zero ( ) { m 0 0 = m 0 1 = m 0 2 = m 1 0 = m 1 1 = m 1 2 = m 2 0 = m 2 1 = m 2 2 = num_ ; return this ; }
protected ws service import service ( service service ) { string name = service . get q name ( ) . get local part ( ) ; port port = ( port ) service . get ports ( ) . values ( ) . iterator ( ) . next ( ) ; string location = str_ ; list extension elements = port . get extensibility elements ( ) ; for ( object extension : extension elements ) { if ( extension instanceof soap address ) { soap address address = ( soap address ) extension ; location = address . get location uri ( ) ; } } ws service ws service = new ws service ( this . namespace + name , location , this . wsdl location ) ; return ws service ; }
public static pointer to ( byte values [ ] ) { return new pointer ( byte buffer . wrap ( values ) ) ; }
private object unmarshall entity by name ( string entity name , map < string , object > map , object current node ) throws o data exception { log . debug ( str_ , entity name ) ; if ( ! is null or empty ( entity name ) ) { object entity = load entity ( entity name ) ; set entity properties ( entity , json parser utils . get structured type ( entity name , entity data model ) , map , current node ) ; log . debug ( str_ , entity name ) ; return entity ; } else { throw new o data unmarshalling exception ( str_ ) ; } }
public void pre start ( ) { cluster . subscribe ( get self ( ) , cluster event . initial state as events ( ) , member event . class , unreachable member . class ) ; }
boolean should accept ( uri uri , http cookie cookie ) ;
private object [ ] next ( ) throws carbon sort key and group by exception { return get sorted record from file ( ) ; }
private static map < string , object > process section ( string section , collection < map < string , object > > hosts , map < string , object > dflts , map < string , object > props ) throws ignite checked exception { if ( section == null || props == null ) return null ; if ( dfl t_ section . equals ignore case ( section ) ) { if ( dflts != null ) throw new ignite checked exception ( str_ + dfl t_ section + str_ ) ; return props ; } else { hosts . add ( props ) ; return null ; } }
public string request ( string url , listener < string > listener , error listener error listener ) { this ( method . get , url , listener , error listener ) ; }
public abstract int count ( ) ;
private obj id ( long obj num , uid space ) { this . obj num = obj num ; this . space = space ; }
public http constraint element ( ) { this . empty role semantic = empty role semantic . permit ; this . transport guarantee = transport guarantee . none ; this . roles allowed = new string [ num_ ] ; }
public static duplicate event exception convert to api ( org . oscm . internal . types . exception . duplicate event exception old ex ) { return convert exception to api ( old ex , duplicate event exception . class ) ; }
public action mode start action mode ( action mode . callback callback ) { view parent parent = get parent ( ) ; if ( parent == null ) return null ; return parent . start action mode for child ( this , callback ) ; }
value adapter ( path path ) { this . path = path ; }
< t extends o > affinity matrix compute affinity matrix ( relation < t > relation , double initial scale ) ;
private void write object ( object output stream s ) throws io exception { s . default write object ( ) ; s . write int ( get style ( ) ) ; }
public void init ( key generation parameters param ) ;
public < t > completable future < t > submit ( command < t > command ) { state state = state ( ) ; if ( state == state . closed || state == state . expired ) { return futures . exceptional future ( new closed session exception ( str_ ) ) ; } return submitter . submit ( command ) ; }
public static http url connection to http connection ( request batch requests ) { url url = null ; try { if ( requests . size ( ) == num_ ) { request request = requests . get ( num_ ) ; url = new url ( request . get url for single request ( ) ) ; } else { url = new url ( server protocol . get graph url base ( ) ) ; } } catch ( malformed url exception e ) { throw new facebook exception ( str_ , e ) ; } http url connection connection ; try { connection = create connection ( url ) ; serialize to url connection ( requests , connection ) ; } catch ( io exception e ) { throw new facebook exception ( str_ , e ) ; } catch ( json exception e ) { throw new facebook exception ( str_ , e ) ; } return connection ; }
public void test _abort ( ) throws exception { class abort exception extends runtime exception { private static final long serial version uid = num_ ; } final bigdata sail sail = get sail ( ) ; try { sail . initialize ( ) ; final bigdata sail repository repo = new bigdata sail repository ( sail ) ; final repository connection store = repo . get read write connection ( ) ; store . set auto commit ( bool_ ) ; store . rollback ( ) ; final uri s = uri ( str_ ) , p = uri ( str_ ) , o = uri ( str_ ) ; try { store . add ( stmt ( s , p , o ) ) ; assert true ( store . has statement ( s , p , o , bool_ ) ) ; store . rollback ( ) ; assert false ( store . has statement ( s , p , o , bool_ ) ) ; } finally { store . close ( ) ; } } finally { sail . _ _tear down unit test ( ) ; } }
public void write request data ( g data request req , object source ) throws io exception { write request data ( req , new client output properties ( req , source ) , source ) ; }
public boolean contains ( string name ) throws users repository exception { try { final session session = login ( ) ; try { final node root node = session . get root node ( ) ; final string path = user s_ path + str_ + to safe name ( name . to lower case ( ) ) ; root node . get node ( path ) ; return bool_ ; } finally { session . logout ( ) ; } } catch ( path not found exception e ) { if ( get logger ( ) . is debug enabled ( ) ) { get logger ( ) . debug ( str_ + name , e ) ; } } catch ( repository exception e ) { throw new users repository exception ( str_ + name , e ) ; } return bool_ ; }
public void after member added ( member added event member added event ) { }
list < dashboard > find shared dashboards ( ) ;
public void add extended property ( extended property extended property ) { get extended properties ( ) . add ( extended property ) ; }
public abstract void shuffle ( ) ;
public synchronized long size ( ) { return size ; }
private void write attribute ( as n1 writer stream , attribute a ) throws io exception { stream . write start sequence ( ) ; stream . write octet string ( a . get attribute description ( ) . to string ( ) ) ; stream . write start set ( ) ; for ( byte string value : a ) { stream . write octet string ( value ) ; } stream . write end sequence ( ) ; stream . write end sequence ( ) ; }
public static view drag helper create ( view group for parent , float sensitivity , callback cb ) { final view drag helper helper = create ( for parent , cb ) ; helper . m touch slop = ( int ) ( helper . m touch slop * ( num_ / sensitivity ) ) ; return helper ; }
boolean is primitive ( ) ;
public st create string template internally ( compiled st impl ) { st st = create string template ( impl ) ; if ( track creation events && st . debug state != null ) { st . debug state . new st event = null ; } return st ; }
public void make immutable ( ) { super . make immutable ( ) ; }
public void draw button ( minecraft par 1 minecraft , int par 2 , int par 3 ) { if ( this . visible ) { boolean flag = par 2 >= this . x position && par 3 >= this . y position && par 2 < this . x position + this . width && par 3 < this . y position + this . height ; g l 1 1 . gl color 4f ( num_ , num_ , num_ , num_ ) ; par 1 minecraft . get texture manager ( ) . bind texture ( book gui textures ) ; int k = num_ ; int l = num_ ; if ( flag ) { k += num_ ; } if ( ! this . next page ) { l += num_ ; } this . draw textured modal rect ( this . x position , this . y position , k , l , num_ , num_ ) ; } }
void draw circle ( lat lng lat lng , int radius , int border color , int border width ) ;
public boolean is account grant error ( ) { return ( error != null && error . equals ignore case ( erro r_ invali d_ grant ) ) ; }
boolean acquire tie lock ( ) ;
public void test single file ( ) throws exception { j flex mojo mojo = new mojo ( str_ ) ; mojo . execute ( ) ; file produced = get expected output file ( mojo ) ; assert true ( str_ + produced , produced . is file ( ) ) ; long size = produced . length ( ) ; boolean correct size = ( size > num_ ) && ( size < num_ ) ; assert true ( str_ + size , correct size ) ; }
public void end clear send ( long start time , boolean failed ) { long duration = get stat time ( ) - start time ; end client op send ( duration , failed ) ; this . send stats . inc int ( clear send in progress id , - num_ ) ; int end clear send id ; if ( failed ) { end clear send id = clear send failed id ; } else { end clear send id = clear send id ; } this . send stats . inc int ( end clear send id , num_ ) ; this . stats . inc long ( clear send duration id , duration ) ; }
public void init ( map < string , string > config params ) throws floodlight module exception { this . module loader state = module loader state . init ; this . message listeners = new concurrent hash map < of type , listener dispatcher < of type , iof message listener > > ( ) ; this . ha listeners = new listener dispatcher < ha listener type marker , iha listener > ( ) ; this . controller node i ps cache = new hash map < string , string > ( ) ; this . updates = new linked blocking queue < i update > ( ) ; this . provider map = new hash map < string , list < i info provider > > ( ) ; set config params ( config params ) ; ha role initial role = get initial role ( config params ) ; this . notified role = initial role ; this . shutdown service = new shutdown service impl ( ) ; this . role manager = new role manager ( this , this . shutdown service , this . notified role , initia l_ rol e_ chang e_ description ) ; this . timer = new hashed wheel timer ( ) ; this . switch service . register logical of message category ( logical of message category . main ) ; this . switch service . add of switch listener ( new notification switch listener ( ) ) ; this . counters = new controller counters ( debug counter service ) ; }
protected string extract expected mime type from method ( method method ) { request mapping request mapping = get request mapping ( method ) ; if ( request mapping != null ) { if ( request mapping . consumes ( ) != null && request mapping . consumes ( ) . length > num_ ) { return request mapping . consumes ( ) [ num_ ] ; } } return super . extract mime type from method ( method ) ; }
public string print states ( ) { string builder state builder = new string builder ( ) ; for ( int i = num_ ; i < m state depository . size ( ) ; i ++ ) { state builder . append ( str_ ) . append ( m state depository . get ( i ) . to string ( ) ) . append ( str_ ) ; } return state builder . to string ( ) ; }
public static string replace unicode digits ( string number ) { string builder normalized digits = new string builder ( number . length ( ) ) ; for ( char c : number . to char array ( ) ) { int digit = character . digit ( c , num_ ) ; if ( digit != - num_ ) { normalized digits . append ( digit ) ; } else { normalized digits . append ( c ) ; } } return normalized digits . to string ( ) ; }
public native byte b alternate setting ( ) ;
public message builder append decoration ( string message , message decoration ... decorations ) { for ( message decoration decoration : decorations ) { str builder . append ( decoration . get prefix ( ) ) ; } str builder . append ( message ) ; for ( message decoration decoration : decorations ) { str builder . append ( decoration . get suffix ( ) ) ; } return this ; }
void signature ( signature data signature ) throws exception ;
public standard deviation with bias correction ( boolean bias correction ) { return new standard deviation ( variance . with bias correction ( bias correction ) ) ; }
public void update ( float time step ) ;
public completion analyzer ( analyzer analyzer , boolean preserve sep , boolean preserve position increments , int max graph expansions ) { super ( pe r_ fiel d_ reus e_ strategy ) ; this . analyzer = analyzer ; this . preserve sep = preserve sep ; this . preserve position increments = preserve position increments ; this . max graph expansions = max graph expansions ; }
private void update threshold ( int i ) { double fi = fcache [ i ] ; double f _tilde _i = b _low ; if ( i 0 _b [ i ] || i2 [ i ] ) f _tilde _i = fi + epsilon ; else if ( i 0 _a [ i ] || i1 [ i ] ) f _tilde _i = fi - epsilon ; double f _bar _i = b _up ; if ( i 0 _a [ i ] || i3 [ i ] ) f _bar _i = fi - epsilon ; else if ( i 0 _b [ i ] || i1 [ i ] ) f _bar _i = fi + epsilon ; if ( b _low < f _tilde _i ) { b _low = f _tilde _i ; i _low = i ; } if ( b _up > f _bar _i ) { b _up = f _bar _i ; i _up = i ; } }
boolean find account username registered ( string user name ) ;
public linked hash set < date > parse ( string text ) ;
public evidence builder ( final int evidence ) { final packet p = init ( evidence ) ; p . set command ( lo g_ create ) ; send ( p ) ; }
private string download pac content ( string url ) throws io exception { if ( url == null ) { throw new io exception ( str_ ) ; } set pac proxy selector enabled ( bool_ ) ; http url connection con = null ; try { con = setup http connection ( url ) ; if ( con . get response code ( ) != num_ ) { throw new io exception ( str_ + con . get response code ( ) + str_ + con . get response message ( ) ) ; } this . expire at millis = con . get expiration ( ) ; buffered reader r = get reader ( con ) ; string result = read all content ( r ) ; r . close ( ) ; return result ; } finally { set pac proxy selector enabled ( bool_ ) ; if ( con != null ) { con . disconnect ( ) ; } } }
private void add distribution locator config ( distribution locator config config ) { check read only ( ) ; this . locator configs . add ( config ) ; config changed ( ) ; }
public int counter ( ) { return _ctr ; }
public final unsigned subtract and get ( unsigned delta ) { return word . unsigned ( value . add and get ( - delta . raw value ( ) ) ) ; }
public void make blocking ( ) throws io exception { selectable channel c = this . the socket . get channel ( ) ; c . configure blocking ( bool_ ) ; }
abstract protected void do fade out ( ) ;
public static void init user interface ( ) { if ( client singleton repository . get user interface ( ) == null ) { client singleton repository . set user interface ( new mock user interface ( ) ) ; } }
public static boolean to boolean ( long l ) { return l != num_ ? boolean . true : boolean . false ; }
protected abstract void clear ( ) ;
public void sort ( comparator < frequent binary item set > comp ) { collections . sort ( m _sets , comp ) ; }
public boolean contains value ( ns object val ) { return val != null && dict . contains value ( val ) ; }
final public void clear namespaces ( ) { uri to prefix . clear ( ) ; }
private byte buffer copy ( byte buffer original ) { byte buffer cp = direct buf ? byte buffer . allocate direct ( original . remaining ( ) ) : byte buffer . allocate ( original . remaining ( ) ) ; cp . order ( order ) ; cp . put ( original ) ; cp . flip ( ) ; return cp ; }
public static string encode string ( string s ) { return new string ( encode ( s . get bytes ( ) ) ) ; }
public tailer ( file file , tailer listener listener , long delay millis , boolean end , int buf size ) { this ( file , listener , delay millis , end , bool_ , buf size ) ; }
protected void refresh piece jail ( ) { adjust piece jail ( ) ; board . redraw pieces and artifacts ( bool_ ) ; }
private void interpolate ( float [ ] spectrum ) { for ( int i = num_ ; i < spectrum . length ; i ++ ) { if ( spectrum [ i ] < previous spectrum [ i ] ) { double interpolation coefficient = num_ ; spectrum [ i ] = ( float ) ( previous spectrum [ i ] * interpolation coefficient ) ; } previous spectrum [ i ] = spectrum [ i ] ; } }
public static void update widgets ( context context , boolean service running ) { int [ ] app widget ids = find app widget ids ( context ) ; update widgets ( context , app widget ids , service running ) ; }
protected static string quote date ( java . sql . date x ) { if ( x == null ) { return str_ ; } return str_ + x . to string ( ) + str_ ; }
public static void main ( final string [ ] args ) { dom test case . do main ( hc _nodechildnodesappendchild . class , args ) ; }
private static void byte 2hex ( byte b , string buffer buf ) { char [ ] hex chars = { str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ } ; int high = ( ( b & num_ ) > > num_ ) ; int low = ( b & num_ ) ; buf . append ( hex chars [ high ] ) ; buf . append ( hex chars [ low ] ) ; }
private void register handle to engine ( ) { string url = get sync url ( ) ; i symmetric engine already register = registered engines by url . get ( url ) ; if ( already register == null || already register . equals ( this ) ) { if ( url != null ) { registered engines by url . put ( url , this ) ; } } else { log . warn ( str_ , get sync url ( ) ) ; } already register = registered engines by name . get ( get engine name ( ) ) ; if ( already register == null || already register . equals ( this ) ) { registered engines by name . put ( get engine name ( ) , this ) ; } else { throw new engine already registered exception ( str_ + get engine name ( ) ) ; } }
operation completion rs update user filter ( string user filter id , update user filter rq update rq , string user name , string project name ) ;
public void on ui reset ( ptr frame layout frame ) ;
private static void split add ( final double a [ ] , final double b [ ] , final double ans [ ] ) { ans [ num_ ] = a [ num_ ] + b [ num_ ] ; ans [ num_ ] = a [ num_ ] + b [ num_ ] ; resplit ( ans ) ; }
protected i status do run ( granual progress monitor monitor ) { try { internal run ( monitor ) ; } catch ( core exception e ) { cancel ( ) ; return new status ( i status . error , platform ui . plugi n_ id , i status . error , workbench messages . filtered items selection dialog _job error , e ) ; } return status . o k_ status ; }
public boolean has attribute with value ( final web element element , final string attribute , final string value ) { boolean result = bool_ ; try { bobcat wait . with timeout ( timeouts . small ) . until ( null ) ; } catch ( timeout exception e ) { result = bool_ ; } return result ; }
private string nested tags regex ( int depth ) { if ( depth == num_ ) { return str_ ; } else { return str_ + nested tags regex ( depth - num_ ) + str_ ; } }
public void make current ( ) { m egl core . make current ( m egl surface ) ; }
private standard tokens ( ) { }
public generic metric entity decompaction stream reader ( string metric name , search condition condition ) throws instantiation exception , illegal access exception , parse exception { ed = entity definition manager . get entity by service name ( service name ) ; check is metric ( ed ) ; reader = new generic entity stream reader ( service name , condition , metric name ) ; start = date time util . human date to seconds ( condition . get start time ( ) ) * num_ ; end = date time util . human date to seconds ( condition . get end time ( ) ) * num_ ; }
public simple statistics ( ) { super ( ) ; }
void draw ( graphics p _g , gdi context p _graphics _context , color [ ] p _color _arr , double p _intensity ) ;
public abstract xml stream reader create xml stream reader ( java . io . reader reader ) throws xml stream exception ;
public void clear ( ) { m strings . clear ( ) ; notify data set changed ( ) ; }
public synchronized long file count ( ) { return file count ; }
public object name pre register ( m bean server server , object name name ) throws java . lang . exception { return name ; }
public final void test remove helper text id ( ) { password edit text password edit text = new password edit text ( get context ( ) ) ; password edit text . add helper text id ( android . r . string . cancel ) ; password edit text . add helper text id ( android . r . string . copy ) ; password edit text . remove helper text id ( android . r . string . cancel ) ; password edit text . remove helper text id ( android . r . string . cancel ) ; assert equals ( num_ , password edit text . get helper texts ( ) . size ( ) ) ; assert equals ( get context ( ) . get text ( android . r . string . copy ) , password edit text . get helper texts ( ) . iterator ( ) . next ( ) ) ; }
protected boolean is closing quote ( word w ) { return w . form . equals ( str_ ) || w . form . equals ( str_ ) || w . form . equals ( str_ ) || w . form . equals ( str_ ) || w . form . equals ( str_ ) ; }
protected constant node create const var ( final value value ) throws visitor exception { final bigdata value v = vocab . get ( value ) ; if ( v == null ) throw new visitor exception ( str_ + value ) ; return new constant node ( v . get iv ( ) ) ; }
public array list < prediction > predictions ( ) { return m _delegate . predictions ( ) ; }
private static field find field ( object instance , string name ) throws no such field exception { for ( class < ? > clazz = instance . get class ( ) ; clazz != null ; clazz = clazz . get superclass ( ) ) { try { field field = clazz . get declared field ( name ) ; if ( ! field . is accessible ( ) ) { field . set accessible ( bool_ ) ; } return field ; } catch ( no such field exception e ) { } } throw new no such field exception ( str_ + name + str_ + instance . get class ( ) ) ; }
public void test compute classpath for jre ( ) throws core exception { assert equals ( num_ , java project a . get raw classpath ( ) . length ) ; list < file > actual cp = get list of files ( gwt compile runner . compute classpath ( java project a ) ) ; assert equals ( num_ , actual cp . size ( ) ) ; }
private static string low part ( final string text ) { final string sector ; final string [ ] sectors = media type . sectors ( text ) ; if ( sectors . length > num_ ) { sector = sectors [ num_ ] . trim ( ) ; } else { sector = str_ ; } return sector ; }
public static byte string create boolean value ( boolean b ) { return b ? server constants . tru e_ value : server constants . fals e_ value ; }
public xy data image annotation ( image image , double x , double y , double w , double h ) { this ( image , x , y , w , h , bool_ ) ; }
private activation ( ) { }
public static probe item descriptor discrete fill item ( string name , string description , item value formatter formatter , double data factor , long min value , long max value ) { return discrete outline item ( name , description , formatter , data factor , min value , max value , defaul t_ lin e_ width , null , defaul t_ color ) ; }
node ( e item ) { unsafe . put object ( this , item offset , item ) ; }
public void text ( char c , float x , float y ) { g . text ( c , x , y ) ; }
public void configure baud rate ( string rate ) { log . debug ( str_ + rate ) ; selected speed = rate ; super . configure baud rate ( rate ) ; }
public string to string ( ) { return get class ( ) . get name ( ) + str_ + field + str_ + attribute + str_ + begin index + str_ + end index + str_ ; }
boolean clear warnings ( ) ;
public boolean engine can resolve ( element element , string base uri , storage resolver storage ) { if ( xml utils . element is in signature space ( element , constants . _ ta g_ x 5 0 9 data ) || xml utils . element is in signature space ( element , constants . _ ta g_ keyname ) ) { return bool_ ; } return bool_ ; }
public static mac new instance ( final byte [ ] key , final int digest length ) { return new mac ( new param ( ) . set key ( key ) . set digest length ( digest length ) ) ; }
boolean has relationship ( vertex type , vertex target ) ;
void enable save button ( boolean enabled ) ;
public boolean has ( string key ) { return this . map . contains key ( key ) ; }
public void skip bytes ( long total num bytes to skip ) throws io exception ;
public static int min index ( double [ ] doubles ) { double minimum = num_ ; int min index = num_ ; for ( int i = num_ ; i < doubles . length ; i ++ ) { if ( ( i == num_ ) || ( doubles [ i ] < minimum ) ) { min index = i ; minimum = doubles [ i ] ; } } return min index ; }
public lm dirichlet similarity ( collection model collection model ) { this ( collection model , num_ ) ; }
protected abstract void scan jar file ( class loader loader , jar file file ) throws io exception ;
public boolean is genres ( ) { return genres ; }
public boolean is visible ( entity entity ) { return this . visible ; }
private void create recursivly ( string path ) throws keeper exception , interrupted exception { try { if ( zk . exists ( path , bool_ ) == null && path . length ( ) > num_ ) { string temp = path . substring ( num_ , path . last index of ( file . separator ) ) ; create recursivly ( temp ) ; zk . create ( path , null , ids . ope n_ ac l_ unsafe , create mode . persistent ) ; } else { return ; } } catch ( keeper exception e ) { throw e ; } catch ( interrupted exception e ) { throw e ; } }
session session ( boolean create ) ;
public collection < member > members ( ) { return members ; }
public j force panel ( force simulator fsim ) { this . fsim = fsim ; this . set background ( color . white ) ; init ui ( ) ; }
public void add window ( final managed window mw ) { if ( mw instanceof internal managed window ) { add dialog ( ( internal managed window ) mw ) ; } else { throw new illegal argument exception ( str_ + mw . get class ( ) . get name ( ) ) ; } }
public static instances use filter ( instances data , filter filter ) throws exception { for ( int i = num_ ; i < data . num instances ( ) ; i ++ ) { filter . input ( data . instance ( i ) ) ; } filter . batch finished ( ) ; instances new data = filter . get output format ( ) ; instance processed ; while ( ( processed = filter . output ( ) ) != null ) { new data . add ( processed ) ; } return new data ; }
public void run test ( ) throws throwable { document doc ; element element ; attr attribute ; attr new attribute 1 ; string attr value ; doc = ( document ) load ( str_ , bool_ ) ; element = doc . create element ns ( str_ , str_ ) ; attribute = doc . create attribute ns ( str_ , str_ ) ; new attribute 1 = element . set attribute node ns ( attribute ) ; attribute = element . get attribute node ns ( str_ , str_ ) ; attr value = attribute . get node value ( ) ; assert equals ( str_ , str_ , attr value ) ; }
invokers ( method type target type ) { this . target type = target type ; }
public boolean is inherited from rdn collective ( ) { return this . is inherited from rdn collective ; }
public static string to string ( final byte [ ] b 1 , string sep , final byte [ ] b 2 ) { return to string ( b 1 , num_ , b 1 . length ) + sep + to string ( b 2 , num_ , b 2 . length ) ; }
public void on session aborted ( contact id contact , termination reason reason ) ;
protected jvm mem mgr pool rel table meta create jvm mem mgr pool rel table meta node ( string table name , string group name , snmp mib mib , m bean server server ) { return new jvm mem mgr pool rel table meta ( mib , objectserver ) ; }
public static column from ord ( int i ) { if ( ( i < num_ ) || ( i >= column . values ( ) . length ) ) { throw new index out of bounds exception ( str_ ) ; } return column . values ( ) [ i ] ; }
public void test _get inner cause 0 1 _find _exact ( ) { throwable t = new runtime exception ( ) ; assert true ( t == get inner cause ( t , runtime exception . class ) ) ; }
boolean remove mapping ( object o ) { if ( ! ( o instanceof map . entry ) ) return bool_ ; entry < k , v > [ ] tab = get table ( ) ; map . entry < ? , ? > entry = ( map . entry < ? , ? > ) o ; object k = mask null ( entry . get key ( ) ) ; int h = hash ( k ) ; int i = index for ( h , tab . length ) ; entry < k , v > prev = tab [ i ] ; entry < k , v > e = prev ; while ( e != null ) { entry < k , v > next = e . next ; if ( h == e . hash && e . equals ( entry ) ) { mod count ++ ; size -- ; if ( prev == e ) tab [ i ] = next ; else prev . next = next ; return bool_ ; } prev = e ; e = next ; } return bool_ ; }
public int diff _levenshtein ( linked list < diff > diffs ) { int levenshtein = num_ ; int insertions = num_ ; int deletions = num_ ; for ( diff a diff : diffs ) { switch ( a diff . operation ) { case insert : insertions += a diff . text . length ( ) ; break ; case delete : deletions += a diff . text . length ( ) ; break ; case equal : levenshtein += math . max ( insertions , deletions ) ; insertions = num_ ; deletions = num_ ; break ; } } levenshtein += math . max ( insertions , deletions ) ; return levenshtein ; }
public void clear ( ) { set < data source > sources = new hash set < data source > ( this . sources ) ; for ( data source source : sources ) { remove ( source ) ; } }
public list < boolean > exists ( list < value > key values ) throws aerospike exception { list < boolean > target = new array list < boolean > ( ) ; for ( object value : key values ) { target . add ( exists ( value . get ( value ) ) ) ; } return target ; }
protected boolean can animate type ( int type ) { return type == svg types . typ e_ color || type == svg types . typ e_ paint ; }
protected abstract void append collection information ( tfs team project collection collection ) ;
public void validate downloaded s3 files ( string base directory , string s 3 key prefix , storage unit storage unit ) throws illegal state exception { validate downloaded s3 files ( base directory , s 3 key prefix , storage unit . get storage files ( ) ) ; }
void on search state changed ( boolean enabled ) ;
void implement interface methods ( class symbol c , class symbol site ) { for ( list < type > l = types . interfaces ( c . type ) ; l . non empty ( ) ; l = l . tail ) { class symbol i = ( class symbol ) l . head . tsym ; for ( scope . entry e = i . members ( ) . elems ; e != null ; e = e . sibling ) { if ( e . sym . kind == mth && ( e . sym . flags ( ) & static ) == num_ ) { method symbol abs meth = ( method symbol ) e . sym ; method symbol impl meth = abs meth . binary implementation ( site , types ) ; if ( impl meth == null ) add abstract method ( site , abs meth ) ; else if ( ( impl meth . flags ( ) & iproxy ) != num_ ) adjust abstract method ( site , impl meth , abs meth ) ; } } implement interface methods ( i , site ) ; } }
public void add result ( distributed member member id , t result of single execution ) ;
public < t > void insert ( list < t > list , t object , int position ) { list . add ( position , object ) ; notify item inserted ( position ) ; }
protected genomic coords genomic coords all chrom match in genome ( string query , genomic coords current gc ) throws io exception , invalid genomic coords exception { list < interval feature > matched features = find all chrom match in genome ( query , current gc ) ; if ( matched features . size ( ) == num_ ) { return current gc ; } string chrom = matched features . get ( num_ ) . get chrom ( ) ; int start from = matched features . get ( num_ ) . get from ( ) ; int end to = matched features . get ( matched features . size ( ) - num_ ) . get to ( ) ; genomic coords all matches gc = new genomic coords ( chrom , start from , end to , current gc . get sam seq dict ( ) , current gc . get user window size ( ) , current gc . get fasta file ( ) ) ; return all matches gc ; }
public parsed graph query ( string source string , tuple expr tuple expr , map < string , string > namespaces ) { this ( source string , tuple expr ) ; query namespaces = namespaces ; }
private void do signal ( node first ) { do { if ( ( first waiter = first . next waiter ) == null ) last waiter = null ; first . next waiter = null ; } while ( ! transfer for signal ( first ) && ( first = first waiter ) != null ) ; }
private bsp tree < euclidean 1 d > child before ( bsp tree < euclidean 1 d > node ) { if ( is direct ( node ) ) { return node . get minus ( ) ; } else { return node . get plus ( ) ; } }
public boolean is empty ( ) { return ! has data ; }
public json writer key ( string string ) throws json exception { if ( string == null ) { throw new json exception ( str_ ) ; } if ( this . mode == str_ ) { try { this . stack [ this . top - num_ ] . put once ( string , boolean . true ) ; if ( this . comma ) { this . writer . write ( str_ ) ; } this . writer . write ( json object . quote ( string ) ) ; this . writer . write ( str_ ) ; this . comma = bool_ ; this . mode = str_ ; return this ; } catch ( io exception e ) { throw new json exception ( e ) ; } } throw new json exception ( str_ ) ; }
public building block ( ) { raw data = new vector < string > ( ) ; }
void remove tickable ( world world , i daily tickable tickable ) ;
protected required runtime library dependency impl ( ) { super ( ) ; }
basic block split each block ( basic block bb , ir ir ) { if ( ir . options . l2 m_ ma x_ bloc k_ size <= num_ ) { throw new optimizing compiler exception ( str_ + str_ + ir . options . l2 m_ ma x_ bloc k_ size + str_ , bool_ ) ; } int remaining inst count = ir . options . l2 m_ ma x_ bloc k_ size ; enumeration < instruction > instructions = bb . forward real instr enumerator ( ) ; while ( instructions . has more elements ( ) ) { instruction inst = instructions . next element ( ) ; remaining inst count -- ; if ( remaining inst count <= num_ ) { if ( inst . is branch ( ) ) { return null ; } if ( ! instructions . has more elements ( ) ) { return null ; } return bb . split node with links at ( inst , ir ) ; } } return null ; }
public static void write to ( final serializer serializer , final string label , final quantity quantity ) { serializer . write long ( label , quantity . get raw ( ) ) ; }
public parse tree node build ( ) throws parse exception , illegal state exception , io exception { is = guess input source ( is ) ; cp = guess char producer ( cp , content , source map , meta , is , input stream , charset ) ; cache in source map ( source map , is , cp , content ) ; cache in message context ( mc , is ) ; type = guess content type ( cp , is , type ) ; parse tree node node = parse ( ) ; return node ; }
public synchronized t take ( object key ) { return remove ( key ) ; }
protected string [ ] read next ( line number reader reader ) throws io exception { string [ ] row def = null ; do { string next line = reader . read line ( ) ; if ( next line == null ) { has next = bool_ ; return row def ; } string [ ] r = parser . parse line multi ( next line ) ; if ( r . length > num_ ) { if ( row def == null ) { row def = r ; } else { string [ ] t = new string [ row def . length + r . length ] ; system . arraycopy ( row def , num_ , t , num_ , row def . length ) ; system . arraycopy ( r , num_ , t , row def . length , r . length ) ; row def = t ; } } } while ( parser . is pending ( ) ) ; return row def ; }
public void do post ( http servlet request request , http servlet response response ) throws servlet exception , io exception { do get ( request , response ) ; }
private string find category slug name ( string name , array list < category > list ) { for ( category a : list ) { if ( a . get name ( ) . equals ( name ) ) { return a . get slug name ( ) ; } } return str_ ; }
void execute ( object ... input ) ;
public static object execute ( executable pool pool , local region region , object key ) { abstract op op = new get entry op impl ( region , key ) ; return pool . execute ( op ) ; }
public boolean dns domain is ( string host , string domain ) { return host . ends with ( domain ) ; }
public world create world from seed ( world seed world seed , world type world type ) throws illegal state exception , minecraft interface exception { minecraft interface minecraft interface = this . minecraft interface ; if ( minecraft interface != null ) { return world builder . from seed ( minecraft interface , world seed , world type ) ; } else { throw new illegal state exception ( str_ ) ; } }
public coal source ( ) { this ( str_ ) ; }
public static boolean show detailed information ( ) { return is shift key down ( ) ; }
public storage file system [ ] query storage file systems ( string [ ] file system ) throws invalid argument , invalid session , storage fault , not implemented { final string method name = str_ ; log . info ( method name + str_ ) ; if ( file system != null ) { log . info ( method name + str_ + arrays . as list ( file system ) ) ; } ssl util . check http request ( bool_ , bool_ ) ; sos manager sos manager = context manager . get sos manager ( ) ; storage file system [ ] file systems = sos manager . query storage file systems ( file system ) ; log . info ( method name + str_ + file systems . length + str_ ) ; return file systems ; }
public void test int sort ( ) throws exception { check sort missing default ( str_ , str_ , str_ ) ; }
public uri delete ( string entity id ) { uri builder builder = api builder ( ) ; builder . add parameter ( str_ , str_ ) ; builder . add parameter ( str_ , entity id ) ; return build ( builder ) ; }
public future < repl dbms header > wait for committed ( long seqno ) throws interrupted exception ;
private static void check valid rules ( set < string > enabled rules , set < string > specified rules ) throws cli argument parser exception { if ( ! enabled rules . contains all ( specified rules ) ) { specified rules . remove all ( enabled rules ) ; throw new cli argument parser exception ( str_ + specified rules ) ; } }
public static void select reveal in default views ( object element ) { for ( string view id : defaul t_ vie w_ ids ) { select reveal ( element , view id ) ; } }
public static m container copy ( m web project project , mc stage stage , string path ) { m container cc = get direct ( stage . get ctx ( ) , stage . get c m_ c stage _ id ( ) , stage . get _ trx name ( ) ) ; if ( cc == null ) cc = new m container ( stage . get ctx ( ) , num_ , stage . get _ trx name ( ) ) ; cc . set stage ( project , stage , path ) ; cc . save ( ) ; if ( ! stage . is summary ( ) ) { cc . update elements ( project , stage , stage . get _ trx name ( ) ) ; cc . update t tables ( project , stage , stage . get _ trx name ( ) ) ; } return cc ; }
public static integer enocsi ( ) { return get platform error codes ( ) . enocsi ( ) ; }
public static index lookup batch create fake index lookup batch ( table filter filter ) { return new fake lookup batch ( filter ) ; }
protected media name ( int value ) { super ( value ) ; }
public void resumed ( process process ) ;
public void validate parameters ( list < parameter > parameters ) { if ( ! collection utils . is empty ( parameters ) ) { set < string > parameter name validation set = new hash set < > ( ) ; for ( parameter parameter : parameters ) { assert . has text ( parameter . get name ( ) , str_ ) ; parameter . set name ( parameter . get name ( ) . trim ( ) ) ; string lowercase parameter name = parameter . get name ( ) . to lower case ( ) ; assert . is true ( ! parameter name validation set . contains ( lowercase parameter name ) , str_ + parameter . get name ( ) ) ; parameter name validation set . add ( lowercase parameter name ) ; } } }
public abstract void return operation ( abstract insn node insn , v value , v expected ) throws analyzer exception ;
public static double cross track distance deg ( double lat 1 , double lon 1 , double lat 2 , double lon 2 , double lat q , double lon q , double dist 1 q ) { return cross track distance rad ( math util . deg 2rad ( lat 1 ) , math util . deg 2rad ( lon 1 ) , math util . deg 2rad ( lat 2 ) , math util . deg 2rad ( lon 2 ) , math util . deg 2rad ( lat q ) , math util . deg 2rad ( lon q ) , dist 1 q ) ; }
public boolean is limit enabled ( ) { return this . limit enabled ; }
public options put ( string option , boolean value ) { if ( value == null ) { return remove ( option ) ; } options . put ( option , boolean . to string ( value ) ) ; return this ; }
public static import declaration create empty declaration ( range range ) { return new import declaration ( range ) ; }
public static void remove on opinion update listener ( on opinion update listener on opinion update listener ) { synchronized ( on opinion update listeners ) { remove from weak references ( on opinion update listeners , on opinion update listener ) ; } }
public void logout ( native app driver driver , string header , string logout button , string email text box , boolean is android ) throws interrupted exception { thread . sleep ( num_ ) ; driver . click element by id ( header ) ; driver . click element by id ( logout button ) ; driver . clear input by id ( email text box ) ; if ( is android ) { driver . hide keyboard ( ) ; } }
protected suspension record ( ) { super ( null ) ; }
void header row index updated ( int new header row index ) ;
public void decompress ( byte [ ] dest , byte [ ] src , int destoffs , int srcoffs , int len ) { for ( int i = num_ ; i < len ; i ++ ) { if ( srcoffs >= src . length ) return ; int d = src [ srcoffs ++ ] ; d &= num_ ; for ( int j = num_ ; j < num_ ; j ++ ) { boolean curbit = ( ( d & num_ ) != num_ ) ; boolean lastbit = this . lastbit ; ctx _update ( curbit ) ; d >>= num_ ; int blevel = ( curbit == lastbit ? level : ( ( flastlevel + level ) > > num_ ) ) ; flastlevel = level ; lpflevel += ( ( lp f_ strength * ( blevel - lpflevel ) + num_ ) > > num_ ) ; dest [ destoffs ++ ] = ( byte ) ( lpflevel ) ; } } }
public static like expression not like ( expression left , expression right , expression escape ) { return new like expression ( left , right , escape , bool_ ) ; }
public void add graph ( final graph graph ) { if ( graph == null ) { throw new illegal argument exception ( str_ ) ; } graphs . add ( graph ) ; }
private boolean is in thumb range ( float touch x , double normalized thumb value ) { return math . abs ( touch x - normalized to screen ( normalized thumb value ) ) <= thumb half width ; }
protected void process element ( ixml reader reader , ixml entity resolver entity resolver ) throws exception { string str = xml util . read ( reader , str_ ) ; char ch = str . char at ( num_ ) ; if ( ch != str_ ) { xml util . skip tag ( reader ) ; return ; } str = xml util . read ( reader , str_ ) ; ch = str . char at ( num_ ) ; switch ( ch ) { case str_ : xml util . skip comment ( reader ) ; break ; case str_ : this . process conditional section ( reader , entity resolver ) ; break ; case str_ : this . process entity ( reader , entity resolver ) ; break ; case str_ : this . process att list ( reader , entity resolver ) ; break ; default : xml util . skip tag ( reader ) ; } }
protected abstract void du update geometry vertices ( ) ;
public contains extended ( expression expression 1 , expression expression 2 ) { super ( expression 1 , expression 2 ) ; }
public synchronized int write ( input stream in ) throws io exception { int read count = num_ ; int in buffer pos = count - filled buffer sum ; int n = in . read ( current buffer , in buffer pos , current buffer . length - in buffer pos ) ; while ( n != - num_ ) { read count += n ; in buffer pos += n ; count += n ; if ( in buffer pos == current buffer . length ) { need new buffer ( current buffer . length ) ; in buffer pos = num_ ; } n = in . read ( current buffer , in buffer pos , current buffer . length - in buffer pos ) ; } return read count ; }
public void on view position changed ( view changed view , int left , int top , int dx , int dy ) { }
public average link dissimilarity ( distance metric dm ) { super ( dm ) ; }
public rectangle intersects segment visitor ( polygon rectangle ) { rect env = rectangle . get envelope internal ( ) ; rect intersector = new rectangle line intersector ( rect env ) ; }
public static string cancelled watermark absolute path ( ) { final http servlet request request = servlet action context . get request ( ) ; final string url = web utils . extract request domain url ( request , bool_ ) ; final string image path = url . concat ( report constants . imag e_ contex t_ path ) . concat ( str_ ) ; return image path ; }
public static string create link for spreadsheet ( string a html ) { return url util . create link for spreadsheet ( url util . get href ( a html ) , url util . get name ( a html ) ) ; }
private boolean init ( ) { i object file storage < application config > app config storage = new application config storage ( ) ; new app config = app config storage . load from folder ( new release fs . get download folder ( ) ) ; if ( new app config == null ) { set result for error ( chcp error . loade d_ versio n_ o f_ applicatio n_ confi g_ no t_ found ) ; return bool_ ; } i object file storage < content manifest > manifest storage = new content manifest storage ( ) ; content manifest old manifest = manifest storage . load from folder ( current release fs . get www folder ( ) ) ; if ( old manifest == null ) { set result for error ( chcp error . loca l_ versio n_ o f_ manifes t_ no t_ found ) ; return bool_ ; } content manifest new manifest = manifest storage . load from folder ( new release fs . get download folder ( ) ) ; if ( new manifest == null ) { set result for error ( chcp error . loade d_ versio n_ o f_ manifes t_ no t_ found ) ; return bool_ ; } manifest diff = old manifest . calculate difference ( new manifest ) ; return bool_ ; }
public edge lookup edge by id ( int id ) { iterator < edge > i = edge iterator ( ) ; while ( i . has next ( ) ) { edge edge = i . next ( ) ; if ( edge . get id ( ) == id ) { return edge ; } } return null ; }
public boolean pause playback ( ) { try { get current media player ( ) . pause ( ) ; string [ ] update flags = new string [ ] { common . updat e_ playbac k_ controls } ; string [ ] flag values = new string [ ] { str_ } ; m app . broadcast update ui command ( update flags , flag values ) ; update notification ( m app . get service ( ) . get current song ( ) ) ; update widgets ( ) ; scrobble track ( simple last fm helper . pause ) ; } catch ( exception e ) { e . print stack trace ( ) ; return bool_ ; } return bool_ ; }
iterable < metric result < distribution result > > distributions ( ) ;
abstract void to xml ( string builder xml , int level ) ;
public void add annotation ( method ann ) throws object store config exception { if ( annotations . contains key ( ann ) ) throw new object store config exception ( ann . to string ( ) + str_ ) ; annotations . put ( ann , null ) ; }
public static compiler settings default settings ( ) { return compiler settings . of ( defaul t_ cp u_ accountin g_ mode , defaul t_ cons t_ foldin g_ mode , defaul t_ cons t_ cachin g_ mode , defaul t_ byt e_ strin g_ mode , defaul t_ nod e_ siz e_ limit ) ; }
boolean has any open incognito tabs ( ) { for ( tab tab : m tabs ) { if ( tab . get web view ( ) != null && tab . get web view ( ) . is private browsing enabled ( ) ) { return bool_ ; } } return bool_ ; }
public abstract object clone ( ) ;
private void write attribute ( java . lang . string namespace , java . lang . string att name , java . lang . string att value , javax . xml . stream . xml stream writer xml writer ) throws javax . xml . stream . xml stream exception { if ( namespace . equals ( str_ ) ) { xml writer . write attribute ( att name , att value ) ; } else { register prefix ( xml writer , namespace ) ; xml writer . write attribute ( namespace , att name , att value ) ; } }
public static boolean runs on dev env ( ) { return runtime mode . development == latkes . get runtime mode ( ) ; }
private gregorian calendar new calendar ( ) { return new gregorian calendar ( m time zone , m locale ) ; }
void clear ( ) { arrays . fill ( entries , num_ , size , null ) ; size = num_ ; }
public boolean is set annotation _type ( ) { return this . annotation _type != null ; }
public static request new post open graph object request ( session session , string type , string title , string image url , string url , string description , graph object object properties , callback callback ) { open graph object open graph object = open graph object . factory . create for post ( open graph object . class , type , title , image url , url , description ) ; if ( object properties != null ) { open graph object . set data ( object properties ) ; } return new post open graph object request ( session , open graph object , callback ) ; }
private static synchronized void init jndi context ( ) throws sync factory exception { if ( ( ic != null ) && ( lazy jndi ctx refresh == bool_ ) ) { try { parse properties ( parse jndi context ( ) ) ; lazy jndi ctx refresh = bool_ ; } catch ( naming exception e ) { e . print stack trace ( ) ; throw new sync factory exception ( str_ + e . get explanation ( ) ) ; } catch ( exception e ) { e . print stack trace ( ) ; throw new sync factory exception ( str_ + e . get message ( ) ) ; } } }
public data uri ( data uri original ) { this ( original . content type , ( original . data == null ) ? null : original . data . clone ( ) , original . text ) ; }
protected final void restore state ( ) { likelihood known = stored likelihood known ; log likelihood = stored log likelihood ; }
public static matcher < printable result > is successful ( ) { return failure count is ( num_ ) ; }
public void run test ( ) throws throwable { document doc ; node list element list ; node name node ; character data child ; doc = ( document ) load ( str_ , bool_ ) ; element list = doc . get elements by tag name ( str_ ) ; name node = element list . item ( num_ ) ; child = ( character data ) name node . get first child ( ) ; { boolean success = bool_ ; try { child . insert data ( num_ , str_ ) ; } catch ( dom exception ex ) { success = ( ex . code == dom exception . inde x_ siz e_ err ) ; } assert true ( str_ , success ) ; } }
public string to string ( ) { long diff = diff ( ) ; long millis = diff % num_ ; long secs = ( diff / num_ ) % num_ ; long mins = ( diff / ( num_ * num_ ) ) % num_ ; long hs = ( diff / ( num_ * num_ ) ) % num_ ; long days = diff / ( num_ * num_ * num_ ) ; if ( days > num_ ) return days + str_ + hs + str_ + mins + str_ + secs + str_ + millis + str_ ; if ( hs > num_ ) return hs + str_ + mins + str_ + secs + str_ + millis + str_ ; if ( mins > num_ ) return mins + str_ + secs + str_ + millis + str_ ; if ( secs > num_ ) return secs + str_ + millis + str_ ; return millis + str_ ; }
boolean can contain focus owner ( component focus owner candidate ) { return super . can contain focus owner ( focus owner candidate ) && is focusable window ( ) ; }
public boolean is variable ( long arc ) { switch ( ( int ) arc ) { case num_ : case num_ : return bool_ ; default : break ; } return bool_ ; }
public _ merge options ( ) { super ( ) ; }
void delete rule ( int index ) throws dom exception ;
public void draw figure ( graphics 2 d g ) { affine transform saved transform = null ; if ( get ( transform ) != null ) { saved transform = g . get transform ( ) ; g . transform ( get ( transform ) ) ; } if ( get ( fil l_ style ) != odg constants . fill style . none ) { paint paint = odg attribute keys . get fill paint ( this ) ; if ( paint != null ) { g . set paint ( paint ) ; draw fill ( g ) ; } } if ( get ( strok e_ style ) != odg constants . stroke style . none ) { paint paint = odg attribute keys . get stroke paint ( this ) ; if ( paint != null ) { g . set paint ( paint ) ; g . set stroke ( odg attribute keys . get stroke ( this ) ) ; draw stroke ( g ) ; } } if ( get ( transform ) != null ) { g . set transform ( saved transform ) ; } }
private void update progress ( string progress label , int progress ) { if ( my host != null && ( ( progress != previous progress ) || ( ! progress label . equals ( previous progress label ) ) ) ) { my host . update progress ( progress label , progress ) ; } previous progress = progress ; previous progress label = progress label ; }
public boolean is section header position ( int position ) { if ( is header == null ) { setup indices ( ) ; } return is header [ position ] ; }
public void begin accept 3 ( web request the request ) { the request . add header ( str_ , str_ ) ; }
protected void init from jar ( file file ) { jar file jar ; jar entry entry ; enumeration < jar entry > enm ; if ( verbose ) { system . out . println ( str_ + file ) ; } if ( ! file . exists ( ) ) { system . out . println ( str_ + file ) ; return ; } try { jar = new jar file ( file ) ; enm = jar . entries ( ) ; while ( enm . has more elements ( ) ) { entry = enm . next element ( ) ; if ( entry . get name ( ) . ends with ( str_ ) ) { add ( entry . get name ( ) ) ; } } init from manifest ( jar . get manifest ( ) ) ; } catch ( exception e ) { e . print stack trace ( ) ; } }
private string proxy to string ( object proxy ) { class [ ] interfaces = proxy . get class ( ) . get interfaces ( ) ; class iface = null ; for ( int i = interfaces . length ; -- i >= num_ ; iface = interfaces [ i ] ) { if ( interfaces [ i ] == remote method control . class ) { break ; } } if ( iface == null ) { return str_ + this + str_ ; } string n = iface . get name ( ) ; int dot = n . last index of ( str_ ) ; if ( dot >= num_ ) { n = n . substring ( dot + num_ ) ; } return str_ + n + str_ + this + str_ ; }
public j params text ( ) { init components ( ) ; set label ( app local . get int string ( str_ ) ) ; set type ( formats . string ) ; }
public void request assign suc return route ( int node id ) { enqueue ( new assign suc return route message class ( ) . do request ( node id , get callback id ( ) ) ) ; }
public static string hash key for disk ( string key ) { string cache key ; try { final message digest m digest = message digest . get instance ( str_ ) ; m digest . update ( key . get bytes ( ) ) ; cache key = bytes to hex string ( m digest . digest ( ) ) ; } catch ( no such algorithm exception e ) { cache key = string . value of ( key . hash code ( ) ) ; } return cache key ; }
private void write q name ( javax . xml . namespace . q name qname , javax . xml . stream . xml stream writer xml writer ) throws javax . xml . stream . xml stream exception { java . lang . string namespace uri = qname . get namespace uri ( ) ; if ( namespace uri != null ) { java . lang . string prefix = xml writer . get prefix ( namespace uri ) ; if ( prefix == null ) { prefix = generate prefix ( namespace uri ) ; xml writer . write namespace ( prefix , namespace uri ) ; xml writer . set prefix ( prefix , namespace uri ) ; } if ( prefix . trim ( ) . length ( ) > num_ ) { xml writer . write characters ( prefix + str_ + org . apache . axis 2 . databinding . utils . converter util . convert to string ( qname ) ) ; } else { xml writer . write characters ( org . apache . axis 2 . databinding . utils . converter util . convert to string ( qname ) ) ; } } else { xml writer . write characters ( org . apache . axis 2 . databinding . utils . converter util . convert to string ( qname ) ) ; } }
public void system ready ( ) { register for telephony intents ( ) ; register for alarms ( ) ; register for connectivity intents ( ) ; m thread = new handler thread ( tag ) ; m thread . start ( ) ; m handler = new my handler ( m thread . get looper ( ) ) ; m handler . obtain message ( even t_ pol l_ networ k_ time ) . send to target ( ) ; m settings observer = new settings observer ( m handler , even t_ aut o_ tim e_ changed ) ; m settings observer . observe ( m context ) ; }
public entitlement ( string application name , string resource name , map < string , boolean > action values ) { set application name ( application name ) ; set resource name ( resource name ) ; set action values ( action values ) ; }
public boolean is minimized ( ) { return ! content . is visible ( ) ; }
public pooled byte buffer input stream ( pooled byte buffer pooled byte buffer ) { super ( ) ; preconditions . check argument ( ! pooled byte buffer . is closed ( ) ) ; m pooled byte buffer = preconditions . check not null ( pooled byte buffer ) ; m offset = num_ ; m mark = num_ ; }
void visit compilation unit ( javac node top , jc compilation unit unit ) ;
void activate object ( k key , pooled object < v > p ) throws exception ;
public final double split crit value ( distribution bags , double totalno inst , double numerator ) { double denumerator ; denumerator = split ent ( bags , totalno inst ) ; if ( utils . eq ( denumerator , num_ ) ) { return num_ ; } denumerator = denumerator / totalno inst ; return numerator / denumerator ; }
protected static double calc posterior ( double f , double alpha , double mu , double sigma , double lambda ) { final double pi = calc p _i ( f , mu , sigma ) ; final double qi = calc q _i ( f , lambda ) ; return ( alpha * pi ) / ( alpha * pi + ( num_ - alpha ) * qi ) ; }
public boolean is multiple lines ( ) { return is multiple lines ; }
public static map to map ( object o , map default value ) { return to map ( o , bool_ , default value ) ; }
private void check not started ( ) { if ( is started ( ) ) { throw new illegal state exception ( str_ ) ; } }
public boolean is captured view under ( int x , int y ) { return is view under ( m captured view , x , y ) ; }
private static char parse escaped sequence ( string character iterator iterator ) throws unsupported encoding exception { char c = iterator . next ( ) ; switch ( c ) { case str_ : case str_ : case str_ : case str_ : case str_ : case str_ : return c ; case str_ : case str_ : { string unicode value = new string ( new char [ ] { iterator . next ( ) , iterator . next ( ) , iterator . next ( ) , iterator . next ( ) } ) ; return ( char ) integer . parse int ( unicode value , num_ ) ; } default : { string num = new string ( new char [ ] { c , iterator . next ( ) , iterator . next ( ) } ) ; return ( char ) integer . parse int ( num , num_ ) ; } } }
private boolean check recover point export mask ( un managed export mask mask , list < initiator > initiators , set < uri > rp port initiators ) { string builder non recover point initiators = new string builder ( ) ; int rp port initiator count = num_ ; for ( initiator init : initiators ) { if ( rp port initiators . contains ( init . get id ( ) ) ) { s _logger . info ( str_ , mask . get mask name ( ) , init . get initiator port ( ) ) ; rp port initiator count ++ ; } else { non recover point initiators . append ( init . get initiator port ( ) ) . append ( str_ ) ; } } if ( rp port initiator count > num_ ) { s _logger . info ( str_ , mask . get mask name ( ) , rp port initiator count ) ; if ( rp port initiator count < initiators . size ( ) ) { s _logger . warn ( str_ + str_ + non recover point initiators ) ; } return bool_ ; } return bool_ ; }
public boolean has had response delivered ( ) { return m response delivered ; }
public static string app transition to string ( int transition ) { switch ( transition ) { case transi t_ unset : { return str_ ; } case transi t_ none : { return str_ ; } case transi t_ exi t_ mask : { return str_ ; } case transi t_ activit y_ open : { return str_ ; } case transi t_ activit y_ close : { return str_ ; } case transi t_ tas k_ open : { return str_ ; } case transi t_ tas k_ close : { return str_ ; } case transi t_ tas k_ t o_ front : { return str_ ; } case transi t_ tas k_ t o_ back : { return str_ ; } case transi t_ wallpape r_ close : { return str_ ; } case transi t_ wallpape r_ open : { return str_ ; } case transi t_ wallpape r_ intr a_ open : { return str_ ; } case transi t_ wallpape r_ intr a_ close : { return str_ ; } default : { return str_ ; } } }
public abstract pooled byte buffer to byte buffer ( ) ;
void remove range ( range range ) { if ( range == null ) return ; if ( ranges == null ) return ; remove stale range references ( ) ; iterator i = ranges . iterator ( ) ; while ( i . has next ( ) ) { object other range = ( ( reference ) i . next ( ) ) . get ( ) ; if ( other range == range ) { i . remove ( ) ; return ; } else if ( other range == null ) { i . remove ( ) ; } } }
public polygons set ( final double x min , final double x max , final double y min , final double y max , final double tolerance ) { super ( box boundary ( x min , x max , y min , y max , tolerance ) , tolerance ) ; }
private t3 < integer , integer , byte [ ] > random key ( random rnd ) { return keys [ rnd . next int ( keys . length ) ] ; }
public void rebind ( name name , object obj ) throws naming exception { check is destroyed ( ) ; name parsed name = get parsed name ( name ) ; if ( parsed name . size ( ) == num_ || parsed name . get ( num_ ) . length ( ) == num_ ) { throw new invalid name exception ( localized strings . context impl _ nam e_ ca n_ no t_ b e_ empty . to localized string ( ) ) ; } string name to bind = parsed name . get ( num_ ) ; if ( parsed name . size ( ) == num_ ) { ctx maps . put ( name to bind , obj ) ; } else { object bound object = ctx maps . get ( name to bind ) ; if ( bound object instanceof context ) { ( ( context ) bound object ) . bind ( parsed name . get suffix ( num_ ) , obj ) ; } else { if ( bound object == null ) { context sub = create subcontext ( name to bind ) ; sub . bind ( parsed name . get suffix ( num_ ) , obj ) ; } else { throw new not context exception ( localized strings . context impl _ expecte d_ contex t_ bu t_ foun d _ 0 . to localized string ( bound object ) ) ; } } } }
public static void start edit folder activity ( context context , bookmark id id to edit ) { intent intent = new intent ( context , enhanced bookmark add edit folder activity . class ) ; intent . put extra ( inten t_ i s_ ad d_ mode , bool_ ) ; intent . put extra ( inten t_ bookmar k_ id , id to edit . to string ( ) ) ; context . start activity ( intent ) ; }
public void execute ( string sql ) throws sql exception ;
public static boolean is empty ( final string str , final boolean trim ) { if ( ! trim ) return is empty ( str ) ; return str == null || str . trim ( ) . length ( ) == num_ ; }
public void clear ( ) { this . ch = null ; this . offset = num_ ; this . length = - num_ ; }
public boolean is set cursor request ( ) { return this . cursor request != null ; }
public boolean is dynazoom available ( string user agent ) { if ( this . default master || this . is empty ( ) ) return bool_ ; munin node node = get children ( ) . get ( num_ ) ; if ( node == null ) return bool_ ; munin plugin plugin = node . get plugin ( num_ ) ; return plugin != null && is dynazoom available ( plugin , user agent ) ; }
public boolean has archive total failure ( ) { return has extension ( archive total failure . class ) ; }
public replica offline msg ( byte [ ] in ) throws data format exception { try { final byte array scanner scanner = new byte array scanner ( in ) ; final byte msg type = scanner . next byte ( ) ; if ( msg type != ms g_ typ e_ replic a_ offline ) { throw new data format exception ( str_ + get class ( ) . get simple name ( ) + str_ + msg type ) ; } protocol version = scanner . next short ( ) ; csn = scanner . next csn ( ) ; if ( ! scanner . is empty ( ) ) { throw new data format exception ( str_ + get class ( ) . get simple name ( ) ) ; } } catch ( runtime exception e ) { throw new data format exception ( str_ + get class ( ) . get simple name ( ) ) ; } }
public void notify request dialog observers ( npc npc ) { notify observers ( observer type . npcdialogrequest , npc ) ; }
protected char decoder create char decoder ( input stream is , string enc ) throws io exception { char decoder factory cdf = ( char decoder factory ) char decoder factories . get ( enc . to upper case ( ) ) ; if ( cdf != null ) { return cdf . create char decoder ( is ) ; } string e = encoding utilities . java encoding ( enc ) ; if ( e == null ) { e = enc ; } return new generic decoder ( is , e ) ; }
private void color loops ( ) { try { for ( final i navi view node current node : get graph ( ) . get nodes ( ) ) { if ( current node . get parents ( ) . is empty ( ) ) { c loop highlighter . color loops ( get graph ( ) , current node ) ; break ; } } } catch ( final malformed graph exception exception ) { navi logger . warning ( str_ ) ; } }
void on pattern cell added ( ) ;
activity create activity from coord ( string act type , coord coord ) ;
public list < i message > delete before ( i message message ) throws rate limit exception , discord exception , missing permissions exception { return delete before ( index of ( message ) ) ; }
public double actual ( ) { return m _ actual ; }
public void on target activity invoked ( context context ) throws transient network disconnection exception , no connection exception ;
public boolean is a d_ override _ dict ( ) { object oo = get _ value ( columnnam e_ a d_ override _ dict ) ; if ( oo != null ) { if ( oo instanceof boolean ) return ( ( boolean ) oo ) . boolean value ( ) ; return str_ . equals ( oo ) ; } return bool_ ; }
private static boolean is hex ( char p _char ) { return ( p _char <= str_ && ( fg lookup table [ p _char ] & asci i_ he x_ characters ) != num_ ) ; }
public matcher matcher ( ) { return new matcher ( this ) ; }
public static final void show ( window owner , settings settings ) { settings dialog dialog = new settings dialog ( owner , settings ) ; dialog . set location relative to ( owner ) ; dialog . set visible ( bool_ ) ; if ( ! dialog . canceled ) { dialog . pnl settings . set settings ( settings ) ; } }
public abstract void impl before tcp bind ( file descriptor fd obj , inet address address , int port ) throws io exception ;
public static input stream to ut f8 input stream ( string str ) { input stream is = null ; try { is = new byte array input stream ( str . get bytes ( str_ ) ) ; } catch ( unsupported encoding exception e ) { throw new assertion error ( ) ; } return is ; }
public static module module get instance ( string library path ) throws exception { string provider class = system . get property ( system properties . signe r_ modul e_ instanc e_ provider ) ; if ( provider class != null ) { class < ? > cl = class . for name ( provider class ) ; if ( module instance provider . class . is assignable from ( cl ) ) { module instance provider provider = ( module instance provider ) cl . new instance ( ) ; return provider . get instance ( library path ) ; } else { throw new runtime exception ( str_ + cl + str_ + module instance provider . class ) ; } } return module . get instance ( library path ) ; }
public new array expr new new array expr ( type type , value size ) { return new g new array expr ( type , size ) ; }
protected void match ( int w , int j ) { match job by worker [ w ] = j ; match worker by job [ j ] = w ; }
public void after inner message write ( boolean finished ) ;
public boolean is role idp ( ) { return this . is role idp ; }
protected void init stream buffer size ( ) { string stream buffer size param = get init parameter ( str_ ) ; set stream buffer size ( ( stream buffer size param == null ) ? defaul t_ strea m_ buffe r_ size : integer . parse int ( stream buffer size param ) ) ; if ( is debug ( ) ) { log ( str_ + get stream buffer size ( ) ) ; } }
public boolean supports empty collections ( ) { return bool_ ; }
public static remote media player controller instance ( ) { thread utils . assert on ui thread ( ) ; if ( s instance == null ) s instance = new remote media player controller ( ) ; if ( s instance . m chrome video activity . get ( ) == null ) s instance . link to browser activity ( ) ; return s instance ; }
public ion struct clone and retain ( string ... field names ) throws unknown symbol exception ;
public long reset timestamp ( ) { if ( distribution stats . enable clock stats ) { long now = distribution stats . get stat time ( ) ; long result = now - this . time stamp ; this . time stamp = now ; return result ; } else { return num_ ; } }
private static int [ ] compute component order ( text line component [ ] components , int [ ] chars lto v ) { int [ ] component order = null ; if ( chars lto v != null && components . length > num_ ) { component order = new int [ components . length ] ; int g start = num_ ; for ( int i = num_ ; i < components . length ; i ++ ) { component order [ i ] = chars lto v [ g start ] ; g start += components [ i ] . get num characters ( ) ; } component order = bidi utils . create contiguous order ( component order ) ; component order = bidi utils . create inverse map ( component order ) ; } return component order ; }
public javax 2 . sip . header . header create header ( string header name , string header value ) throws java . text . parse exception { if ( header name == null ) throw new null pointer exception ( str_ ) ; string hdr text = new string buffer ( ) . append ( header name ) . append ( str_ ) . append ( header value ) . to string ( ) ; return create header ( hdr text ) ; }
public static void json ( string json ) { printer . json ( json ) ; }
public static string bytes to utf 8 ( final byte [ ] ba ) { return bytes to encoding ( ba , str_ ) ; }
public boolean is accepting text ( ) { check focus ( ) ; return m served input connection != null ; }
public final synchronized void end reading ( ) throws io exception { if ( reading count . decrement and get ( ) <= num_ && do close . get ( ) ) { close ( ) ; synchronized ( index . oldmonitors ) { index . oldmonitors . remove ( this ) ; } } }
public wine run foreground ( file executable to run ) throws cancel exception { run foreground ( executable to run , ( list < string > ) null , null ) ; return this ; }
public long blocked ( ) { return long . parse long ( fields [ num_ ] ) ; }
gvt glyph vector create glyph vector ( font render context frc , float font size , attributed character iterator aci ) ;
public static int read from file channel ( file channel channel , long channel position , byte buffer dest ) throws io exception { if ( dest . is direct ( ) || ( dest . remaining ( ) < rea d_ chun k_ size ) ) { return read single chunk ( channel , channel position , dest ) ; } else { int bytes read = num_ ; int bytes to read = dest . remaining ( ) ; byte buffer tmp buffer = dest . duplicate ( ) ; try { while ( dest . has remaining ( ) ) { tmp buffer . limit ( math . min ( dest . limit ( ) , tmp buffer . position ( ) + rea d_ chun k_ size ) ) ; int read = read single chunk ( channel , channel position , tmp buffer ) ; if ( read < num_ ) { return read ; } bytes read += read ; channel position += read ; dest . position ( tmp buffer . position ( ) ) ; } } finally { dest . position ( tmp buffer . position ( ) ) ; } assert bytes read == bytes to read : str_ + bytes read + str_ + bytes to read + str_ ; return bytes read ; } }
public void add comment to move ( int half move index , string text , boolean coloring ) { int orig caret pos = text panel . get caret offset ( ) ; int start = move nodes . get ( half move index ) ; int length = move nodes lengths . get ( half move index ) ; text panel . set caret offset ( start + length ) ; text panel . insert ( str_ + text ) ; style range style range = new style range ( ) ; style range . start = start + length ; style range . length = text . length ( ) + num_ ; style range . font style = swt . italic ; if ( coloring ) style range . foreground = display . get current ( ) . get system color ( swt . colo r_ red ) ; text panel . set style range ( style range ) ; text panel . set caret offset ( orig caret pos ) ; int move index = half move index + num_ ; while ( move index < move nodes . size ( ) ) { move nodes . set ( move index , move nodes . get ( move index ) + text . length ( ) + num_ ) ; move index ++ ; } }
public graphics node event ( graphics node source , int id ) { super ( source ) ; this . id = id ; }
public int size ( ) { return this . count ; }
public string invert selection tip text ( ) { return str_ + str_ + str_ ; }
public pyramid ( position center position , double north south radius , double vertical radius , double east west radius ) { if ( center position == null ) { string message = logging . get message ( str_ ) ; logging . logger ( ) . severe ( message ) ; throw new illegal argument exception ( message ) ; } if ( north south radius <= num_ || east west radius <= num_ || vertical radius <= num_ ) { string message = logging . get message ( str_ , str_ ) ; logging . logger ( ) . severe ( message ) ; throw new illegal argument exception ( message ) ; } this . center position = center position ; this . north south radius = north south radius ; this . vertical radius = vertical radius ; this . east west radius = east west radius ; this . set up geometry cache ( ) ; }
public om line ( int x 1 , int y 1 , int x 2 , int y 2 ) { super ( rendertyp e_ xy , linetyp e_ straight , decluttertyp e_ none ) ; pts = new int [ num_ ] ; pts [ num_ ] = x 1 ; pts [ num_ ] = y 1 ; pts [ num_ ] = x 2 ; pts [ num_ ] = y 2 ; }
public boolean remove animation listener ( animation listener listener ) { return m listeners . remove ( listener ) ; }
protected void print processing instruction ( writer out , processing instruction pi ) throws io exception { string target = pi . get target ( ) ; boolean pi processed = bool_ ; if ( target . equals ( result . p i_ disabl e_ outpu t_ escaping ) ) { escape output = bool_ ; pi processed = bool_ ; } else if ( target . equals ( result . p i_ enabl e_ outpu t_ escaping ) ) { escape output = bool_ ; pi processed = bool_ ; } if ( pi processed == bool_ ) { string raw data = pi . get data ( ) ; if ( ! str_ . equals ( raw data ) ) { out . write ( str_ ) ; out . write ( target ) ; out . write ( str_ ) ; out . write ( raw data ) ; out . write ( str_ ) ; } else { out . write ( str_ ) ; out . write ( target ) ; out . write ( str_ ) ; } } }
public term criteria ( ) { this ( num_ , num_ , num_ ) ; }
public users search query group id ( integer value ) { return unsafe param ( str_ , value ) ; }
public boolean has header ( ) { return has extension ( header . class ) ; }
protected abstract void on failure ( throwable exception ) ;
public boolean uses local files ( ) throws sql exception ;
public boolean has recovered ( ) { return limit >= initial limit ; }
private synchronized void write object ( java . io . object output stream s ) throws java . io . io exception { java . io . object output stream . put field fields = s . put fields ( ) ; fields . put ( str_ , value ) ; fields . put ( str_ , count ) ; fields . put ( str_ , bool_ ) ; s . write fields ( ) ; }
< j > join on < e > left join ( class < j > type ) ;
public static void put string ( string key , string value ) { prefs . edit ( ) . put string ( key , value ) . commit ( ) ; }
public abstract text table reader ( ) { this ( parser factory . get default factory ( ) ) ; }
private int generate view type ( wx component component ) { long id ; try { id = integer . parse int ( component . get dom object ( ) . get ref ( ) ) ; string type = component . get dom object ( ) . get attrs ( ) . get scope ( ) ; if ( ! text utils . is empty ( type ) ) { if ( m ref to view type == null ) { m ref to view type = new array map < > ( ) ; } if ( ! m ref to view type . contains key ( type ) ) { m ref to view type . put ( type , id ) ; } id = m ref to view type . get ( type ) ; } } catch ( runtime exception e ) { wx log utils . e tag ( tag , e ) ; id = recycler view . n o_ id ; wx log utils . e ( tag , str_ ) ; } return ( int ) id ; }
protected concurrent linked hash map < integer , integer > new warmed map ( ) { concurrent linked hash map < integer , integer > map = new empty map ( ) ; warm up ( map , num_ , capacity ( ) ) ; return map ; }
void pop namespaces ( int elem depth , content handler sax handler ) { while ( bool_ ) { if ( m _node stack . is empty ( ) ) return ; mapping record map = ( mapping record ) ( m _node stack . peek ( ) ) ; int depth = map . m _declaration depth ; if ( elem depth < num_ || map . m _declaration depth < elem depth ) break ; mapping record nm 1 = ( mapping record ) m _node stack . pop ( ) ; string prefix = map . m _prefix ; stack prefix stack = get prefix stack ( prefix ) ; mapping record nm 2 = ( mapping record ) prefix stack . peek ( ) ; if ( nm 1 == nm 2 ) { prefix stack . pop ( ) ; if ( sax handler != null ) { try { sax handler . end prefix mapping ( prefix ) ; } catch ( sax exception e ) { } } } } }
protected void validate state ( state current state ) { validation utils . validate state ( current state ) ; }
private static void create folder audit ( string session id , string entidad , authentication user user , ax sf axsf new , integer book id , scr ofic scrofic , session session , date current date , boolean update audit ) throws sql exception , exception { if ( update audit ) { integer update audit id = new integer ( db entity dao factory . get current db entity dao ( ) . get next id for scr modifreg ( user . get id ( ) , entidad ) ) ; string user name = null ; if ( is data base case sensitive ( entidad ) ) { user name = user . get name ( ) . to upper case ( ) ; } else { user name = user . get name ( ) ; } string num reg = axsf new . get attribute value as string ( str_ ) ; i sicres save queries . save scr modifreg ( session , update audit id , user name , current date , num reg , num_ , book id . int value ( ) , scrofic . get id ( ) . int value ( ) , num_ ) ; db entity dao factory . get current db entity dao ( ) . insert audit ( update audit id , axsf new . get attribute value ( str_ ) , null , entidad ) ; } }
boolean compare numbers ( double n 1 , double n 2 ) { return n 1 > n 2 ; }
public boolean is required ( final attribute type attribute type ) { return required attributes . contains ( attribute type ) ; }
public void on hotplug ( long timestamp nanos , int built in display id , boolean connected ) { }
public int next dimension ( int d ) { if ( d == max dimension ) { return num_ ; } return d + num_ ; }
public string encode body ( ) { if ( call id == null ) return null ; else { string ret val = call id ; if ( ! parameters . is empty ( ) ) { ret val += semicolon + parameters . encode ( ) ; } return ret val ; } }
public void test include non empty ( ) throws exception { incl props = new string [ ] { str_ , str_ } ; start grid and check ( ) ; }
public schedule bucket allocate bucket ( ) ;
private void ensure index ( final int index ) { if ( index < num_ ) throw new index out of bounds exception ( str_ + index + str_ ) ; if ( index > size ( ) ) throw new index out of bounds exception ( str_ + index + str_ + ( size ( ) ) + str_ ) ; }
private void end function service ( ) { object top = stack . pop ( ) ; if ( ! ( top instanceof function service creation ) ) { throw new cache xml exception ( localized strings . cache xml parser _ expecte d_ a_ functionservicecreatio n_ instance . to localized string ( ) ) ; } function service creation fsc = ( function service creation ) top ; fsc . create ( ) ; }
public void normalize to ( double d new max ) { double d max = num_ ; iterator i val iter = h distro . values ( ) . iterator ( ) ; while ( i val iter . has next ( ) ) { d max = math . max ( d max , ( double ) i val iter . next ( ) ) ; } double d factor = d new max / d max ; iterator < t key type > i key iter = h distro . key set ( ) . iterator ( ) ; while ( i key iter . has next ( ) ) { t key type o key = i key iter . next ( ) ; double d val = ( double ) h distro . get ( o key ) ; d val *= d factor ; h distro . put ( o key , d val ) ; } }
public static s m_ syste m_ message st r_ skil l_ suc c_ reflector _ m e_ t o_ self ( string skillname ) { return new s m_ syste m_ message ( num_ , skillname ) ; }
public strategy with fixed seed ( long seed ) { return new strategy ( default prng ( seed ) , examples , shrink cycles , reporter ) ; }
public double array list parameter ( option id option id , list < double [ ] > default value ) { super ( option id , default value ) ; }
public string translate data type ( string source vendor name , string target vendor name , string data type , int size , int scale ) { return get data type ( target vendor name , get data type id ( source vendor name , data type ) , size , scale ) ; }
public boolean on received client cert request ( cordova web view view , i cordova client cert request request ) { return bool_ ; }
public static string approx time until ( final int seconds ) { final string builder sbuf = new string builder ( ) ; approx time until ( sbuf , seconds ) ; return sbuf . to string ( ) ; }
t create query hit ( uri uri , string name , uuid timestamp ) ;
private static void delete ( list < uri > ids ) { perform success fail ( ids , new deactivate operation ( ) , delete d_ success , delete d_ error ) ; list ( ) ; }
public long [ ] [ ] to long array ( ) ;
string generate update script ( entity entity ) ;
public boolean uninstall counters ( ) { return debug counter service . remove counter hierarchy ( counte r_ module , dpid and conn id string ) ; }
protected void tear down ( ) { obj array = null ; obj array 2 = null ; hm = null ; }
public role builder with name ( string name ) { this . name = name ; return this ; }
public boolean can draw ( ) { return bool_ ; }
protected void build metric makers ( metric dictionary metric dictionary ) { long sum maker = new long sum maker ( metric dictionary ) ; sketch count maker = new sketch count maker ( metric dictionary , sketch size ) ; product maker = new arithmetic maker ( metric dictionary , arithmetic post aggregation function . multiply ) ; simple daily average maker = new aggregation average maker ( metric dictionary , day ) ; row num maker = new row num maker ( metric dictionary ) ; }
public static void check state ( boolean expression , string error message template , object ... error message args ) { if ( ! expression ) { throw new illegal state exception ( format ( error message template , error message args ) ) ; } }
public warp script executor store ( string key , object value ) { this . symbol table . put ( key , value ) ; return this ; }
public error response error response ( ) { return this . error response ; }
public com . sun . identity . federation . jaxb . entityconfig . entity config type create entity config type ( ) throws javax . xml . bind . jaxb exception { return new com . sun . identity . federation . jaxb . entityconfig . impl . entity config type impl ( ) ; }
public < t > t unmarshall json to object ( class < t > class type , string json content ) throws io exception { return new object mapper ( ) . read value ( json content , class type ) ; }
public batch sentence ( session s ) { m _s = s ; m _parameters = new hash map < > ( ) ; }
public void raise io exception event ( ) ;
public concurrent hash map v8 ( map < ? extends k , ? extends v > m ) { this . size ctl = defaul t_ capacity ; put all ( m ) ; }
public application ( string name ) { this . name = name ; }
protected boolean can be printable ( string str ) { return der printable string . is printable string ( str ) ; }
private void update progress ( string progress label , int progress ) { if ( my host != null && ( ( progress != previous progress ) || ( ! progress label . equals ( previous progress label ) ) ) ) { my host . update progress ( progress label , progress ) ; } previous progress = progress ; previous progress label = progress label ; }
protected void before stop ( ) { }
public boolean open ( string access ) ;
protected void unbind thread ( class loader old context class loader ) { if ( is use naming ( ) ) { context bindings . unbind thread ( this , get naming token ( ) ) ; } unbind ( bool_ , old context class loader ) ; }
public void run test ( ) throws throwable { document doc ; node list gender list ; node gender node ; node ent element ; int node type ; node ent element content ; node ent reference ; doc = ( document ) load ( str_ , bool_ ) ; gender list = doc . get elements by tag name ( str_ ) ; gender node = gender list . item ( num_ ) ; ent reference = gender node . get first child ( ) ; assert not null ( str_ , ent reference ) ; node type = ( int ) ent reference . get node type ( ) ; if ( equals ( num_ , node type ) ) { ent reference = doc . create entity reference ( str_ ) ; assert not null ( str_ , ent reference ) ; } ent element = ent reference . get first child ( ) ; assert not null ( str_ , ent element ) ; ent element content = ent element . get first child ( ) ; assert not null ( str_ , ent element content ) ; { boolean success = bool_ ; try { ( ( character data ) ent element content ) . insert data ( num_ , str_ ) ; } catch ( dom exception ex ) { success = ( ex . code == dom exception . n o_ modificatio n_ allowe d_ err ) ; } assert true ( str_ , success ) ; } }
public static void warning ( string message , throwable ex ) { problem reporter . warning ( message , ex ) ; }
public synchronized void remove listener ( listener l ) { listeners . remove ( l ) ; }
private void fail task ( throwable e ) { service utils . log severe ( this , e ) ; task utils . send self patch ( this , build patch ( task state . task stage . failed , null , e ) ) ; }
public int dump ( final file file ) throws io exception ;
public block task ( minion _ job _ manager boss , entity minion input , int ix , int iy , int iz ) { this . boss = boss ; this . worker = input ; this . pos x = ix ; this . pos y = iy ; this . pos z = iz ; pos = new block pos ( ix , iy , iz ) ; started task = bool_ ; access range sq = num_ ; task duration millis = num_ ; worker reached block = bool_ ; }
public void connect ( long duration , time unit time unit ) throws timeout exception , interrupted exception { log . info ( str_ , duration , time unit , zk host ) ; long timeout = system . nano time ( ) + time unit . to nanos ( duration ) ; while ( system . nano time ( ) < timeout ) { try { connect ( ) ; log . info ( str_ , zk host ) ; return ; } catch ( runtime exception e ) { } time unit . milliseconds . sleep ( num_ ) ; } throw new timeout exception ( str_ ) ; }
public boolean for each ( long procedure procedure ) { for ( int i = num_ ; i < size ; ) if ( ! procedure . apply ( get ( i ++ ) ) ) return bool_ ; return bool_ ; }
public void run test ( ) throws throwable { document doc ; node list element list ; node child ; node list employee id list ; node employee node ; node text node ; boolean state ; doc = ( document ) load ( str_ , bool_ ) ; element list = doc . get elements by tag name ( str_ ) ; child = element list . item ( num_ ) ; employee id list = child . get child nodes ( ) ; employee node = employee id list . item ( num_ ) ; text node = employee node . get first child ( ) ; state = text node . has child nodes ( ) ; assert false ( str_ , state ) ; }
protected double calculate category size ( int category count , rectangle 2 d area , rectangle edge edge ) { double result ; double available = num_ ; if ( ( edge == rectangle edge . top ) || ( edge == rectangle edge . bottom ) ) { available = area . get width ( ) ; } else if ( ( edge == rectangle edge . left ) || ( edge == rectangle edge . right ) ) { available = area . get height ( ) ; } if ( category count > num_ ) { result = available * ( num_ - get lower margin ( ) - get upper margin ( ) - get category margin ( ) ) ; result = result / category count ; } else { result = available * ( num_ - get lower margin ( ) - get upper margin ( ) ) ; } return result ; }
public boolean is active ( ) { return time end == null || time end . get time ( ) > system . current time millis ( ) ; }
private static void assert array length ( final int length , final jbbp named field info name ) { if ( length < num_ ) { throw new jbbp parsing exception ( str_ + ( name == null ? str_ : name . get field path ( ) ) + str_ + jbbp utils . int 2msg ( length ) + str_ ) ; } }
private final float vowel mid ( item syllable ) { voice voice = syllable . get utterance ( ) . get voice ( ) ; item first seg = syllable . get item as ( relation . syllabl e_ structure ) . get daughter ( ) ; item segment ; float val ; for ( segment = first seg ; segment != null ; segment = segment . get next ( ) ) { if ( str_ . equals ( voice . get phone feature ( segment . to string ( ) , str_ ) ) ) { val = ( segment . get features ( ) . get float ( str_ ) + ( ( float ) vowel mid path . find feature ( segment ) ) . float value ( ) ) / num_ ; return val ; } } if ( first seg == null ) { val = num_ ; } else { val = ( first seg . get features ( ) . get float ( str_ ) + ( ( float ) vowel mid path . find feature ( first seg ) ) . float value ( ) ) / num_ ; } return val ; }
public void process ( string tenant , processing filter < logout state > processor ) { log . debug ( str_ + tenant ) ; validate . not null ( this . idm accessor ) ; validate . is true ( this . logout request != null || this . logout response != null ) ; validate . not null ( processor ) ; try { this . idm accessor . set tenant ( tenant ) ; processor . process ( this ) ; } catch ( saml service exception e ) { log . debug ( str_ + e . to string ( ) ) ; this . validation result = new validation result ( oasis names . responder ) ; } catch ( exception e ) { log . debug ( str_ + e . to string ( ) ) ; this . validation result = new validation result ( oasis names . responder ) ; } try { add logout session cookie ( ) ; } catch ( exception e ) { log . warn ( str_ , e ) ; } }
public string user ( ) ;
config config ( ) ;
public static geometry collection from json ( string json ) { gson builder gson = new gson builder ( ) ; gson . register type adapter ( position . class , new position deserializer ( ) ) ; gson . register type adapter ( geometry . class , new geometry deserializer ( ) ) ; return gson . create ( ) . from json ( json , geometry collection . class ) ; }
public void connect ( ) { m client . connect ( ) ; }
string help ( ) ;
public boolean is commutative ( ) { switch ( opcode ) { case reg ops . and : case reg ops . or : case reg ops . xor : case reg ops . add : case reg ops . mul : return bool_ ; default : return bool_ ; } }
private list < string > make list ( final string ... strings ) { final list < string > result = new array list < > ( ) ; for ( string string : strings ) { result . add ( string ) ; } return result ; }
public static int one ( int tc ) { return zero ( tc ) + num_ ; }
public final boolean is read finished ( ) { return data source stream . is end of stream ( ) ; }
public boolean match ( event match target ) { if ( match target . event type == null && this . event type != null ) return bool_ ; else if ( match target . event type != null && this . event type == null ) return bool_ ; else if ( this . event type == null && match target . event type == null ) return bool_ ; else if ( get event id ( ) == null && match target . get event id ( ) != null ) return bool_ ; else if ( get event id ( ) != null && match target . get event id ( ) == null ) return bool_ ; return match target . event type . equals ignore case ( this . event type ) && ( ( this . get event id ( ) == match target . get event id ( ) ) || this . get event id ( ) . equals ignore case ( match target . get event id ( ) ) ) ; }
public final iterator < string > schemes iterator ( ) { return m data schemes != null ? m data schemes . iterator ( ) : null ; }
double distance ( o o 1 , o o 2 ) ;
private chat format ( char character , boolean is styled ) { this . format code = character ; this . is style = is styled ; this . format text = str_ + character ; }
rsa signature ( string algorithm , object identifier digest oid , int oid length ) { this . digest oid = digest oid ; try { md = message digest . get instance ( algorithm ) ; } catch ( no such algorithm exception e ) { throw new provider exception ( e ) ; } digest reset = bool_ ; encoded length = base length + oid length + md . get digest length ( ) ; }
public cache exception ( string message , throwable cause ) { super ( message , cause ) ; }
public polls get voters query name case ( users name case value ) { return unsafe param ( str_ , value ) ; }
public void reset ( ) { pos = num_ ; line = num_ ; column = num_ ; token stack . clear ( ) ; }
public enum state ( s id , collection < e > deferred ) { super ( id , deferred ) ; }
protected void parse additional properties string ( ) { additional properties . clear ( ) ; if ( null != smtp properties string ) { string [ ] str array = smtp properties string . split ( str_ ) ; for ( string property : str array ) { int equals index = property . index of ( str_ ) ; if ( ( equals index > num_ ) && ( equals index < ( property . length ( ) - num_ ) ) ) { additional properties . put ( property . substring ( num_ , equals index ) . trim ( ) , property . substring ( equals index + num_ ) . trim ( ) ) ; } } } }
protected void validate state ( state current ) { check not null ( current . task info , str_ ) ; check not null ( current . task info . stage , str_ ) ; check not null ( current . image , str_ ) ; check not null ( current . source image data store , str_ ) ; check not null ( current . destination data store , str_ ) ; check state ( current . document expiration time micros > num_ , str_ ) ; switch ( current . task info . stage ) { case started : check state ( current . task info . sub stage != null , str_ ) ; switch ( current . task info . sub stage ) { case retriev e_ host : break ; case cop y_ image : check argument ( current . host != null , str_ ) ; break ; default : check state ( bool_ , str_ + current . task info . sub stage . to string ( ) ) ; } break ; case created : case failed : case finished : case cancelled : check state ( current . task info . sub stage == null , str_ ) ; break ; default : check state ( bool_ , str_ + current . task info . stage . to string ( ) ) ; } }
public void add exclude reg ex ( string regex expression ) { patterns . add ( new pair < string pattern set , boolean > ( new string pattern set regex ( regex expression ) , bool_ ) ) ; }
public void prepare commit ( string transaction name ) { throw db exception . get unsupported exception ( str_ ) ; }
string projection ( ) ;
public void finish ( boolean delayed ) { m is started = bool_ ; if ( delayed ) { update visible progress ( ) ; } else { remove callbacks ( m hide runnable ) ; animate ( ) . cancel ( ) ; set alpha ( num_ ) ; } }
boolean matches ( item stack subject ) ;
public static file [ ] sort local folder ( file [ ] files ) { switch ( m sort order ) { case num_ : files = file storage utils . sort local files by name ( files ) ; break ; case num_ : files = file storage utils . sort local files by date ( files ) ; break ; case num_ : files = file storage utils . sort local files by size ( files ) ; break ; } return files ; }
static condition create attribute suffix condition ( string namespace uri , string name , string value ) { return new attribute suffix condition ( namespace uri , name , value ) ; }
public boolean is is scorable ( ) { if ( is scorable == null ) { return bool_ ; } else { return is scorable ; } }
public boolean initialise ( servlet context servlet context ) { return bool_ ; }
map . entry < k , v > lower entry ( k key ) ;
public void drop action changed ( drop target drag event dtde ) { }
boolean check request parameters ( final rest request request , final rest channel channel ) { if ( channel . detailed errors enabled ( ) == bool_ && request . param as boolean ( str_ , bool_ ) ) { try { x content builder builder = channel . new error builder ( ) ; builder . start object ( ) . field ( str_ , str_ ) . end object ( ) . string ( ) ; rest response response = new bytes rest response ( ba d_ request , builder ) ; response . add header ( str_ , str_ ) ; channel . send response ( response ) ; } catch ( io exception e ) { logger . warn ( str_ , e ) ; } return bool_ ; } return bool_ ; }
public boolean is duplicate element ( object item ) { return duplicates . contains ( item ) ; }
public void proceed ( string username , string password ) { this . handler . proceed ( username , password ) ; }
void to string ( string builder buffer ) ;
public void test composite attribute can be null ( ) throws exception { html page page = get page ( str_ ) ; assert element attribute equals ( page , str_ , str_ , str_ ) ; assert element attribute equals ( page , str_ , str_ , str_ ) ; }
private void additional section ( final material section section ) { if ( custom layout r > - num_ ) { section . swap layout ( custom layout r ) ; } section . build ( activity ) ; }
public boolean is edge touched ( int edges ) { final int count = m initial edges touched . length ; for ( int i = num_ ; i < count ; i ++ ) { if ( is edge touched ( edges , i ) ) { return bool_ ; } } return bool_ ; }
public array list < s2 cell id > cell ids ( ) { return cell ids ; }
string builder append path for base dir ( string builder result , file base dir ) ;
string name ( ) ;
public static void main ( final string [ ] args ) { dom test case . do main ( nodereplacechildnewchildexists . class , args ) ; }
public static boolean starts with ignore case and non alpha numeric ( string search in , string search for ) { if ( search in == null ) { return search for == null ; } int begin pos = num_ ; int in length = search in . length ( ) ; for ( ; begin pos < in length ; begin pos ++ ) { char c = search in . char at ( begin pos ) ; if ( character . is letter or digit ( c ) ) { break ; } } return starts with ignore case ( search in , begin pos , search for ) ; }
public static void return to new stack ( address fp ) { if ( vm . verify assertions ) vm . _assert ( vm . no t_ reached ) ; }
void on commit ( ) ;
public string to string ( ) { return this . m 0 0 + str_ + this . m 0 1 + str_ + this . m 0 2 + str_ + this . m 1 0 + str_ + this . m 1 1 + str_ + this . m 1 2 + str_ + this . m 2 0 + str_ + this . m 2 1 + str_ + this . m 2 2 + str_ ; }
public void run ( ) throws serialization exception , sql exception { final string query = string . format ( str_ + str_ + str_ + str_ + str_ + str_ + str_ + str_ , table name ) ; map < string , map red stats > stats per stage = session state lite . get map red stats ( ) ; for ( string stage : stats per stage . key set ( ) ) { map red stats stats = stats per stage . get ( stage ) ; prepared statement ps = connection . prepare statement ( query ) ; int ps index = num_ ; ps . set long ( ps index ++ , audit log id ) ; ps . set string ( ps index ++ , stage ) ; ps . set long ( ps index ++ , stats . get num map ( ) ) ; ps . set long ( ps index ++ , stats . get num reduce ( ) ) ; ps . set long ( ps index ++ , stats . get cpu m sec ( ) ) ; ps . set string ( ps index , to json ( stats . get counters ( ) ) ) ; ps . execute update ( ) ; } }
void create ( member member ) throws conflict exception , not found exception , server exception ;
public void action performed ( action event e ) { combo box editor editor = get editor ( ) ; if ( ( editor != null ) && ( e != null ) && ( editor == e . get source ( ) || editor . get editor component ( ) == e . get source ( ) ) ) { set popup visible ( bool_ ) ; get model ( ) . set selected item ( editor . get item ( ) ) ; string old command = get action command ( ) ; set action command ( str_ ) ; fire action event ( ) ; set action command ( old command ) ; } }
public < p extends plugin , c extends plugin canvas > void register control ( p thiz , string attach , string type , class < ? extends c > canvas clazz , canvas command handle < p , c > control ) throws naming exception ;
public void morph into fab ( view fab , long hide sheet duration , long hide sheet color duration , animation listener listener ) { reveal sheet with fab ( fab , get sheet reveal radius ( ) , get fab reveal radius ( fab ) , hide sheet duration , sheet color , fab color , hide sheet color duration , listener ) ; }
public void add selection listener ( selection listener l ) ;
static boolean static ¢ ( final body declaration ¢ ) { return ( modifier . static & ¢ . get modifiers ( ) ) != num_ ; }
public static final byte [ ] decode url ( byte [ ] bytes ) throws decoder exception { if ( bytes == null ) { return null ; } byte array output stream buffer = new byte array output stream ( ) ; for ( int i = num_ ; i < bytes . length ; i ++ ) { int b = bytes [ i ] ; if ( b == str_ ) { buffer . write ( str_ ) ; } else if ( b == str_ ) { try { int u = character . digit ( ( char ) bytes [ ++ i ] , num_ ) ; int l = character . digit ( ( char ) bytes [ ++ i ] , num_ ) ; if ( u == - num_ || l == - num_ ) { throw new decoder exception ( str_ ) ; } buffer . write ( ( char ) ( ( u << num_ ) + l ) ) ; } catch ( array index out of bounds exception e ) { throw new decoder exception ( str_ ) ; } } else { buffer . write ( b ) ; } } return buffer . to byte array ( ) ; }
private void register attributes ( model model , expression path ) throws exception { string prefix = path . get prefix ( ) ; string name = path . get first ( ) ; int index = path . get index ( ) ; if ( path . is path ( ) ) { model next = model . register ( name , prefix , index ) ; expression child = path . get path ( num_ ) ; if ( next == null ) { throw new path exception ( str_ , name , detail ) ; } register attributes ( next , child ) ; } else { register attribute ( model , path ) ; } }
public int layer _count ( ) { return layer _visibility _arr . length ; }
public static boolean has line feed ( string str ) { int len = str . length ( ) ; char c ; for ( int i = num_ ; i < len ; i ++ ) { c = str . char at ( i ) ; if ( c == str_ || c == str_ ) return bool_ ; } return bool_ ; }
public void pop drag entry ( int index ) { if ( is index in bound ( index ) ) { m dragged entry = m drag entries . get ( index ) ; m dragged entry index = index ; m drag entered entry index = index ; mark drop area ( index ) ; } }
public static < k extends comparable < k > , v extends comparable < v > > map < k , v > create by value sorted concurrent map ( boolean reversed ) { return new by value sorting concurrent skip list map < > ( by value comparator . < k , v > create ( reversed ) ) ; }
public static long [ ] parse string ( string [ ] values ) { long [ ] result = new long [ values . length ] ; for ( int i = num_ ; i < result . length ; i ++ ) { result [ i ] = parse string ( values [ i ] ) ; } return result ; }
private void fault in from current oplog ( ) { put 1 0 0 int ( ) ; put till over flow ( region ) ; region . put ( new integer ( num_ ) , new integer ( num_ ) ) ; region . put ( new integer ( num_ ) , new integer ( num_ ) ) ; if ( ! ( region . get ( new integer ( num_ ) ) . equals ( new integer ( num_ ) ) ) ) { fail ( str_ ) ; } }
public static date previous ( date self ) { return minus ( self , num_ ) ; }
void remember sync state ( ) { if ( get child count ( ) > num_ ) { m need sync = bool_ ; m sync height = m layout height ; if ( m selected position >= num_ ) { view v = get child at ( m selected position - m first position ) ; m sync row id = m next selected row id ; m sync position = m next selected position ; if ( v != null ) { m specific top = v . get top ( ) ; } m sync mode = syn c_ selecte d_ position ; } else { view v = get child at ( num_ ) ; t adapter = get adapter ( ) ; if ( m first position >= num_ && m first position < adapter . get count ( ) ) { m sync row id = adapter . get item id ( m first position ) ; } else { m sync row id = n o_ id ; } m sync position = m first position ; if ( v != null ) { m specific top = v . get top ( ) ; } m sync mode = syn c_ firs t_ position ; } } }
public void disable ( ) throws io exception { synchronized ( opt out lock ) { if ( ! is opt out ( ) ) { configuration . set ( str_ , bool_ ) ; configuration . save ( configuration file ) ; } if ( task != null ) { task . cancel ( ) ; task = null ; } } }
public service call < string > convert document to html ( file document , string media type , json object custom config ) { request request = create conversion request ( document , media type , conversion target . normalize d_ html , custom config ) ; return create service call ( request , response converter utils . get string ( ) ) ; }
public void initialize ( ) throws io exception { get index data ( ) . initialize ( ) ; }
public text hit ( int char index , boolean leading edge ) { this . char index = char index ; this . leading edge = leading edge ; }
public static < t extends generic entity > list < t > filter by date ( list < t > dated values , java . util . date moment ) { return filter by date ( dated values , new java . sql . timestamp ( moment . get time ( ) ) , null , null , bool_ ) ; }
public static < t > int detect index ( list < t > list , predicate < ? super t > predicate ) { int size = list . size ( ) ; for ( int i = num_ ; i < size ; i ++ ) { if ( predicate . accept ( list . get ( i ) ) ) { return i ; } } return - num_ ; }
public void log ( string msg ) ;
protected void clear boxes ( ) { for ( int i = num_ ; i < m pass code edit texts . length ; i ++ ) { m pass code edit texts [ i ] . set text ( str_ ) ; } m pass code edit texts [ num_ ] . request focus ( ) ; }
private void destroy listener ( ) { if ( on friends update listener == null ) { return ; } user handler . remove on friends update listener ( on friends update listener ) ; on friends update listener = null ; }
boolean check failure ( sql exception sql exception ) { log . debug ( str_ , sql exception . get sql state ( ) , sql exception ) ; if ( ! error specified ) { if ( retry count == - num_ ) { try { if ( error code . value of code ( sql exception . get sql state ( ) ) . is rollback class ( ) ) { retry count = defaul t_ retr y_ count ; } } catch ( illegal argument exception e ) { } } if ( retries performed < retry count ) { log . debug ( str_ ) ; ++ retries performed ; try { thread . sleep ( num_ * retries performed ) ; } catch ( interrupted exception e ) { } return bool_ ; } throw new context assertion error ( statement , str_ , sql exception ) ; } check expected ( str_ , error code , sql exception . get sql state ( ) ) ; if ( error message != null ) { check expected ( str_ , error message , sql exception . get message ( ) ) ; } return bool_ ; }
public bitmap decode sampled bitmap from file ( file input file , int req width , int req height ) { input stream is = null ; try { try { is = new file input stream ( input file ) ; } catch ( exception e ) { return null ; } final bitmap factory . options options = new bitmap factory . options ( ) ; options . in just decode bounds = bool_ ; bitmap factory . decode stream ( is , null , options ) ; options . in sample size = calculate in sample size ( options , req width , req height ) ; options . in just decode bounds = bool_ ; options . in purgeable = bool_ ; try { is = new file input stream ( input file ) ; } catch ( file not found exception e ) { return null ; } return bitmap factory . decode stream ( is , null , options ) ; } finally { try { if ( is != null ) { is . close ( ) ; } } catch ( io exception e ) { e . print stack trace ( ) ; } } }
public final void test identity scope string ( ) { is = new identity scope stub ( str_ ) ; assert not null ( is ) ; assert equals ( str_ , is . get name ( ) ) ; }
protected void update function group 3 ( int fns ) { this . f 9 = ( ( fns & cbus constants . cbu s_ f9 ) == cbus constants . cbu s_ f9 ) ; this . f 1 0 = ( ( fns & cbus constants . cbu s_ f 1 0 ) == cbus constants . cbu s_ f 1 0 ) ; this . f 1 1 = ( ( fns & cbus constants . cbu s_ f 1 1 ) == cbus constants . cbu s_ f 1 1 ) ; this . f 1 2 = ( ( fns & cbus constants . cbu s_ f 1 2 ) == cbus constants . cbu s_ f 1 2 ) ; }
private boolean stack contains ( stack stack , string url ) { int n = stack . size ( ) ; boolean contains = bool_ ; for ( int i = num_ ; i < n ; i ++ ) { string url 2 = ( string ) stack . element at ( i ) ; if ( url 2 . equals ( url ) ) { contains = bool_ ; break ; } } return contains ; }
public font add element ( string hashcode , element element ) { add element to registry ( hashcode , element ) ; return ( this ) ; }
public string to string key ( ) { return new result matrix plain text ( this ) . to string key ( ) ; }
private void send local broadcast ( string event , string dir remote path , remote operation result result ) { log _ oc . d ( tag , str_ + event ) ; intent intent = new intent ( event ) ; intent . put extra ( file sync adapter . extr a_ accoun t_ name , m account . name ) ; if ( dir remote path != null ) { intent . put extra ( file sync adapter . extr a_ folde r_ path , dir remote path ) ; } intent . put extra ( file sync adapter . extr a_ result , result ) ; m context . send broadcast ( intent ) ; log _ oc . d ( tag , str_ + event ) ; }
public synchronized void render data for projection ( projection proj , java . awt . graphics g ) { fire status update ( layer status event . finis h_ working ) ; if ( proj == null ) { logger . info ( str_ ) ; return ; } else { set target index ( proj . get scale ( ) ) ; layer layer = get appropriate layer ( ) ; layer . render data for projection ( proj , g ) ; } }
public kafka message listener container ( consumer factory < k , v > consumer factory , container properties container properties , topic partition initial offset ... topic partitions ) { super ( container properties ) ; assert . not null ( consumer factory , str_ ) ; this . consumer factory = consumer factory ; if ( topic partitions != null ) { this . topic partitions = arrays . copy of ( topic partitions , topic partitions . length ) ; } else { this . topic partitions = container properties . get topic partitions ( ) ; } }
void on project updated ( subversion project updated event event ) ;
public service configuration error ( string msg ) { super ( msg ) ; }
public void publish ( string channel , real time message message ) { map < string , object > params to send = prepare data ( channel , message ) ; publish ( params to send ) ; }
public static native boolean has capability ( final int capability ) ;
public static boolean check identical paths ( file f 1 , file f 2 ) throws io exception { return f 1 . get canonical path ( ) . equals ( f 2 . get canonical path ( ) ) ; }
public void run test ( ) throws throwable { document doc ; document new doc ; dom implementation dom impl ; document type null doc type = null ; node list child list ; node imported ; node employee elem ; attr attr node ; string attr value ; string null ns = null ; doc = ( document ) load ( str_ , bool_ ) ; child list = doc . get elements by tag name ns ( str_ , str_ ) ; employee elem = child list . item ( num_ ) ; dom impl = get implementation ( ) ; new doc = dom impl . create document ( null ns , str_ , null doc type ) ; imported = new doc . import node ( employee elem , bool_ ) ; attr node = ( ( element ) imported ) . get attribute node ns ( null ns , str_ ) ; assert null ( str_ , attr node ) ; attr value = ( ( element ) imported ) . get attribute ns ( str_ , str_ ) ; assert equals ( str_ , str_ , attr value ) ; }
public circle ( ) { super ( ) ; }
public static _ fields find by name ( string name ) { return by name . get ( name ) ; }
protected static boolean is white space ( final byte byte to check ) { switch ( byte to check ) { case str_ : case str_ : case str_ : case str_ : return bool_ ; default : return bool_ ; } }
private double apply ( double [ ] p x , double [ ] p y , double [ ] [ ] coeff ) { double result = num_ ; for ( int i = num_ ; i < n ; i ++ ) { final double r = math arrays . linear combination ( coeff [ i ] , p y ) ; result += r * p x [ i ] ; } return result ; }
public static < t > le predicate < t > le ( property < t > property , t value ) { return new le predicate < > ( property ( property ) , value ) ; }
public void start clean ( ) throws exception { file utils . delete directory ( data dir ) ; start ( ) ; }
public counter ( ) { this ( num_ ) ; }
protected v create ( k key ) { return null ; }
public iterator < edge info > forward ( ) { return forward . iterator ( ) ; }
public enumeration model ( enumeration enumeration , beans wrapper wrapper ) { super ( enumeration , wrapper ) ; }
public void add composite ( transform tree node node ) { parts . add ( node ) ; }
public abstract void on update views ( t model , int position ) ;
int size active ( ) ;
public static void localize role definition ( data service dm , long obj key ) throws non unique business key exception { create ( dm , obj key , localized object types . rol e_ de f_ desc ) ; create ( dm , obj key , localized object types . rol e_ de f_ name ) ; }
public boolean is coin base ( ) { return outpoint . get hash ( ) . equals ( sha 2 5 6 hash . zer o_ hash ) && ( outpoint . get index ( ) & num_ ) == num_ ; }
public void unregister interest regex ( string region name , string regex , boolean is durable , boolean receive values ) ;
public boolean search ( final window window , final string search text ) { channel chan = channels . get channel from window ( window ) ; if ( chan == null ) { return bool_ ; } return chan . search ( search text ) ; }
public static string strip prefix ( string str , string prefix ) { return str . starts with ( prefix ) ? str . substring ( prefix . length ( ) ) : null ; }
public boolean is logical function ( ) { return bool_ ; }
public image event property ( string image ) { this . image = image ; }
public static void write ( file file , char sequence data , charset encoding , boolean append ) throws io exception { string str = data == null ? null : data . to string ( ) ; write string to file ( file , str , encoding , append ) ; }
public void add ( lifecycle listener listener ) { listeners . add ( providers . of ( listener ) ) ; }
private void initialize live attributes ( ) { external resources required = create live animated boolean ( null , sv g_ externa l_ resource s_ require d_ attribute , bool_ ) ; }
public void write text ( string text ) throws io exception ;
public void input fibre from ( byte a side ) ;
public void send registration event ( license info ext license info , media type media type ) { if ( license info . is trial license ( ) ) { _log . info ( str_ , license info . get license type ( ) . to string ( ) ) ; return ; } license info . set last registration event date ( format current date ( ) ) ; _log . info ( str_ , license info . get license type ( ) . to string ( ) ) ; _license manager . update coordinator with license info ( license info ) ; _log . info ( str_ , license info . get license type ( ) ) ; send registration event send registration event = new send registration event ( service info , log svc properties loader , media type , license info , coordinator ) ; send registration event . call emc home ( ) ; }
private void recover service registrations ( object input stream stream , int log version ) throws io exception , class not found exception { svc reg s reg ; while ( ( s reg = ( svc reg ) stream . read object ( ) ) != null ) { add service ( s reg ) ; } }
public friends get recent query count ( integer value ) { return unsafe param ( str_ , value ) ; }
public void process new status ( data server handler sender handler , change status msg cs msg ) { if ( logger . is trace enabled ( ) ) { debug ( str_ + sender handler . get server id ( ) + str_ + cs msg ) ; } try { lock ( ) ; } catch ( interrupted exception ex ) { thread . current thread ( ) . interrupt ( ) ; return ; } try { server status new status = sender handler . process new status ( cs msg ) ; if ( new status == server status . invali d_ status ) { return ; } enqueue topo info to all except ( sender handler ) ; logger . info ( not e_ director y_ serve r_ change d_ status , sender handler . get server id ( ) , base dn , new status ) ; } catch ( exception e ) { logger . error ( localizable message . raw ( stack trace to single line string ( e ) ) ) ; } finally { release ( ) ; } }
private ldap replication domain start new replication domain ( domain fake cfg domain conf , sorted set < string > ecl include , sorted set < string > ecl include for deletes ) throws exception { ldap replication domain domain = multimaster replication . find domain ( domain conf . get base dn ( ) , null ) ; if ( domain == null ) { domain conf . set external changelog domain ( new external changelog domain fake cfg ( bool_ , ecl include , ecl include for deletes ) ) ; domain conf . set changetime heartbeat interval ( num_ ) ; domain = multimaster replication . create new domain ( domain conf ) ; domain . start ( ) ; domains . add ( domain ) ; } return domain ; }
public boolean is empty ( ) { return time window . is empty ( ) ; }
public static stream < transaction > stream self and all transactions ( final transaction transaction ) { final list < transaction > all transactions = new array list < > ( ) ; all transactions . add ( transaction ) ; add transactions recursive ( all transactions , transaction . get child transactions ( ) ) ; return all transactions . stream ( ) ; }
public void seal ( ) ;
public static final long class id ( byte [ ] key , geo time serie gts ) { return class id ( key , gts . get name ( ) ) ; }
public alloc location model ( string clz , int line , i alloc node node ) { super ( clz , line ) ; from api = ! project . v ( ) . is src class ( clz ) ; object expr = node . get new expr ( ) ; if ( expr != null && expr instanceof new expr ) type = ( ( new expr ) expr ) . get type ( ) . to string ( ) ; set < edge > call edges = method calls on alloc . v ( ) . get calls ( node ) ; if ( call edges != null ) { for ( edge call edge : call edges ) { call location model call line = call location model . get ( call edge ) ; if ( call line != null ) { string class name = call line . get clz ( ) ; if ( project . v ( ) . is src class ( class name ) ) { calls on alloc . add ( call line ) ; } } } collections . sort ( calls on alloc ) ; } ; }
public abstract void remove all tabs ( ) ;
public semi external gamma list ( final input bit stream longs , final int step , final int num longs ) throws io exception { this . step = step == - num_ ? defaul t_ step : step ; int slots = ( num longs + this . step - num_ ) / this . step ; this . position = new long [ slots ] ; this . num longs = num longs ; this . ibs = longs ; ibs . position ( num_ ) ; ibs . read bits ( num_ ) ; final int last slot = position . length - num_ ; for ( int i = num_ ; i <= last slot ; i ++ ) { position [ i ] = ibs . read bits ( ) ; if ( i != last slot ) ibs . skip gammas ( this . step ) ; } }
private test solution compute result and create remarks ( list < process result > process result list , list < definite result > net result list , string element value , int element counter ) { collection < web resource > wrs on error = create url list from process result list ( process result list , net result list ) ; test solution test solution = test solution . passed ; if ( collection utils . is not empty ( wrs on error ) ) { for ( web resource wr : wrs on error ) { test solution = test solution . failed ; prs . add consolidation remark ( test solution . failed , site level message code , element value , wr . get url ( ) ) ; collection < process remark > process remark list = create process remark list for page on error ( element value , wrs on error ) ; net result list . add ( create result at page level ( wr , test solution . failed , element counter , process remark list ) ) ; } } else { net result list . add all ( create result at page level ( wrs on error , test solution . passed , num_ , null ) ) ; } return test solution ; }
private int pick color ( final string identifier ) { if ( text utils . is empty ( identifier ) ) { return s default color ; } final int color = math . abs ( identifier . hash code ( ) ) % s colors . length ( ) ; return s colors . get color ( color , s default color ) ; }
protected media tray ( int value ) { super ( value ) ; }
public static spherical polar coordinates interpolate ( spherical polar coordinates a , spherical polar coordinates b , double alpha ) { vector 3 d from = a . get cartesian coordinates ( ) . normalized ( ) ; vector 3 d to = b . get cartesian coordinates ( ) . normalized ( ) ; double cosang = from . dot ( to ) ; if ( cosang < num_ ) { cosang = - cosang ; to . negate ( ) ; system . out . println ( str_ ) ; } double frac from , frac to ; if ( cosang > ( num_ ) ) { frac from = alpha ; frac to = num_ - alpha ; } else { double ang = math . acos ( cosang ) ; frac from = math . sin ( alpha * ang ) ; frac to = math . sin ( ( num_ - alpha ) * ang ) ; } vector 3 d inbetween = from . mul ( frac from ) . add ( to . mul ( frac to ) ) . normalized ( ) ; return new spherical polar coordinates ( inbetween , a . get radius ( ) ) ; }
public void inc ( key type [ ] container , long delta ) { for ( key type key : container ) { inc ( key , delta ) ; } }
public void init ( boolean for encryption , cipher parameters params ) throws illegal argument exception ;
boolean on tab selected ( int position , boolean was selected ) ;
public static string to hex string ( byte ... bytes ) { char [ ] digits = { str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ , str_ } ; char [ ] buffer = new char [ bytes . length * num_ ] ; for ( int i = num_ , j = num_ ; i < bytes . length ; ++ i ) { int u = bytes [ i ] < num_ ? bytes [ i ] + num_ : bytes [ i ] ; buffer [ j ++ ] = digits [ u > > > num_ ] ; buffer [ j ++ ] = digits [ u & num_ ] ; } return new string ( buffer ) ; }
public boolean is show axes ( ) { return m show axes ; }
public event binder < e > after ( string name ) { after . add ( name ) ; return this ; }
void send ( byte buffer data ) ;
protected portal setup descriptor read ( final element element , final int x , final int y , final object identifier ) { return new portal setup descriptor ( x , y , identifier ) ; }
public places add query address ( string value ) { return unsafe param ( str_ , value ) ; }
public temporal om point ( object id , int render type , boolean interpolate ) { this . id = id ; this . interpolate = interpolate ; set render type ( render type ) ; time stamps = new temporal point support ( render type ) ; }
public abstract two token manager construct two token manager ( ) ;
public list < integer > read inverted sort index ( ) throws io exception ;
public void read security header ( sip response response ) throws payload exception { www authenticate header www header = ( www authenticate header ) response . get header ( www authenticate header . name ) ; authentication info header info header = ( authentication info header ) response . get header ( authentication info header . name ) ; if ( www header != null ) { m digest . set realm ( www header . get realm ( ) ) ; m digest . set opaque ( www header . get opaque ( ) ) ; m digest . set qop ( www header . get qop ( ) ) ; m digest . set nextnonce ( www header . get nonce ( ) ) ; } else if ( info header != null ) { if ( info header . get next nonce ( ) != null ) { m digest . set nextnonce ( info header . get next nonce ( ) ) ; } } }
void failure ( string message ) ;
string is tree selected ( ) ;
public boolean spans ( string other , boolean compare params ) { return spans ( new mime type ( other ) , compare params ) ; }
public boolean is connected or connecting ( ) { return ( status == connection status . connected ) || ( status == connection status . connecting ) ; }
protected int make press color ( ) { int r = ( this . background color > > num_ ) & num_ ; int g = ( this . background color > > num_ ) & num_ ; int b = ( this . background color > > num_ ) & num_ ; return color . argb ( num_ , r , g , b ) ; }
t write double ( long offset , double d ) ;
private static http url connection prepare connection ( url url ) throws io exception { http url connection connection ; connection = ( http url connection ) url . open connection ( _proxy ) ; connection . set connect timeout ( _timeout ) ; connection . set read timeout ( _timeout ) ; if ( url . get protocol ( ) . equals ignore case ( str_ ) ) { ( ( https url connection ) connection ) . set ssl socket factory ( _ssl socket factory ) ; } return connection ; }
public double calculate log likelihood ( ) { double log l = num_ ; for ( statistic statistic : data list ) { for ( int j = num_ ; j < statistic . get dimension ( ) ; j ++ ) { log l -= math . log ( statistic . get statistic value ( j ) ) ; } } return log l ; }
public final int index of ( int elem ) { for ( int i = num_ ; i < m _first free ; i ++ ) { if ( m _map [ i ] == elem ) return i ; } return java . lang . integer . mi n_ value ; }
public void populate header ( final string target name ) { update action history header ( target name ) ; }
public wrapped input stream ( input stream in , boolean deterministic ) { this . in = in ; this . deterministic = deterministic ; }
string info ( ) ;
public void start ( ) throws ignite exception ;
public static void picture ( double x , double y , string s ) { image image = get image ( s ) ; double xs = scale x ( x ) ; double ys = scale y ( y ) ; int ws = image . get width ( null ) ; int hs = image . get height ( null ) ; if ( ws < num_ || hs < num_ ) throw new illegal argument exception ( str_ + s + str_ ) ; offscreen . draw image ( image , ( int ) math . round ( xs - ws / num_ ) , ( int ) math . round ( ys - hs / num_ ) , null ) ; draw ( ) ; }
public static < k , v > map < k , v > collect entries ( iterator < ? > self ) { return collect entries ( self , closure . identity ) ; }
public int size ( ) ;
private void init drop down style ( ) { if ( header layout != null ) { if ( is drop down style ) { add header view ( header layout ) ; } else { remove header view ( header layout ) ; } return ; } if ( ! is drop down style ) { return ; } layout inflater inflater = ( layout inflater ) context . get system service ( context . layou t_ inflate r_ service ) ; header layout = ( relative layout ) inflater . inflate ( id helper . get layout ( context , str_ ) , this , bool_ ) ; header progress bar = ( progress bar ) header layout . find view by id ( id helper . get view id ( context , str_ ) ) ; add header view ( header layout ) ; measure header layout ( header layout ) ; header original height = header layout . get measured height ( ) ; header original top padding = header layout . get padding top ( ) ; current header status = heade r_ statu s_ clic k_ t o_ load ; }
public void merge shares to asset account mapping changes ( final json element element , final string param name , final long product id , final int account type id , final string account type name , final map < string , object > changes ) { merge product to account mapping changes ( element , param name , product id , account type id , account type name , changes , gl account type . asset , portfolio product type . shares ) ; }
public void on async task completed ( int a success count , int a total count , long a track id ) { success count = a success count ; total count = a total count ; track id = a track id ; remove dialog ( dialo g_ progres s_ id ) ; show dialog ( dialo g_ resul t_ id ) ; }
private static string concat heir tokens ( syntax tree node stn ) { syntax tree node [ ] heirs = stn . get heirs ( ) ; if ( heirs . length == num_ ) { if ( stn . get kind ( ) < syntax tree constants . nul l_ id ) { return stn . get image ( ) ; } else { return str_ ; } } string val = str_ ; for ( int i = num_ ; i < heirs . length ; i ++ ) { val = val + concat heir tokens ( heirs [ i ] ) ; } return val ; }
public auto incrementer ( final int start ) { this . next id = start ; }
public object run safely ( catbert . fast stack stack ) throws exception { string [ ] recent station i ds = sage . get raw properties ( ) . get mru list ( str_ , num_ ) ; java . util . array list rv = new java . util . array list ( ) ; for ( int i = num_ ; recent station i ds != null && i < recent station i ds . length ; i ++ ) { try { int id = integer . parse int ( recent station i ds [ i ] ) ; if ( id != num_ ) { channel c = wizard . get instance ( ) . get channel for station id ( id ) ; if ( c != null && c . is viewable ( ) && wizard . get instance ( ) . get airings ( id , sage . time ( ) , sage . time ( ) + num_ , bool_ ) . length > num_ ) rv . add ( c ) ; } } catch ( number format exception nfe ) { } } return ( channel [ ] ) rv . to array ( new channel [ num_ ] ) ; }
private void init ( context context , typed array attributes , int page position , on slide page change listener page listener ) { if ( ! is in edit mode ( ) ) { this . m page position = page position ; this . m user page listener = page listener ; layout inflater inflater = ( layout inflater ) context . get system service ( context . layou t_ inflate r_ service ) ; m binding = data binding util . inflate ( inflater , r . layout . view _barchart _slide , this , bool_ ) ; m attributes = attributes ; load styled attributes ( attributes ) ; inject views and attributes ( ) ; set listeners ( ) ; } }
private boolean is digit character ( int c ) { return ( c >= str_ && c <= str_ ) || c == str_ || c == str_ || c == str_ || c == str_ || c == str_ ; }
public void print ( int w , int d ) { print ( new print writer ( system . out , bool_ ) , w , d ) ; }
public static string properties encode ( properties pp ) { byte array output stream bos = new byte array output stream ( ) ; try { pp . store ( bos , str_ ) ; } catch ( io exception e ) { log . log ( level . severe , str_ , e ) ; } string result = new string ( bos . to byte array ( ) ) ; try { result = url encoder . encode ( result , web env . encoding ) ; } catch ( unsupported encoding exception e ) { log . log ( level . severe , str_ + web env . encoding , e ) ; string enc = system . get property ( str_ ) ; try { result = url encoder . encode ( result , enc ) ; log . info ( str_ + enc ) ; } catch ( exception ex ) { log . log ( level . severe , str_ , ex ) ; } } return result ; }
public static boolean is name start ( int c ) { return c < num_ && ( chars [ c ] & mas k_ nam e_ start ) != num_ ; }
public boolean is draw grid lines enabled ( ) { return m draw grid lines ; }
private boolean has static modifier ( int access ) { return ( access & opcodes . ac c_ static ) == opcodes . ac c_ static ; }
invoke dynamic constant ( constant pool pool , int index , bootstrap method attribute attr , int bootstrap method attr index , int name and type index ) { super ( pool , index ) ; _attr = attr ; _bootstrap method attr index = bootstrap method attr index ; _name and type index = name and type index ; }
public void on mouse pressed ( map mouse event ev ) { }
default long to double function with throwable < e > with logging ( ) { return with logging ( logger factory . get logger ( get class ( ) ) ) ; }
public void tear down ( ) { super . tear down ( ) ; }
graphic context create graphic context ( ) ;
protected void parse dom element ( element element ) throws sam l2 exception { parse dom attributes ( element ) ; list child element list = new array list ( ) ; node list n list = element . get child nodes ( ) ; if ( ( n list != null ) && ( n list . get length ( ) > num_ ) ) { for ( int i = num_ ; i < n list . get length ( ) ; i ++ ) { node child node = n list . item ( i ) ; if ( child node . get node type ( ) == node . elemen t_ node ) { child element list . add ( child node ) ; } } } list iterator iter = child element list . list iterator ( ) ; parse dom chile elements ( iter ) ; if ( iter . has next ( ) ) { if ( sam l2 sdk utils . debug . message enabled ( ) ) { sam l2 sdk utils . debug . message ( str_ + str_ ) ; } throw new sam l2 exception ( sam l2 sdk utils . bundle . get string ( str_ ) ) ; } }
public void dial ( java . lang . string number ) throws android . os . remote exception ;
void add ambiguous triple ( node x , node y , node z ) ;
private void remove values for key ( object key ) { collection < v > collection = maps . safe remove ( map , key ) ; if ( collection != null ) { int count = collection . size ( ) ; collection . clear ( ) ; total size -= count ; } }
private static string split string left parenthesis ( string name ) { string [ ] splitname = name . split ( str_ ) ; if ( splitname . length > num_ && splitname [ num_ ] . starts with ( str_ ) ) { return splitname [ num_ ] . trim ( ) ; } return name . trim ( ) ; }
protected string parse moves message ( string inbound message , list < chat event > events ) { moves message moves message = moves parser . parse ( inbound message ) ; if ( moves message != null ) { process ( moves message , connector . get game service ( ) ) ; events . add ( new chat event ( null , chat type . moves , inbound message ) ) ; return null ; } else { return inbound message ; } }
public void write to ( final output stream out , multipart entity . call back info call back info ) throws io exception { do write to ( this . mode , out , call back info , bool_ ) ; }
public dsml add operation ( ldap connection connection ) { this . connection = connection ; }
public int match ( ast node node , matching node set node set ) { return impossibl e_ match ; }
public peer address ( inet address addr , int port ) { this ( addr , port , network parameters . protocol version . current . get bitcoin protocol version ( ) ) ; }
protected final void disable events ( long events to disable ) { event mask &= ~ events to disable ; }
private void disconnect inactive channel assignments ( ) { boolean changed = bool_ ; for ( audio output connection connection : m audio output connections ) { if ( connection . is inactive ( ) && m channel connection map . contains key ( connection . get source ( ) ) ) { m channel connection map . remove ( connection . get source ( ) ) ; connection . disconnect ( ) ; changed = bool_ ; } } if ( changed ) { update lowest priority assignment ( ) ; } }
public static boolean is current year ( date time date ) { return date . get year ( ) == date time . now ( ) . get year ( ) ; }
int count ( ) ;
public void show menu ( ) { m sliding menu . show menu ( ) ; }
protected dimension calc preferred size ( ) { if ( soft . length > num_ ) { dimension d = super . calc preferred size ( ) ; if ( ( soft [ num_ ] . get text ( ) == null || soft [ num_ ] . get text ( ) . equals ( str_ ) ) && ( soft [ num_ ] . get text ( ) == null || soft [ num_ ] . get text ( ) . equals ( str_ ) ) && soft [ num_ ] . get icon ( ) == null && soft [ num_ ] . get icon ( ) == null && ( soft . length < num_ || ( ( soft [ num_ ] . get text ( ) == null || soft [ num_ ] . get text ( ) . equals ( str_ ) ) && soft [ num_ ] . get icon ( ) == null ) ) ) { d . set height ( num_ ) ; } return d ; } return super . calc preferred size ( ) ; }
public void change started ( graphics node change event gnce ) { }
public import node ( class node type , string alias ) { this . type = type ; this . alias = alias ; this . is star = bool_ ; this . is static = bool_ ; this . package name = null ; this . field name = null ; }
public aes wrap cipher ( int key size ) { cipher = new aes crypt ( ) ; fixed key size = key size ; }
void delete group ( string group id ) ;
< t > void encode metadata to ( mutable direct buffer buffer , t to encode , int offset ) ;
public byte size value indexing buffer size ( ) { return indexing buffer ; }
protected void apply values ( ) { this . set values ( ) ; }
public input stream fetch checkpoint info ( final argument argument , final map < string , object > key map , int index ) throws vnx file plugin exception { _logger . info ( str_ ) ; input stream i stream = null ; try { query query = new query ( ) ; checkpoint query params ckpt params = new checkpoint query params ( ) ; query . get query request choice ( ) . add ( ckpt params ) ; i stream = _vnx file input request builder . get query param packet ( ckpt params , bool_ ) ; } catch ( jaxb exception jaxb exception ) { throw new vnx file plugin exception ( str_ , jaxb exception . get cause ( ) ) ; } return i stream ; }
public synchronized boolean is active ( ) { return this . active ; }
void change ( ) { if ( this . updates are locked ) { return ; } sort default ( ) ; poll observer . set changed ( ) ; poll observer . notify observers ( this ) ; refresh ( ) ; }
public element remove attribute ( string name ) { check not removed ( ) ; final attribute attribute = get attribute ( name ) ; if ( attribute != null ) { xml tree . remove attribute ( attribute ) ; delegate . get attributes ( ) . remove named item ( name ) ; } return this ; }
void read registers ( ) throws debug exception wrapper ;
public final edge locate edge in graph ( unique vertex graph g graph , vertex v head , vertex v tail ) { edge e res = locate directed edge in graph ( g graph , v head , v tail ) ; return e res == null ? locate directed edge in graph ( g graph , v tail , v head ) : e res ; }
public long lru size ( ) { return lru . size ( ) ; }
execution query process definition keys ( set < string > process definition keys ) ;
public object clone ( ) { referrals answer = null ; try { answer = ( referrals ) super . clone ( ) ; } catch ( clone not supported exception cnse ) { policy manager . debug . error ( str_ , cnse ) ; } answer . name = name ; answer . description = description ; answer . referrals = new hash map ( ) ; iterator items = referrals . key set ( ) . iterator ( ) ; while ( items . has next ( ) ) { object item = items . next ( ) ; answer . referrals . put ( item , referrals . get ( item ) ) ; } return ( answer ) ; }
public static _ fields find by thrift id or throw ( int field id ) { _ fields fields = find by thrift id ( field id ) ; if ( fields == null ) throw new illegal argument exception ( str_ + field id + str_ ) ; return fields ; }
private int query verbosity ( ) { string default verb str = integer . to string ( default verbosity ) ; string verb str = system . get property ( p verbosity ) ; if ( verb str == null ) { if ( resources == null ) read properties ( ) ; if ( resources != null ) { try { verb str = resources . get string ( str_ ) ; } catch ( missing resource exception e ) { verb str = default verb str ; } } else { verb str = default verb str ; } } int verb = default verbosity ; try { verb = integer . parse int ( verb str . trim ( ) ) ; } catch ( exception e ) { system . err . println ( str_ + verb str + str_ ) ; } if ( verbosity == null ) { debug . set debug ( verb ) ; verbosity = new integer ( verb ) ; } return verb ; }
private void animate panel to state ( panel state state , state change reason reason ) { animate panel to state ( state , reason , bas e_ animatio n_ duratio n_ ms ) ; }
public static map < integer , properties > collect properties ( properties properties ) { map < integer , properties > ret = new hash map < integer , properties > ( ) ; if ( properties != null ) { for ( string name : properties . string property names ( ) ) { int index = get index ( name ) ; if ( index >= num_ ) { properties props = ret . get ( index ) ; if ( props == null ) { props = new properties ( ) ; ret . put ( index , props ) ; } string new name = drop token ( name ) ; if ( new name . length ( ) > num_ ) { props . set property ( new name , properties . get property ( name ) ) ; } } } } return ret ; }
public dimension preferred layout size ( container parent ) { return get size ( parent , bool_ ) ; }
public remote node statuses push data ( boolean force ) ;
void on scroll clicked ( ) ;
public static void register player ( final player player ) { mock stendhal rp rule processor . get ( ) . add player ( player ) ; mock stendl rp world . get ( ) . add ( player ) ; }
public int remove ( int key ) ;
public x 5 0 9 crl holder ( byte [ ] crl encoding ) throws io exception { this ( parse stream ( new byte array input stream ( crl encoding ) ) ) ; }
public static reason code value of ( int value ) { reason code entry = m value to enum . get ( value ) ; if ( entry != null ) { return entry ; } throw new illegal argument exception ( str_ + reason code . class . get name ( ) + str_ + value + str_ ) ; }
public void put all ( tungsten properties props ) { properties . put all ( props . map ( ) ) ; }
protected abstract description describe condition ( description description ) ;
public void action removed ( update action action ) ;
public void monitor enter ( ) { mv . visit insn ( opcodes . monitorenter ) ; }
public final boolean is selection rectangular ( ) { return rect select ; }
public jbbp out bit ( final boolean value ) throws io exception { assert not ended ( ) ; if ( this . process commands ) { this . out stream . write bits ( value ? num_ : num_ , jbbp bit number . bit s _ 1 ) ; } return this ; }
public file writer ( file file ) throws io exception { super ( new file output stream ( file ) ) ; }
public static list < css meta data < ? extends styleable , ? > > create css meta data list ( list < css meta data < ? extends styleable , ? > > base list , css meta data < ? extends styleable , ? > ... meta data ) { list < css meta data < ? extends styleable , ? > > styleables = new array list < > ( base list ) ; styleables . add all ( arrays . as list ( meta data ) ) ; return collections . unmodifiable list ( styleables ) ; }
public illegal state exception ( ) { super ( ) ; }
protected boolean is measure type ( ) { return shapefile . is measure type ( this . get shape type ( ) ) ; }
public static void render template ( string template location , map < string , object > context , appendable out writer ) throws template exception , io exception { template template = get template ( template location ) ; render template ( template , context , out writer ) ; }
public min expires parser ( string min expires ) { super ( min expires ) ; }
public boolean wait for ( long timeout ) { if ( ! complete ) { try { value = task . get ( timeout ) ; complete = bool_ ; context . update task log ( log , elapsed time ( ) ) ; } catch ( timeout exception e ) { } catch ( exception e ) { error = new execution exception ( e ) ; complete = bool_ ; context . update task log ( log , elapsed time ( ) , e ) ; } } return complete ; }
public void drop constraints ( database session session , jpam schema manager schema manager , boolean build ) { build constraints ( schema manager , build ) ; for ( table definition table : get table definitions ( ) ) { try { schema manager . drop constraints ( table ) ; } catch ( database exception exception ) { } } }
public belegundu ( ) { super ( num_ , num_ , num_ ) ; }
public void handle button 3 request ( request invocation event event ) throws model control exception { return to home page ( ) ; }
public list < type > new instances ( list < type > tvars ) { list < type > tvars 1 = type . map ( tvars , new instance fun ) ; for ( list < type > l = tvars 1 ; l . non empty ( ) ; l = l . tail ) { type var tv = ( type var ) l . head ; tv . bound = subst ( tv . bound , tvars , tvars 1 ) ; } return tvars 1 ; }
public key management exception ( ) { super ( ) ; }
public final void clear abort broadcast ( ) { if ( m pending result != null ) { m pending result . m abort broadcast = bool_ ; } }
public c action copy reil code ( final j text area text area ) { super ( str_ ) ; m _text area = text area ; }
public static date convert date ( value value , calendar calendar ) { if ( value == value null . instance ) { return null ; } value date d = ( value date ) value . convert to ( value . date ) ; calendar cal = ( calendar ) calendar . clone ( ) ; cal . clear ( ) ; cal . set lenient ( bool_ ) ; long date value = d . get date value ( ) ; set calendar fields ( cal , year from date value ( date value ) , month from date value ( date value ) , day from date value ( date value ) , num_ , num_ , num_ , num_ ) ; long ms = cal . get time in millis ( ) ; return new date ( ms ) ; }
public echo client ( string host , int port , boolean use ssl , long sleep millis ) { this . host = host ; this . port = port ; this . use ssl = use ssl ; this . sleep millis = sleep millis ; }
public event parse resource ( string resource ) throws exception { input stream is = null ; try { is = thread . current thread ( ) . get context class loader ( ) . get resource as stream ( resource ) ; return parse ( io . read lines ( is ) ) ; } finally { if ( is != null ) is . close ( ) ; } }
public void close ( ) throws io exception { datagram socket s = _s ; _s = null ; output stream os = _os ; _os = null ; input stream is = _is ; _is = null ; try { if ( os != null ) os . close ( ) ; if ( is != null ) is . close ( ) ; } finally { if ( s != null ) s . close ( ) ; } }
public undirected sparse multigraph ( ) { super ( edge type . undirected ) ; vertices = new hash map < v , set < e > > ( ) ; edges = new hash map < e , pair < v > > ( ) ; }
private static document create prefs doc ( string qname ) { try { dom implementation di = document builder factory . new instance ( ) . new document builder ( ) . get dom implementation ( ) ; document type dt = di . create document type ( qname , null , pref s_ dt d_ uri ) ; return di . create document ( null , qname , dt ) ; } catch ( parser configuration exception e ) { throw new assertion error ( e ) ; } }
public static void parallel sort ( long [ ] a ) { int n = a . length , p , g ; if ( n <= mi n_ arra y_ sor t_ gran || ( p = fork join pool . get common pool parallelism ( ) ) == num_ ) dual pivot quicksort . sort ( a , num_ , n - num_ , null , num_ , num_ ) ; else new arrays parallel sort helpers . fj long . sorter ( null , a , new long [ n ] , num_ , n , num_ , ( ( g = n / ( p << num_ ) ) <= mi n_ arra y_ sor t_ gran ) ? mi n_ arra y_ sor t_ gran : g ) . invoke ( ) ; }
private char sequence format duration ( long millis ) { if ( millis >= date utils . hou r_ i n_ millis ) { int hours = ( int ) time unit . milliseconds . to hours ( millis + time unit . minutes . to millis ( num_ ) ) ; return resources . get quantity string ( r . plurals . dl _ _duration _hours , hours , hours ) ; } else if ( millis >= date utils . minut e_ i n_ millis ) { int minutes = ( int ) time unit . milliseconds . to minutes ( millis + time unit . seconds . to millis ( num_ ) ) ; return resources . get quantity string ( r . plurals . dl _ _duration _minutes , minutes , minutes ) ; } else { int seconds = ( int ) time unit . milliseconds . to seconds ( millis + num_ ) ; return resources . get quantity string ( r . plurals . dl _ _duration _seconds , seconds , seconds ) ; } }
public static test suite ( ) { final test suite suite = new test suite ( str_ ) ; suite . add test suite ( test eq . class ) ; suite . add test suite ( test ne . class ) ; suite . add test suite ( test eq constant . class ) ; suite . add test suite ( test ne constant . class ) ; suite . add test suite ( test or . class ) ; suite . add test suite ( test in binary search . class ) ; suite . add test suite ( test in hash map . class ) ; return suite ; }
public observable < connection state > connection observable ( ) { return m connection state publish subject . as observable ( ) ; }
public boolean is boolean attribute ( ) { return boolean attribute ; }
protected docs add query owner id ( int value ) { return unsafe param ( str_ , value ) ; }
public zip file ( file f , string encoding ) throws io exception { this . encoding = encoding ; archive = new random access file ( f , str_ ) ; populate from central directory ( ) ; resolve local file header data ( ) ; }
protected abstract v alloc ( int bucketed size ) ;
private static void log session ( final session session ) { final transport strategy transport strategy = transport strategy . find strategy for session ( session ) ; final properties properties = session . get properties ( ) ; final string session details = ( transport strategy != null ) ? transport strategy . to string ( properties ) : properties . to string ( ) ; logger . debug ( str_ + session details ) ; }
private emr step build emr step from aws step ( step summary step summary , boolean verbose ) { emr step emr step = new emr step ( ) ; emr step . set id ( step summary . get id ( ) ) ; emr step . set step name ( step summary . get name ( ) ) ; emr step . set status ( step summary . get status ( ) . get state ( ) ) ; if ( verbose ) { emr step . set jar location ( step summary . get config ( ) . get jar ( ) ) ; emr step . set main class ( step summary . get config ( ) . get main class ( ) ) ; emr step . set script arguments ( step summary . get config ( ) . get args ( ) ) ; emr step . set continue on error ( step summary . get action on failure ( ) ) ; } return emr step ; }
private void switch record layout ( boolean recording mode ) { action bar action bar = get action bar ( ) ; invalidate options menu ( ) ; action bar . set display home as up enabled ( recording mode ) ; action bar . set home button enabled ( recording mode ) ; action bar . set title ( recording mode ? r . string . fm _recorder _name : r . string . app _name ) ; linear layout rec bar = ( linear layout ) find view by id ( r . id . bottom _bar _recorder ) ; linear layout bottom bar = ( linear layout ) find view by id ( r . id . bottom _bar ) ; bottom bar . set visibility ( recording mode ? view . gone : view . visible ) ; rec bar . set visibility ( recording mode ? view . visible : view . gone ) ; m button add to favorite . set visibility ( recording mode ? view . gone : view . visible ) ; }
default void on value changed ( ) { }
public static string replace characters ( final conversion method conversion method , final string input , final int from character , final int to character , final string wrap ) { string converted text = input ; for ( int i = from character ; i <= to character ; i ++ ) { final string character to replace = new string ( character . to chars ( i ) ) ; if ( wrap != null ) { converted text = converted text . replace ( character to replace , wrap + convert text ( conversion method , character to replace ) + wrap ) ; } else { converted text = converted text . replace ( character to replace , convert text ( conversion method , character to replace ) ) ; } } return converted text ; }
public void delete image ( ) { m renderer . delete image ( ) ; m current bitmap = null ; request render ( ) ; }
void send progress message ( int bytes written , int bytes total ) ;
public boolean is any org trx ( ) { object oo = get _ value ( columnnam e_ any org trx ) ; if ( oo != null ) { if ( oo instanceof boolean ) return ( ( boolean ) oo ) . boolean value ( ) ; return str_ . equals ( oo ) ; } return bool_ ; }
private flattened clipboard transform ( clipboard original , transform transform , world data world data ) { check not null ( original ) ; check not null ( transform ) ; check not null ( world data ) ; this . original = original ; this . transform = transform ; this . world data = world data ; }
private static void apply typeface ( view group view group , typeface collection typeface collection ) { for ( int i = num_ ; i < view group . get child count ( ) ; i ++ ) { view child view = view group . get child at ( i ) ; if ( child view instanceof view group ) { apply typeface ( ( view group ) child view , typeface collection ) ; } else { apply for view ( child view , typeface collection ) ; } } }
public boolean open wr ( ) { read = bool_ ; try { out = new file output stream ( file ) ; buff out = new buffered output stream ( out ) ; return bool_ ; } catch ( io exception e ) { return bool_ ; } }
protected druid web service build non ui druid web service ( object mapper mapper ) { return build druid web service ( druid client config helper . get non ui service config ( ) , mapper ) ; }
void changed ( performance level lvl , common allocator < ? > prevallocator , common allocator < ? > tgtallocator ) ;
public abstract void bind cursor ( cursor cursor ) ;
public static void expand selection ( final zy graph graph ) { check arguments ( graph ) ; final selectable graph < navi node > selectable graph = selectable graph . wrap ( graph ) ; graph helpers . expand selection up ( selectable graph ) ; graph helpers . expand selection down ( selectable graph ) ; }
public void on list item un selected ( view view , int parent index ) { }
public void add event ( v event event ) { add component ( event ) ; }
public void inject instrumentation ( instrumentation instrumentation ) { m instrumentation = instrumentation ; }
public static artifact coordinates from string ( string string ) { final matcher matcher = vali d_ pattern . matcher ( string ) ; if ( matcher . matches ( ) ) { if ( matcher . group ( num_ ) != null ) { return new artifact coordinates ( matcher . group ( num_ ) , matcher . group ( num_ ) , matcher . group ( num_ ) , matcher . group ( num_ ) ) ; } else { return new artifact coordinates ( matcher . group ( num_ ) , matcher . group ( num_ ) , matcher . group ( num_ ) ) ; } } else { throw new illegal argument exception ( string ) ; } }
private void exception caught ( exception e ) { peer address addr = get address ( ) ; string s = addr == null ? str_ : addr . to string ( ) ; if ( e instanceof connect exception || e instanceof io exception ) { log . info ( s + str_ + e . get message ( ) ) ; } else { log . warn ( s + str_ , e ) ; thread . uncaught exception handler handler = threading . uncaught exception handler ; if ( handler != null ) handler . uncaught exception ( thread . current thread ( ) , e ) ; } close ( ) ; }
public value max ( value num ) { return new aggregation function ( num , aggregation type . maximum ) ; }
public void receive result ( map < string , object > result ) ;
void destroy pinned shadow ( ) { if ( m pinned section != null ) { m recycle section = m pinned section ; m pinned section = null ; } }
public orientation event listener ( context context ) { this ( context , sensor manager . senso r_ dela y_ normal ) ; }
static string to formed string ( int ms ) { string builder s = new string builder ( ) ; boolean minus = bool_ ; if ( ms < num_ ) { s . append ( str_ ) ; minus = bool_ ; ms = - ms ; } else if ( ms == num_ ) { return str_ ; } int hour = ms / ( num_ * num_ * num_ ) ; ms %= ( num_ * num_ * num_ ) ; int minute = ms / ( num_ * num_ ) ; if ( hour != num_ ) { if ( minus && minute != num_ ) { s . append ( str_ ) ; } s . append ( integer . to string ( hour ) + str_ ) ; } if ( minute != num_ ) { if ( hour != num_ ) { s . append ( str_ ) ; } s . append ( integer . to string ( minute ) + str_ ) ; if ( minus && hour != num_ ) { s . append ( str_ ) ; } } return s . to string ( ) ; }
public tsig ( string algorithm , string name , string key ) { this ( hma c_ m d5 , name , key ) ; if ( algorithm . equals ignore case ( str_ ) ) this . alg = hma c_ m d5 ; else if ( algorithm . equals ignore case ( str_ ) ) this . alg = hma c_ sh a1 ; else if ( algorithm . equals ignore case ( str_ ) ) this . alg = hma c_ sh a 2 2 4 ; else if ( algorithm . equals ignore case ( str_ ) ) this . alg = hma c_ sh a 2 5 6 ; else if ( algorithm . equals ignore case ( str_ ) ) this . alg = hma c_ sh a 3 8 4 ; else if ( algorithm . equals ignore case ( str_ ) ) this . alg = hma c_ sh a 5 1 2 ; else throw new illegal argument exception ( str_ ) ; get digest ( ) ; }
public static void main ( final string [ ] args ) { dom test case . do main ( elementchangeattributevalue . class , args ) ; }
public boolean delete ( long id ) { return database . delete ( databas e_ table , ke y_ id + str_ + id , null ) > num_ ; }
public int size ( ) { return num_ ; }
int index ( ) ;
public insert into latch spin ( insert into latch factory factory ) { this . factory = factory ; is completed = bool_ ; earlier = null ; msec timeout = num_ ; }
public string ( string string ) { value = string . value ; offset = string . offset ; count = string . count ; }
public boolean has global sub schema ( ) { return ( global sub schema names != null ) && ! global sub schema names . is empty ( ) ; }
public abstract void after class ( config config , clazz clazz , module builder module builder ) throws io exception ;
public void test _close ( ) { final direct buffer pool allocator fixture = new direct buffer pool allocator ( pool ) ; fixture . close ( ) ; }
public boolean equals ( object other ) { if ( other instanceof x 5 0 9 cert info ) { return equals ( ( x 5 0 9 cert info ) other ) ; } else { return bool_ ; } }
void stop auto blur update ( ) ;
protected string build preamble ( command sender sender ) { return chat color . gray + preamble ; }
public writer write ( writer writer ) throws json exception { return this . write ( writer , num_ , num_ ) ; }
public void message data received ( channel message data ) ;
list < ? extends indices request > sub requests ( ) ;
private int measure height ( int measure spec ) { float result ; int spec mode = measure spec . get mode ( measure spec ) ; int spec size = measure spec . get size ( measure spec ) ; if ( spec mode == measure spec . exactly ) { result = spec size ; } else { result = m paint selected . get stroke width ( ) + get padding top ( ) + get padding bottom ( ) ; if ( spec mode == measure spec . a t_ most ) { result = math . min ( result , spec size ) ; } } return ( int ) float math . ceil ( result ) ; }
public synchronized void preview feature ( string f ) { int feature hash = get feature hash ( f ) ; if ( feature 2 id . contains key ( feature hash ) ) { log . warn ( str_ + str_ , f , feature hash ) ; } else { feature 2 id . put ( feature hash , next feature id ++ ) ; } if ( feature names != null ) { feature names . add ( f ) ; } }
public modeled guacamole configuration ( ) { }
private void reorder ( entity entity , int new position ) { rp slot slot = entity . get container slot ( ) ; if ( slot . size ( ) == num_ ) { return ; } new position = math . min ( new position , slot . size ( ) - num_ ) ; list < rp object > objects copy = new array list < rp object > ( slot . size ( ) ) ; for ( rp object obj : slot ) { objects copy . add ( obj ) ; } int idx = objects copy . index of ( entity ) ; if ( idx == new position ) { return ; } objects copy . remove ( entity ) ; objects copy . add ( new position , entity ) ; slot . clear ( ) ; for ( rp object obj : objects copy ) { slot . add preserving id ( obj ) ; } slot owner parent = entity . get container owner ( ) ; if ( parent instanceof entity ) { ( ( entity ) parent ) . notify world about changes ( ) ; } }
private static sql exception run through exception interceptor ( exception interceptor ex interceptor , sql exception sql ex , connection conn ) { if ( ex interceptor != null ) { sql exception intercepted ex = ex interceptor . intercept exception ( sql ex , conn ) ; if ( intercepted ex != null ) { return intercepted ex ; } } return sql ex ; }
public void run async ( string local name , model service model service , map < string , object > context , generic requester requester , boolean persist ) throws generic service exception ;
public abstract sparse array data row ( ) { this ( num_ ) ; }
public void destroy ( ) { super . destroy ( ) ; }
public final void clear ( ) { collection . clear ( ) ; }
private void init values ( ) { for ( int i = num_ ; i < ke y_ count ; i ++ ) { values [ i ] = new byte [ valu e_ length ] ; rnd . next bytes ( values [ i ] ) ; } }
public pkcs 1 1 signature token ( string pkcs 1 1 path ) { this ( pkcs 1 1 path , ( password input callback ) null ) ; }
public abstract void enqueue method usages processor ( ref method ref method , usages processor p ) ;
void update subscription ( string client id , list < string > topic levels , mqtt qo s qos ) ;
divider < t > next horizontal ( ) { return next horizontal ; }
public void register to ( root cfg root configuration ) throws config exception { auhtz filter manager . register to ( root configuration ) ; root configuration . add http endpoint add listener ( this ) ; root configuration . add http endpoint delete listener ( this ) ; for ( string endpoint name : root configuration . list http endpoints ( ) ) { final http endpoint cfg configuration = root configuration . get http endpoint ( endpoint name ) ; configuration . add change listener ( this ) ; if ( configuration . is enabled ( ) ) { final config change result result = apply configuration add ( configuration ) ; if ( ! result . get result code ( ) . equals ( result code . success ) ) { logger . error ( result . get messages ( ) . get ( num_ ) ) ; } } } }
public void un register event ( object object ) { if ( no param map . contains key ( object ) ) { no param map . remove ( object ) ; } if ( has param map . contains key ( object ) ) { has param map . remove ( object ) ; } }
r write ordered int ( long offset , int i ) throws buffer overflow exception ;
public static int index in parent ( layer layer ) { group layer parent = layer . parent ( ) ; if ( parent == null ) return - num_ ; for ( int ii = parent . children ( ) - num_ ; ii >= num_ ; ii -- ) { if ( parent . child at ( ii ) == layer ) return ii ; } throw new assertion error ( ) ; }
public string test string ( string thing ) throws org . apache . thrift . t exception ;
public static notification compat . builder from ( context context , media session compat media session ) { media controller compat controller = media session . get controller ( ) ; media metadata compat media metadata = controller . get metadata ( ) ; media description compat description = media metadata . get description ( ) ; notification compat . builder builder = new notification compat . builder ( context ) ; builder . set content title ( description . get title ( ) ) . set content text ( description . get subtitle ( ) ) . set sub text ( description . get description ( ) ) . set content intent ( controller . get session activity ( ) ) . set visibility ( notification compat . visibilit y_ public ) . set when ( num_ ) . set show when ( bool_ ) ; if ( description . get icon bitmap ( ) == null ) { builder . set large icon ( bitmap factory . decode resource ( context . get resources ( ) , r . drawable . art _default ) ) ; } else { builder . set large icon ( description . get icon bitmap ( ) ) ; } return builder ; }
public glider image ( string image source , iterable < ? extends lat lon > corners , double altitude ) { this ( image source , image source , corners , altitude ) ; }
public text area figure ( ) { this ( resource bundle util . get bundle ( str_ ) . get string ( str_ ) ) ; }
public void test success with success threshold and failure ratio ( ) { circuit breaker breaker = new circuit breaker ( ) . with failure threshold ( num_ , num_ ) . with success threshold ( num_ ) ; breaker . half open ( ) ; half open state state = new half open state ( breaker ) ; state . record success ( ) ; assert false ( breaker . is open ( ) ) ; assert false ( breaker . is closed ( ) ) ; state . record success ( ) ; assert true ( breaker . is closed ( ) ) ; }
void remove view at ( int index ) { final int offset = get offset ( index ) ; final view view = m callback . get child at ( offset ) ; if ( view == null ) { return ; } m callback . remove view at ( offset ) ; if ( m bucket . remove ( offset ) ) { m hidden views . remove ( view ) ; } if ( debug ) { log . d ( tag , str_ + index + str_ + offset + str_ + this ) ; } }
public int process byte ( byte in , byte [ ] out , int out off ) throws data length exception , illegal state exception { int result len = num_ ; if ( buf off == buf . length ) { result len = cipher . process block ( buf , num_ , out , out off ) ; buf off = num_ ; } buf [ buf off ++ ] = in ; return result len ; }
private static boolean file exists ( string file path ) { file file = new file ( file path ) ; return file . exists ( ) ; }
private static boolean add causal chain ( set < throwable > seen , throwable t ) { for ( ; t != null ; t = t . get cause ( ) ) { boolean first time seen = seen . add ( t ) ; if ( ! first time seen ) { return bool_ ; } } return bool_ ; }
public vector 3 ( float [ ] values ) { this . set ( values [ num_ ] , values [ num_ ] , values [ num_ ] ) ; }
private void toggle map ( ) { set map visible ( ! minimap w . is visible ( ) ) ; }
public void java _security _ access controller _get stack access control context ( soot method method , reference variable this var , reference variable return var , reference variable params [ ] ) { helper . assign object to ( return var , environment . v ( ) . get least object ( ) ) ; }
public ushr expr new ushr expr ( value op 1 , value op 2 ) { return new j ushr expr ( op 1 , op 2 ) ; }
public boolean is set param code ( ) { return this . param code != null ; }
public static final axis aligned bounds show ( window owner , axis aligned bounds bounds ) { set bounds dialog dialog = new set bounds dialog ( owner , bounds ) ; dialog . set location relative to ( owner ) ; dialog . set visible ( bool_ ) ; if ( ! dialog . canceled ) { convex convex = dialog . pnl rectangle . get shape ( ) ; vector 2 tx = dialog . pnl transform . get translation ( ) ; rectangle r = ( rectangle ) convex ; axis aligned bounds b = new axis aligned bounds ( r . get width ( ) , r . get height ( ) ) ; b . translate ( tx ) ; return b ; } return null ; }
public boolean opt boolean ( string key ) { return this . opt boolean ( key , bool_ ) ; }
public void test _ticket _ 7 9 2d ( ) throws exception { new test helper ( str_ , str_ , str_ , str_ ) . run test ( ) ; }
public interrupted io exception ( ) { }
protected cc animation ( string name , float delay , array list < cc sprite frame > frames ) { delay _ = delay ; name _ = name ; frames _ = new array list < cc sprite frame > ( ) ; if ( frames != null ) frames _ . add all ( frames ) ; }
protected path create path ( position start , position end ) { path path = new path ( start , end ) ; path . set follow terrain ( bool_ ) ; path . set path type ( av key . grea t_ circle ) ; path . set altitude mode ( world wind . clam p_ t o_ ground ) ; path . set delegate owner ( this . get active delegate owner ( ) ) ; path . set attributes ( this . get active shape attributes ( ) ) ; return path ; }
public void test create delete ( ) throws exception { igfs logger log = igfs logger . logger ( endpoint , igf s_ name , lo g_ dir , num_ ) ; igfs logger same log 0 = igfs logger . logger ( endpoint , igf s_ name , lo g_ dir , num_ ) ; assert log == same log 0 ; igfs logger other log = igfs logger . logger ( str_ + endpoint , igf s_ name , lo g_ dir , num_ ) ; assert log != other log ; other log . close ( ) ; log . log delete ( path , primary , bool_ ) ; log . close ( ) ; file log file = new file ( lo g_ file ) ; assert ! log file . exists ( ) ; igfs logger same log 1 = igfs logger . logger ( endpoint , igf s_ name , lo g_ dir , num_ ) ; assert same log 0 == same log 1 ; same log 0 . close ( ) ; assert ! log file . exists ( ) ; same log 1 . close ( ) ; assert log file . exists ( ) ; log file . delete ( ) ; igfs logger same log 2 = igfs logger . logger ( endpoint , igf s_ name , lo g_ dir , num_ ) ; assert same log 0 != same log 2 ; same log 2 . close ( ) ; assert ! log file . exists ( ) ; }
public string to string ( ) { matrix w = get w ( ) ; return matrix utils . to string ( w ) ; }
byte [ ] create ( int size in bits ) ;
private synchronized void abort merges ( ) { stop merges = bool_ ; for ( final merge policy . one merge merge : pending merges ) { if ( info stream . is enabled ( str_ ) ) { info stream . message ( str_ , str_ + seg string ( merge . segments ) ) ; } merge . rate limiter . set abort ( ) ; merge finish ( merge ) ; } pending merges . clear ( ) ; for ( final merge policy . one merge merge : running merges ) { if ( info stream . is enabled ( str_ ) ) { info stream . message ( str_ , str_ + seg string ( merge . segments ) ) ; } merge . rate limiter . set abort ( ) ; } while ( running merges . size ( ) != num_ ) { if ( info stream . is enabled ( str_ ) ) { info stream . message ( str_ , str_ + running merges . size ( ) + str_ ) ; } do wait ( ) ; } notify all ( ) ; assert num_ == merging segments . size ( ) ; if ( info stream . is enabled ( str_ ) ) { info stream . message ( str_ , str_ ) ; } }
protected n4 type declaration impl ( ) { super ( ) ; }
jc expression cast ( jc expression tree , type target ) { int oldpos = make . pos ; make . at ( tree . pos ) ; if ( ! types . is same type ( tree . type , target ) ) { if ( ! resolve . is accessible ( env , target . tsym ) ) resolve . log access error internal ( env , tree , target ) ; tree = make . type cast ( make . type ( target ) , tree ) . set type ( target ) ; } make . pos = oldpos ; return tree ; }
public void scroll to finish activity ( ) { final int child width = m content view . get width ( ) ; int left = num_ , top = num_ ; left = child width + m shadow left . get intrinsic width ( ) + overscrol l_ distance ; m drag helper . smooth slide view to ( m content view , left , top ) ; invalidate ( ) ; }
public boolean flag action items ( ) ;
private static boolean has valid parent chain ( resource bundle bundle ) { long now = system . current time millis ( ) ; while ( bundle != null ) { if ( bundle . expired ) { return bool_ ; } cache key key = bundle . cache key ; if ( key != null ) { long expiration time = key . expiration time ; if ( expiration time >= num_ && expiration time <= now ) { return bool_ ; } } bundle = bundle . parent ; } return bool_ ; }
public observable < integer > exercise concat map ( observable < movies > movies ) { return movies . < integer > concat map ( null ) ; }
public boolean is f fmpeg command running ( ) ;
public jenkins http client ( uri uri ) { this . context = uri . get path ( ) ; if ( ! context . ends with ( str_ ) ) { context += str_ ; } this . uri = uri ; this . mapper = get default mapper ( ) ; http params http parameters = new basic http params ( ) ; http connection params . set connection timeout ( http parameters , num_ ) ; http connection params . set so timeout ( http parameters , num_ ) ; this . client = new default http client ( new pooling client connection manager ( ) , http parameters ) ; }
void added reference ( i navi operand tree node operand tree node , i reference reference ) ;
public fssaml service view bean ( ) { super ( str_ ) ; set default display url ( defaul t_ displa y_ url ) ; }
public distributed log client builder checksum ( boolean enabled ) { distributed log client builder new builder = new builder ( this ) ; new builder . _client config . set checksum enabled ( enabled ) ; return new builder ; }
public unit selection synthesizer ( ) { }
public final void exit app ( ) { gdx . app . exit ( ) ; }
public void string length ( ) throws io exception ;
public basic line parser ( protocol version proto ) { if ( proto == null ) { proto = http version . htt p _ 1 _ 1 ; } this . protocol = proto ; }
public void remove link at ( int index ) throws exception { if ( ( index >= num_ ) && ( index < size ( ) ) ) { remove ( index ) ; } else { throw new exception ( str_ ) ; } }
protected abstract double sim ( int intersection size , int na , int nb ) ;
private long cache response age ( ) { long apparent received age = served date != null ? math . max ( num_ , received response millis - served date . get time ( ) ) : num_ ; long received age = age seconds != - num_ ? math . max ( apparent received age , seconds . to millis ( age seconds ) ) : apparent received age ; long response duration = received response millis - sent request millis ; long resident duration = now millis - received response millis ; return received age + response duration + resident duration ; }
public void update selected unit ( ) { if ( get subscription unit ctrl ( ) . is unit selected ( ) ) { model . get subscription ( ) . set unit key ( get subscription unit ctrl ( ) . get model ( ) . get selected unit id ( ) ) ; model . get subscription ( ) . set unit name ( get subscription unit ctrl ( ) . get model ( ) . get selected unit name ( ) ) ; return ; } model . get subscription ( ) . set unit key ( num_ ) ; model . get subscription ( ) . set unit name ( str_ ) ; }
public boolean can internal frame ( ) { return can internal frame ; }
private void run queued requests ( lime wire core lime wire core ) { lime wire core . get external control ( ) . run queued control request ( ) ; }
private void update progress ( string progress label , int progress ) { if ( my host != null && ( ( progress != previous progress ) || ( ! progress label . equals ( previous progress label ) ) ) ) { my host . update progress ( progress label , progress ) ; } previous progress = progress ; previous progress label = progress label ; }
private void initialize ds appl if ops table ( ) { set connection handlers = this . monitor . get connection handlers ( ) ; for ( iterator iter = connection handlers . iterator ( ) ; iter . has next ( ) ; ) { object name name = ( object name ) iter . next ( ) ; add row in ds appl if ops table ( name ) ; } }
public xtn entry ( server transaction xtn ) { super ( xtn ) ; _xtn data = new xtn data ( this ) ; if ( ! ( xtn . mgr instanceof local transaction manager ) ) _join lock = new object ( ) ; else _join lock = null ; _allow fifo notifications for non fifo type = new fifo background request . allow fifo notifications for non fifo type ( ) ; }
public static string short signature ( string sig ) { sig = sig . substring ( num_ , sig . length ( ) - num_ ) ; return sig . replace all ( str_ , str_ ) ; }
public static final void fill rectangle from top left ( g l2 gl , double sx , double sy , double w , double h ) { gl . gl begin ( g l2 . g l_ quads ) ; gl . gl vertex 2d ( sx , sy ) ; gl . gl vertex 2d ( sx + w , sy ) ; gl . gl vertex 2d ( sx + w , sy - h ) ; gl . gl vertex 2d ( sx , sy - h ) ; gl . gl end ( ) ; }
public convert anonymous descriptor ( ) { super ( i java refactorings . conver t_ anonymous ) ; }
public boolean is directed ( ) { return m _directed ; }
public inheritable thread local ( ) { }
private void show feedback ( string message ) { if ( my host != null ) { my host . show feedback ( message ) ; } else { system . out . println ( message ) ; } }
public void on operation started ( ) ;
protected abstract base file system < p > open file system ( uri uri , map < string , ? > env ) throws io exception ;
public void thread assert true ( boolean b ) { try { assert true ( b ) ; } catch ( assertion failed error t ) { thread record failure ( t ) ; throw t ; } }
public void force trigger rebuild ( ) ;
public string to friendly string ( ) { return friendl y_ format . code ( num_ , currency code ) . format ( this ) . to string ( ) ; }
public static void main ( final string [ ] args ) { dom test case . do main ( documentimportnode 0 3 . class , args ) ; }
public static s m_ syste m_ message st r_ skil l_ suc c_ no fly _ en d_ m e_ t o_ b ( string skilltarget ) { return new s m_ syste m_ message ( num_ , skilltarget ) ; }
public void execute ( runnable runnable ) { this . submit ( runnable ) ; }
public boolean delete ( string name ) { string lc name = name . to lower case ( ) ; if ( this . hmap . contains key ( lc name ) ) { this . hmap . remove ( lc name ) ; return bool_ ; } else { return bool_ ; } }
void remove team ( glow team team ) { team . get entries ( ) . for each ( null ) ; teams . remove ( team . get name ( ) ) ; broadcast ( scoreboard team message . remove ( team . get name ( ) ) ) ; }
public void add capabilities filter listener ( capabilities filter change listener l ) { m _ capabilities filter change listeners . add ( l ) ; }
public ignite uuid xid ( ) ;
public double min x ( ) { return math . min ( p 0 . x , p 1 . x ) ; }
public native void remove keys ( byte [ ] session id ) ;
int modify matter stored ( int amount ) ;
public void hide progress ( ) { m search progress . set visibility ( view . gone ) ; m left action . set alpha ( num_ ) ; m left action . set visibility ( view . visible ) ; object animator . of float ( m left action , str_ , num_ , num_ ) . start ( ) ; }
public db singleton ( sq lite database m db , context context , db helper helper ) { this . m db = m db ; m context = context ; m db helper = helper ; }
public static byte read byte with preamble ( string preamble , final evolution state state , final line number reader reader ) { decode return d = check preamble ( preamble , state , reader ) ; code . decode ( d ) ; if ( d . type != decode return . t_ byte ) state . output . fatal ( str_ + d . line number + str_ + preamble + str_ + d . data ) ; return ( byte ) ( d . l ) ; }
void multi search ( multi search request request , action listener < multi search response > listener ) ;
public oracle document create document from stream ( input stream content ) { return ( new oracle document impl ( null , null , null , content , null ) ) ; }
public boolean is number blocked ( contact id contact ) { return rcs status . blocked . equals ( get contact sharing status ( contact ) ) ; }
public void add filter to from channels ( viewer filter filter ) ;
public static synchronized example polygon interface create example polygon ( string hint ) { if ( example polygon impl == null ) { example polygon impl = new example polygon impl iom ( ) ; } return example polygon impl ; }
public synchronized boolean is closed ( ) { return journal writer == null ; }
boolean is enable smoothing ( ) ;
public static string to string priority ( int priority ) { if ( priority == thread . nor m_ priority ) return str_ ; if ( priority == thread . ma x_ priority ) return str_ ; if ( priority == thread . mi n_ priority ) return str_ ; return null ; }
public void dispose ( ) { container root = get root ( ) ; if ( logger . is loggable ( platform logger . level . finer ) ) { logger . finer ( str_ + root ) ; } if ( root != null ) { root . remove component listener ( this ) ; if ( root instanceof window ) { ( ( window ) root ) . remove window listener ( this ) ; } buffer strategy bs = get buffer strategy ( bool_ ) ; if ( bs != null ) { bs . dispose ( ) ; } } this . root = null ; weak bs = null ; }
public int size ( ) { return this . get block change count ( ) ; }
boolean has write replace method ( ) { require initialized ( ) ; return ( write replace method != null ) ; }
public final int peek ( ) { try { return m _map [ m _first free - num_ ] ; } catch ( array index out of bounds exception e ) { throw new empty stack exception ( ) ; } }
public frame body tory ( byte text encoding , string text ) { super ( text encoding , text ) ; }
public static void enable new line ( ) { appender appender = logger . get root logger ( ) . get appender ( str_ ) ; appender . set layout ( default layout ) ; }
public void run test ( ) throws throwable { document doc ; node list element list ; node test address ; named node map attributes ; attr street attr ; boolean specified ; node removed node ; doc = ( document ) load ( str_ , bool_ ) ; element list = doc . get elements by tag name ( str_ ) ; test address = element list . item ( num_ ) ; attributes = test address . get attributes ( ) ; assert not null ( str_ , attributes ) ; removed node = attributes . remove named item ( str_ ) ; street attr = ( attr ) attributes . get named item ( str_ ) ; assert not null ( str_ , street attr ) ; specified = street attr . get specified ( ) ; assert false ( str_ , specified ) ; }
public abstract void dispose ( ) throws sasl exception ;
public boolean is state active ( state state ) { switch ( state ) { case auto _char : return state vector [ num_ ] == state . auto _char ; case auto _loop : return state vector [ num_ ] . ordinal ( ) >= state . auto _loop . ordinal ( ) && state vector [ num_ ] . ordinal ( ) <= state . auto _loop _switch _case _enum _asm . ordinal ( ) ; case auto _loop _switch _case : return state vector [ num_ ] . ordinal ( ) >= state . auto _loop _switch _case . ordinal ( ) && state vector [ num_ ] . ordinal ( ) <= state . auto _loop _switch _case _enum _asm . ordinal ( ) ; case auto _loop _switch _case _enum _asm : return state vector [ num_ ] == state . auto _loop _switch _case _enum _asm ; default : return bool_ ; } }
public list < versioned < v > > remove ( k key ) { while ( bool_ ) { list < versioned < v > > items = map . get ( key ) ; synchronized ( items ) { if ( map . remove ( key , items ) ) return items ; } } }
public finnish analyzer ( char array set stopwords ) { this ( stopwords , char array set . empt y_ set ) ; }
private signed requests helper ( ) { }
media type content type ( ) ;
boolean is applicable to ( schema sch ) ;
default http response put ( string path , string content , charset charset ) { return execute ( http headers . of ( http method . put , path ) , content , charset ) ; }
protected node iterator ( directed graph graph , boolean show leaf nodes , boolean show decision nodes , boolean show directed graph nodes ) { this ( graph . get root node ( ) , show leaf nodes , show decision nodes , show directed graph nodes ) ; }
public entry ( object key , rect rect , int image offset x , int image offset y , int image width , int image height ) { this . key = key ; this . rect = rect ; this . image offset x = image offset x ; this . image offset y = image offset y ; this . image width = image width ; this . image height = image height ; }
void write long ( prepared statement statement , int index , long value ) throws sql exception ;
int node index ( ) ;
public boolean is label movable ( ) { mx graph graph = graph component . get graph ( ) ; string label = graph . get label ( state . get cell ( ) ) ; return graph . is label movable ( state . get cell ( ) ) && label != null && label . length ( ) > num_ ; }
public static void start action foo ( context context , string param 1 , string param 2 ) { intent intent = new intent ( context , my intent service 2 . class ) ; intent . set action ( actio n_ foo ) ; intent . put extra ( extr a_ para m1 , param 1 ) ; intent . put extra ( extr a_ para m2 , param 2 ) ; context . start service ( intent ) ; }
void load ( user profile profile ) ;
private void write live data ( ) { lock . lock ( bool_ ) ; try { this . if live record count = num_ ; this . if total record count = num_ ; write disk store id ( ) ; save gemfire version ( ) ; save instantiators ( ) ; save data serializers ( ) ; save crf ids ( ) ; save drf ids ( ) ; save krf ids ( ) ; for ( disk region view drv : this . dr map . values ( ) ) { write live data ( drv ) ; } for ( disk region view drv : this . parent . get disk regions ( ) ) { write live data ( drv ) ; } save pr configs ( ) ; save canonical ids ( ) ; save revoked members ( ) ; if ( logger . is debug enabled ( ) ) { logger . debug ( str_ , this . if live record count , this . if total record count ) ; } } finally { lock . unlock ( ) ; } }
protected int _ _indirect ( int offset ) { return offset + bb . get int ( offset ) ; }
public static changed address attribute create changed address attribute ( transport address address ) { changed address attribute attribute = new changed address attribute ( ) ; attribute . set address ( address ) ; return attribute ; }
public list < string > finish ( ) throws io exception { list < string > response = new array list < string > ( ) ; writer . append ( str_ + boundary + str_ ) . append ( lin e_ feed ) ; writer . close ( ) ; int status = http conn . get response code ( ) ; if ( status == http url connection . htt p_ ok ) { buffered reader reader = new buffered reader ( new input stream reader ( http conn . get input stream ( ) ) ) ; string line = null ; while ( ( line = reader . read line ( ) ) != null ) { response . add ( line ) ; } reader . close ( ) ; http conn . disconnect ( ) ; } else { throw new io exception ( str_ + status ) ; } return response ; }
public static void load ( string url ) { string driver = get driver ( url ) ; if ( driver != null ) { load user class ( driver ) ; } }
public svgomsvg element ( string prefix , abstract document owner ) { super ( prefix , owner ) ; initialize live attributes ( ) ; }
public void test tungsten catalog accept with file ( ) throws replicator exception , interrupted exception { replicate filter rf = new replicate filter ( ) ; rf . set tungsten schema ( str_ ) ; rf . set file prefix ( str_ ) ; filter helper . set filter ( rf ) ; verify stmt accept ( filter helper , num_ , str_ , str_ ) ; verify row accept ( filter helper , num_ , str_ , str_ , new string [ ] { str_ } , new object [ ] { num_ } ) ; filter helper . done ( ) ; }
void insert _ulonglong ( long value ) throws org . omg . dynamic any . dyn any package . type mismatch , org . omg . dynamic any . dyn any package . invalid value ;
public com . sun . identity . liberty . ws . common . jaxb . ac . smartcard type create smartcard type ( ) throws javax . xml . bind . jaxb exception { return new com . sun . identity . liberty . ws . common . jaxb . ac . impl . smartcard type impl ( ) ; }
public double noise ( double x , double y , double z , int octaves , double frequency , double amplitude ) { return this . noise ( x , y , z , octaves , frequency , amplitude , bool_ ) ; }
boolean is metrics ( ) ;
private list < monitored thread > read and dml ( operator creator read plan , operator creator dml plan ) { list < monitored thread > threads = concurrent test builder impl . create ( ) . add ( str_ , read plan ) . sync ( str_ , stage . pos t_ begin ) . sync ( str_ , stage . pr e_ scan ) . mark ( stage . pr e_ begin , stage . pr e_ scan ) . add ( str_ , dml plan ) . sync ( str_ , stage . pr e_ begin ) . sync ( str_ , stage . finish ) . mark ( stage . pr e_ begin , stage . pos t_ commit ) . build ( this ) ; thread helper . run and check ( threads ) ; new time marker comparison ( threads ) . verify ( str_ , str_ , str_ , str_ ) ; return threads ; }
private void create text content child ( element parent , string tagname , string text content ) { element child = parent . get owner document ( ) . create element ( tagname ) ; child . set text content ( text content ) ; parent . append child ( child ) ; }
public void cascade delete ( ) ;
public void test basics ( ) throws io exception { analyzer a = new hungarian analyzer ( ) ; check one term ( a , str_ , str_ ) ; check one term ( a , str_ , str_ ) ; assert analyzes to ( a , str_ , new string [ ] { } ) ; a . close ( ) ; }
public id repo select type view bean ( ) { super ( str_ ) ; set default display url ( defaul t_ displa y_ url ) ; create page title model ( ) ; create property model ( ) ; register children ( ) ; }
public void remove ( t line ) ;
public kleinberg small world generator ( supplier < ? extends graph < v , e > > graph factory , supplier < v > vertex factory , supplier < e > edge factory , int row _count , int col _count , double clustering exponent ) { super ( graph factory , vertex factory , edge factory , row _count , col _count , bool_ ) ; clustering _exponent = clustering exponent ; initialize ( ) ; }
public void put ( key key , value val ) { if ( key == null ) throw new null pointer exception ( str_ ) ; if ( val == null ) { delete ( key ) ; return ; } int i = rank ( key ) ; if ( i < n && keys [ i ] . compare to ( key ) == num_ ) { vals [ i ] = val ; return ; } if ( n == keys . length ) resize ( num_ * keys . length ) ; for ( int j = n ; j > i ; j -- ) { keys [ j ] = keys [ j - num_ ] ; vals [ j ] = vals [ j - num_ ] ; } keys [ i ] = key ; vals [ i ] = val ; n ++ ; assert check ( ) ; }
public modifiable hyper bounding box ( double [ ] min , double [ ] max ) { if ( min . length != max . length ) { throw new illegal argument exception ( str_ ) ; } this . min = min ; this . max = max ; }
public static boolean is libvpx available ( ) { return vpx decoder . i s_ available ; }
protected void write column default value stmt ( table table , column column , string builder ddl ) { object parsed default = column . get parsed default value ( ) ; if ( parsed default != null ) { if ( ! database info . is default values for long types supported ( ) && ( ( column . get mapped type code ( ) == types . longvarbinary ) || ( column . get mapped type code ( ) == types . longvarchar ) ) ) { throw new model exception ( str_ ) ; } if ( is valid default value ( column . get default value ( ) , column . get mapped type code ( ) ) ) { ddl . append ( str_ ) ; write column default value ( table , column , ddl ) ; } } else if ( database info . is default value used for identity spec ( ) && column . is auto increment ( ) ) { ddl . append ( str_ ) ; write column default value ( table , column , ddl ) ; } else if ( ! string utils . is blank ( column . get default value ( ) ) ) { ddl . append ( str_ ) ; write column default value ( table , column , ddl ) ; } }
protected abstract void create ssl context ( ssl host config ssl host config ) throws exception ;
void on timed text update ( byte [ ] pixels , int width , int height ) ;
public void handle scroll ( ) ;
boolean is rerunnable ( ) ;
void execute ( context context , frame window ) ;
public symmetrical word alignment word align ( sequence < tk > source , sequence < tk > target , int source input id , input properties source input properties ) ;
public object run safely ( catbert . fast stack stack ) throws exception { if ( is networked playlist call ( stack , num_ ) ) { return make networked call ( stack ) ; } playlist p = get playlist ( stack ) ; if ( p != null && p . get id ( ) == num_ ) { p . clear ( ) ; } else if ( permissions . has permission ( permissions . permissio n_ playlist , stack . get ui mgr ( ) ) ) { wizard . get instance ( ) . remove playlist ( p ) ; sage . plugin . plugin event manager . post event ( sage . plugin . plugin event manager . playlis t_ removed , new object [ ] { sage . plugin . plugin event manager . va r_ playlist , p , sage . plugin . plugin event manager . va r_ uicontext , ( stack . get ui mgr ( ) != null ? stack . get ui mgr ( ) . get local ui client name ( ) : null ) } ) ; } return null ; }
public boolean remove overdue organizations ( long current time ) ;
protected boolean is off content left ( float p ) { if ( p < m content rect . left ) return bool_ ; else return bool_ ; }
public void add contents ( collection < content element > contents ) { this . contents . add all ( contents ) ; }
public rd knn tree header ( int page size , int dir capacity , int leaf capacity , int dir minimum , int leaf minimum , int k _max ) { super ( page size , dir capacity , leaf capacity , dir minimum , leaf minimum ) ; this . k _max = k _max ; }
public string write ( ) { return write ( ( integer ) null ) ; }
void clear markers ( ) { }
public void on pull up to refresh ( final pull to refresh base < v > refresh view ) ;
public tree layout ( string group ) { super ( group ) ; }
public xml text builder ( ) { m _text buf = new string buffer ( defaul t_ capacity ) ; m _aux buf = new string buffer ( au x_ capacity ) ; }
private int _convert surrogate ( int first part , int second part ) { if ( second part < sur r 2 _ first || second part > sur r 2 _ last ) { throw new illegal argument exception ( str_ + integer . to hex string ( first part ) + str_ + integer . to hex string ( second part ) + str_ ) ; } return num_ + ( ( first part - sur r 1 _ first ) << num_ ) + ( second part - sur r 2 _ first ) ; }
public boolean show math tag content ( ) { return show math tag content ; }
public static void main ( string [ ] args ) throws exception { test instances inst ; inst = new test instances ( ) ; if ( utils . get flag ( str_ , args ) || utils . get flag ( str_ , args ) ) { string buffer result = new string buffer ( ) ; result . append ( str_ ) ; result . append ( str_ ) ; enumeration < option > enm = inst . list options ( ) ; while ( enm . has more elements ( ) ) { option option = enm . next element ( ) ; result . append ( option . synopsis ( ) + str_ + option . description ( ) + str_ ) ; } system . out . println ( result ) ; system . exit ( num_ ) ; } inst . set options ( args ) ; system . out . println ( inst . generate ( ) ) ; }
public static map < string , list < volume > > group volumes by array group ( list < volume > volumes ) { map < string , list < volume > > array group to volumes = new hash map < string , list < volume > > ( ) ; for ( volume volume : volumes ) { string rep group name = volume . get replication group instance ( ) ; if ( array group to volumes . get ( rep group name ) == null ) { array group to volumes . put ( rep group name , new array list < volume > ( ) ) ; } array group to volumes . get ( rep group name ) . add ( volume ) ; } return array group to volumes ; }
public string to xml ( ) { string builder string builder = new string builder ( ) ; return string builder . to string ( ) ; }
public < t > void dereference ( t instance , class < t > type , annotation qualifier , class < ? extends annotation > inject annotation ) throws provider missing exception { do release ( instance , null , type , qualifier , inject annotation ) ; provider < t > provider = find provider ( type , qualifier ) ; provider . release ( ) ; dereference provider ( provider , instance ) ; }
public static string random uuid ( int length ) { string chars = str_ + str_ + str_ ; string uuid = str_ ; for ( int i = num_ ; i < length ; i ++ ) { uuid += chars . char at ( ( int ) ( math . random ( ) * chars . length ( ) ) ) ; } return uuid ; }
public boolean is final ( ) { return this . is declared final ( ) ; }
private static void wait for notifications to end ( notif listener listener ) throws interrupted exception { int old cout = listener . get count ( ) ; int no change counter = num_ ; while ( listener . get count ( ) < tas k_ count ) { thread . sleep ( num_ ) ; system . out . print ( str_ ) ; if ( old cout == listener . get count ( ) ) { if ( ++ no change counter > num_ ) { break ; } } else { no change counter = num_ ; } old cout = listener . get count ( ) ; } system . out . println ( ) ; }
private void traverse dependents ( token governor , string func , int parent _rank pre ) { int rank pre = rank ; rank ++ ; list < dependency > dependents = dependencies . get ( governor ) ; if ( dependents != null ) { for ( dependency d : dependents ) { traverse dependents ( d . get dependent ( ) , d . get dependency type ( ) , rank pre ) ; } } int node _ref = nodes . get ( governor ) ; if ( parent _rank pre >= num_ ) { write to file ( str_ , rank pre , rank , node _ref , component id , parent _rank pre ) ; write to file ( str_ , rank pre , str_ , str_ , func ) ; } else { write to file ( str_ , rank pre , rank , node _ref , component id , str_ ) ; } rank ++ ; }
private void return data ( object ret ) { if ( my host != null ) { my host . return data ( ret ) ; } }
public double cdf ( double x ) { if ( x <= min ) return num_ ; if ( x >= max ) return num_ ; return ( x - min ) / ( max - min ) ; }
public void enable dashed highlight line ( float line length , float space length , float phase ) { m highlight dash path effect = new dash path effect ( new float [ ] { line length , space length } , phase ) ; }
public path element ( string property ) { super ( ) ; if ( property . index of ( str_ ) > - num_ ) { m _ name = property . replace all ( str_ , str_ ) ; m _ index = integer . parse int ( property . replace all ( str_ , str_ ) . replace all ( str_ , str_ ) ) ; } else { m _ name = property ; m _ index = - num_ ; } }
public static boolean is url ( string s ) { if ( is empty ( s ) ) return default empty ok ; if ( s . index of ( str_ ) != - num_ ) return bool_ ; return bool_ ; }
public int pad length ( int len ) { int padding octet = block size - ( len % block size ) ; return padding octet ; }
protected abstract void insert edge ( graph node parent node , graph node child node , path info child info ) ;
public static active mq destination create destination ( string name , byte default type ) { if ( name . starts with ( queu e_ qualifie d_ prefix ) ) { return new active mq queue ( name . substring ( queu e_ qualifie d_ prefix . length ( ) ) ) ; } else if ( name . starts with ( topi c_ qualifie d_ prefix ) ) { return new active mq topic ( name . substring ( topi c_ qualifie d_ prefix . length ( ) ) ) ; } else if ( name . starts with ( tem p_ queu e_ qualife d_ prefix ) ) { return new active mq queue ( name . substring ( tem p_ queu e_ qualife d_ prefix . length ( ) ) , bool_ ) ; } else if ( name . starts with ( tem p_ topi c_ qualife d_ prefix ) ) { return new active mq topic ( name . substring ( tem p_ topi c_ qualife d_ prefix . length ( ) ) , bool_ ) ; } switch ( default type ) { case queu e_ type : return new active mq queue ( name ) ; case topi c_ type : return new active mq topic ( name ) ; case tem p_ queu e_ type : return new active mq queue ( name , bool_ ) ; case tem p_ topi c_ type : return new active mq topic ( name , bool_ ) ; default : throw new illegal argument exception ( str_ + default type ) ; } }
< d > json encoder < entity > put long ( long field < entity , d > field ) ;
public boolean end call ( ) throws android . os . remote exception ;
public boolean is system ( ) { return system ; }
public boolean should ignore database exception ( ) { return ignore database exception ; }
void device removed ( string udid ) ;
public osmose bug ( ) { open ( ) ; }
public transition ( final conversation states current state , final collection < expression > triggers , final pre transition condition condition , final boolean secondary , final conversation states next state , final string reply , final post transition action action ) { this . state = current state ; this . condition = condition ; this . secondary = secondary ; this . next state = next state ; this . triggers = triggers ; this . reply = reply ; this . action = action ; this . label = transition context . get with fallback ( str_ ) ; }
private void popout disposed ( channel channel ) { if ( channel == null ) { return ; } dialogs . remove ( channel ) ; if ( default channel != null ) { tabs . remove tab ( default channel ) ; default channel = null ; } tabs . add tab ( channel ) ; tabs . set selected component ( channel ) ; gui . update state ( bool_ ) ; }
public void add ( time block timeblock , employee empl ) { times . add ( time interval ( empl , timeblock ) ) ; }
public static void log initialization ( final logger logger ) { logger . log message ( level . info , str_ + logger . get log level ( ) + str_ ) ; }
public string to string ( ) { return to debug string ( num_ ) ; }
protected void paint ( synth context context , graphics g ) { }
public default read future ( io session session ) { super ( session ) ; }
public boolean is username index ( string [ ] args , int index ) { return index == num_ ; }
public bit vector bit vector ( ) ;
public more like this query builder analyzer ( string analyzer ) { this . analyzer = analyzer ; return this ; }
private int [ ] build ( final int [ ] bitext , int num positions ) { return int stream . range ( num_ , bitext . length ) . parallel ( ) . boxed ( ) . sorted ( null ) . limit ( num positions ) . map to int ( null ) . to array ( ) ; }
public com . sun . identity . wsfederation . jaxb . wsse . security header type create security header type ( ) throws javax . xml . bind . jaxb exception { return new com . sun . identity . wsfederation . jaxb . wsse . impl . security header type impl ( ) ; }
public static void clear all animations ( ) { s animations . get ( ) . clear ( ) ; s pending animations . get ( ) . clear ( ) ; s delayed anims . get ( ) . clear ( ) ; }
private void advance compilation state ( compilation unit unit ) { int state = get compile state ( unit ) ; assert state < stat e_ implementatio n_ generated : str_ + state ; set compile state ( unit , state + num_ ) ; }
public synchronized void playback last macro ( ) { if ( current macro != null ) { action [ ] actions = get actions ( ) ; int num actions = actions . length ; list macro records = current macro . get macro records ( ) ; int num = macro records . size ( ) ; if ( num > num_ ) { undo manager . begin internal atomic edit ( ) ; try { for ( int i = num_ ; i < num ; i ++ ) { macro record record = ( macro record ) macro records . get ( i ) ; for ( int j = num_ ; j < num actions ; j ++ ) { if ( ( actions [ j ] instanceof recordable text action ) && record . id . equals ( ( ( recordable text action ) actions [ j ] ) . get macro id ( ) ) ) { actions [ j ] . action performed ( new action event ( this , action event . actio n_ performed , record . action command ) ) ; break ; } } } } finally { undo manager . end internal atomic edit ( ) ; } } } }
public void write ( string file ) throws exception { write ( new file ( file ) ) ; }
public void start document ( ) throws sax exception ;
public nearest neighbour ( int k , boolean weighted , distance metric distance metric , vector collection factory < vec paired < vec , double > > vcf ) { this . mode = null ; this . vcf = vcf ; this . k = k ; this . weighted = weighted ; this . distance metric = distance metric ; }
public repository create repo and asset and text units ( test id watcher test id watcher ) throws repository name already used exception { repository repository = create repository ( test id watcher ) ; try { pollable future < asset > asset result = asset service . add or update asset and process if needed ( repository . get id ( ) , get test source asset content ( ) , str_ ) ; pollable task service . wait for pollable task ( asset result . get pollable task ( ) . get id ( ) ) ; } catch ( pollable task exception | interrupted exception | execution exception e ) { throw new runtime exception ( str_ , e ) ; } return repository ; }
public boolean is critical ( ) { return bool_ ; }
stoppable condition ( condition c , cancel criterion stopper ) { assert . assert true ( stopper != null ) ; this . condition = c ; this . stopper = stopper ; }
public certificate list to as n1 structure ( ) { return x 5 0 9 crl ; }
public void after interest registration ( ) ;
public static elevation model make elevation model ( string key , string default value ) { if ( key == null ) { string msg = logging . get message ( str_ ) ; throw new illegal argument exception ( msg ) ; } object config source = configuration . get string value ( key , default value ) ; return ( elevation model ) basic factory . create ( av key . elevatio n_ mode l_ factory , config source ) ; }
public static void dump cursor ( i cursor cursor , string builder builder ) { dump cursor ( cursor , num_ , builder ) ; }
public void reset ( ) { init ( ) ; }
private intent [ ] build intents to views lists ( ) { intent [ ] intents = new intent [ num_ ] ; intents [ num_ ] = intent . make restart activity task ( new component name ( this , com . example . android . apis . api demos . class ) ) ; intent intent = new intent ( intent . actio n_ main ) ; intent . set class ( intent activity flags . this , com . example . android . apis . api demos . class ) ; intent . put extra ( str_ , str_ ) ; intents [ num_ ] = intent ; intent = new intent ( intent . actio n_ main ) ; intent . set class ( intent activity flags . this , com . example . android . apis . api demos . class ) ; intent . put extra ( str_ , str_ ) ; intents [ num_ ] = intent ; return intents ; }
protected criteria create criteria internal ( ) { criteria criteria = new criteria ( ) ; return criteria ; }
public void add layout component ( object value , component comp , container c ) { if ( value != null ) { throw new illegal state exception ( str_ + get class ( ) . get name ( ) ) ; } }
public void enable paging ( ) { m view pager . set paging enabled ( bool_ ) ; }
public void changed update ( document event e ) { update tree ( e ) ; }
public void shutdown ( ) throws exception { ( new thread ( this , str_ ) ) . start ( ) ; }
public final string format ( long value ) { return format ( value , new string buffer ( ) , new field position ( num_ ) ) . to string ( ) ; }
public static void show error ( birthday list fragment fragment , string message ) { string error message = get error message ( fragment , message ) ; show error internal ( fragment , error message ) ; }
public void test _ticket _ 8 3 2a ( ) throws exception { new test helper ( str_ , str_ , str_ , str_ ) . run test ( ) ; }
public h 6 ( string value ) { add element ( value ) ; }
private multiplication ( ) { }
public static cu double complex cu cadd ( cu double complex x , cu double complex y ) { return cu cmplx ( cu creal ( x ) + cu creal ( y ) , cu cimag ( x ) + cu cimag ( y ) ) ; }
protected svgom flow region break element ( ) { }
public void insert update ( document event e ) { update tree ( e ) ; }
public static void main ( final string [ ] args ) { dom test case . do main ( nodeappendchildnewchilddiffdocument . class , args ) ; }
public boolean is perform direct edit ( ) { return perform direct edit ; }
public void toggle ( boolean animate ) { if ( is menu showing ( ) ) { show content ( animate ) ; } else { show menu ( animate ) ; } }
private void init weights ( double x_ [ ] [ ] ) { init weights ( x_ [ num_ ] . length , m _ h ) ; }
public replay processor ( int buffer size , boolean unbounded ) { if ( unbounded ) { this . buffer = new unbounded buffer < > ( buffer size ) ; } else { this . buffer = new bounded buffer < > ( buffer size ) ; } subscribers . lazy set ( this , empty ) ; }
public void wake ( ) ;
public grid closeable iterator < ignite bi tuple < byte [ ] , byte [ ] > > iterator ( ) ;
public xml filter impl ( xml reader parent ) { set parent ( parent ) ; }
private void next window ( calendar start time ) { if ( is daily ( ) ) { start time . add ( calendar . da y_ o f_ month , num_ ) ; } else if ( is weekly ( ) ) { start time . add ( calendar . wee k_ o f_ month , num_ ) ; } else if ( is monthly ( ) ) { int month = start time . get ( calendar . month ) ; adjust day of month ( start time , month + num_ ) ; } }
public static int decode ( int i ) { return x 1 0 sequence . decode ( i ) ; }
public boolean point in scroll bar ( int x , int y ) { return x >= xpos && x <= xpos + width && y >= starting y pos && y <= starting y pos + max displacement + height ; }
public static boolean has element child ( node node ) { node list nl = node . get child nodes ( ) ; node child = null ; int length = nl . get length ( ) ; for ( int i = num_ ; i < length ; i ++ ) { child = nl . item ( i ) ; if ( child . get node type ( ) == node . elemen t_ node ) { return bool_ ; } } return bool_ ; }
action map create action map ( ) { action map map = new action map ui resource ( ) ; action [ ] actions = editor . get actions ( ) ; int n = actions . length ; for ( int i = num_ ; i < n ; i ++ ) { action a = actions [ i ] ; map . put ( a . get value ( action . name ) , a ) ; } map . put ( transfer handler . get cut action ( ) . get value ( action . name ) , transfer handler . get cut action ( ) ) ; map . put ( transfer handler . get copy action ( ) . get value ( action . name ) , transfer handler . get copy action ( ) ) ; map . put ( transfer handler . get paste action ( ) . get value ( action . name ) , transfer handler . get paste action ( ) ) ; return map ; }
public static type reference new exception reference ( int exception index ) { return new type reference ( ( throws << num_ ) | ( exception index << num_ ) ) ; }
public string read ( ) throws io exception { closer closer = closer . create ( ) ; try { reader reader = closer . register ( open stream ( ) ) ; return char streams . to string ( reader ) ; } catch ( throwable e ) { throw closer . rethrow ( e ) ; } finally { closer . close ( ) ; } }
public void init components ( ) { set title ( bundle . get message ( str_ ) ) ; container content pane = get content pane ( ) ; content pane . set layout ( new box layout ( content pane , box layout . y_ axis ) ) ; content pane . add ( init address panel ( ) ) ; assignment panel = new j panel ( ) ; assignment panel . set layout ( new box layout ( assignment panel , box layout . y_ axis ) ) ; assignment list model = new assignment table model ( ) ; assignment table = new j table ( assignment list model ) ; assignment table . set row selection allowed ( bool_ ) ; assignment table . set preferred scrollable viewport size ( new java . awt . dimension ( num_ , num_ ) ) ; j scroll pane assignment scroll pane = new j scroll pane ( assignment table ) ; assignment panel . add ( assignment scroll pane , border layout . center ) ; content pane . add ( assignment panel ) ; content pane . add ( init notes panel ( ) ) ; content pane . add ( init button panel ( ) ) ; pack ( ) ; xtc . get x bee ( ) . get network ( ) . add discovery listener ( this ) ; }
protected void update ng command ( i launch configuration configuration ) { string command = i external tool constants . empt y_ string ; try { command = configuration . get attribute ( angular cli launch constants . operation , i external tool constants . empt y_ string ) ; } catch ( core exception ce ) { angular cli plugin . log error ( ce , str_ ) ; } commands commbo . set text ( command ) ; }
public string global info ( ) { return str_ ; }
public static byte [ ] generate base 6 4 encode ( byte [ ] bytes ) { byte [ ] hash copy = arrays . copy of ( bytes , bytes . length ) ; return base 6 4 . get encoder ( ) . encode ( hash copy ) ; }
public void do negative authenticatio dialog click ( ) { m is first auth attempt = bool_ ; }
public element element ( ) ;
private void flush literal ( list < elem > elems , string builder sb ) { if ( sb . length ( ) > num_ ) { elems . add ( lit . create ( input . location ( ) , doc . text ( sb . to string ( ) ) ) ) ; sb . delete ( num_ , sb . length ( ) ) ; } }
public disk based cache ( file root directory , int max cache size in bytes ) { m root directory = root directory ; m max cache size in bytes = max cache size in bytes ; }
public static < k , v > unified set multimap < v , k > flip ( set multimap < k , v > set multimap ) { unified set multimap < v , k > result = new unified set multimap < > ( ) ; set multimap . for each key multi values ( null ) ; return result ; }
public void engine reset ( ) { context [ num_ ] = num_ ; context [ num_ ] = num_ ; context [ num_ ] = num_ ; context [ num_ ] = num_ ; count = num_ ; for ( int i = num_ ; i < bloc k_ length ; i ++ ) buffer [ i ] = num_ ; }
public m change log ( properties ctx , int a d_ change log _ id , string trx name , int a d_ session _ id , int a d_ table _ id , int a d_ column _ id , int record _ id , int a d_ client _ id , int a d_ org _ id , object old value , object new value ) { this ( ctx , a d_ change log _ id , trx name , a d_ session _ id , a d_ table _ id , a d_ column _ id , record _ id , a d_ client _ id , a d_ org _ id , old value , new value , ( string ) null ) ; }
public static void main ( string ... args ) throws exception { org . h 2 . tools . server . shutdown tcp server ( str_ , str_ , bool_ , bool_ ) ; }
protected boolean can scroll ( view v , boolean check v , int dx , int x , int y ) { if ( v instanceof view group ) { final view group group = ( view group ) v ; final int scroll x = v . get scroll x ( ) ; final int scroll y = v . get scroll y ( ) ; final int count = group . get child count ( ) ; for ( int i = count - num_ ; i >= num_ ; i -- ) { final view child = group . get child at ( i ) ; if ( x + scroll x >= child . get left ( ) && x + scroll x < child . get right ( ) && y + scroll y >= child . get top ( ) && y + scroll y < child . get bottom ( ) && can scroll ( child , bool_ , dx , x + scroll x - child . get left ( ) , y + scroll y - child . get top ( ) ) ) { return bool_ ; } } } return check v && view compat . can scroll horizontally ( v , ( is layout rtl support ( ) ? dx : - dx ) ) ; }
public boolean equals ( object other ) { if ( this == other ) return bool_ ; if ( other instanceof address ) { final address o = ( address ) other ; return this . get uri ( ) . equals ( o . get uri ( ) ) ; } return bool_ ; }
public v card property scribe ( class < t > clazz , string property name ) { this ( clazz , property name , new q name ( v card version . v 4 _ 0 . get xml namespace ( ) , property name . to lower case ( ) ) ) ; }
void delete mailbox ( mailbox path mailbox path , mailbox session session ) throws mailbox exception ;
public c abstract node component ( final layout manager layout ) { super ( layout ) ; }
void on commit mode changed ( ) ;
public unknown host descriptor ( ) { super ( host . unknow n_ host , nb bundle . get message ( unknown host descriptor . class , str_ ) , nb bundle . get message ( unknown host descriptor . class , str_ ) , nod e_ icon , positio n_ last , expan d_ o n_ firs t_ child ) ; }
public csv ( char field delimiter , char text delimiter ) { this . field delimiter = field delimiter ; this . text delimiter = text delimiter ; }
void disconnect ( ) throws sms exception , io exception ;
public abstract boolean is connected ( ) ;
public boolean is sim pin enabled ( ) throws android . os . remote exception ;
void mouse entered ( mouse event event ) ;
void resume jobs starting with ( string job group prefix ) throws exception ;
string compose price request params ( string currency , big decimal low border , big decimal high border ) ;
public void remove ( legion member ex legion member ) { legion member by id . remove ( legion member . get object id ( ) ) ; legion member ex by id . remove ( legion member . get object id ( ) ) ; legion member ex by name . remove ( legion member . get name ( ) ) ; }
void interval created ( timed element e , interval i ) ;
public static location module location ( string module name ) { return new location ( unique string . unique string of ( module name ) , num_ , num_ , num_ , num_ ) ; }
protected function < statement , optional < blaze graph atom > > graph atom transform ( ) { return transforms . graph atom ; }
public final boolean has children ( ) { return ! children . is empty ( ) ; }
public h rule view ( element elem ) { super ( elem ) ; set properties from attributes ( ) ; }
public static final boolean is digit ( char ch ) { return ch >= str_ && ch <= str_ ; }
public void handle presence info notification ( contact id contact , pidf document presence ) { if ( s logger . is activated ( ) ) { s logger . debug ( str_ + contact ) ; } }
public void board hex highlighted ( board view event b ) { }
private < r > grid client future adapter < r > make request ( grid client message msg , uuid dest id ) throws grid client connection reset exception , grid client closed exception { return make request ( msg , dest id , bool_ ) ; }
public void prepare session ( string remote address , int remote port , media output renderer , format format , rtp stream listener rtp stream listener ) throws rtp exception { try { input stream = new rtp input stream ( remote address , remote port , local port , format ) ; input stream . add rtp stream listener ( rtp stream listener ) ; input stream . open ( ) ; media renderer stream output stream = new media renderer stream ( renderer ) ; output stream . open ( ) ; codec [ ] codec chain = media registry . generate decoding codec chain ( format . get codec ( ) ) ; processor = new processor ( input stream , output stream , codec chain ) ; } catch ( exception e ) { throw new rtp exception ( str_ ) ; } }
protected boolean property active property ( ) { return active ; }
public boolean has service restrictions ( ) { track track ; enumeration < track > en = _track hash table . elements ( ) ; while ( en . has more elements ( ) ) { track = en . next element ( ) ; if ( ! track . get drop option ( ) . equals ( track . any ) || ! track . get pickup option ( ) . equals ( track . any ) ) { return bool_ ; } } return bool_ ; }
public static void main ( string [ ] argv ) { run filter ( new random projection ( ) , argv ) ; }
public void wallclock ( calendar time ) { }
public static short phase angle from cartesian trig ( float real , float imag ) { if ( real == num_ && imag == num_ ) return zer o_ index ; double theta = hal f_ pi - math . atan 2 ( real , imag ) ; short steps = ( short ) ( theta * step s_ pe r_ radian ) ; if ( steps < num_ ) steps += phas e_ resolution ; return steps ; }
private boolean allow ( bt download data line tl ) { return filter . allow ( tl ) ; }
void dispatch on launcher transition prepare ( view v , boolean animated , boolean to workspace ) { if ( v instanceof launcher transitionable ) { ( ( launcher transitionable ) v ) . on launcher transition prepare ( m launcher , animated , to workspace ) ; } }
private void inorder ( ) { inorder ( root ) ; }
private void write directory post resource ( string builder sb , string path ) { sb . append ( str_ + di r_ resourc e_ set + str_ ) ; sb . append ( path . replace ( str_ , str_ ) ) ; }
abstract void print max ( boolean mutator ) ;
void post receive progress ( connector connector , receive packet packet , float progress ) ;
public conversation factory with escape sequence ( string escape sequence ) { return with conversation canceller ( new exact match conversation canceller ( escape sequence ) ) ; }
private void render loads ( list < load > loads , int ypos ) { load prev load = null ; load cur load = null ; list < offset > offsets = get default offsets ( ) ; string suffix = str_ ; for ( int cur index = num_ ; cur index < loads . size ( ) ; cur index ++ ) { cur load = loads . get ( cur index ) ; prev load = loads . get ( cur index - num_ ) ; if ( prev load . load != num_ ) { render loads ( prev load , cur load , offsets , ypos , suffix ) ; suffix = str_ ; } else if ( cur load . load > num_ ) { suffix = str_ ; } } }
private static < x > void partition top n ( x [ ] array , int offset , int limit , comparator < ? super x > comp ) { partial quick sort ( array , num_ , array . length - num_ , comp , offset , offset + limit - num_ ) ; }
public static boolean is file type supported ( audio file format . type file type , audio input stream stream ) { list providers = get audio file writers ( ) ; for ( int i = num_ ; i < providers . size ( ) ; i ++ ) { audio file writer writer = ( audio file writer ) providers . get ( i ) ; if ( writer . is file type supported ( file type , stream ) ) { return bool_ ; } } return bool_ ; }
public int pad count ( byte [ ] in ) throws invalid cipher text exception { int count = in . length ; while ( count > num_ ) { if ( in [ count - num_ ] != num_ ) { break ; } count -- ; } return in . length - count ; }
public void clear ( ) { ored criteria . clear ( ) ; order by clause = null ; distinct = bool_ ; }
public boolean is cancelled ( ) { return cancelled ; }
boolean move cursor to child position ( int group position , int child position ) { if ( ! m data valid || m cursor . is closed ( ) ) { return bool_ ; } group position = group position to bin ( group position ) ; int index = child position ; for ( int i = num_ ; i < group position ; i ++ ) { index += m item map [ i ] ; } return m cursor . move to position ( index ) ; }
protected native final class find loaded class ( string name ) ;
private int read data ( input stream is , int length ) { int read = num_ ; int count ; byte [ ] buf = new byte [ length ] ; try { while ( is . available ( ) > num_ ) { count = is . read ( buf , read , length - read ) ; read += count ; } } catch ( io exception e ) { log ( str_ ) ; } return read ; }
public static string format rate string ( float rate ) { return string . format ( java . util . locale . us , str_ , rate ) ; }
fleet management analytics client application ( string props path ) throws exception { super ( props path ) ; }
public void add photo to list ( abelana client . photo list type photo list type , photo info photo info ) { get photo list ( photo list type ) . add ( photo info ) ; }
public string make name ( string base , string name ) { return base + metrics . sep + name ; }
public abstract void remove on menu visibility listener ( on menu visibility listener listener ) ;
public int pad count ( byte [ ] in ) throws invalid cipher text exception ;
public int search ( char [ ] text ) { int m = pattern . length ; int n = text . length ; int i , j ; for ( i = num_ , j = num_ ; i < n && j < m ; i ++ ) { j = dfa [ text [ i ] ] [ j ] ; } if ( j == m ) return i - m ; return n ; }
public static boolean reference equals ( object x , object y ) { return x == y ; }
public synchronized string max processing time message class ( ) { return max proc time msg cls ; }
void put file into storage ( uuid file id , file descriptor file descr ) throws file storage exception ;
public static value getter space predicate < server entry > path xor ( string path , i space predicate left predicate , i space predicate right predicate ) { return path ( path , xor ( left predicate , right predicate ) ) ; }
public value converter mapping converter for ( table id table id , column column ) { column mapper mapper = mapper for ( table id , column ) ; return mapper != null ? mapper . create ( column ) : null ; }
public boolean is visible in catalog supported ( ) { boolean rc = ( get organization id ( ) == null ) ; if ( rc && catalog entries != null && ! catalog entries . is empty ( ) ) { if ( is no marketplace assigned ( ) ) { rc = bool_ ; } } return rc ; }
protected boolean is special ( string name ) { for ( int i = num_ ; i < specials . length ; i ++ ) { if ( specials [ i ] . equals ( name ) ) return bool_ ; } return bool_ ; }
public void reset ( ) { clear metadata cache ( ) ; clear acl cache ( ) ; clear lock tokens cache ( ) ; }
public int equiv hash code ( ) { return return type . hash code ( ) * num_ + modifiers * num_ + name . hash code ( ) ; }
public abstract boolean is id used ( int player obj id ) ;
private object write replace ( ) throws object stream exception { object [ ] sources as strings = sources . to array ( ) ; for ( int i = num_ ; i < sources as strings . length ; i ++ ) { sources as strings [ i ] = errors . convert ( sources as strings [ i ] ) . to string ( ) ; } return new message ( arrays . as list ( sources as strings ) , message , cause ) ; }
protected abstract void handle ( password callback cb ) ;
public x method parameter ( x method m , int p ) { method = m ; parameter = p ; }
public boolean is called method ( string class name , string method name ) { if ( to test methods . is empty ( ) ) compute interesting classes ( graph ) ; if ( to test methods . contains ( class name + method name ) ) { return bool_ ; } return bool_ ; }
private static string format list ( string [ ] string list , string list pattern , string list composition pattern ) { if ( list pattern == null || list composition pattern == null ) { string builder result = new string builder ( ) ; for ( int i = num_ ; i < string list . length ; ++ i ) { if ( i > num_ ) { result . append ( str_ ) ; } result . append ( string list [ i ] ) ; } return result . to string ( ) ; } if ( string list . length > num_ ) { message format format = new message format ( list composition pattern ) ; string list = compose list ( format , string list ) ; } object [ ] args = new object [ string list . length + num_ ] ; system . arraycopy ( string list , num_ , args , num_ , string list . length ) ; args [ num_ ] = new integer ( string list . length ) ; message format format = new message format ( list pattern ) ; return format . format ( args ) ; }
public tileset group animation map ( ) { tilesets = new hash map < string , tileset animation map > ( ) ; }
void add years ( int years ) ;
protected boolean has space up ( ) { return bool_ ; }
public boolean is include nulls location ( ) { object oo = get _ value ( columnnam e_ is include nulls location ) ; if ( oo != null ) { if ( oo instanceof boolean ) return ( ( boolean ) oo ) . boolean value ( ) ; return str_ . equals ( oo ) ; } return bool_ ; }
public jna database connection ( fb client library client library , i connection properties connection properties , i encoding factory encoding factory ) throws sql exception { super ( client library , connection properties , encoding factory ) ; }
public static class < ? > find common element type ( collection collection ) { if ( is empty ( collection ) ) { return null ; } class < ? > candidate = null ; for ( object val : collection ) { if ( val != null ) { if ( candidate == null ) { candidate = val . get class ( ) ; } else if ( candidate != val . get class ( ) ) { return null ; } } } return candidate ; }
final public void do initialize ( ) { initialize ( non default rm ) ; is initialized = bool_ ; }
public boolean is valid ( ) { return math . abs ( lat ( ) . radians ( ) ) <= s2 . m_ p i _ 2 && math . abs ( lng ( ) . radians ( ) ) <= s2 . m_ pi ; }
public pan control ( int mouse button , boolean pan over item ) { m _button = mouse button ; m _pan over item = pan over item ; }
private static void raise on failure ( boolean condition , string message ) { if ( ! condition ) { throw new runtime admin exception ( message ) ; } }
private static grid data create button grid data ( ) { grid data gd = new grid data ( grid data . fil l_ horizontal ) ; gd . width hint = num_ ; return gd ; }
public com . sun . identity . saml 2 . jaxb . xmlsig . signed info element create signed info element ( ) throws javax . xml . bind . jaxb exception { return new com . sun . identity . saml 2 . jaxb . xmlsig . impl . signed info element impl ( ) ; }
public double [ ] distribution for instance ( instance instance ) throws exception { return utils . logs 2probs ( log joint densities for instance ( instance ) ) ; }
public authority key identifier ( byte [ ] key identifier , general names name , big integer serial number ) { this . keyidentifier = new der octet string ( key identifier ) ; this . certissuer = general names . get instance ( name . to as n1 primitive ( ) ) ; this . certserno = new as n1 integer ( serial number ) ; }
public void timing event ( float fraction ) { long current time = system . nano time ( ) / num_ ; long elapsed time = current time - start time ; float real fraction = ( float ) elapsed time / duration ; system . out . println ( real fraction + str_ + fraction ) ; }
public void close ( ) { if ( dbf != null ) { dbf . close ( ) ; } }
private multivalued map < string , object > resolve headers ( record record ) throws stage exception { record el . set record in context ( header vars , record ) ; multivalued map < string , object > request headers = new multivalued hash map < > ( ) ; for ( map . entry < string , string > entry : conf . headers . entry set ( ) ) { list < object > header = new array list < > ( num_ ) ; object resolved value = header eval . eval ( header vars , entry . get value ( ) , string . class ) ; header . add ( resolved value ) ; request headers . put ( entry . get key ( ) , header ) ; } return request headers ; }
private string filename from label ( string label ) { return label . to lower case ( ) . replace all ( str_ , str_ ) ; }
private void check state ( ) { if ( is cancelled ( ) ) throw new cancellation exception ( str_ ) ; }
public list < sequence < k , v > > match pattern ( event < k , v > event ) { int number of state to process = computation stages . size ( ) ; list < computation stage < k , v > > final states = new linked list < > ( ) ; while ( number of state to process -- > num_ ) { computation stage < k , v > computation stage = computation stages . poll ( ) ; collection < computation stage < k , v > > states = match pattern ( new computation context < > ( event , computation stage ) ) ; if ( states . is empty ( ) ) remove pattern ( computation stage ) ; else final states . add all ( get all final states ( states ) ) ; computation stages . add all ( get all non final states ( states ) ) ; } return match construction ( final states ) ; }
protected void write tile ( byte buffer raster , int width , int height , string tile path ) throws io exception { byte [ ] bb array = new byte [ raster . limit ( ) ] ; raster . get ( bb array ) ; write tile ( tile path , bb array , width , height , layer type ) ; }
private static void enable download manager ( context context ) { try { intent intent = new intent ( android . provider . settings . actio n_ applicatio n_ detail s_ settings ) ; intent . set data ( uri . parse ( str_ + downloa d_ manage r_ packag e_ name ) ) ; context . start activity ( intent ) ; } catch ( activity not found exception e ) { e . print stack trace ( ) ; try { intent intent = new intent ( android . provider . settings . actio n_ manag e_ application s_ settings ) ; context . start activity ( intent ) ; } catch ( activity not found exception ignored ) { } } }
public searcher ( ) throws io exception { searcher = new index searcher ( directory reader . open ( fs directory . open ( paths . get ( inde x_ dir ) ) ) ) ; parser = new query parser ( conten t_ field , new standard analyzer ( ) ) ; }
public static byte buffer convert to signed 1 6 bit samples ( buffer buffer ) { return convert to signed 1 6 bit samples ( buffer . get samples ( ) ) ; }
public boolean has intersection ( ) { return result != n o_ intersection ; }
public child test iterator ( dtm axis traverser traverser ) { super ( null ) ; m _traverser = traverser ; }
public remote connection port ( string port ) { this . port = port ; return this ; }
private void check for native type ( xs type type , string msg ) throws conversion exception { if ( xsd utils . xsd to native type ( type . get name ( ) ) == null ) { if ( ! strict ( ) ) { log ( level . warning , msg + str_ + type . get name ( ) ) ; } else { throw new conversion exception ( erro r_ simpl e_ type + msg + str_ + type . get name ( ) ) ; } } }
public void mark delayed register ( ) { assert hnd . is query ( ) ; delayed register = bool_ ; }
public bytes root ( ) { return root ; }
public void test signum negative ( ) { string a = str_ ; int a scale = num_ ; big decimal a number = new big decimal ( new big integer ( a ) , a scale ) ; assert equals ( str_ , - num_ , a number . signum ( ) ) ; }
public boolean is in range ( long value , long min , long max ) { return lon g_ validator . is in range ( value , min , max ) ; }
void activate debug view ( ) ;
public static string error json ( string provider , string error ) { final json object json = new json object ( ) ; try { json . put ( str_ , provider ) ; json . put ( str_ , error ) ; } catch ( json exception exc ) { log json exception ( exc ) ; } return json . to string ( ) ; }
public cli output response merge ( final merge request request ) throws io exception , subversion exception { final file project path = new file ( request . get project path ( ) ) ; final list < string > cli args = default args ( ) ; cli args . add ( str_ ) ; cli args . add ( request . get source url ( ) ) ; list < string > paths = new array list < string > ( ) ; paths . add ( request . get target ( ) ) ; final command line result result = run command ( null , cli args , project path , paths ) ; return dto factory . get instance ( ) . create dto ( cli output response . class ) . with command ( result . get command line ( ) . to string ( ) ) . with output ( result . get stdout ( ) ) . with err output ( result . get stderr ( ) ) ; }
private void check validity ( ) throws modbus exception { if ( request . get transaction id ( ) == num_ || response . get transaction id ( ) == num_ ) { return ; } if ( request . get transaction id ( ) != response . get transaction id ( ) ) { throw new modbus exception ( str_ ) ; } }
void confirm enemy casualties ( guid battle id , string message , player id hit player ) ;
public url critter add urls ( context context , string ... urls ) { list < string > saved urls = url manager . get urls ( context ) ; for ( string url : urls ) { if ( ! saved urls . contains ( url ) ) { saved urls . add ( url ) ; } } url manager . save urls ( context , saved urls ) ; return this ; }
public void switch to header ( string fragment name , bundle args ) { header selected header = null ; for ( int i = num_ ; i < m headers . size ( ) ; i ++ ) { if ( fragment name . equals ( m headers . get ( i ) . fragment ) ) { selected header = m headers . get ( i ) ; break ; } } set selected header ( selected header ) ; switch to header inner ( fragment name , args ) ; }
public static string parse value ( string value , carbon dimension dimension ) { try { switch ( dimension . get data type ( ) ) { case decimal : return parse string to big decimal ( value , dimension ) ; default : return value ; } } catch ( exception e ) { return null ; } }
public void sync ipsec key to local ( string ipsec key ) throws local repository exception { final string prefix = str_ ; _log . debug ( prefix ) ; final string [ ] cmd = { _ ipsectoo l_ cmd , ipse c_ syn c_ key , ipsec key } ; exec ( prefix , cmd ) ; _log . info ( prefix + str_ ) ; }
public static string convert class name ( class < ? > clazz ) { string converted name = clazz . get simple name ( ) ; boolean clean = bool_ ; do { matcher cleaner = clas s_ suffixe s_ t o_ clean . matcher ( converted name ) ; if ( cleaner . matches ( ) ) { if ( cleaner . group ( num_ ) != null && cleaner . group ( num_ ) . length ( ) > num_ ) { converted name = cleaner . group ( num_ ) ; } } else { clean = bool_ ; } } while ( clean ) ; return string utils . uncapitalize ( converted name ) ; }
public result ( string s ) { result type = strin g_ type ; string value = s ; }
public int [ ] read turn overflow absolute ( ) throws io exception { string line = br . read line ( ) ; while ( line != null ) { if ( line . matches ( str_ ) ) { return split line ( line ) ; } line = br . read line ( ) ; } return null ; }
protected o auth parameters o auth parameters factory ( ) { o auth parameters oparams = new o auth parameters ( ) ; oparams . add parameter ( oaut h_ consume r_ key , consumer key ) ; oparams . add parameter ( oaut h_ nonce , get nonce ( ) ) ; oparams . add parameter ( oaut h_ timestamp , get timestamp ( ) ) ; oparams . add parameter ( oaut h_ signatur e_ method , rs a_ sh a1 ) ; oparams . add parameter ( oaut h_ version , on e_ poin t_ zero ) ; return oparams ; }
public static integer to integer ( int val ) { if ( val >= num_ && val < cached ints . length ) return ( cached ints [ val ] ) ; return new integer ( val ) ; }
public json array ( object array ) throws json exception { this ( ) ; if ( array . get class ( ) . is array ( ) ) { int length = array . get length ( array ) ; for ( int i = num_ ; i < length ; i += num_ ) { this . put ( json object . wrap ( array . get ( array , i ) ) ) ; } } else { throw new json exception ( str_ ) ; } }
public bit field ( int size ) { bits = new int [ ( ( ( size ) - num_ ) > > > num_ ) + num_ ] ; }
public boolean is system user ( ) { return system user ; }
public drag control ( string action ) { this . repaint = bool_ ; this . action = action ; }
public static int op prec ( jc tree . tag op ) { switch ( op ) { case pos : case neg : case not : case compl : case preinc : case predec : return prefix prec ; case postinc : case postdec : case nullchk : return postfix prec ; case assign : return assign prec ; case bito r_ asg : case bitxo r_ asg : case bitan d_ asg : case s l_ asg : case s r_ asg : case us r_ asg : case plu s_ asg : case minu s_ asg : case mu l_ asg : case di v_ asg : case mo d_ asg : return assignop prec ; case or : return or prec ; case and : return and prec ; case eq : case ne : return eq prec ; case lt : case gt : case le : case ge : return ord prec ; case bitor : return bitor prec ; case bitxor : return bitxor prec ; case bitand : return bitand prec ; case sl : case sr : case usr : return shift prec ; case plus : case minus : return add prec ; case mul : case div : case mod : return mul prec ; case typetest : return ord prec ; default : throw new assertion error ( ) ; } }
public static string left trim ( final string value ) { validate ( value , nul l_ strin g_ predicate , nul l_ strin g_ ms g_ supplier ) ; return value . replace all ( str_ , str_ ) ; }
public ping result do ping ( ) { cancelled = bool_ ; return ping tools . do ping ( address , time out millis ) ; }
double length ( ) ;
public void change result reg ( int reg ) { if ( result != null ) { result = result . with reg ( reg ) ; } }
private void zip file ( zip output stream zos , string path in zip , file file ) throws io exception { byte [ ] buf = new byte [ num_ ] ; zos . put next entry ( new zip entry ( path in zip ) ) ; file input stream in = null ; try { in = new file input stream ( file . get canonical file ( ) ) ; int len ; while ( ( len = in . read ( buf ) ) > num_ ) { zos . write ( buf , num_ , len ) ; } } finally { if ( in != null ) in . close ( ) ; zos . close entry ( ) ; } }
void read ( int index , data reader < t > reader ) ;
public static reference ranges < string > create bed reference ranges ( file bed file ) throws io exception { final bed range loader < string > brl = new simple bed range loader ( ) ; brl . load ranges ( bed file ) ; return brl . get reference ranges ( ) ; }
private void roundtrip ( string hs ) { convert ( hs , hs ) ; }
public static void read data from datastore ( options options ) { query query = make ancestor kind query ( options ) ; datastore v1 . read read = datastore io . v 1 ( ) . read ( ) . with project id ( options . get dataset ( ) ) . with query ( query ) . with namespace ( options . get namespace ( ) ) ; pipeline p = pipeline . create ( options ) ; p . apply ( str_ , read ) . apply ( str_ , par do . of ( new get content fn ( ) ) ) . apply ( str_ , new word count . count words ( ) ) . apply ( str_ , map elements . via ( new word count . format as text fn ( ) ) ) . apply ( str_ , text io . write . to ( options . get output ( ) ) . with num shards ( options . get num shards ( ) ) ) ; p . run ( ) ; }
public native byte buffer container id ( ) ;
public update inventory output reply ok ( ) { update inventory output ok = new update inventory output ( ) ; ok . set code ( str_ ) ; return ok ; }
public byte [ ] encrypt data ( final byte [ ] plain , final int offset , int len ) { if ( cfg . debug ) { check . asserts ( len > num_ , str_ ) ; } final byte [ ] padplain = pad ( plain , offset , len ) ; final int clen = padplain . length ; if ( cfg . debug ) { check . asserts ( clen % num_ == num_ , str_ ) ; } byte [ ] crypted = null ; try { crypted = crypto . encrypt ( padplain ) ; } catch ( exception e 1 ) { if ( cfg . debug ) { check . log ( tag + str_ + e 1 ) ; } } if ( cfg . debug ) { check . asserts ( crypted != null , str_ ) ; } return crypted ; }
public void add notify ( ) { synchronized ( get tree lock ( ) ) { if ( peer == null ) peer = get toolkit ( ) . create label ( this ) ; super . add notify ( ) ; } }
public void on slide offset change ( float offset percent ) ;
public csv table reader ( ) { super ( ) ; }
public static public key generate public key ( string encoded public key ) { try { byte [ ] decoded key = base 6 4 . decode ( encoded public key , base 6 4 . default ) ; key factory key factory = key factory . get instance ( ke y_ factor y_ algorithm ) ; return key factory . generate public ( new x 5 0 9 encoded key spec ( decoded key ) ) ; } catch ( no such algorithm exception e ) { throw new runtime exception ( e ) ; } catch ( invalid key spec exception e ) { log . e ( tag , str_ ) ; throw new illegal argument exception ( e ) ; } catch ( illegal argument exception e ) { log . e ( tag , str_ ) ; throw e ; } }
public static string utf 8 encode ( string str , string defult return ) { if ( ! is empty ( str ) && str . get bytes ( ) . length != str . length ( ) ) { try { return url encoder . encode ( str , str_ ) ; } catch ( unsupported encoding exception e ) { return defult return ; } } return str ; }
protected final int read source ( long position us , media format holder format holder , sample holder sample holder ) { return enabled source . read data ( enabled source track index , position us , format holder , sample holder ) ; }
public static string strip meta from name ( string file name ) { int end = file name . index of ( str_ ) ; if ( end == - num_ ) end = file name . index of ( str_ ) ; if ( end == - num_ ) return file name ; return file name . substring ( num_ , end ) ; }
public streaming function operation ( internal distributed system sys , result collector rc , function function , result sender result sender ) { this . sys = sys ; this . rc = rc ; this . function object = function ; this . result sender = result sender ; }
void on pattern cleared ( ) ;
public static < t > i stored list < t > create concurrent list ( int num of segments ) { return new concurrent segmented stored list < t > ( num of segments ) ; }
public int size ( ) { return count ; }
public abstract association association ( ) ;
void on up or cancel motion event ( observable scroll state observable scroll state ) ;
public boolean remove nodes ( list < node > new nodes ) { boolean changed = bool_ ; for ( object new node : new nodes ) { boolean _changed = remove node ( ( node ) new node ) ; changed = changed || _changed ; } return changed ; }
private void fill field values ( ) { tolerance . set text ( str_ + projector . get tolerance ( ) ) ; if ( projector . get projection method ( ) instanceof project coordinate ) { auto find . set selected ( ( ( project coordinate ) projector . get projection method ( ) ) . is auto find ( ) ) ; } }
private static void add class file path ( string class path , set < string > pattern list ) { if ( class path != null && class path . length ( ) > num_ ) { if ( class path . ends with ( clas s_ suffix ) ) { class path = class path . substring ( num_ , class path . length ( ) - clas s_ suffix . length ( ) ) . replace ( str_ , str_ ) + clas s_ suffix ; } else { class path = class path . replace ( str_ , str_ ) ; } pattern list . add ( class path ) ; } }
public abstract enumeration < v > elements ( ) ;
protected object resolve ( ) { giga space gs = find giga space by name ( this . name ) ; if ( giga space . class . is assignable from ( get member type ( ) ) ) { if ( ! get member type ( ) . is instance ( gs ) ) { throw new illegal argument exception ( str_ + this . member + str_ + this . name + str_ ) ; } return gs ; } else { throw new illegal argument exception ( str_ ) ; } }
public usuario registrador bean obtener usuario ldap ( int id , entidad entidad ) throws i sicres rp admin exception ;
public void remove strategic target ( string target ) { strategic building targets . remove ( target ) ; }
public media format ( ) { m map = new hash map < string , object > ( ) ; }
public static long pop _array ( long [ ] arr , int word offset , int num words ) { long pop count = num_ ; for ( int i = word offset , end = word offset + num words ; i < end ; ++ i ) { pop count += long . bit count ( arr [ i ] ) ; } return pop count ; }
public boolean explain ( ) { return this . explain ; }
public void on edge touched ( int edge flags , int pointer id ) { }
public void trust all ssl hosts ( boolean trust all hosts ) { mail sender . trust all hosts ( trust all hosts ) ; }
public abstract ast ( token t ) { this . t = t ; }
string home ( ) throws io exception ;
public q name ( string namespace uri , string prefix , string local name ) { this ( namespace uri , prefix , local name , bool_ ) ; }
public inflater input stream ( input stream in ) { this ( in , new inflater ( ) ) ; uses default inflater = bool_ ; }
public static char to char value ( boolean b ) { return ( char ) ( b ? num_ : num_ ) ; }
< stream extends windowed stream < iterable < t > > > stream group ( ) ;
public cannot invoke exception ( invocation target exception e ) { super ( str_ + e . get target exception ( ) . to string ( ) ) ; err = e . get target exception ( ) ; }
public void hide intent review image view ( ) { if ( m intent review image view != null ) { m intent review image view . set visibility ( view . invisible ) ; } }
protected static resource [ ] decode contexts ( final http servlet request req , final string name ) { final string [ ] values = req . get parameter values ( name ) ; if ( values == null ) { return empt y_ resourc e_ array ; } final resource [ ] contexts = encode decode value . decode contexts ( values ) ; return contexts ; }
private void return data ( object ret ) { if ( my host != null ) { my host . return data ( ret ) ; } }
void on song update ( list < song > s ) ;
public int array index scale ( class clazz ) { if ( ! clazz . is array ( ) ) { throw new illegal argument exception ( str_ ) ; } return array index scale 0 ( clazz ) ; }
public abstract void draw legend shape ( canvas canvas , simple series renderer renderer , float x , float y , int series index , paint paint ) ;
protected void check bound ( final int bound , final string type ) { if ( bound > this . end index ) { throw new array index out of bounds exception ( str_ + type + str_ ) ; } if ( bound < num_ ) { throw new array index out of bounds exception ( str_ + type + str_ ) ; } }
void reset list ( ) { m data changed = bool_ ; m need sync = bool_ ; remove all views in layout ( ) ; m old selected position = invali d_ position ; m old selected row id = invali d_ ro w_ id ; set selected position int ( invali d_ position ) ; set next selected position int ( invali d_ position ) ; invalidate ( ) ; }
public abstract boolean is 1 7 ( ) ;
protected abstract secret key engine generate secret ( string algorithm ) throws illegal state exception , no such algorithm exception , invalid key exception ;
public davies bouldin index ( distance metric dm ) { this . dm = dm ; }
public hash index set ( ) { this ( defaul t_ initia l_ capacity , defaul t_ loa d_ factor ) ; }
protected vector format ( final number format format ) { this ( defaul t_ prefix , defaul t_ suffix , defaul t_ separator , format ) ; }
private text selection ( ) { f offset = - num_ ; f length = - num_ ; f document = null ; }
public void consume ( ) { consumed = bool_ ; }
public buffered concurrent hash map ( ) { this ( defaul t_ initia l_ capacity , defaul t_ loa d_ factor , defaul t_ concurrenc y_ level ) ; }
protected void init internal pool ( host and port address , connection info connection info , jedis pool config config ) { this . pool name = pool name ; this . address = address ; this . connection info = connection info ; jedis factory factory = new jedis factory ( address . get host ( ) , address . get port ( ) , connection info . get timeout ( ) , connection info . get password ( ) , connection info . get database ( ) ) ; internal pool = new generic object pool ( factory , config ) ; }
public static int parse int range ( string str , int min val , int max val , boolean allow zero ) { try { if ( str . char at ( num_ ) == str_ ) { str = str . substring ( num_ ) ; } int val = integer . parse int ( str ) ; if ( val < min val || val > max val || ( val == num_ && ! allow zero ) ) { throw new invalid format exception ( str_ + str ) ; } return val ; } catch ( number format exception nfe ) { throw new invalid format exception ( str_ + str ) ; } }
public sliding gantt category dataset ( gantt category dataset underlying , int first column , int max columns ) { this . underlying = underlying ; this . first category index = first column ; this . maximum category count = max columns ; }
protected void after build finished ( notification notification , build task descriptor descriptor , subscription handler < string > build status handler , subscription handler < string > build output handler , final string success message , final string error message , final string prefix console , build finished callback build finished callback ) { try { message bus . unsubscribe ( builder extension . buil d_ statu s_ channel + descriptor . get task id ( ) , build status handler ) ; } catch ( exception e ) { log . error ( builder agent . class , e ) ; } try { message bus . unsubscribe ( builder extension . buil d_ outpu t_ channel + descriptor . get task id ( ) , build output handler ) ; } catch ( exception e ) { log . error ( builder agent . class , e ) ; } if ( descriptor . get status ( ) == build status . successful ) { build successful ( notification , success message , prefix console ) ; } else if ( descriptor . get status ( ) == build status . failed ) { notification . set message ( error message ) ; notification . set status ( finished ) ; notification . set type ( error ) ; console . print ( prefix console + str_ + error message ) ; } import zip result ( descriptor , build finished callback ) ; }
public void check client trusted ( x 5 0 9 certificate [ ] chain , string auth type ) throws certificate exception ;
public void put ptr ( long val ) throws array index out of bounds exception { put ( val , get sizeof ptr ( ) ) ; }
public boolean is external id already taken ( string external id , string id ) { return resource dao . is external id already taken ( external id , id ) ; }
public void track page view ( string page ) { log . d ( tag , str_ + page ) ; tracker . set screen name ( page ) ; tracker . send ( screen view builder . build ( ) ) ; }
public object run safely ( catbert . fast stack stack ) throws exception { if ( stack . get ui mgr safe ( ) == null ) return null ; pseudo menu curr ui = stack . get ui mgr safe ( ) . get curr ui ( ) ; if ( curr ui != null ) curr ui . repaint ( ) ; return null ; }
public static json object create group ( string name , string data type , int eval order , string rule name ) throws json exception { json object model group = new json object ( ) ; model group . put ( jso n_ fiel d_ name , name ) ; model group . put ( jso n_ fiel d_ datatype , data type ) ; model group . put ( jso n_ fiel d_ eva l_ order , eval order ) ; model group . put ( jso n_ fiel d_ rul e_ name , rule name ) ; return model group ; }
public static string to string ( object value ) { return invoker helper . to string ( value ) ; }
public static void main ( string [ ] args ) throws exception { create simple ( ) ; }
public igfs meta directory listing add processor ( string file name , igfs listing entry entry ) { assert file name != null ; assert entry != null ; this . file name = file name ; this . entry = entry ; }
public void max parent set size ( int n size ) { m _n parents = new int [ n size ] ; }
protected void handle styled attributes ( typed array a ) { }
public object clone ( ) { return super . clone ( ) ; }
protected boolean single use ( ) { return bool_ ; }
public boolean is super type of ( final attribute type type ) { return type . is sub type of ( this ) ; }
public baf body new body ( soot method m ) { return new baf body ( m ) ; }
public r visit class ( class property definition pd , p p ) { return visit unknown ( pd , p ) ; }
public void reseller role changed ( value change event event ) { boolean check box checked = ( boolean ) event . get new value ( ) ; set reseller ( check box checked . boolean value ( ) ) ; }
public t field id enum success field ( ) { return success field ; }
public void add callback ( callback callback ) { if ( ! callbacks . contains ( callback ) ) { callbacks . add ( callback ) ; } }
public om raster ( double lt , double ln , int w , int h , byte [ ] bytes , color [ ] color table , int trans ) { super ( rendertyp e_ latlon , linetyp e_ unknown , decluttertyp e_ none ) ; set color model ( colormode l_ indexed ) ; lat = lt ; lon = ln ; width = w ; height = h ; bits = bytes ; transparent = trans ; if ( color table != null ) { set colors ( color table ) ; } if ( bits != null && bits . length != num_ ) { if ( color table != null && colors . length != num_ ) { pixels = compute pixels ( bits ) ; } } else { bits = new byte [ height * width ] ; } }
public int next ( ) throws parse exception { blank characters = num_ ; start = position - num_ ; next token ( ) ; end = position - end gap ( ) ; return type ; }
public void blacklist url ( string url ) { native blacklist url ( m native most visited sites , url ) ; }
protected sparse double matrix 2 d ( int rows , int columns , abstract int double map elements , int row zero , int column zero , int row stride , int column stride ) { set up ( rows , columns , row zero , column zero , row stride , column stride ) ; this . elements = elements ; this . is no view = bool_ ; }
void on single manifest ( t manifest ) ;
protected void activate display listener ( ) { graphics environment ge = graphics environment . get local graphics environment ( ) ; if ( ge instanceof sun graphics environment ) { ( ( sun graphics environment ) ge ) . add display changed listener ( this ) ; } }
public string load document text to string ( string s doc id ) { return load document element ( s doc id , tex t_ tag ) ; }
public void recycle ( ) { cookies . clear ( ) ; output buffer . recycle ( ) ; using output stream = bool_ ; using writer = bool_ ; app committed = bool_ ; included = bool_ ; error state . set ( num_ ) ; is character encoding set = bool_ ; application response = null ; if ( globals . i s_ securit y_ enabled || connector . recycl e_ facades ) { if ( facade != null ) { facade . clear ( ) ; facade = null ; } if ( output stream != null ) { output stream . clear ( ) ; output stream = null ; } if ( writer != null ) { writer . clear ( ) ; writer = null ; } } else { writer . recycle ( ) ; } }
public static builder builder ( install request request ) { return new builder ( request ) ; }
private void write current connection contents ( server descriptor desc , int max label width ) { write label value ( inf o_ connection s_ label . get ( ) , get nb connection ( desc ) , max label width ) ; }
public boolean is kba enabled ( ) { return kba enabled ; }
public void move list updated ( ) ;
public new console action ( workspace workspace ) { super ( str_ , workspace ) ; put value ( smal l_ icon , resource manager . get image icon ( str_ ) ) ; put value ( shor t_ description , str_ ) ; }
public builder with members ( collection < address > members ) { response . members = assert . not null ( members , str_ ) ; return this ; }
public long map ( int initial capacity ) { this ( initial capacity , num_ ) ; }
public void send request header ( final http request request ) throws http exception , io exception { if ( request == null ) { throw new illegal argument exception ( str_ ) ; } assert open ( ) ; this . request writer . write ( request ) ; this . metrics . increment request count ( ) ; }
public builder remove prohibited attribute ( string attribute name or oid ) { this . prohibited attribute oi ds . remove ( attribute name or oid ) ; return this ; }
public generic feed retrieve page of members ( link next ) throws apps for your domain exception , malformed url exception , io exception , service exception { return get next page ( next ) ; }
public static void drop all tables ( database db , boolean if exists ) { test data dao . drop table ( db , if exists ) ; test data 2 dao . drop table ( db , if exists ) ; test data 3 dao . drop table ( db , if exists ) ; }
protected void send function group 1 ( ) { byte [ ] result = jmri . nmra packet . function 0 through 4 packet ( address , ( address >= num_ ) , get f0 ( ) , get f1 ( ) , get f2 ( ) , get f3 ( ) , get f4 ( ) ) ; traffic controller . instance ( ) . send packet ( result , num_ ) ; }
private int test in range ( long actual , long expected , long epsilon ) { long min = expected - epsilon ; long max = expected + epsilon ; return actual < min ? - num_ : actual > max ? num_ : num_ ; }
public static double sum of mean differences one point ( double [ ] vector ) { double mean = sum ( vector ) / vector . length ; double ret = num_ ; for ( int i = num_ ; i < vector . length ; i ++ ) { double vec 1 diff = math . pow ( vector [ i ] - mean , num_ ) ; ret += vec 1 diff ; } return ret ; }
public void notify device connected ( device server device ) ;
public static byte [ ] remove all instances of op ( byte [ ] input script , int op code ) { return remove all instances of ( input script , new byte [ ] { ( byte ) op code } ) ; }
void unbound ( ) ;
public final point f view to source coord ( point f vxy , point f s target ) { return view to source coord ( vxy . x , vxy . y , s target ) ; }
protected void update tier policy properties ( string auto tier policy id , volume volume ) { if ( null != auto tier policy id ) { list < uri > auto tier policy ur is = _db client . query by constraint ( alternate id constraint . factory . get auto tiering policy by native guid constraint ( auto tier policy id ) ) ; if ( ! auto tier policy ur is . is empty ( ) ) { volume . set auto tiering policy uri ( auto tier policy ur is . get ( num_ ) ) ; } } }
public rotation vector provider ( sensor manager sensor manager ) { super ( sensor manager ) ; sensor list . add ( sensor manager . get default sensor ( sensor . typ e_ rotatio n_ vector ) ) ; }
public static string slurp file no exceptions ( file file ) { try { return slurp reader ( new file reader ( file ) ) ; } catch ( exception e ) { e . print stack trace ( ) ; return null ; } }
protected bridge context create bridge context ( string svg version ) { if ( str_ . equals ( svg version ) ) { return new sv g 1 2 bridge context ( user agent ) ; } else { return new bridge context ( user agent ) ; } }
public void clear options ( ) { if ( get plugin ( ) == null ) { log ( ) . debug ( str_ ) ; } else { log ( ) . info ( str_ ) ; plugin option container container = get plugin ( ) . get plugin options ( ) ; while ( container . size ( ) > num_ ) { container . remove ( container . get by index ( num_ ) ) ; } } }
public builder penalty dialog ( ) { return enable ( penalt y_ dialog ) ; }
public < t > t create ( class < t > service , t protocol factory protocol factory , interceptor ... interceptors ) { return create ( service , protocol factory , null , interceptors ) ; }
public boolean is explicit policy required ( ) { return explicit policy required ; }
private boolean has deprecated annotation ( list < jc annotation > annotations ) { for ( list < jc annotation > al = annotations ; ! al . is empty ( ) ; al = al . tail ) { jc annotation a = al . head ; if ( a . annotation type . type == syms . deprecated type && a . args . is empty ( ) ) return bool_ ; } return bool_ ; }
public constant optionlet volatility ( final int settlement days , final calendar cal , final business day convention bdc , final double vol , final day counter dc ) { super ( settlement days , cal , bdc , dc ) ; this . volatility _ = new handle < quote > ( new simple quote ( vol ) ) ; }
public void select _all ( ) { arrays . fill ( sel _array , bool_ ) ; }
public abstract boolean is translation needed if unique match ( ) ;
protected void prepare outgoing search request ( outgoing search request message ) { }
public boolean is check third party ( ) { return is option enabled ( url filter rule option . thir d_ party ) || is option disabled ( url filter rule option . thir d_ party ) ; }
preferences build preferences ( uri uri ) ;
public stream server configuration impl ( ) { }
public x 4 0 0 address ( der value der value ) throws io exception { name value = der value . to byte array ( ) ; }
protected void renumber columns ( ) { iterator iter = m _names . iterator ( ) ; for ( int idx = num_ ; iter . has next ( ) ; ++ idx ) { string name = ( string ) iter . next ( ) ; column entry e = ( column entry ) m _entries . get ( name ) ; e . colnum = idx ; } }
public static string format date ( date date ) { return format date ( date , patter n_ rf c 1 1 2 3 ) ; }
void copy context and headers from ( has context and headers other ) ;
protected abstract void start document ( pd document pdf ) throws io exception ;
protected abstract byte [ ] image to platform bytes ( image image , long format ) throws io exception ;
public boolean is defined ( object key ) { attribute set [ ] as = get attributes ( ) ; for ( int i = num_ ; i < as . length ; i ++ ) { if ( as [ i ] . is defined ( key ) ) { return bool_ ; } } return bool_ ; }
protected void adjust premove label highlights and arrows ( ) { if ( is disposed ( ) ) { return ; } board . current premoves label . set text ( str_ ) ; }
synchronized void remove connection ( int id ) { try { management db remove . set int ( num_ , id ) ; management db remove . execute ( ) ; } catch ( sql exception e ) { db exception . trace throwable ( e ) ; } }
boolean is ordered ( ) { return m _is ordered ; }
public int size ( ) { return set . size ( ) ; }
public synchronized boolean is subset of set ( ns set other set ) { for ( ns object o : set ) { if ( ! other set . contains object ( o ) ) return bool_ ; } return bool_ ; }
public boolean is explored ( graph node node ) { node state result = find node state ( node ) ; if ( null == result ) { return bool_ ; } return ( result . explored > num_ ) ; }
public abstract mr message create init packet ( ) { return null ; }
public void changed update ( document event changes , shape a , view factory f ) { update damage ( changes , a , f ) ; }
byte [ ] remove parameter ( byte [ ] request , i parameter parameter ) ;
public boolean is local ( ) { return is local ; }
public abstract xml string newstr ( string string ) ;
boolean connection arguments present ( ) { if ( is purge historical subcommand ( ) ) { boolean secure args present = get secure args list ( ) != null && get secure args list ( ) . arguments present ( ) ; boolean admin args present = get admin uid arg ( ) . is present ( ) || secure args list . get bind password arg ( ) . is present ( ) || secure args list . get bind password file arg ( ) . is present ( ) ; return secure args present || admin args present ; } return bool_ ; }
public void fixup variables ( java . util . vector vars , int globals size ) { super . fixup variables ( vars , globals size ) ; int analysis = get analysis bits ( ) ; if ( walker factory . is natural doc order ( analysis ) ) { m _in natural order static = bool_ ; } else { m _in natural order static = bool_ ; } }
private void resolve anchor view ( final view for child , final coordinator layout parent ) { m anchor view = parent . find view by id ( m anchor id ) ; if ( m anchor view != null ) { if ( m anchor view == parent ) { if ( parent . is in edit mode ( ) ) { m anchor view = m anchor direct child = null ; return ; } throw new illegal state exception ( str_ ) ; } view direct child = m anchor view ; for ( view parent p = m anchor view . get parent ( ) ; p != parent && p != null ; p = p . get parent ( ) ) { if ( p == for child ) { if ( parent . is in edit mode ( ) ) { m anchor view = m anchor direct child = null ; return ; } throw new illegal state exception ( str_ ) ; } if ( p instanceof view ) { direct child = ( view ) p ; } } m anchor direct child = direct child ; } else { if ( parent . is in edit mode ( ) ) { m anchor view = m anchor direct child = null ; return ; } throw new illegal state exception ( str_ + str_ + parent . get resources ( ) . get resource name ( m anchor id ) + str_ + for child ) ; } }
private void interpret jcc ( final reil instruction instruction , final string program counter ) { final pair < boolean , big integer > first value = load long value ( instruction . get first operand ( ) ) ; if ( ! first value . second ( ) . equals ( big integer . zero ) && ( instruction . get third operand ( ) . get type ( ) == operand type . su b_ address ) ) { final string [ ] parts = instruction . get third operand ( ) . get value ( ) . split ( str_ ) ; assert parts . length == num_ ; set register ( program counter , new big integer ( parts [ num_ ] ) , operand size . dword , reil register status . defined ) ; set register ( su b_ pc , new big integer ( parts [ num_ ] ) , operand size . dword , reil register status . defined ) ; } else if ( ! first value . second ( ) . equals ( big integer . zero ) ) { final pair < boolean , big integer > second value = load long value ( instruction . get third operand ( ) ) ; set register ( program counter , second value . second ( ) , operand size . dword , reil register status . defined ) ; } }
public void remove action listener ( action listener a ) { if ( action listeners == null ) { return ; } action listeners . remove listener ( a ) ; if ( ! action listeners . has listeners ( ) ) { action listeners = null ; } }
public static < e extends comparable < e > > min max priority queue < e > create ( iterable < ? extends e > initial contents ) { return new builder < e > ( ordering . < e > natural ( ) ) . create ( initial contents ) ; }
public void animate y ( int duration millis , easing function easing ) { if ( android . os . build . version . sd k_ int < num_ ) return ; object animator animator y = object animator . of float ( this , str_ , num_ , num_ ) ; animator y . set interpolator ( easing ) ; animator y . set duration ( duration millis ) ; animator y . add update listener ( m listener ) ; animator y . start ( ) ; }
r visit type variable ( type variable t , p p ) ;
public void parse ( final char [ ] text ) { parse ( text , num_ , text . length ) ; }
public static synchronized void init if needed ( ) { if ( s initialized ) { return ; } init ( ) ; }
io future await uninterruptibly ( ) ;
protected boolean check target file in file system ( ) { return bool_ ; }
public boolean is boolean ( string key ) { return get ( key ) instanceof boolean ; }
public static string string for ( int n ) { switch ( n ) { case cuda graphics cube face positive x : return str_ ; case cuda graphics cube face negative x : return str_ ; case cuda graphics cube face positive y : return str_ ; case cuda graphics cube face negative y : return str_ ; case cuda graphics cube face positive z : return str_ ; case cuda graphics cube face negative z : return str_ ; } return str_ + n ; }
public query builder < c , f > return these attributes ( core token field ... return fields ) { reject . if true ( return fields == null || return fields . length == num_ ) ; set < string > attributes = new hash set < string > ( ) ; for ( core token field field : return fields ) { attributes . add ( field . to string ( ) ) ; } return set return attributes ( attributes ) ; }
boolean check message for consumer ( gs message impl message ) throws jms exception { if ( ! is valid ( message ) ) { long ttl = message . get jms expiration ( ) ; time exp time = new time ( ttl ) ; if ( _logger . is loggable ( level . fine ) ) { _logger . fine ( to string 2 ( ) + str_ + message . jms message id + str_ + exp time ) ; } return bool_ ; } if ( m _no local ) { string prod connection = message . get string property ( gs message impl . jm s_ gsconnectio n_ ke y_ name ) ; boolean pass = ! connection key . equals ( prod connection ) ; if ( ! pass && _logger . is loggable ( level . fine ) ) { _logger . fine ( to string 2 ( ) + str_ + message . jms message id + str_ ) ; } return pass ; } return bool_ ; }
public time of day with maximum value ( ) { return set copy ( get maximum value ( ) ) ; }
public static string create matching string ( string [ ] input ) { string result = str_ ; for ( string word : input ) { if ( ! word . equals ( str_ ) ) { if ( ! result . equals ( str_ ) ) { result += str_ ; } result += str_ + word + str_ ; } } result += str_ ; return result ; }
public r visit dn ( dn property definition pd , p p ) { return visit unknown ( pd , p ) ; }
void prepare task transform for filter task hidden ( deck child view transform to transform ) { to transform . alpha = num_ ; to transform . translation y += num_ ; to transform . translation z = num_ ; }
private static file ignite hadoop config ( string ignite home ) { path path = paths . get ( ignite home , str_ , str_ , str_ ) ; if ( ! files . exists ( path ) ) path = paths . get ( ignite home , str_ , str_ ) ; if ( files . exists ( path ) ) return path . to file ( ) ; else return new file ( ignite home , str_ ) ; }
int modify ( final int i value ) { return i value ; }
public i read block next ( ) { try { count reads ++ ; return read block rm a2 . read ( rma 2 formatter , - num_ , want read text , want match data , want match text , min score , max expected , text storage reader , data index reader ) ; } catch ( io exception e ) { basic . caught ( e ) ; error = bool_ ; return null ; } }
public node build ( ) { return new node ( settings . build ( ) ) ; }
string normalize ( ) { dir = dir . ends with ( str_ ) ? dir : dir + str_ ; if ( ! strings . is null or empty ( name ) ) { name = name . starts with ( str_ ) ? name . substring ( num_ ) : name ; } else if ( ! strings . is null or empty ( view . get new name ( ) ) ) { name = view . get new name ( ) ; } else if ( source node != null ) { name = source node . get name ( ) ; } return dir + name ; }
public void test process ( ) { system . out . println ( str_ ) ; audit command impl instance = null ; }
total calculate ( customer order order , customer order delivery order delivery ) ;
public static drawable bitmap to drawable ( bitmap bitmap ) { return bitmap == null ? null : new bitmap drawable ( bitmap ) ; }
public void delete network ( string guid ) ;
public abstract void request service info ( string type , string name ) ;
protected static lazy node c value true ( int index ) { return new lazy node ( valu e_ true , index ) ; }
public bubble actions with typeface ( typeface typeface ) { overlay . set label typeface ( typeface ) ; return this ; }
public revoked certs table model ( ) { column names = new string [ num_ ] ; column names [ num_ ] = res . get string ( str_ ) ; column names [ num_ ] = res . get string ( str_ ) ; data = new object [ num_ ] [ num_ ] ; }
public string type ( ) { return type ; }
public static final loco net message create ipl ur 9 2 query packet ( ) { return create ipl specific host query packet ( ln constants . r e_ ip l_ mf r_ digitrax , ln constants . r e_ ip l_ digitra x_ hos t_ u r 9 2 ) ; }
static void test 1 ( executor service pool , socket channel source , socket channel sink , int size ) throws exception { system . out . println ( str_ + size ) ; byte buffer buf = byte buffer . allocate ( size ) ; rand . next bytes ( buf . array ( ) ) ; future < long > result = pool . submit ( new reader ( sink , size ) ) ; int n = source . write ( buf ) ; if ( n != size ) throw new runtime exception ( str_ ) ; buf . rewind ( ) ; long expected = compute checksum ( buf ) ; long actual = result . get ( ) ; if ( actual != expected ) throw new runtime exception ( str_ ) ; }
protected point 2 d calculate range marker text anchor point ( graphics 2 d g 2 , plot orientation orientation , rectangle 2 d data area , rectangle 2 d marker area , rectangle insets marker offset , length adjustment type label offset type , rectangle anchor anchor ) { rectangle 2 d anchor rect = null ; if ( orientation == plot orientation . horizontal ) { anchor rect = marker offset . create adjusted rectangle ( marker area , label offset type , length adjustment type . contract ) ; } else if ( orientation == plot orientation . vertical ) { anchor rect = marker offset . create adjusted rectangle ( marker area , length adjustment type . contract , label offset type ) ; } return rectangle anchor . coordinates ( anchor rect , anchor ) ; }
public boolean can research ( ) { return can research _native ( pointer ) ; }
public double sparse array data row ( ) { this ( num_ ) ; }
private void generate provision method for provider or lazy ( new binding key key , type element referencing class , string suffix ) { class name injector class name = get injector for ( key , referencing class ) ; type spec anonymous type spec = create anonymous builtin type for unique binding ( injector class name , key , referencing class ) ; method spec . builder method spec builder = method spec . method builder ( get provision method name ( key ) + suffix ) . add modifiers ( suffix . is empty ( ) ? modifier . public : modifier . private ) . returns ( key . get type name ( ) ) . add statement ( str_ , anonymous type spec ) ; builder component spec builder = get injector type spec builder ( get injector for ( key , referencing class ) ) ; component spec builder . add method ( method spec builder . build ( ) ) ; }
void entity changed ( final object property ) { if ( property == i entity . pro p_ animated ) { animated changed = bool_ ; } else if ( property == i entity . pro p_ position ) { position changed = bool_ ; } else if ( property == i entity . pro p_ visibility ) { visibility changed = bool_ ; } else if ( property instanceof image event property ) { new image effect ( this , ( ( image event property ) property ) . get image name ( ) ) ; } }
public solr query ( string q ) { this ( ) ; this . set ( common params . q , q ) ; }
public void dispose ( ) { set output ( null ) ; super . dispose ( ) ; }
public json object put opt ( string key , object value ) throws json exception { if ( key != null && value != null ) { this . put ( key , value ) ; } return this ; }
public void handle dom attr modified event ( mutation event evt ) { }
public style map ( int size ) { values = new value [ size ] ; masks = new short [ size ] ; }
public void init web x walk engine ( ) { logging . logd ( str_ ) ; init omnibox position ( ) ; }
private static default sample values parse tfhd ( default sample values extends defaults , parsable byte array tfhd ) { tfhd . set position ( ato m_ heade r_ size ) ; int full atom = tfhd . read int ( ) ; int flags = parse full atom flags ( full atom ) ; tfhd . skip ( num_ ) ; if ( ( flags & num_ ) != num_ ) { tfhd . skip ( num_ ) ; } int default sample description index = ( ( flags & num_ ) != num_ ) ? tfhd . read unsigned int to int ( ) - num_ : extends defaults . sample description index ; int default sample duration = ( ( flags & num_ ) != num_ ) ? tfhd . read unsigned int to int ( ) : extends defaults . duration ; int default sample size = ( ( flags & num_ ) != num_ ) ? tfhd . read unsigned int to int ( ) : extends defaults . size ; int default sample flags = ( ( flags & num_ ) != num_ ) ? tfhd . read unsigned int to int ( ) : extends defaults . flags ; return new default sample values ( default sample description index , default sample duration , default sample size , default sample flags ) ; }
public static string argument host name argument ( final string default host name , final localizable message description ) throws argument exception { return string argument . builder ( optio n_ lon g_ host ) . short identifier ( optio n_ shor t_ host ) . description ( description != null ? description : inf o_ argumen t_ descriptio n_ hos t_ name . get ( ) ) . default value ( default host name ) . value placeholder ( inf o_ hos t_ placeholder . get ( ) ) . build argument ( ) ; }
public void follow sym links ( final boolean follow links ) { this . follow links = follow links ; }
private void add listener to sorted list ( final listener listener ) { if ( this . listeners . contains ( listener ) ) { this . listeners . remove ( listener ) ; } for ( int i = num_ ; i < this . listeners . size ( ) ; i ++ ) { if ( listener . get level ( ) . compare to ( this . listeners . get ( i ) . get level ( ) ) >= num_ ) { this . listeners . add ( i , listener ) ; return ; } } this . listeners . add ( listener ) ; }
public void add token ( char [ ] array , int start , int end , int token type , int start offset , boolean hyperlink ) { super . add token ( array , start , end , token type , start offset , hyperlink ) ; zz start read = zz marked pos ; }
public static text create text ( composite parent , int style , int hspan ) { text t = new text ( parent , style ) ; t . set font ( parent . get font ( ) ) ; grid data gd = new grid data ( grid data . fil l_ horizontal ) ; gd . horizontal span = hspan ; t . set layout data ( gd ) ; return t ; }
public static void write content to response ( byte [ ] content , string filename , string content type , faces context fc ) throws io exception { http servlet response response = ( http servlet response ) fc . get external context ( ) . get response ( ) ; response . set content type ( content type ) ; response . set character encoding ( constants . characte r_ encodin g_ ut f8 ) ; response . set header ( str_ , str_ + filename + str_ ) ; response . set content length ( content . length ) ; output stream out ; out = response . get output stream ( ) ; out . write ( content ) ; out . flush ( ) ; out . close ( ) ; }
public final boolean peek or false ( ) { return ( m _index > - num_ ) ? m _values [ m _index ] : bool_ ; }
public boolean mouse released ( mouse event e ) ;
boolean is class ( int object id ) ;
public type unbox ( type t ) { type u = types . unboxed type ( t ) ; if ( t == null ) { throw new assertion error ( str_ + t ) ; } else { return u ; } }
public static list property descriptors ( int api level ) { return propert y_ descriptors ; }
public void copy ( hashtable props ) { super . copy ( props ) ; init ( props ) ; }
public void visit int insn ( int opcode , int operand ) { if ( mv != null ) { mv . visit int insn ( opcode , operand ) ; } }
public void zero ( ) throws io exception ;
private static void add additional keys ( final psi file file , final psi element operand , final completion result set result ) { py subscription expression [ ] subscription expressions = py util . get all children of type ( file , py subscription expression . class ) ; for ( py subscription expression expr : subscription expressions ) { if ( expr . get operand ( ) . get text ( ) . equals ( operand . get text ( ) ) ) { final psi element parent = expr . get parent ( ) ; if ( parent instanceof py assignment statement ) { if ( expr . equals ( ( ( py assignment statement ) parent ) . get left hand side expression ( ) ) ) { py expression key = expr . get index expression ( ) ; if ( key != null ) { boolean add handler = psi tree util . find element of class at range ( file , key . get text range ( ) . get start offset ( ) , key . get text range ( ) . get end offset ( ) , py string literal expression . class ) != null ; result . add element ( create element ( key . get text ( ) , add handler ) ) ; } } } } } }
public void add parameter ( final name value pair param ) throws illegal argument exception { log . trace ( str_ ) ; if ( param == null ) { throw new illegal argument exception ( str_ ) ; } add parameter ( param . get name ( ) , param . get value ( ) ) ; }
private int scale ( synth context context , int size ) { if ( context == null || context . get component ( ) == null ) { return size ; } string scale key = ( string ) context . get component ( ) . get client property ( str_ ) ; if ( scale key != null ) { if ( nimbus style . larg e_ key . equals ( scale key ) ) { size *= nimbus style . larg e_ scale ; } else if ( nimbus style . smal l_ key . equals ( scale key ) ) { size *= nimbus style . smal l_ scale ; } else if ( nimbus style . min i_ key . equals ( scale key ) ) { size *= nimbus style . min i_ scale + num_ ; } } return size ; }
public static < t > response < t > success ( t result , cache . entry cache entry ) { return new response < t > ( result , cache entry ) ; }
boolean is in maintenance ( ) ;
static native boolean x next secondary loop event ( long display , long ptr ) ;
public list < i resource > choose resources ( ) { if ( open ( ) == window . ok ) { list < i resource > resources = new array list < i resource > ( ) ; for ( object obj : get result ( ) ) { resources . add ( ( i resource ) obj ) ; } return resources ; } return null ; }
public static boolean is major rank ( int rank ) { return get instance ( ) . major ranks . get ( rank ) ; }
public static set < psi file > find included files ( psi file file , boolean follow nested files ) { set < psi file > files = sets . new linked hash set ( ) ; collect included files ( file , files , follow nested files ) ; return files ; }
public static void clear image ( buffered image image , color bg color ) { graphics 2 d g 2d = ( graphics 2 d ) image . get graphics ( ) ; g 2d . set color ( bg color ) ; g 2d . fill rect ( num_ , num_ , image . get width ( ) , image . get height ( ) ) ; g 2d . dispose ( ) ; }
public in memory schema partition ( schema manager schema manager ) { super ( schema manager ) ; }
public router activity logger ( connection factory connection factory , boolean suspend exception ) { this . connection factory = connection factory ; this . suspend exception = suspend exception ; identity server identity server = identity server . get instance ( ) ; this . log full objects = boolean . value of ( identity server . get property ( openid m_ audi t_ lo g_ ful l_ objects , str_ ) ) ; }
public void start jit compilation ( ) { }
private static void release double array elements ( jni environment env , int array jref , address copy buffer address , int release mode ) { if ( trace jni ) vm . sys write ( str_ ) ; runtime entrypoints . check jni count down to gc ( ) ; try { double [ ] source array = ( double [ ] ) env . get jni ref ( array jref ) ; if ( magic . object as address ( source array ) . ne ( copy buffer address ) ) { int size = source array . length ; if ( release mode == num_ || release mode == num_ ) { memory . memcopy ( magic . object as address ( source array ) , copy buffer address , size << lo g_ byte s_ i n_ double ) ; } if ( release mode == num_ || release mode == num_ ) { sys call . sys free ( copy buffer address ) ; } } } catch ( throwable unexpected ) { if ( trace jni ) unexpected . print stack trace ( system . err ) ; env . record exception ( unexpected ) ; } }
public socket timeout exception ( throwable cause ) { super ( null , cause ) ; }
public void test no run ( ) { settings . set run index ( - num_ ) ; assert equals ( str_ , s . get setting ( r s_ s ) ) ; }
public void animate open ( ) { prepare content ( ) ; final on drawer scroll listener scroll listener = m on drawer scroll listener ; if ( scroll listener != null ) { scroll listener . on scroll started ( ) ; } animate open ( m vertical ? m handle . get top ( ) : m handle . get left ( ) ) ; send accessibility event ( accessibility event . typ e_ windo w_ stat e_ changed ) ; if ( scroll listener != null ) { scroll listener . on scroll ended ( ) ; } }
public contribution ( nondominated population reference set , double epsilon ) { this ( reference set , new epsilon box dominance comparator ( epsilon ) ) ; }
public marketplace removed exception ( string message , throwable cause ) { super ( message , cause ) ; }
public static < t1 , t2 , r > bi function < t1 , t2 , r > memoize bi function ( final bi function < t1 , t2 , r > fn ) { val memoise 2 = memoize function ( null ) ; return null ; }
public void test float value negative infinity 1 ( ) { string a = str_ ; float a number = new big integer ( a ) . float value ( ) ; assert true ( a number == float . negativ e_ infinity ) ; }
void hide mark as read button ( ) ;
int opus _custom _encode ( pointer by reference st , short buffer pcm , int frame _size , byte buffer compressed , int max compressed bytes ) ;
public static typeface droid serif bold italic ( context context ) { s droid serif bold italic = get font from res ( r . raw . droidserif _bolditalic , context ) ; return s droid serif bold italic ; }
public boolean is set size ( ) { return encoding utils . test bit ( _ _isset _bitfield , _ _ siz e_ isse t_ id ) ; }
public duration field hours ( ) { return unsupported duration field . get instance ( duration field type . hours ( ) ) ; }
public static string special function name ( special function node node ) { switch ( node . get node type ( ) ) { case node types . use r_ node : case node types . curren t_ use r_ node : return str_ ; case node types . sessio n_ use r_ node : return str_ ; case node types . syste m_ use r_ node : return str_ ; case node types . curren t_ schem a_ node : return str_ ; case node types . curren t_ isolatio n_ node : case node types . identit y_ va l_ node : case node types . curren t_ rol e_ node : default : return null ; } }
public static native byte [ ] i 2d _ pkc s7 ( long [ ] certs ) ;
public void insert movie ( movie movie ) { synchronized ( movies ) { if ( movies . contains ( movie ) ) { return ; } int index = collections . binary search ( movies , movie , movi e_ se t_ comparator ) ; if ( index < num_ ) { movies . add ( - index - num_ , movie ) ; movie ids . add ( - index - num_ , movie . get db id ( ) ) ; } else if ( index >= num_ ) { movies . add ( index , movie ) ; movie ids . add ( index , movie . get db id ( ) ) ; } movie set artwork helper . update artwork ( this ) ; save to db ( ) ; } list < movie > movies = new array list < > ( num_ ) ; movies . add ( movie ) ; if ( movie module manager . movi e_ settings . is enable movie set artwork movie folder ( ) ) { movie set artwork helper . write images to movie folder ( this , movies ) ; } fire property change ( str_ , null , movie ) ; fire property change ( str_ , null , movies ) ; }
void initialize content panel ( panel content panel ) ;
public void add map icon ( map icon icon ) { map icon existing = m icons . get ( icon . get name ( ) ) ; if ( existing == null ) { map icon new icon = new map icon ( icon . get name ( ) , icon . get path ( ) ) ; m icons . put ( new icon . get name ( ) , new icon ) ; add setting ( new icon ) ; } else { existing . set name ( icon . get name ( ) ) ; existing . set path ( icon . get path ( ) ) ; broadcast setting change ( existing ) ; schedule settings save ( ) ; } }
public static om arc read ( data input stream dis ) throws io exception { return read ( dis , null ) ; }
protected int next int slow ( ) { final double bound = math . exp ( - mean ) ; int count = num_ ; double product ; for ( product = num_ ; product >= bound && product > num_ ; count ++ ) { product *= random generator . next double ( ) ; } if ( product <= num_ && bound > num_ ) return ( int ) math . round ( mean ) ; return count - num_ ; }
public abstract invoke promise < t > listener ( j listener listener ) ;
public int select pivot index ( object [ ] ar , int left , int right ) { return right ; }
private void show feedback ( string message ) { if ( my host != null ) { my host . show feedback ( message ) ; } else { system . out . println ( message ) ; } }
public static void main ( final string [ ] args ) { dom test case . do main ( namednodemapreturnlastitem . class , args ) ; }
public minute ( int minute , int hour , int day , int month , int year ) { this ( minute , new hour ( hour , new day ( day , month , year ) ) ) ; }
public void send key down up sync ( int key ) { send key sync ( new key event ( key event . actio n_ down , key ) ) ; send key sync ( new key event ( key event . actio n_ up , key ) ) ; }
public void do get ( http servlet request request , http servlet response response ) throws servlet exception , io exception { log . info ( str_ + request . get remote host ( ) + str_ + request . get remote addr ( ) ) ; do post ( request , response ) ; }
void show diff ( string content ) ;
boolean is cancelled ( ) ;
public boolean is warden service enabled ( ) { return _service management record service . is service enabled ( service . warden ) ; }
protected void tab closure committed ( int id , boolean incognito ) { if ( get active layout ( ) != null ) { get active layout ( ) . on tab closure committed ( time ( ) , id , incognito ) ; } }
public boolean operation threaded ( ) { return threaded operation ; }
private static string byte array to hex string ( byte [ ] byte array ) { int read bytes = byte array . length ; string builder hex data = new string builder ( ) ; int onebyte ; for ( int i = num_ ; i < read bytes ; i ++ ) { onebyte = ( ( num_ & byte array [ i ] ) | num_ ) ; hex data . append ( integer . to hex string ( onebyte ) . substring ( num_ ) ) ; } return hex data . to string ( ) ; }
public void resync files ( ) { log util . log ( get class ( ) . get simple name ( ) , str_ ) ; resync entries ( ) ; resync photos ( ) ; }
public attachment entry update attachment ( attachment entry entry , file new file , string new title , string new description ) throws io exception , service exception { entry . set media source ( new media file source ( new file , media types . get content type ( new file ) ) ) ; if ( new title != null ) { entry . set title ( new plain text construct ( new title ) ) ; } if ( new description != null ) { entry . set summary ( new plain text construct ( new description ) ) ; } return entry . update media ( bool_ ) ; }
private void update error field ( ) { rms error . set text ( str_ + utils . round ( trainer . get error ( ) , num_ ) ) ; }
private static method find parse method ( class < ? > clazz ) { method [ ] methods = clazz . get methods ( ) ; for ( method method : methods ) { if ( method . get name ( ) . starts with ( str_ ) ) { class < ? > [ ] params = method . get parameter types ( ) ; if ( ( params . length == num_ ) && params [ num_ ] . equals ( string . class ) ) { return method ; } } } return null ; }
public void increment count ( ) { this . count ++ ; }
public boolean has children ( ) { return children . size ( ) > num_ ; }
public open ssl factory ( ) { _default protocol flags = ~ num_ ; _default protocol flags &= ~ protoco l_ ss l2 ; _default protocol flags &= ~ protoco l_ ss l3 ; _protocol flags = _default protocol flags ; }
public move target edit ( int offset ) { super ( offset , num_ ) ; }
public c thread synchronizer ( final process manager process manager , final thread listener thread event listener ) { preconditions . check not null ( process manager , str_ ) ; preconditions . check not null ( thread event listener , str_ ) ; m _process manager = process manager ; m _thread event listener = thread event listener ; process manager . add listener ( m _internal thread listener ) ; }
public certificate list to as n1 structure ( ) { return x 5 0 9 crl ; }
public void store originals ( ) { m starting start trim = m start trim ; m starting end trim = m end trim ; m starting rotation = m rotation ; }
< t > t execute ( key value callback < t > action ) ;
public config exception create class loading exception adaptor ( dn dn , string class name , exception e ) { localizable message message = er r_ admi n_ canno t_ instantiat e_ class . get ( class name , dn , stack trace to single line string ( e , bool_ ) ) ; return new config exception ( message , e ) ; }
public object run safely ( catbert . fast stack stack ) throws exception { int idx = get int ( stack ) ; media node node = get media node ( stack ) ; return node != null ? node . get child at ( idx ) : null ; }
public void clear rect ( int x , int y , int width , int height ) { paint temp = graphic context . get paint ( ) ; graphic context . set paint ( graphic context . get background ( ) ) ; fill rect ( x , y , width , height ) ; graphic context . set paint ( temp ) ; }
public static double magnitude ( final double x , final double y , final double z ) { return math . sqrt ( x * x + y * y + z * z ) ; }
public void trim ( long position ) ;
public void run test ( ) throws throwable { document doc ; document type doc type ; string document type name ; doc = ( document ) load ( str_ , bool_ ) ; doc type = doc . get doctype ( ) ; assert not null ( str_ , doc type ) ; document type name = doc type . get node name ( ) ; if ( ( str_ . equals ( get content type ( ) ) ) ) { assert equals ( str_ , str_ , document type name ) ; } else { assert equals ( str_ , str_ , document type name ) ; } }
public final boolean contains ( node n ) { if ( bits == null ) { for ( node node : nodes ) { if ( node == n ) return bool_ ; if ( node == null ) { break ; } } return bool_ ; } else { return bits . get ( n . get number ( ) ) ; } }
public static native long x 5 0 9 _ cr l _get 0 _by _cert ( long x 5 0 9 crl ctx , long x 5 0 9 ctx ) ;
public void register ( m bean server server ) { for ( flag field < ? > field : registry . all fields ( ) ) { flag field m bean < ? > delegator = new flag field m bean < > ( field ) ; delegator . register ( server ) ; } }
private collection < map < string , object > > batch parse ( string [ ] header , collection < string [ ] > batch ) { return batch . stream ( ) . map ( null ) . collect ( to list ( ) ) ; }
public pdf canvas end variable text ( ) { return end marked content ( ) ; }
void write on ( final output stream os ) throws io exception ;
public boolean is warn enabled ( ) { return ( get logger ( ) . is loggable ( level . warning ) ) ; }
public sip header parse ( ) throws parse exception { if ( debug ) dbg _enter ( str_ ) ; r seq rseq = new r seq ( ) ; try { header name ( token types . rseq ) ; rseq . set header name ( sip header names . rseq ) ; string number = this . lexer . number ( ) ; try { rseq . set seq number ( long . parse long ( number ) ) ; } catch ( invalid argument exception ex ) { throw create parse exception ( ex . get message ( ) ) ; } this . lexer . s por ht ( ) ; this . lexer . match ( str_ ) ; return rseq ; } finally { if ( debug ) dbg _leave ( str_ ) ; } }
public abstract void action performed ( action event e ) ;
public node add child ( node parent ) { node check ( parent , bool_ ) ; return get node ( add child ( parent . get row ( ) ) ) ; }
public static property values holder of int ( string property name , int ... values ) { return new int property values holder ( property name , values ) ; }
protected abstract boolean is readable ( s session ) ;
public static void main ( string [ ] args ) { process p ; try { process builder pb = new process builder ( str_ , str_ ) ; p = pb . start ( ) ; } catch ( io exception ioe ) { system . err . println ( str_ + ioe . get message ( ) ) ; p = null ; } try { test dex class loader ( ) ; } finally { if ( p != null ) p . destroy ( ) ; try { thread . sleep ( num_ ) ; } catch ( exception ex ) { } } system . out . println ( str_ ) ; }
private void update progress ( string progress label , int progress ) { if ( my host != null ) { my host . update progress ( progress label , progress ) ; } else { system . out . println ( progress label + str_ + progress + str_ ) ; } }
public boolean supports schemas in table definitions ( ) throws sql exception ;
public int size ( ) ;
private static boolean contains ( string value , int start , int length , string criteria 1 , string criteria 2 , string criteria 3 , string criteria 4 , string criteria 5 ) { return contains ( value , start , length , new string [ ] { criteria 1 , criteria 2 , criteria 3 , criteria 4 , criteria 5 } ) ; }
public static cache builder spec disable caching ( ) { return cache builder spec . parse ( str_ ) ; }
void on completion ( media player mp ) ;
private list < digicore record > sort time merge ( list < digicore record > log ) { collections . sort ( log ) ; return log ; }
public boolean intersects ( rectangle 2 d r ) { rectangle 2 d b = get bounds ( ) ; if ( b == null ) return bool_ ; return b . intersects ( r ) ; }
public ads create campaigns query ( vk api client client , user actor actor , int account id , string data ) { super ( client , str_ , utils . build parametrized type ( list . class , integer . class ) ) ; access token ( actor . get access token ( ) ) ; account id ( account id ) ; data ( data ) ; }
private void show feedback ( string message ) { if ( my host != null ) { my host . show feedback ( message ) ; } else { system . out . println ( message ) ; } }
public void remove listener ( final i filter dialog listener listener ) { m _listeners . remove listener ( listener ) ; }
public java completion proposal impl ( string replacement string , int replacement offset , int replacement length , images image , styled string display string , int relevance , boolean in javadoc , java content assist invocation context invocation context ) { super ( invocation context ) ; assert . is not null ( replacement string ) ; assert . is true ( replacement offset >= num_ ) ; assert . is true ( replacement length >= num_ ) ; set replacement string ( replacement string ) ; set replacement offset ( replacement offset ) ; set replacement length ( replacement length ) ; set image ( image ) ; set styled display string ( display string == null ? new styled string ( replacement string ) : display string ) ; set relevance ( relevance ) ; set cursor position ( replacement string . length ( ) ) ; set in javadoc ( in javadoc ) ; set sort string ( display string == null ? replacement string : display string . get string ( ) ) ; }
void instrumentation applied ( long platform id , map < long , long [ ] > method to sensor map ) ;
public string send roster ( ) { list < roster entry > roster list ; roster list = roster . get default ( ) . get entries in group ( manager . get selected roster group ( ) ) ; string builder roster string = new string builder ( roster list . size ( ) * num_ ) ; for ( roster entry entry : roster list ) { string builder entry info = new string builder ( entry . get id ( ) ) ; entry info . append ( str_ ) ; entry info . append ( entry . get dcc address ( ) ) ; if ( entry . is long address ( ) ) { entry info . append ( str_ ) ; } else { entry info . append ( str_ ) ; } roster string . append ( str_ ) ; roster string . append ( entry info ) ; } roster string . trim to size ( ) ; return ( str_ + roster list . size ( ) + roster string ) ; }
void remove conductor ( ) ;
public pair < string , string > resolve main panel renderer label ( final map parameters ) { for ( final central view resolver resolver : resolvers ) { final pair < string , string > label = resolver . resolve main panel renderer label ( parameters ) ; if ( label != null ) { return label ; } } return default ; }
protected < t extends node > t extend with node ( t node ) { add to lookup map ( node ) ; extend with extended node ( new node holder ( node ) ) ; return node ; }
public string create method ( workflow workflow , string wait for , string method name , string step id , string step description , uri storage , object [ ] args ) { storage system system = _db client . query object ( storage system . class , storage ) ; workflow . method method = new workflow . method ( method name , args ) ; string wait for step = workflow . create step ( null , step description , wait for , storage , system . get system type ( ) , get class ( ) , method , null , step id ) ; return wait for step ; }
public static string millis to string ( long millis ) { return strings . millis to string ( millis , bool_ ) ; }
public void increase counts ( map < string , integer > event count , predicate < string > predicate ) { increase event count ( event count , predicate ) ; increase action count ( event count , predicate ) ; }
protected abstract void on connecting ( ) ;
public groovy script ( document doc , file file ) { super ( doc , file ) ; }
private void signal not empty ( ) { final reentrant lock take lock = this . take lock ; take lock . lock ( ) ; try { not empty . signal ( ) ; } finally { take lock . unlock ( ) ; } }
public static mapping < big decimal > big decimal ( constraint ... constraints ) { return new field mapping ( input mode . single , mk simple converter ( null ) , new mapping meta ( str_ , big decimal . class ) ) . constraint ( checking ( null , str_ , bool_ ) ) . constraint ( constraints ) ; }
public void add body decl ( body decl node ) { list < body decl > list = ( parent == null || state == null ) ? get body decl list no transform ( ) : get body decl list ( ) ; list . add child ( node ) ; }
protected nbt abstract tag ( ) { }
private void send notification ( string message body ) { intent intent = new intent ( this , main activity . class ) ; intent . add flags ( intent . fla g_ activit y_ clea r_ top ) ; pending intent pending intent = pending intent . get activity ( this , num_ , intent , pending intent . fla g_ on e_ shot ) ; uri default sound uri = ringtone manager . get default uri ( ringtone manager . typ e_ notification ) ; notification compat . builder notification builder = new notification compat . builder ( this ) . set small icon ( r . drawable . ic _stat _ic _notification ) . set content title ( str_ ) . set content text ( message body ) . set auto cancel ( bool_ ) . set sound ( default sound uri ) . set content intent ( pending intent ) ; notification manager notification manager = ( notification manager ) get system service ( context . notificatio n_ service ) ; notification manager . notify ( num_ , notification builder . build ( ) ) ; }
public static boolean remove from cache ( string image uri , disk cache disk cache ) { file image = disk cache . get ( image uri ) ; return image != null && image . exists ( ) && image . delete ( ) ; }
private void edit post ( final string selected wall id , final string selected tag id ) { final intent edit wall post intent = new intent ( get activity ( ) , edit wall post activity . class ) ; edit wall post intent . put extra ( app constants . keys . edi t_ post , bool_ ) ; edit wall post intent . put extra ( app constants . keys . wal l_ id , selected wall id ) ; edit wall post intent . put extra ( app constants . keys . ta g_ id , selected tag id ) ; start activity ( edit wall post intent ) ; }
public boolean retain all ( collection < ? > c ) { if ( ! ( c instanceof regular enum set ) ) return super . retain all ( c ) ; regular enum set < ? > es = ( regular enum set < ? > ) c ; if ( es . element type != element type ) { boolean changed = ( elements != num_ ) ; elements = num_ ; return changed ; } long old elements = elements ; elements &= es . elements ; return elements != old elements ; }
public direct spell checker ( ) { }
public inline state machine _ create inline state machine _ ( ) { inline state machine _ impl inline state machine _ = new inline state machine _ impl ( ) ; return inline state machine _ ; }
public static boolean is windows vista os ( ) { string os name = system . get property ( str_ ) ; return os name != null && os name . to lower case ( ) . contains ( str_ ) && os name . contains ( str_ ) ; }
public wall force ( float x 1 , float y 1 , float x 2 , float y 2 ) { this ( defaul t_ gra v_ constant , x 1 , y 1 , x 2 , y 2 ) ; }
public t create ( string name , input stream yaml ) throws baleen exception { try { return create ( name , null , io utils . to string ( yaml ) ) ; } catch ( io exception e ) { throw new baleen exception ( e ) ; } }
public zoom options build ( ) { zoom options options = new zoom options ( ) ; options . animate = animate ; return options ; }
public void add target requests ( list < string > requests , long priority ) { synchronized ( target requests ) { for ( string s : requests ) { if ( string utils . is blank ( s ) || s . equals ( str_ ) || s . starts with ( str_ ) ) { continue ; } s = url utils . canonicalize url ( s , url . to string ( ) ) ; target requests . add ( new request ( s ) . set priority ( priority ) ) ; } } }
public abstract residue unknown residue ( ) ;
public void test issue 4 9 2 ( ) throws exception { do test issue 4 9 2 ( bool_ ) ; do test issue 4 9 2 ( bool_ ) ; }
protected kml orbit view controller ( world window wwd ) { super ( wwd ) ; this . orbit view = ( orbit view ) wwd . get view ( ) ; }
public boolean is inside 2 d ( float x , float y ) ;
void mark as deleted ( ) { f offset = delete d_ value ; f length = delete d_ value ; }
public action 0 on schedule ( action 0 action ) { return action ; }
public static void end section ( ) { if ( exo player library info . trac e_ enabled && util . sd k_ int >= num_ ) { end section v 1 8 ( ) ; } }
public static refactoring status context create ( i type root type root , ast node node ) { i source range range = null ; if ( node != null ) range = new source range ( node . get start position ( ) , node . get length ( ) ) ; return create ( type root , range ) ; }
boolean on split work ( int bytes moved ) { if ( _split target remaining <= num_ ) { _split target remaining = _split target size - bytes moved ; return bool_ ; } else { _split target remaining -= bytes moved ; return bool_ ; } }
public void init ( boolean for encryption , cipher parameters param ) { if ( param instanceof parameters with random ) { parameters with random r param = ( parameters with random ) param ; key = ( rsa key parameters ) r param . get parameters ( ) ; } else { key = ( rsa key parameters ) param ; } this . for encryption = for encryption ; }
public void run test ( ) throws throwable { document doc ; element element ; string tagname ; doc = ( document ) load ( str_ , bool_ ) ; element = doc . get element by id ( str_ ) ; tagname = element . get tag name ( ) ; assert equals ( str_ , str_ , tagname ) ; }
protected void fire table event ( int row 0 , int row 1 , int col , int type ) { ++ m _mod count ; if ( type != event constants . update && col == event constants . al l_ columns ) { fire tuple event ( this , row 0 , row 1 , type ) ; } if ( ! m _listeners . is empty ( ) ) { object [ ] lstnrs = m _listeners . get array ( ) ; for ( int i = num_ ; i < lstnrs . length ; ++ i ) { ( ( table listener ) lstnrs [ i ] ) . table changed ( this , row 0 , row 1 , col , type ) ; } } }
public int num properties ( ) { if ( auxillary != null ) return auxillary . num properties ( ) ; return get methods . size ( ) ; }
public boolean is set ( _ fields field ) { if ( field == null ) { throw new illegal argument exception ( ) ; } switch ( field ) { case not e_ id : return is set note id ( ) ; case clas s_ name : return is set class name ( ) ; case interprete r_ context : return is set interpreter context ( ) ; } throw new illegal state exception ( ) ; }
public xml string buffer ( char c ) { this ( num_ ) ; append ( c ) ; }
string name ( ) ;
public void log error ( throwable exception ) { log utils . log error ( log , exception , str_ ) ; }
public void delete scr reg int ( int book id , int fdr id , string entidad ) throws sql exception ;
private date correct tick date for position ( date time , date tick unit unit , date tick mark position position ) { date result = time ; switch ( unit . get unit ( ) ) { case date tick unit . millisecond : case date tick unit . second : case date tick unit . minute : case date tick unit . hour : case date tick unit . day : break ; case date tick unit . month : result = calculate date for position ( new month ( time , this . time zone , this . locale ) , position ) ; break ; case date tick unit . year : result = calculate date for position ( new year ( time , this . time zone , this . locale ) , position ) ; break ; default : break ; } return result ; }
private void register wifi manager ( ) { m wifi manager = ( wifi manager ) this . get system service ( context . wif i_ service ) ; }
public void write long ( long i ) throws io exception { write int ( ( int ) ( i > > num_ ) ) ; write int ( ( int ) i ) ; }
audio capabilities ( int [ ] supported encodings , int max channel count ) { if ( supported encodings != null ) { this . supported encodings = arrays . copy of ( supported encodings , supported encodings . length ) ; arrays . sort ( this . supported encodings ) ; } else { this . supported encodings = new int [ num_ ] ; } this . max channel count = max channel count ; }
public synchronized connection decorator remove recovery callback ( connection decorator cb ) { if ( cb == null ) throw new null pointer exception ( str_ ) ; return ( recovery _callbacks _ . remove ( cb ) ? cb : null ) ; }
public boolean next valid token ( ) throws java . io . io exception { while ( tokeniser . next token ( ) ) { if ( tokeniser . get token type ( ) == token type . comment ) continue ; return bool_ ; } return bool_ ; }
protected query new prefix query ( term prefix ) { schema field sf = schema . get field ( prefix . field ( ) ) ; return sf . get type ( ) . get prefix query ( parser , sf , prefix . text ( ) ) ; }
void on updated ( ) ;
text span layout create text layout ( attributed character iterator aci , int [ ] char map , point 2 d offset , font render context frc ) ;
public static list < territory > find unit terr ( final game data data , final player id player , final match < unit > unit condition ) { final composite match < unit > limit ships = new composite match and < > ( unit condition ) ; final list < territory > ship terr = new array list < > ( ) ; final collection < territory > t neighbors = data . get map ( ) . get territories ( ) ; for ( final territory t 2 : t neighbors ) { if ( t 2 . get units ( ) . some match ( limit ships ) ) { ship terr . add ( t 2 ) ; } } return ship terr ; }
private json value update group ( string group id , json value group json ) throws exception { system . out . println ( str_ ) ; http response < string > response = unirest . put ( azure endpoint + str_ + group id ) . header ( str_ , str_ ) . header ( str_ , str_ ) . header ( str_ , str_ ) . header ( str_ , str_ ) . body ( write value as string ( group json ) ) . as string ( ) ; return json ( read json ( response . get body ( ) ) ) ; }
protected final void to return integer expectations ( final int value ) { to return value expectations ( field descriptor . get datatype coder ( ) . encode int ( value ) ) ; }
public boolean is domain suffix ( string extension ) { return domains . contains key ( extension ) ; }
protected void notify scrolling listeners about start ( ) { for ( on wheel scroll listener listener : scrolling listeners ) { listener . on scrolling started ( this ) ; } }
public void print ( final print writer pw ) { print list ( pw , text ) ; }
public boolean is invisible to creatures ( ) { return bool_ ; }
static void assert encode decode ( worm address manager am , int nbytes , long offset ) { final long addr = am . to addr ( nbytes , offset ) ; if ( nbytes != am . get byte count ( addr ) ) { fail ( str_ + am . offset bits + str_ + addr + str_ + nbytes + str_ + am . get byte count ( addr ) + str_ + offset ) ; } if ( offset != am . get offset ( addr ) ) { fail ( str_ + am . offset bits + str_ + addr + str_ + offset + str_ + am . get offset ( addr ) + str_ + nbytes ) ; } }
public void test exists ( ) throws exception { create ( igfs , paths ( dir ) , null ) ; check exist ( igfs , igfs secondary , dir ) ; }
private void updated ( string setting ) { string new color = color settings . get ( setting ) . get setting value ( ) ; for ( color setting color setting : color settings . values ( ) ) { if ( color setting . has base ( setting ) ) { color setting . update ( new color ) ; } } }
public close session action ( ) { super ( str_ ) ; }
public double compute angle ( int from edge , int to edge ) { edge store . edge e = layer . edge store . get cursor ( from edge ) ; vertex store . vertex v = layer . vertex store . get cursor ( e . get to vertex ( ) ) ; coordinate p 1 = point on line ( e . get geometry ( ) , bool_ ) ; coordinate p 2 = new coordinate ( v . get lon ( ) , v . get lat ( ) ) ; e . seek ( to edge ) ; coordinate p 3 = point on line ( e . get geometry ( ) , bool_ ) ; double cos lat = math . abs ( math . cos ( p 2 . y * math . pi / num_ ) ) ; p 1 . x /= cos lat ; p 2 . x /= cos lat ; p 3 . x /= cos lat ; double angle in = angle . angle ( p 1 , p 2 ) ; double angle out = angle . angle ( p 2 , p 3 ) ; double angle = angle out - angle in ; if ( angle < num_ ) angle += math . pi * num_ ; return angle ; }
public boolean fire ( context context ) { return utils . open intent safely ( context , action ) ; }
protected synchronized boolean grant lock to request ( d lock request message request ) { assert . assert true ( request . get remote thread ( ) != null ) ; if ( is granted ( bool_ ) || has waiting requests ( ) ) { return bool_ ; } if ( logger . is trace enabled ( log marker . dls ) ) { logger . trace ( log marker . dls , str_ , request ) ; } long new lease expire time = grant and respond to request ( request ) ; if ( new lease expire time == - num_ ) return bool_ ; if ( new lease expire time < long . ma x_ value ) { long now = d lock service . get lock time stamp ( this . grantor . dm ) ; this . grantor . thread . check time to wait ( new lease expire time - now , bool_ ) ; } return bool_ ; }
private void update vendor option panels ( ) { if ( vendor option raster factory != null ) { list < vendor option interface > ve list = vendor option raster factory . get vendor option list ( ) ; if ( ve list != null ) { for ( vendor option interface vendor option : ve list ) { boolean display vendor option = vendor option manager . get instance ( ) . is allowed ( vendor option version list , vendor option . get vendor option ( ) ) ; base panel extension panel = vendor option . get panel ( ) ; if ( extension panel != null ) { remove panel ( vendor option . get panel ( ) ) ; if ( display vendor option ) { append panel ( vendor option . get panel ( ) ) ; } } } } } }
public static _ fields find by name ( string name ) { return by name . get ( name ) ; }
public static _ fields find by thrift id ( int field id ) { switch ( field id ) { case num_ : return transactio n_ id ; default : return null ; } }
private void remove from circle of trust ( base config type config , string realm , string entity id ) { string class method = str_ ; try { if ( config != null ) { map attr = idff meta utils . get attributes ( config ) ; list cot attr = ( list ) attr . get ( cot constants . co t_ list ) ; list cot list = new array list ( cot attr ) ; if ( ( cot list != null ) && ! cot list . is empty ( ) ) { for ( iterator iter = cot list . iterator ( ) ; iter . has next ( ) ; ) { string cot name = ( string ) iter . next ( ) ; if ( cot name != null && cot name . length ( ) > num_ ) { try { cot manager . remove circle of trust member ( realm , cot name , cot constants . idff , entity id ) ; } catch ( cot exception ce ) { if ( debug . message enabled ( ) ) { debug . message ( class method + str_ + cot name ) ; } } } } } } } catch ( exception e ) { debug . error ( str_ + str_ + entity id + str_ , e ) ; } }
public synchronized void remove series ( int index ) { m series . remove ( index ) ; }
boolean is voted ( ) ;
public static void make shell script ( string content , string name ) { try { file script = new file ( name ) ; injector . instance . file system ( ) . write ( str_ + content , script ) ; injector . instance . file system ( ) . set executable ( script ) ; } catch ( io exception e ) { throw new moe problem ( str_ + e ) ; } }
protected view make controller view ( ) { return ( ( layout inflater ) m context . get system service ( context . layou t_ inflate r_ service ) ) . inflate ( get resources ( ) . get identifier ( str_ , str_ , m context . get package name ( ) ) , this ) ; }
public void long pointer press ( int x , int y ) { }
public void initialize local addresses ( collection < inet socket address > addrs ) throws ignite spi exception ;
public void notify header item removed ( int position ) { if ( position < num_ || position >= header item count ) { throw new index out of bounds exception ( str_ + position + str_ + ( header item count - num_ ) + str_ ) ; } notify item removed ( position ) ; }
public static timestamp now ( ) { long millis = system . current time millis ( ) ; return new timestamp ( millis , unknow n_ offset ) ; }
boolean enabled ( ) ;
public void create historical tab ( ) { native create historical tab ( m buffer , m version ) ; }
private static void apply open ssl fix ( ) throws security exception { if ( ( build . version . sd k_ int < versio n_ cod e_ jell y_ bean ) || ( build . version . sd k_ int > versio n_ cod e_ jell y_ bea n_ m r2 ) ) { return ; } try { class . for name ( str_ ) . get method ( str_ , byte [ ] . class ) . invoke ( null , generate seed ( ) ) ; int bytes read = ( integer ) class . for name ( str_ ) . get method ( str_ , string . class , long . class ) . invoke ( null , str_ , num_ ) ; if ( bytes read != num_ ) { throw new io exception ( str_ + bytes read ) ; } } catch ( exception e ) { if ( allo w_ broke n_ prng ) { log . w ( prng fixes . class . get simple name ( ) , str_ , e ) ; } else { throw new security exception ( str_ , e ) ; } } }
public builder zk servers ( string zk servers ) { this . _zk host = zk servers ; return this ; }
protected key spec engine get key spec ( secret key key , class < ? > key spec ) throws invalid key spec exception { try { if ( ( key instanceof secret key ) && ( key . get algorithm ( ) . equals ignore case ( str_ ) ) && ( key . get format ( ) . equals ignore case ( str_ ) ) ) { if ( de sede key spec . class . is assignable from ( key spec ) ) { return new de sede key spec ( key . get encoded ( ) ) ; } else { throw new invalid key spec exception ( str_ ) ; } } else { throw new invalid key spec exception ( str_ ) ; } } catch ( invalid key exception e ) { throw new invalid key spec exception ( str_ ) ; } }
boolean is ceylon toplevel method ( ) ;
private void update selected layout ( ) { if ( null != get editor ( ) ) { layout choices . select layout ( get editor ( ) . get layout name ( ) ) ; } }
cursor query ( t db helper , content resolver content resolver , uri uri , string [ ] projection , string selection , string [ ] selection args , string sort order ) ;
public void test do check with not detection result overriden by constructor and no message thrown ( ) { logger . debug ( str_ ) ; elements . add ( element ) ; mock test solution handler . add test solution ( test solution . passed ) ; expect last call ( ) . once ( ) ; attribute presence checker instance = new attribute presence checker ( attribute store . clas s_ attr , test solution . failed , test solution . passed , att r_ presen t_ msg , null ) ; instance . set process remark service ( mock process remark service ) ; replay ( mock ssp handler , mock test solution handler , mock process remark service ) ; instance . do check ( mock ssp handler , elements , mock test solution handler ) ; verify ( mock ssp handler , mock test solution handler , mock process remark service ) ; }
public blockwise status ( int content format ) { this . content format = content format ; }
public void destroy session ( session requester , session id session to destroy ) throws session exception { if ( session to destroy == null ) { return ; } session operation strategy . get operation ( session to destroy ) . destroy ( requester , resolve session ( session to destroy ) ) ; }
void periodically ( string name , long value , time unit unit , task task ) ;
public static boolean is control ( long flags ) { return ( ( flags & logrecor d_ flag s_ contro l_ message ) != num_ ) ; }
public static list < org . oscm . vo . vo catalog entry > convert to api vo catalog entry ( list < org . oscm . internal . vo . vo catalog entry > old vo ) { if ( old vo == null ) { return null ; } list < org . oscm . vo . vo catalog entry > new vo = new array list < org . oscm . vo . vo catalog entry > ( ) ; for ( org . oscm . internal . vo . vo catalog entry tmp : old vo ) { new vo . add ( convert to api ( tmp ) ) ; } return new vo ; }
private boolean allocate to physical ( compound interval i , register p ) { generic register restrictions restrict = ir . stack manager . get restrictions ( ) ; register r = i . get register ( ) ; generic physical register set phys = ir . regpool . get physical register set ( ) ; if ( p != null && ! phys . is allocatable ( p ) ) return bool_ ; if ( linear scan . verbos e_ debug && p != null ) { if ( ! p . is available ( ) ) system . out . println ( str_ + i + p ) ; if ( restrict . is forbidden ( r , p ) ) system . out . println ( str_ + i + p ) ; } if ( ( p != null ) && p . is available ( ) && ! restrict . is forbidden ( r , p ) ) { compound interval p interval = reg alloc state . get interval ( p ) ; if ( p interval == null ) { return bool_ ; } else { if ( ! i . intersects ( p interval ) ) { return bool_ ; } } } return bool_ ; }
handler registration add mouse wheel handler ( mouse wheel handler handler ) ;
public void enqueue job ( geo service job job ) throws exception { _log . info ( str_ , job . get vdc id ( ) , job . get task ( ) ) ; _queue . put ( job ) ; }
public void write ( int offset , int value ) { super . write ( offset , value ) ; }
public abstract void write _ulong _array ( int [ ] value , int offset , int length ) ;
public void make dirty ( ) { }
public void initialise ( double [ ] kernel widths ) { dimensions = kernel widths . length ; this . supplied kernel widths = new double [ dimensions ] ; for ( int d = num_ ; d < dimensions ; d ++ ) { this . supplied kernel widths [ d ] = kernel widths [ d ] ; } finish initialisation ( ) ; }
public extended classes iterable ( t class root ) { this . root = root ; }
public final int yystate ( ) { return zz lexical state ; }
public sql recoverable exception ( string reason ) { super ( reason , null , num_ ) ; }
public void start ( profile profile , string url , string text , boolean prevent inline autocomplete ) { start ( profile , url , text , - num_ , prevent inline autocomplete ) ; }
private static int avc level to max frame size ( int avc level ) { switch ( avc level ) { case codec profile level . avc level 1 : return num_ ; case codec profile level . avc level 1b : return num_ ; case codec profile level . avc level 1 2 : return num_ ; case codec profile level . avc level 1 3 : return num_ ; case codec profile level . avc level 2 : return num_ ; case codec profile level . avc level 2 1 : return num_ ; case codec profile level . avc level 2 2 : return num_ ; case codec profile level . avc level 3 : return num_ ; case codec profile level . avc level 3 1 : return num_ ; case codec profile level . avc level 3 2 : return num_ ; case codec profile level . avc level 4 : return num_ ; case codec profile level . avc level 4 1 : return num_ ; case codec profile level . avc level 4 2 : return num_ ; case codec profile level . avc level 5 : return num_ ; case codec profile level . avc level 5 1 : return num_ ; default : return - num_ ; } }
public symbol remove ( int i ) { symbol token = buffer [ i ] ; int last = n _written - num_ ; while ( i < last ) { buffer [ i ] = buffer [ ++ i ] ; } n _written = last ; return token ; }
public boolean is empty ( ) ;
public void draw to ( point 2 d that ) { std draw . line ( this . x , this . y , that . x , that . y ) ; }
void end document ( ) ;
public document create default document ( ) { style sheet styles = get style sheet ( ) ; style sheet ss = new style sheet ( ) ; ss . add style sheet ( styles ) ; html document doc = new html document ( ss ) ; doc . set parser ( get parser ( ) ) ; doc . set asynchronous load priority ( num_ ) ; doc . set token threshold ( num_ ) ; return doc ; }
public static void pick image ( activity activity , int request code ) { try { activity . start activity for result ( get image picker ( ) , request code ) ; } catch ( activity not found exception e ) { show image picker error ( activity ) ; } }
private void prepare transfers ( ) throws lib usb exception { if ( m available transfers == null ) { m available transfers = new linked transfer queue < > ( ) ; for ( int x = num_ ; x < transfe r_ buffe r_ poo l_ size ; x ++ ) { transfer transfer = lib usb . alloc transfer ( ) ; if ( transfer == null ) { throw new lib usb exception ( str_ , lib usb . erro r_ n o_ mem ) ; } final byte buffer buffer = byte buffer . allocate direct ( m buffer size ) ; lib usb . fill bulk transfer ( transfer , m device handle , us b_ endpoint , buffer , buffer processor . this , str_ , us b_ timeou t_ us ) ; m available transfers . add ( transfer ) ; } } }
public schema schema ( ) { return schema ; }
void create idff provider ( string realm , string entity id , map values ) throws am console exception ;
void add scrap view ( view scrap ) { layout params lp = ( layout params ) scrap . get layout params ( ) ; if ( lp == null ) { return ; } int view type = lp . view type ; if ( ! should recycle view type ( view type ) ) { if ( view type != ite m_ vie w_ typ e_ heade r_ o r_ footer ) { remove detached view ( scrap , bool_ ) ; } return ; } if ( m view type count == num_ ) { dispatch finish temporary detach ( scrap ) ; m current scrap . add ( scrap ) ; } else { dispatch finish temporary detach ( scrap ) ; m scrap views [ view type ] . push ( scrap ) ; } if ( m recycler listener != null ) { m recycler listener . on moved to scrap heap ( scrap ) ; } }
public lexicon remove low df words ( int min df ) { int id = num_ ; hashtable < integer , integer > translation = new hashtable < integer , integer > ( ) ; for ( entry < integer , word > e : id hash . entry set ( ) ) { word w = e . get value ( ) ; if ( w . df < min df ) { continue ; } translation . put ( w . id , id ) ; ++ id ; } return map ( translation ) ; }
public metadata ( ) { directory map = new hash map ( ) ; directory list = new array list ( ) ; }
public searchable environment ( java project project , org . eclipse . jdt . core . i compilation unit [ ] working copies ) throws java model exception { this . project = project ; this . check access restrictions = ! java core . ignore . equals ( project . get option ( java core . compile r_ p b_ forbidde n_ reference , bool_ ) ) || ! java core . ignore . equals ( project . get option ( java core . compile r_ p b_ discourage d_ reference , bool_ ) ) ; this . working copies = working copies ; this . name lookup = project . new name lookup ( working copies ) ; }
pointer by reference opus _decoder _create ( int fs , int channels , int buffer error ) ;
protected abstract compiled method compile method ( normal method method , type reference [ ] params ) ;
static void phase transition ( string phase ) { compilation statistics . clear ( phase ) ; }
public boolean is business object data attribute required ( string business object attribute name , business object format entity business object format entity ) { boolean required = bool_ ; for ( business object data attribute definition entity attribute definition entity : business object format entity . get attribute definitions ( ) ) { if ( business object attribute name . equals ignore case ( attribute definition entity . get name ( ) ) ) { required = bool_ ; break ; } } return required ; }
public boolean is a level technically valid ( final string signature id ) { signature wrapper signature wrapper = get signature by id null safe ( signature id ) ; return signature wrapper . is a level technically valid ( ) ; }
public static node list select node list ( node doc , string str , namespace context nsctx ) throws x path exception { x path factory xpf = xpath factory cache . get instance for current thread ( ) ; x path xpath = xpf . new x path ( ) ; xpath . set namespace context ( nsctx ) ; x path expression expr = xpath . compile ( str ) ; return ( node list ) expr . evaluate ( doc , x path constants . nodeset ) ; }
public static void persist apn ( context context , apn apn ) { preference manager . get default shared preferences ( context ) . edit ( ) . put string ( str_ , apn . mmsc ) . put string ( str_ , apn . proxy ) . put string ( str_ , apn . port ) . apply ( ) ; }
public void init target view ( ) { float width = num_ , height = num_ ; if ( target view . get layout params ( ) != null ) { width = target view . get layout params ( ) . width > num_ ? target view . get layout params ( ) . width : num_ ; height = target view . get layout params ( ) . height > num_ ? target view . get layout params ( ) . height : num_ ; } if ( width != num_ && height != num_ ) { this . target view . set pivot x ( width / num_ ) ; this . target view . set pivot y ( height / num_ ) ; } }
boolean update ( csn csn ) { return state . update ( csn ) ; }
public static ldapurl value of ( string host , int port , boolean is ssl ) { return new ldapurl ( host , port , is ssl ) ; }
public void add extension ( final string description , final string extension ) { exts . put ( extension , description ) ; }
dimension preferred layout size ( container parent ) ;
public static input stream open resource file as stream ( string resource file name ) { if ( resource file name . equals ( str_ ) ) resource file name = str_ ; input stream is = null ; try { is = mary link . get context ( ) . get assets ( ) . open ( resource file name ) ; if ( null == is ) { is = mary link . get context ( ) . get assets ( ) . open ( str_ + resource file name ) ; if ( null == is ) { is = mary link . get context ( ) . get assets ( ) . open ( resource file name ) ; if ( null == is ) { is = new file input stream ( resource file name ) ; } } } } catch ( exception e ) { log . d ( mary . log , str_ + resource file name ) ; } return is ; }
public boolean is sub acct dim ( ) { object oo = get _ value ( columnnam e_ is sub acct dim ) ; if ( oo != null ) { if ( oo instanceof boolean ) return ( ( boolean ) oo ) . boolean value ( ) ; return str_ . equals ( oo ) ; } return bool_ ; }
public void increase font size ( ) { m _font size adjust ++ ; }
public static left regular bipartite graph segment build random left regular bipartite graph ( int left size , int right size , int left degree , random random ) { left regular bipartite graph segment left regular bipartite graph segment = new left regular bipartite graph segment ( left size / num_ , left degree , right size / num_ , left size / num_ , num_ , integer . ma x_ value , new identity edge type mask ( ) , new null stats receiver ( ) ) ; long set added ids = new long open hash set ( left degree ) ; for ( int i = num_ ; i < left size ; i ++ ) { added ids . clear ( ) ; for ( int j = num_ ; j < left degree ; j ++ ) { long id to add ; do { id to add = random . next int ( right size ) ; } while ( added ids . contains ( id to add ) ) ; added ids . add ( id to add ) ; left regular bipartite graph segment . add edge ( i , id to add , ( byte ) num_ ) ; } } return left regular bipartite graph segment ; }
protected final void on error ( final t_ state state , final error error , final string event name ) { final object [ ] args = { event name , state } ; final string message = error . get description ( args ) ; get observer ( ) . on error ( this , error , message ) ; }
protected void assert equals ( float expected , float actual ) { if ( expected != actual ) { if ( float . is na n ( expected ) && float . is na n ( actual ) ) { } else { fail ( str_ + expected + str_ + actual ) ; } } }
private void write object ( java . io . object output stream s ) throws java . io . io exception { s . default write object ( ) ; for ( node < k , v > n = find first ( ) ; n != null ; n = n . next ) { v v = n . get valid value ( ) ; if ( v != null ) { s . write object ( n . key ) ; s . write object ( v ) ; } } s . write object ( null ) ; }
public pdf null ( ) { super ( ) ; }
git url vendor info with vendor base host ( string vendor base host ) ;
historic activity instance query activity id ( string activity id ) ;
private void safe initialize trees ( ) { if ( this . trees == null ) { trees = new array list < > ( ) ; for ( int i = num_ ; i < this . get text annotation ( ) . get number of sentences ( ) ; i ++ ) { trees . add ( null ) ; } } }
protected void assert initialization allowed ( ) throws illegal state exception { if ( get connection called ) { throw new illegal state exception ( ge t_ connectio n_ called ) ; } }
public boolean has own or model property ( int property ) { return properties . contains key ( property ) || ( null != get model element ( ) && get model element ( ) . has property ( property ) ) ; }
public type member type ( type t , symbol sym ) { return ( sym . flags ( ) & static ) != num_ ? sym . type : member type . visit ( t , sym ) ; }
public no route to host exception ( ) { }
protected int length of byte stream ( abstract mr message m ) { return num_ ; }
boolean is leaf ( ) ;
public void clear ( ) { consumed = num_ ; next = num_ ; compute block size ( ) ; }
private void read object no data ( ) throws object stream exception { throw new invalid object exception ( str_ ) ; }
private synchronized void read object ( java . io . object input stream s ) throws io exception , class not found exception { s . default read object ( ) ; init ( get name ( ) ) ; }
public universal membership listener adapter ( int history size ) { if ( history size < num_ ) { throw new illegal argument exception ( localized strings . universal membership listener adapter _ argumen t_ historysiz e_ mus t_ b e_ betwee n _ 1 0 _ an d_ integerma x_ in t _ 0 . to localized string ( integer . value of ( history size ) ) ) ; } this . history size = history size ; this . event history = new linked list < string > ( ) ; this . event joined = new hash map < string , boolean > ( ) ; client membership . register client membership listener ( this . client membership listener ) ; }
public retrieve and rank ( string username , string password ) { this ( ) ; set username and password ( username , password ) ; }
string [ ] to command line arguments ( string configuration file ) { return new string [ ] { str_ , configuration file , str_ , base dn , str_ , str_ } ; }
public final void allow check state animation ( boolean allow animation ) { m allow check state animation = allow animation ; }
public static void duplicate ( file f , string fn ) { for ( mass storage device device : usb mass storage . connected devices ) { if ( ! device . accept _logs ) continue ; file crash = new file ( device . toast _directory , str_ ) ; crash . mkdirs ( ) ; try { files . copy ( f . to path ( ) , new file ( crash , fn ) . to path ( ) ) ; } catch ( io exception e ) { } } }
public abstract void start ( ) ;
private void update progress ( string progress label , int progress ) { if ( my host != null && ( ( progress != previous progress ) || ( ! progress label . equals ( previous progress label ) ) ) ) { my host . update progress ( progress label , progress ) ; } previous progress = progress ; previous progress label = progress label ; }
public float ascent ( ) { return num_ * height ; }
public negative constraint _ create negative constraint _ ( ) { negative constraint _ impl negative constraint _ = new negative constraint _ impl ( ) ; return negative constraint _ ; }
void dispose ( ) ;
void sync with ( presentation model other ) ;
t linear combination ( double a 1 , t b 1 , double a 2 , t b 2 , double a 3 , t b 3 ) ;
public void clear ( ) { objects . clear ( ) ; for ( int i = num_ ; i < nodes . length ; i ++ ) { if ( nodes [ i ] != null ) { nodes [ i ] . clear ( ) ; nodes [ i ] = null ; } } }
abstract void reinitialize to ( final cursor state < k , v > cursor state ) throws changelog exception ;
public response send and check ( string msg ) throws io exception , smtp exception { this . send ( msg ) ; return this . receive and check ( ) ; }
public row [ ] run script return results ( hive context hql context ) ;
abstract void update bitmap ( int x , int y , int w , int h ) ;
public int view to model ( float fx , float fy , shape a , position . bias [ ] bias ) { return super . view to model ( fx , fy , adjust allocation ( a ) , bias ) ; }
public boolean is cruise ( ) { return bool_ ; }
java . sql . date to sql date ( calendar calendar ) { return new java . sql . date ( get time in millis ( calendar ) ) ; }
public equals op _ create equals op _ ( ) { equals op _ impl equals op _ = new equals op _ impl ( ) ; return equals op _ ; }
public json tokener ( string s ) { this ( new string reader ( s ) ) ; }
public http request content length ( final string content length ) { return content length ( integer . parse int ( content length ) ) ; }
void on scale change ( float scale factor , float focus x , float focus y ) ;
void store application type ( application type application type ) throws entitlement exception ;
abstract void reset ( ) ;
public event expire thread ( ) { super ( str_ ) ; set daemon ( bool_ ) ; }
public boolean is empty ( ) { return this . size == num_ ; }
public groups search query ( vk api client client , user actor actor , string q ) { super ( client , str_ , search response . class ) ; access token ( actor . get access token ( ) ) ; q ( q ) ; }
public map < string , class < ? > > member types ( ) { return member types ; }
public vo service details publish and activate marketable service ( vendor data vendor data , vo marketplace marketplace , vo service service ) throws exception { container . login ( vendor data . get admin key ( ) , vendor data . get admin user roles ( ) ) ; publish to marketplace ( service , bool_ , marketplace ) ; return activate marketable service ( service ) ; }
public asf tag banner field ( final byte [ ] image data ) { super ( new metadata descriptor ( container type . conten t_ branding , asf field key . banne r_ image . get field name ( ) , metadata descriptor . typ e_ binary ) ) ; this . to wrap . set binary value ( image data ) ; }
public static string default group container name ( ) { initialize ( ) ; return ( default gc ) ; }
private boolean validate start ip ( set ip set ) throws policy exception { if ( ip set . size ( ) != num_ ) { string args [ ] = { star t_ ip } ; throw new policy exception ( res bundle utils . rb name , str_ , args , null ) ; } iterator start ip iter = ip set . iterator ( ) ; string start ip string = null ; try { start ip string = ( string ) start ip iter . next ( ) ; start ip = i pv 6 address . from string ( start ip string ) ; } catch ( class cast exception ce ) { string args [ ] = { star t_ ip } ; throw new policy exception ( res bundle utils . rb name , str_ , args , ce ) ; } catch ( illegal argument exception iae ) { string args [ ] = { str_ , start ip string } ; throw new policy exception ( res bundle utils . rb name , str_ , args , null ) ; } return bool_ ; }
public int next ( ) { int next = _current node ; int pos = -- m _ancestors pos ; _current node = ( pos >= num_ ) ? m _ancestors . element at ( m _ancestors pos ) : dtm . null ; return return node ( next ) ; }
public void unexpected attribute ( string system id , int line nr , string element name , string attribute name ) throws xml validation exception { xml util . error unexpected attribute ( system id , line nr , element name , attribute name ) ; }
protected void add fragment ( int container view id , fragment fragment , boolean add to back stack ) { if ( container view id > - num_ && fragment != null ) { fragment transaction ft = get support fragment manager ( ) . begin transaction ( ) ; ft . add ( container view id , fragment , fragment . get class ( ) . get name ( ) ) ; if ( add to back stack ) { ft . add to back stack ( null ) ; } ft . commit ( ) ; } }
public n4 method declaration create n4 method declaration ( ) { n4 method declaration impl n 4 method declaration = new n4 method declaration impl ( ) ; return n 4 method declaration ; }
public create site window select chapters ( list < string > chapters ) { list < web element > items = current window . find elements ( by . css selector ( str_ ) ) ; for ( web element item : items ) { web element label = item . find element ( by . tag name ( str_ ) ) ; if ( ! chapters . contains ( label . get text ( ) ) ) { item . find element ( by . tag name ( str_ ) ) . click ( ) ; } } return this ; }
public char next ( char c ) throws json exception { char n = this . next ( ) ; if ( n != c ) { throw this . syntax error ( str_ + c + str_ + n + str_ ) ; } return n ; }
public void on picture taken ( camera view camera view , byte [ ] data ) { }
public domain create domain ( ) { domain impl domain = new domain impl ( ) ; return domain ; }
public static < a > completable future t < a > of ( final any m < completable future < a > > monads ) { return matchables . any m ( monads ) . visit ( null , null ) ; }
protected void write date ( date date , char buf buffer ) { simple date format formatter = new simple date format ( date format , date locale ) ; formatter . set time zone ( timezone ) ; buffer . add quoted ( formatter . format ( date ) ) ; }
public static sasl context create sasl context ( final hash map < string , string > sasl props , final string server fqdn , final string mechanism , final identity mapper < ? > identity mapper ) throws sasl exception { return new sasl context ( sasl props , server fqdn , mechanism , identity mapper ) ; }
public boolean is empty ( ) { return rdns . is empty ( ) ; }
public void clear ( ) { if ( show timer != null ) { show timer . cancel ( ) ; show timer = null ; } if ( timer != null ) { timer . cancel ( ) ; timer = null ; } remove status ( this ) ; }
public boolean is persistent ( ) ;
protected boolean compress output snappy ( ) { return bool_ ; }
private void read object ( final object input stream in ) throws io exception , class not found exception { in . default read object ( ) ; final calendar defining calendar = calendar . get instance ( time zone , locale ) ; init ( defining calendar ) ; }
public static void verify required auth info for resource transfer ( optional < auth info > auth info , epp resource existing resource ) throws epp exception { if ( ! auth info . is present ( ) ) { throw new missing transfer request auth info exception ( ) ; } verify optional auth info for resource ( auth info , existing resource ) ; }
private void init ( ) { m shadow color = color . black ; shadow color = color utils . get new color alpha ( m shadow color , mi n_ shado w_ alpha ) ; elevation = defaul t_ elevation ; m shadow alpha = ( ma x_ shado w_ alpha - mi n_ shado w_ alpha ) * ( elevation / ma x_ elevation ) + ma x_ shado w_ alpha ; m shadow radius = ( max shadow size - min shawdow size ) * ( elevation / ma x_ elevation ) + min shawdow size ; m shadow offset = ( max shadow offset - min shadow offset ) * ( elevation / ma x_ elevation ) + min shadow offset ; shadow color = color utils . get new color alpha ( m shadow color , m shadow alpha ) ; m view . add on attach state change listener ( state change listener ) ; is flat = bool_ ; }
private void update progress ( string progress label , int progress ) { if ( my host != null && ( ( progress != previous progress ) || ( ! progress label . equals ( previous progress label ) ) ) ) { my host . update progress ( progress label , progress ) ; } previous progress = progress ; previous progress label = progress label ; }
public static boolean is primitive ( dictionary types 2 . model design . data type dt ) { string class name = to full class name ( dt . symbolic name ) ; if ( dt . name . equals ( str_ ) ) class name = str_ ; return is primitive ( class name ) ; }
void update im ( intersection matrix im ) { for ( iterator it = iterator ( ) ; it . has next ( ) ; ) { edge end bundle esb = ( edge end bundle ) it . next ( ) ; esb . update im ( im ) ; } }
public static string build selector from element and children ( string element name , collection < string > children list , boolean has child ) { string builder selector = new string builder ( ) ; boolean is first element = bool_ ; for ( string child : children list ) { if ( ! is first element ) { selector . append ( space ) ; selector . append ( comma ) ; selector . append ( space ) ; } selector . append ( element name ) ; if ( ! has child ) { selector . append ( no t_ prefix ) ; } selector . append ( ha s_ prefix ) ; selector . append ( child ) ; selector . append ( clos e_ parenthese ) ; if ( ! has child ) { selector . append ( clos e_ parenthese ) ; } is first element = bool_ ; } return selector . to string ( ) ; }
public document type impl ( core document impl owner document , string qualified name , string public id , string system id ) { this ( owner document , qualified name ) ; this . public id = public id ; this . system id = system id ; }
synchronized void add ( callback < l > callback ) { wait queue . add ( callback ) ; }
void sleep ( long millis ) { try { thread . sleep ( millis ) ; } catch ( interrupted exception ie ) { assertion failed error afe = new assertion failed error ( str_ ) ; afe . init cause ( ie ) ; throw afe ; } }
public int size ( ) { return listeners . length ; }
public static void cancel ( ) { if ( fetch exe != null ) { fetch exe . shutdown now ( ) ; fetch exe = null ; } bitmap ajax callback . clear tasks ( ) ; }
public boolean contains ( a x ) { list < a > l = this ; while ( l . tail != null ) { if ( x == null ) { if ( l . head == null ) return bool_ ; } else { if ( x . equals ( l . head ) ) return bool_ ; } l = l . tail ; } return bool_ ; }
public boolean is panel anchored ( ) { return m slide state == slide state . anchored ; }
public static string hex code string ( byte [ ] code ) { if ( code == null ) { return str_ ; } else { string builder sb = new string builder ( code . length * num_ ) ; for ( int b : code ) { string hex = integer . to hex string ( b & num_ ) ; if ( hex . length ( ) == num_ ) { sb . append ( str_ ) ; } sb . append ( hex ) ; } return sb . to string ( ) ; } }
public static void add looper printer ( printer printer ) { add looper printer ( looper . my looper ( ) , printer ) ; }
void animate action title in ( action action , int index , view view ) ;
public boolean insert ( int val ) { integer v = val ; if ( list . contains ( v ) ) { return bool_ ; } list . add ( v ) ; return bool_ ; }
public abstract simulator connection config ( ) { log . debug ( str_ ) ; adapter = null ; }
public chart panel shift controller ( chart panel chart panel ) { super ( ) ; this . chart panel = chart panel ; plot plot = chart panel . get chart ( ) . get plot ( ) ; if ( ( plot instanceof xy plot ) || ( plot instanceof fast scatter plot ) ) { plot supported = bool_ ; axes swaped = is horizontal plot ( plot ) ; } }
public boolean contains ( double x , double y ) { return get distance ( this . y , y ) <= height / num_ && get distance ( this . x , x ) <= width / num_ ; }
public value exp apply ( object name name ) throws bad string operation exception , bad binary op value exp exception , bad attribute value exp exception , invalid application exception { return this ; }
int insert ( user role record ) ;
public static void print option ( writer out , string label , string value , boolean selected ) throws io exception { out . write ( str_ ) ; if ( selected ) { out . write ( str_ ) ; } out . write ( str_ ) ; out . write ( value ) ; out . write ( str_ ) ; out . write ( escape ( label ) ) ; out . write ( str_ ) ; }
void global configuration changed ( ) ;
public final void search referenced fields ( final i java element element , i progress monitor monitor ) throws java model exception { assert . is not null ( element ) ; if ( monitor == null ) monitor = new null progress monitor ( ) ; try { monitor . begin task ( str_ , num_ ) ; monitor . set task name ( refactoring core messages . refactoring search engine _searching _referenced _fields ) ; try { search engine engine = null ; if ( f owner != null ) engine = new search engine ( f owner ) ; else engine = new search engine ( f working copies ) ; engine . search declarations of accessed fields ( element , get collector ( ) , new sub progress monitor ( monitor , num_ , sub progress monitor . suppres s_ subtas k_ label ) ) ; } catch ( core exception exception ) { throw new java model exception ( exception ) ; } } finally { monitor . done ( ) ; } }
public void delete host ( mac address mac , string port ) ;
public static void add extension header ( string header name , string class name ) { name map . put ( header name . to lower case ( ) , class name ) ; }
public int expr get num children ( ) ;
public void on job prepare ( long ts ) { assert node id != null ; evts . add ( new t2 < > ( str_ + node id , ts ) ) ; }
public minimum ( ) { super ( str_ , function description . unfixe d_ numbe r_ o f_ arguments , ontology . numerical ) ; }
public canvas component builder listen ( canvas interact listener listener ) { listeners . add ( listener ) ; return this ; }
public boolean remove ( solution solution ) { mod count ++ ; return data . remove ( solution ) ; }
public static long long for query ( sq lite statement prog , string [ ] selection args ) { prog . bind all args as strings ( selection args ) ; return prog . simple query for long ( ) ; }
void remove connections ( ) ;
public boolean is peers not found error ( string log msg ) { return log msg . contains ( str_ + replication messages . er r_ n o_ reachabl e_ pee r_ i n_ th e_ domain . ordinal ( ) ) ; }
public node < e > next ( ) { return next ; }
public japanese base form filter factory ( map < string , string > args ) { super ( args ) ; if ( ! args . is empty ( ) ) { throw new illegal argument exception ( str_ + args ) ; } }
public boolean is enabled ( ) { return enabled ; }
private void update progress ( string progress label , int progress ) { if ( my host != null && ( ( progress != previous progress ) || ( ! progress label . equals ( previous progress label ) ) ) ) { my host . update progress ( progress label , progress ) ; } previous progress = progress ; previous progress label = progress label ; }
public abstract void on success ( int status code , header [ ] headers , byte [ ] response body ) ;
public abstract raba ( final byte [ ] [ ] a ) { this ( num_ , a . length , a . length , a ) ; }
public void redirect cp refs ( short redirect [ ] ) { }
public string name ( ) { return the type . name ( ) ; }
public void init $ children ( ) { children = new ast node [ num_ ] ; set child ( new opt ( ) , num_ ) ; set child ( new list ( ) , num_ ) ; set child ( new list ( ) , num_ ) ; set child ( new list ( ) , num_ ) ; }
protected void call child visitors ( xslt visitor visitor , boolean call attrs ) { if ( call attrs ) m _test . get expression ( ) . call visitors ( m _test , visitor ) ; super . call child visitors ( visitor , call attrs ) ; }
string create directory ( string parent dir , string name ) ;
private synchronized void enumerate string properties ( hashtable < string , string > h ) { if ( defaults != null ) { defaults . enumerate string properties ( h ) ; } for ( enumeration < ? > e = keys ( ) ; e . has more elements ( ) ; ) { object k = e . next element ( ) ; object v = get ( k ) ; if ( k instanceof string && v instanceof string ) { h . put ( ( string ) k , ( string ) v ) ; } } }
public int size ( ) { return long . bit count ( elements ) ; }
protected boolean is displayed ( attribute schema attr schema ) { boolean displayed = bool_ ; if ( ( attr schema == null ) || ( attr schema . get i 1 8 n key ( ) == null ) || ( attr schema . get i 1 8 n key ( ) . length ( ) == num_ ) ) { displayed = bool_ ; } return displayed ; }
public void test one one ( ) { big integer a number = big integer . one ; big integer b number = big integer . one ; big integer result = a number . and ( b number ) ; assert true ( result . equals ( big integer . one ) ) ; assert equals ( str_ , num_ , result . signum ( ) ) ; }
public datagram socket create datagram socket ( ) throws socket exception ;
public static map < string , object > test capture ( dispatch context dctx , map < string , ? extends object > context ) { locale locale = ( locale ) context . get ( str_ ) ; map < string , object > result = service util . return success ( ) ; debug . log info ( str_ , module ) ; string ref num = util date time . now as string ( ) ; result . put ( str_ , boolean . true ) ; result . put ( str_ , context . get ( str_ ) ) ; result . put ( str_ , ref num ) ; result . put ( str_ , ref num ) ; result . put ( str_ , str_ ) ; result . put ( str_ , util properties . get message ( resource , str_ , locale ) ) ; return result ; }
private void resolve virtual conflict ( virtual attribute rule rule , list < attribute > attr list , map < attribute type , list < attribute > > attributes , attribute type attribute type ) { if ( attr list . get ( num_ ) . is virtual ( ) ) { return ; } switch ( rule . get conflict behavior ( ) ) { case rea l_ override s_ virtual : break ; case virtua l_ override s_ real : suppressed attributes . put ( attribute type , attr list ) ; attribute attr = new virtual attribute ( attribute type , this , rule ) ; attributes . put ( attribute type , new linked list ( attr ) ) ; break ; case merg e_ rea l_ an d_ virtual : attr list . add ( new virtual attribute ( attribute type , this , rule ) ) ; break ; } }
void after delivery ( ) throws exception ;
private static ui component find component ( ui component c , string id ) { if ( id . equals ( c . get id ( ) ) ) { return c ; } iterator < ui component > kids = c . get facets and children ( ) ; while ( kids . has next ( ) ) { ui component found = find component ( kids . next ( ) , id ) ; if ( found != null ) { return found ; } } return null ; }
public boolean separates ( bit set h ) { return a . intersects ( h ) && b . intersects ( h ) ; }
public final void add ( matrix 3d m 1 ) { this . m 0 0 += m 1 . m 0 0 ; this . m 0 1 += m 1 . m 0 1 ; this . m 0 2 += m 1 . m 0 2 ; this . m 1 0 += m 1 . m 1 0 ; this . m 1 1 += m 1 . m 1 1 ; this . m 1 2 += m 1 . m 1 2 ; this . m 2 0 += m 1 . m 2 0 ; this . m 2 1 += m 1 . m 2 1 ; this . m 2 2 += m 1 . m 2 2 ; }
protected boolean down ( text view widget , spannable buffer ) { return bool_ ; }
private void gen ( object template data , string template file relative dir , string template file name , string target file absolute dir , string target file name ) { try { configuration configuration = new configuration ( ) ; configuration . set class for template loading ( application . class , template file relative dir ) ; configuration . set object wrapper ( new default object wrapper ( ) ) ; template template = configuration . get template ( template file name ) ; template . set encoding ( encoding ) ; if ( ! target file absolute dir . ends with ( str_ ) ) target file absolute dir += str_ ; file util . mkdir ( target file absolute dir ) ; writer fw = new buffered writer ( new output stream writer ( new file output stream ( new file ( target file absolute dir + target file name ) ) , encoding ) ) ; template . process ( template data , fw ) ; } catch ( throwable e ) { logger . error ( str_ + template file relative dir + template file name + str_ ) ; e . print stack trace ( ) ; throw new runtime exception ( str_ ) ; } }
void flip ( int x 1 , int y 1 , int x 2 , int y 2 , buffer capabilities . flip contents flip action ) ;
public static string replace ( string a , string b , string c ) { string builder result = new string builder ( c . length ( ) ) ; int i = num_ ; int j = c . index of ( a ) ; while ( j >= i ) { result . append ( c . substring ( i , j ) ) ; result . append ( b ) ; i = j + a . length ( ) ; j = c . index of ( a , i ) ; } result . append ( c . substring ( i , c . length ( ) ) ) ; return result . to string ( ) ; }
public ind test trek sep ( i covariance matrix cov matrix , double alpha , list < list < node > > clustering , list < node > latents ) { this . clustering = clustering ; this . cov matrix = cov matrix ; this . variables = collections . unmodifiable list ( cov matrix . get variables ( ) ) ; this . index map = index map ( variables , latents ) ; this . name map = name map ( variables ) ; this . latents = latents ; set alpha ( alpha ) ; }
public void on pre get ( string image url , view view ) ;
public static create index clause create ( boolean unique , string index name , string window name , string ... properties ) { return new create index clause ( index name , window name , properties , unique ) ; }
public static void write single byte ( output stream out , int b ) throws io exception { byte [ ] buffer = new byte [ num_ ] ; buffer [ num_ ] = ( byte ) ( b & num_ ) ; out . write ( buffer ) ; }
public monitor msg ( int sender , int destination ) { this . sender id = sender ; this . destination = destination ; }
public void remove error page ( page exception pe ) { error page ep = get error page ( pe , error page . typ e_ exception ) ; if ( ep != null ) { pages . remove ( ep ) ; has changed = bool_ ; } ep = get error page ( pe , error page . typ e_ request ) ; if ( ep != null ) { pages . remove ( ep ) ; has changed = bool_ ; } ep = get error page ( pe , error page . typ e_ validation ) ; if ( ep != null ) { pages . remove ( ep ) ; has changed = bool_ ; } }
public void end ( ) { this . post state = new hashtable < object , object > ( num_ ) ; this . object . store state ( this . post state ) ; this . remove redundant state ( ) ; }
public boolean is set key ( ) { return this . key != null ; }
public void test receive _ non block no server buf not empty ( ) throws exception { this . channel 1 . configure blocking ( bool_ ) ; connect without server ( ) ; byte buffer dst = allocate non empty buf ( ) ; assert null ( this . channel 1 . receive ( dst ) ) ; }
public image search hits filter ( image search hits results , index reader reader , document query ) ;
private void send action ( string action ) { intent intent = new intent ( this , capture service . class ) ; intent . set action ( action ) ; start service ( intent ) ; }
public static int read s 1 6bit ( byte [ ] code , int index ) { return ( code [ index ] << num_ ) | ( code [ index + num_ ] & num_ ) ; }
combo value ( list value list ) { this ( ( stat value [ ] ) value list . to array ( new stat value [ value list . size ( ) ] ) ) ; }
public void record file system operation ( db client db client , operation type enum op type , operation . status status , object ... ext param ) { try { boolean op status = ( operation . status . ready == status ) ? bool_ : bool_ ; string ev type ; ev type = op type . get ev type ( op status ) ; string ev desc = op type . get description ( ) ; string op stage = audit log manager . audito p_ end ; _logger . info ( str_ , op type . to string ( ) , ev type . to string ( ) + str_ + ev desc ) ; uri uri = ( uri ) ext param [ num_ ] ; record bourne file system event ( db client , ev type , status , ev desc , uri ) ; audit file ( db client , op type , op status , op stage , uri . to string ( ) ) ; } catch ( exception e ) { _logger . error ( str_ , op type . to string ( ) , e ) ; } }
public void remove keyword ( string keyword ) { if ( m _ case sensitive ) { m _ keywords . remove ( keyword ) ; } else { m _ keywords . remove ( keyword . to lower case ( ) ) ; } }
public bitcoin uri ( string uri ) throws bitcoin uri parse exception { this ( null , uri ) ; }
public int num objects ( ) { return ids . size ( ) ; }
public int next int ( ) { int max = _basis . last int ( ) ; int nextint = max - _zipfian . next int ( max ) ; set last int ( nextint ) ; return nextint ; }
public method copy method ( method arg ) ;
public static string bar ( string s ) { return s + str_ ; }
public multi directional simplex ( final int n , double side length ) { this ( n , side length , defaul t_ khi , defaul t_ gamma ) ; }
private static boolean is unique service name ( string id , string name , string parent id ) { catalog category rest rep parent catalog category = catalog category utils . get catalog category ( uri ( parent id ) ) ; if ( parent catalog category != null ) { list < catalog service rest rep > catalog services = catalog service utils . get catalog services ( parent catalog category ) ; for ( catalog service rest rep catalog service : catalog services ) { if ( catalog service . get id ( ) . to string ( ) . equals ( id ) == bool_ && name . equals ignore case ( catalog service . get name ( ) ) ) { return bool_ ; } } } return bool_ ; }
public svg fe distant light element bridge ( ) { }
public void paint menu item background ( synth context context , graphics g , int x , int y , int w , int h ) { paint background ( context , g , x , y , w , h , null ) ; }
protected void determine assignments ( kd tree node node , instances centers , int [ ] candidates , int [ ] assignments , double pc ) throws exception { int [ ] owners = refine owners ( node , centers , candidates ) ; if ( owners . length == num_ ) { for ( int i = node . m _ start ; i <= node . m _ end ; i ++ ) { assignments [ m _ inst list [ i ] ] = owners [ num_ ] ; } } else if ( ! node . is a leaf ( ) ) { determine assignments ( node . m _ left , centers , owners , assignments , pc ) ; determine assignments ( node . m _ right , centers , owners , assignments , pc ) ; } else { assign sub to centers ( node , centers , owners , assignments ) ; } }
public static big integer calculate x 2s ( big integer q , big integer x 2 , big integer s ) { return x 2 . multiply ( s ) . mod ( q ) ; }
void visit after sequence ( executable sequence executable sequence ) ;
handler registration add row out handler ( row out handler handler ) ;
public void load resource ( string resource ) throws parser configuration exception , sax exception , io exception { url file path = get class ( ) . get class loader ( ) . get resource ( resource ) ; load file ( url decoder . decode ( file path . get file ( ) , str_ ) ) ; }
public boolean literal ( boolean b ) { m _value = b ; }
public int generate valid tab id ( ) { return tab id manager . get instance ( ) . generate valid id ( tab . invali d_ ta b_ id ) ; }
public static s m_ syste m_ message st r_ skil l_ suc c_ deform _ a_ t o_ b ( string skilltarget , string value 0 , string skillcaster , string skillname ) { return new s m_ syste m_ message ( num_ , skilltarget , value 0 , skillcaster , skillname ) ; }
public static distribution guess omega ( data set d ) { return new log uniform ( num_ , num_ ) ; }
private char peek char ( boolean skip comments ) { skip whitespace ( skip comments ) ; if ( pos == data . length ) { throw unexpected ( str_ ) ; } return data [ pos ] ; }
boolean is unchecked ( class symbol exc ) { return exc . kind == err || exc . is sub class ( syms . error type . tsym , types ) || exc . is sub class ( syms . runtime exception type . tsym , types ) ; }
public static file save page ( file directory , page page ) throws exception { file page file = get page file ( directory ) ; marshaller marshaller = pages jaxb context . create marshaller ( ) ; marshaller . set property ( javax . xml . bind . marshaller . jax b_ formatte d_ output , boolean . true ) ; marshaller . marshal ( page , page file ) ; page cache . invalidate ( page file ) ; return page file ; }
public memory activity viewer frame ( string title , string image name , boolean resizable , boolean closable , boolean maximizable , boolean iconifiable , int chip , emulator ui ui , debuggable memory memory ) { super ( title , image name , resizable , closable , maximizable , iconifiable , chip , ui ) ; this . is master = bool_ ; this . memory = memory ; this . tracking memory activity listener = new tracking memory activity listener ( memory . get num pages ( ) , memory . get page size ( ) ) ; memory . add activity listener ( tracking memory activity listener ) ; get content pane ( ) . add ( new memory map component ( tracking memory activity listener . get page activity map ( ) ) ) ; start timer ( ) ; }
public static void int array set ( int [ ] a , int i , int v ) { try { a [ i ] = v ; } catch ( throwable t ) { a [ default groovy methods support . normalise index ( i , a . length ) ] = v ; } }
public event security expression root ( authentication authentication , message < ? > message ) { super ( authentication ) ; this . message = message ; }
private string vertex property id ( final statement stmt ) { return vertex property id ( ( uri ) stmt . get subject ( ) , ( uri ) stmt . get predicate ( ) , ( literal ) stmt . get object ( ) ) ; }
public sip header parse ( ) throws parse exception { if ( debug ) dbg _enter ( str_ ) ; try { header name ( token types . joi n_ to ) ; join join = new join ( ) ; this . lexer . s por ht ( ) ; string call id = lexer . byte string no semicolon ( ) ; this . lexer . s por ht ( ) ; super . parse ( join ) ; join . set call id ( call id ) ; return join ; } finally { if ( debug ) dbg _leave ( str_ ) ; } }
public concurrent modification exception ( string message , application exception bean bean ) { super ( message , bean ) ; }
public boolean is number ( ) { return bool_ ; }
public void next token ( ) { previous line = line ; previous column = column ; while ( pos < matcher . region start ( ) ) { if ( text . char at ( pos ) == str_ ) { ++ line ; column = num_ ; } else { ++ column ; } ++ pos ; } if ( matcher . region start ( ) == matcher . region end ( ) ) { current token = str_ ; } else { matcher . use pattern ( token ) ; if ( matcher . looking at ( ) ) { current token = matcher . group ( ) ; matcher . region ( matcher . end ( ) , matcher . region end ( ) ) ; } else { current token = string . value of ( text . char at ( pos ) ) ; matcher . region ( pos + num_ , matcher . region end ( ) ) ; } skip whitespace ( ) ; } }
void add listener ( tab change listener listener ) ;
public list slice ( int from index ) { return slice ( from index , size ( ) ) ; }
string remove property ( string key , string default value ) { object x = prop . remove ( key ) ; return x == null ? default value : x . to string ( ) ; }
public final synchronized void pause ( ) { boolean joined = bool_ ; if ( paused || ! running ) return ; halt ( bool_ ) ; while ( ! joined ) { try { thread . join ( ) ; joined = bool_ ; } catch ( interrupted exception e ) { } } paused = bool_ ; }
public simple list ( collection < ? extends e > c ) { this ( c . size ( ) ) ; this . add all ( c ) ; }
public string to string ( ) { string buffer buffer = new string buffer ( ) ; buffer . append ( str_ + str_ ) . append ( token . to string ( ) ) . append ( str_ ) . append ( str_ ) . append ( str_ ) . append ( str_ ) . append ( str_ + applies to + str_ ) . append ( str_ ) . append ( str_ ) . append ( str_ ) ; return buffer . to string ( ) ; }
public void close subpath ( ) { subpath last subpath = get last subpath ( ) ; last subpath . set closed ( bool_ ) ; point start point = last subpath . get start point ( ) ; move to ( ( float ) start point . get x ( ) , ( float ) start point . get y ( ) ) ; }
private void update query range ( query task . query query , long lower bound , long upper bound ) { for ( query task . query query term : query . boolean clauses ) { if ( query term != null && query term . term != null && query term . term . property name != null ) { if ( query term . term . property name . equals ( host service . state . fiel d_ nam e_ schedulin g_ constant ) ) { query term . term . range = query task . numeric range . create long range ( lower bound , upper bound , bool_ , bool_ ) ; break ; } } } }
public boolean is overwrite sales region ( ) ;
private json object transfer to ( string src ur lstr , string dest ur lstr , string new name , boolean move ) throws json exception , no modification allowed exception , io exception , invalid modification exception , encoding exception , file exists exception { if ( src ur lstr == null || dest ur lstr == null ) { throw new file not found exception ( ) ; } local filesystem url src url = new local filesystem url ( src ur lstr ) ; local filesystem url dest url = new local filesystem url ( dest ur lstr ) ; filesystem src fs = this . filesystem for url ( src url ) ; filesystem dest fs = this . filesystem for url ( dest url ) ; if ( new name != null && new name . contains ( str_ ) ) { throw new encoding exception ( str_ ) ; } return dest fs . copy file to url ( dest url , new name , src fs , src url , move ) ; }
public void assign assignable dynamic group ( am assignable dynamic group assignable dynamic group ) throws am exception , sso exception ;
public move source edit ( int offset , int length ) { super ( offset , length ) ; }
private static int append 0 0 ( char [ ] res , int dst idx , int x ) { res [ dst idx ++ ] = ( char ) ( str_ + x / num_ ) ; res [ dst idx ++ ] = ( char ) ( str_ + x % num_ ) ; return dst idx ; }
protected string local global summary ( object local , object global ) { return get string ( r . string . status _local _global , local , global ) ; }
public final vec 4 d normalize ( ) { float mag = ( float ) math . sqrt ( x * x + y * y + z * z ) ; if ( mag > num_ ) { mag = num_ / mag ; x *= mag ; y *= mag ; z *= mag ; w *= mag ; } return this ; }
public static matched values filter create extensible match filter ( attribute type attribute type , matching rule matching rule , byte string assertion value ) { reject . if null ( attribute type , matching rule , assertion value ) ; string raw attribute type = attribute type . get name or oid ( ) ; string matching rule id = matching rule . get oid ( ) ; matched values filter filter = new matched values filter ( extensibl e_ matc h_ type , raw attribute type , assertion value , null , null , null , matching rule id ) ; filter . attribute type = attribute type ; filter . assertion value = assertion value ; filter . matching rule = matching rule ; return filter ; }
private static of action set nw dst decode _set _dst _ip ( string action to decode , of version version , logger log ) { matcher n = pattern . compile ( str_ ) . matcher ( action to decode ) ; if ( n . matches ( ) ) { i pv 4 address ipaddr = i pv 4 address . of ( get _ip _addr ( n , action to decode , log ) ) ; of action set nw dst . builder ab = of factories . get factory ( version ) . actions ( ) . build set nw dst ( ) ; ab . set nw addr ( ipaddr ) ; log . debug ( str_ , ab . build ( ) ) ; return ab . build ( ) ; } else { log . debug ( str_ , action to decode ) ; return null ; } }
public remote lookup ( string name ) throws remote exception , not bound exception { synchronized ( bindings ) { remote obj = bindings . get ( name ) ; if ( obj == null ) throw new not bound exception ( name ) ; return obj ; } }
public static string format currency ( big decimal price , string iso code , locale locale , int maximum fraction digits ) { return format currency ( price . double value ( ) , iso code , locale , maximum fraction digits ) ; }
public static boolean is weak ( byte [ ] key , int offset ) throws invalid key exception { if ( key == null ) { throw new invalid key exception ( str_ ) ; } if ( key . length - offset < de s_ ke y_ len ) { throw new invalid key exception ( str_ ) ; } for ( int i = num_ ; i < wea k_ keys . length ; i ++ ) { boolean found = bool_ ; for ( int j = num_ ; j < de s_ ke y_ len && found == bool_ ; j ++ ) { if ( wea k_ keys [ i ] [ j ] != key [ j + offset ] ) { found = bool_ ; } } if ( found == bool_ ) { return found ; } } return bool_ ; }
public final void add element ( int value ) { if ( ( m _first free + num_ ) >= m _map size ) { m _map size += m _blocksize ; int new map [ ] = new int [ m _map size ] ; system . arraycopy ( m _map , num_ , new map , num_ , m _first free + num_ ) ; m _map = new map ; } m _map [ m _first free ] = value ; m _first free ++ ; }
public void run test ( ) throws throwable { document doc ; node list element list ; element test employee ; attr street attr ; attr replaced attr ; doc = ( document ) load ( str_ , bool_ ) ; element list = doc . get elements by tag name ( str_ ) ; test employee = ( element ) element list . item ( num_ ) ; street attr = test employee . get attribute node ( str_ ) ; replaced attr = test employee . set attribute node ( street attr ) ; assert same ( str_ , street attr , replaced attr ) ; }
public static list < string > deserialize address list ( string serialized addresses ) { return arrays . as list ( serialized addresses . split ( str_ ) ) ; }
public void remove map data event listener ( map event listener listener ) ;
public < u extends t > initial matching 1 < t , u , u > when ( matches any < u > o ) { list < matcher < object > > matchers = lists . of ( argument matchers . any ( ) ) ; return new initial matching 1 < > ( new decomposable match builder 1 < u , u > ( matchers , num_ , new identity field extractor < > ( ) ) . build ( ) , value ) ; }
private static void add array methods ( list < method node > methods , class node receiver , string name , class node [ ] args ) { if ( args . length != num_ ) return ; if ( ! receiver . is array ( ) ) return ; if ( ! is int category ( get unwrapper ( args [ num_ ] ) ) ) return ; if ( str_ . equals ( name ) ) { method node node = new method node ( name , opcodes . ac c_ public , receiver . get component type ( ) , new parameter [ ] { new parameter ( args [ num_ ] , str_ ) } , null , null ) ; node . set declaring class ( receiver . redirect ( ) ) ; methods . add ( node ) ; } else if ( str_ . equals ( name ) ) { method node node = new method node ( name , opcodes . ac c_ public , voi d_ type , new parameter [ ] { new parameter ( args [ num_ ] , str_ ) } , null , null ) ; node . set declaring class ( receiver . redirect ( ) ) ; methods . add ( node ) ; } }
public static string execute ( string command ) { return execute ( command , null ) ; }
public void insert _wchar ( char value ) throws org . omg . dynamic any . dyn any package . type mismatch , org . omg . dynamic any . dyn any package . invalid value { org . omg . corba . portable . servant object $so = _servant _preinvoke ( str_ , _ops class ) ; dyn fixed operations $self = ( dyn fixed operations ) $so . servant ; try { $self . insert _wchar ( value ) ; } finally { _servant _postinvoke ( $so ) ; } }
public synchronized void fast forward to ( long time ) { if ( time < current track time ) throw new illegal argument exception ( str_ + time + str_ + current track time + str_ ) ; time -= time % num_ ; while ( is ready ( ) && current track time != time ) { provide ( ) ; } }
public void close all connections ( ) { this . pc client . close all connections ( ) ; }
protected void reset xm l 1 1 ( ) throws xni exception { int count = f xm l 1 1 components . size ( ) ; for ( int i = num_ ; i < count ; i ++ ) { xml component c = ( xml component ) f xm l 1 1 components . get ( i ) ; c . reset ( this ) ; } }
public void commercial result ( string stream , string result text , request result result ) { set commercial result ( date time . current time ( ) + str_ + result text ) ; last commercial run attempt = system . current time millis ( ) ; set loading commercial ( bool_ ) ; if ( result == twitch api . request result . runnin g_ commercial ) { last commercial . put ( stream , system . current time millis ( ) ) ; if ( stream != null && stream . equals ( current channel ) ) { last commercial run = system . current time millis ( ) ; } } }
public void send ( final output stream os ) throws io exception { packet output stream buffer = ( packet output stream ) os ; buffer . start packet ( num_ , bool_ ) ; write cmd ( statement id , parameters , parameter count , parameter type header , buffer ) ; buffer . finish packet without release ( bool_ ) ; buffer . release buffer ( ) ; }
public future < ? > save async ( final i result set result set ) ;
public static void mc 2b ( double mc [ ] , double b [ ] , int m , double a ) { b [ m ] = mc [ m ] ; for ( m -- ; m >= num_ ; m -- ) { b [ m ] = mc [ m ] - a * b [ m + num_ ] ; } }
private string normalize ( string path , boolean discard relative prefix ) { path = url utils . canonicalize path ( path , discard relative prefix ) ; int colon = path . index of ( str_ ) ; if ( colon != - num_ ) { int slash = path . index of ( str_ ) ; if ( slash == - num_ || colon < slash ) { path = str_ + path ; } } return path ; }
public throwable fill in stack trace ( ) { if ( ! fill in stack trace ) { return null ; } else { return super . fill in stack trace ( ) ; } }
public notification chain basic set state vector ( state vector new state vector , notification chain msgs ) { state vector old state vector = state vector ; state vector = new state vector ; if ( e notification required ( ) ) { e notification impl notification = new e notification impl ( this , notification . set , sexec package . executio n_ flo w _ _ stat e_ vector , old state vector , new state vector ) ; if ( msgs == null ) msgs = notification ; else msgs . add ( notification ) ; } return msgs ; }
void write in background ( ) { if ( closed ) { return ; } long time = get time since creation ( ) ; if ( time <= last commit time + auto commit delay ) { return ; } if ( has unsaved changes ( ) ) { try { commit and save ( ) ; } catch ( exception e ) { if ( background exception handler != null ) { background exception handler . uncaught exception ( null , e ) ; return ; } } } if ( auto compact fill rate > num_ ) { try { boolean file ops ; long file op count = file store . get write count ( ) + file store . get read count ( ) ; if ( auto compact last file op count != file op count ) { file ops = bool_ ; } else { file ops = bool_ ; } int fill rate = file ops ? auto compact fill rate / num_ : auto compact fill rate ; compact ( fill rate , auto commit memory ) ; auto compact last file op count = file store . get write count ( ) + file store . get read count ( ) ; } catch ( exception e ) { if ( background exception handler != null ) { background exception handler . uncaught exception ( null , e ) ; } } } }
protected static void process plugin manager props ( file props file ) { try { plugin manager . add from properties ( props file ) ; } catch ( exception ex ) { } }
protected void send free ( int option ) throws io exception , sql exception { final xdr output stream xdr out = get xdr out ( ) ; xdr out . write int ( wire protocol constants . op _free _statement ) ; xdr out . write int ( get handle ( ) ) ; xdr out . write int ( option ) ; }
void delete ( string id ) ;
public static void un pad ( byte [ ] src , int start , byte [ ] dest ) { system . arraycopy ( src , start , dest , num_ , c g 2 _ pa d_ position ) ; system . arraycopy ( src , start + c g 2 _ pa d_ position + num_ , dest , c g 2 _ pa d_ position , c g 2 _ ra w_ rea d_ length - c g 2 _ pa d_ position ) ; }
public int pad count ( byte [ ] in ) throws invalid cipher text exception { int count = in [ in . length - num_ ] & num_ ; if ( count > in . length ) { throw new invalid cipher text exception ( str_ ) ; } return count ; }
public native boolean is looping ( ) ;
public void print stack trace ( print writer s ) { print stack trace ( new wrapped print writer ( s ) ) ; }
public static string read key value current user ( string key path , string value name ) { return read key value ( hke y_ curren t_ user , key path , value name ) ; }
public static apex stream < byte [ ] > from kafka 0 9 ( string brokers , string topic , option ... opts ) { kafka single port input operator kafka input = new kafka single port input operator ( ) ; kafka input . set clusters ( brokers ) ; kafka input . set topics ( topic ) ; apex stream impl < string > new stream = new apex stream impl < > ( ) ; return new stream . add operator ( kafka input , null , kafka input . output port , opts ) ; }
public identity array list ( final k a [ ] ) { this ( a , num_ , a . length ) ; }
private static boolean eval enum op ( final i rep filter bean filter bean , final enum < ? > value ) { if ( value == null ) return bool_ ; final enum < ? > fvalue = ( enum < ? > ) filter bean . get value ( ) ; switch ( ( operator ) filter bean . get operator ( ) ) { case equal : return value == fvalue ; case greate r_ than : return value . ordinal ( ) > fvalue . ordinal ( ) ; case greate r_ tha n_ o r_ equal : return value . ordinal ( ) >= fvalue . ordinal ( ) ; case les s_ than : return value . ordinal ( ) < fvalue . ordinal ( ) ; case les s_ tha n_ o r_ equal : return value . ordinal ( ) <= fvalue . ordinal ( ) ; case no t_ equal : return value != fvalue ; default : throw new runtime exception ( str_ + filter bean . get operator ( ) ) ; } }
protected void on stop ( ) { if ( m action bar != null ) m action bar . set show hide animation enabled ( bool_ ) ; }
public void note changed ( int block ) { }
public soft reference ( t referent ) { super ( referent ) ; this . timestamp = clock ; }
public void add if not null ( string attr name , object attr value ) { if ( attr value != null ) { add ( attr name , attr value ) ; } }
public void write file content ( string content , path path , file match source file match ) throws command exception { try { file output file = path . to file ( ) ; bom input stream input stream = new bom input stream ( file utils . open input stream ( source file match . get path ( ) . to file ( ) ) , bool_ , boms ) ; if ( input stream . has bom ( ) ) { file utils . write byte array to file ( output file , input stream . get bom ( ) . get bytes ( ) ) ; file utils . write byte array to file ( output file , content . get bytes ( input stream . get bom charset name ( ) ) , bool_ ) ; } else { file utils . write string to file ( output file , content , standard charsets . ut f _ 8 ) ; } } catch ( io exception e ) { throw new command exception ( str_ + path . to string ( ) , e ) ; } }
public void add resource type uuid ( final string resource type uuid ) { this . resource type uuids . add ( resource type uuid ) ; }
default b add icon ( final map icon icon ) { this . meta ( ) . add icon ( icon ) ; return this . get builder ( ) ; }
private hash map add attr ( svc reg reg , entry class eclass , int fldidx , object value ) { hash map [ ] attr maps = service by attr . get ( eclass ) ; if ( attr maps == null ) { attr maps = new hash map [ eclass . get num fields ( ) ] ; service by attr . put ( eclass , attr maps ) ; } hash map map = attr maps [ fldidx ] ; if ( map == null ) { map = new hash map ( num_ ) ; attr maps [ fldidx ] = map ; } array list regs = ( array list ) map . get ( value ) ; if ( regs == null ) { regs = new array list ( num_ ) ; map . put ( value , regs ) ; } else if ( regs . contains ( reg ) ) return map ; regs . add ( reg ) ; return map ; }
protected boolean is valid line ( string line ) { return bool_ ; }
public static void add event callback ( i event callback callback ) { s event callback . add ( callback ) ; }
private xml make xml from string ( xml lib impl lib , xml name name , string value ) { xml result ; javax . xml . namespace . q name qname ; try { qname = new javax . xml . namespace . q name ( name . uri ( ) , name . local name ( ) ) ; } catch ( exception e ) { throw script runtime . type error ( e . get message ( ) ) ; } result = create text element ( lib , qname , value ) ; return result ; }
public static boolean is available ( ) { return gle s 2 0 canvas . is available ( ) ; }
public boolean is inherited mapped ( class < ? > class to check ) { for ( class < ? > clazz : get allsuper classes ( class to check ) ) if ( is mapped ( clazz ) ) return bool_ ; return bool_ ; }
private void unloader ( entity unloadee ) { client c = clientgui . get bots ( ) . get ( unloadee . get owner ( ) . get name ( ) ) ; if ( c == null ) { c = clientgui . get client ( ) ; } entity unloader = clientgui . get client ( ) . get game ( ) . get entity ( unloadee . get transport id ( ) ) ; if ( null == unloader ) { return ; } unloader . unload ( unloadee ) ; unloadee . set transport id ( entity . none ) ; c . send update entity ( unloadee ) ; c . send update entity ( unloader ) ; }
protected node new node ( ) { return new svgom switch element ( ) ; }
public string ( byte [ ] data , string encoding ) throws unsupported encoding exception { this ( data , num_ , data . length , encoding ) ; }
public register spec list without last ( ) { int new size = size ( ) - num_ ; if ( new size == num_ ) { return empty ; } register spec list result = new register spec list ( new size ) ; for ( int i = num_ ; i < new size ; i ++ ) { result . set 0 ( i , get 0 ( i ) ) ; } if ( is immutable ( ) ) { result . set immutable ( ) ; } return result ; }
static public final int random ( int start , int end ) { return start + random . next int ( end - start + num_ ) ; }
void push ( register s , operand name ) { stack < operand > stack = get ( s ) ; if ( stack == null ) { stack = new stack < operand > ( ) ; put ( s , stack ) ; } stack . push ( name ) ; }
public action errors validate ( action mapping mapping , http servlet request request ) { action errors errors = new action errors ( ) ; if ( ( tipo busqueda == tip o_ busqued a_ po r_ gestor ) && string utils . is blank ( gestor ) ) errors . add ( action errors . globa l_ message , new action error ( constants . erro r_ required , messages . get string ( transferencias constants . labe l_ transferencia s_ use r_ gestor , request . get locale ( ) ) ) ) ; return errors ; }
default b remove title ( ) { this . meta ( ) . remove title ( ) ; return this . get builder ( ) ; }
public matrix u ( ) { final matrix u = new matrix ( n , n ) ; for ( int i = num_ ; i < n ; i ++ ) { for ( int j = num_ ; j < n ; j ++ ) { if ( i <= j ) { u . $ [ u . addr . op ( i , j ) ] = lu . $ [ lu . addr . op ( i , j ) ] ; } } } return u ; }
void send request ( discovery node node , long request id , string action , transport request request , transport request options options ) throws io exception , transport exception ;
public dc cpp light ( dc cpp traffic controller tc , dc cpp light manager lm , string system name , string user name ) { super ( system name , user name ) ; this . tc = tc ; this . lm = lm ; initialize light ( system name ) ; }
void close ( close reason close reason ) throws io exception ;
void on success ( t data ) ;
public float [ ] generate transformed values line ( list < ? extends entry > entries , float phase x , float phase y , int from , int to ) { final int count = ( int ) math . ceil ( ( to - from ) * phase x ) * num_ ; float [ ] value points = new float [ count ] ; for ( int j = num_ ; j < count ; j += num_ ) { entry e = entries . get ( j / num_ + from ) ; if ( e != null ) { value points [ j ] = e . get x index ( ) ; value points [ j + num_ ] = e . get val ( ) * phase y ; } } point values to pixel ( value points ) ; return value points ; }
public final int yylength ( ) { return zz marked pos - zz start read ; }
public builder obsolete ( final boolean is obsolete ) { this . is obsolete = is obsolete ; return this ; }
string var reference ( name name ) ;
public void test sh a 5 1 2 ( ) { digest old digest = new sh a 5 1 2 digest ( ) ; digest new digest = new open ssl digest . sh a 5 1 2 ( ) ; do test message digest ( old digest , new digest ) ; }
public static style create point style ( ) { final graphic gr = style factory . create default graphic ( ) ; final mark mark = style factory . get circle mark ( ) ; mark . set stroke ( style factory . create stroke ( filter factory . literal ( color . blue ) , filter factory . literal ( num_ ) ) ) ; mark . set fill ( style factory . create fill ( filter factory . literal ( color . cyan ) ) ) ; gr . graphical symbols ( ) . clear ( ) ; gr . graphical symbols ( ) . add ( mark ) ; gr . set size ( filter factory . literal ( num_ ) ) ; final point symbolizer sym = style factory . create point symbolizer ( gr , null ) ; final rule rule = style factory . create rule ( ) ; rule . symbolizers ( ) . add ( sym ) ; final feature type style fts = style factory . create feature type style ( new rule [ ] { rule } ) ; final style style = style factory . create style ( ) ; style . feature type styles ( ) . add ( fts ) ; return style ; }
public static control flow graph build ( tree path body path , processing environment env , underlying ast underlying ast , boolean assume assertions enabled , boolean assume assertions disabled ) { return new cfg builder ( assume assertions enabled , assume assertions disabled ) . run ( body path , env , underlying ast ) ; }
public void show menu ( boolean animate ) { m view above . set current item ( num_ , animate ) ; }
public static void drop table ( sq lite database db , boolean if exists ) { string sql = str_ + ( if exists ? str_ : str_ ) + str_ ; db . exec sql ( sql ) ; }
public void update included ( ) { if ( is hole ( ) ) return ; for ( int i = num_ ; i < de list . size ( ) ; i ++ ) { polygonize directed edge de = ( polygonize directed edge ) de list . get ( i ) ; edge ring adj shell = ( ( polygonize directed edge ) de . get sym ( ) ) . get ring ( ) . get shell ( ) ; if ( adj shell != null && adj shell . is included set ( ) ) { set included ( ! adj shell . is included ( ) ) ; return ; } } }
public parametric textual extension recognizer ( string [ ] exts ) { for ( int i = num_ ; i < exts . length ; i ++ ) { add extension ( exts [ i ] ) ; } }
public void process ack ( request event request event , server transaction server transaction ) { try { logger . info ( str_ ) ; logger . info ( str_ + dialog . get state ( ) ) ; sip provider provider = ( sip provider ) request event . get source ( ) ; if ( ! caller sends bye ) { request bye request = dialog . create request ( request . bye ) ; client transaction ct = provider . get new client transaction ( bye request ) ; dialog . send request ( ct ) ; } } catch ( exception ex ) { logger . error ( str_ , ex ) ; fail ( str_ ) ; } }
private boolean key matches ( rp object obj ) { if ( obj instanceof house key ) { final house key key = ( house key ) obj ; if ( key . matches ( get door id ( ) , get lock number ( ) ) ) { key . setup ( get door id ( ) , get lock number ( ) , get owner ( ) ) ; return bool_ ; } else { return bool_ ; } } for ( rp slot slot : obj . slots ( ) ) { for ( rp object subobj : slot ) { if ( key matches ( subobj ) ) { return bool_ ; } } } return bool_ ; }
public void on geofence pause ( int geofence id , int status ) { }
public boolean is spinning ( ) { return is spinning ; }
protected void init error reporter ( ) { if ( f error reporter == null ) { f error reporter = new xml error reporter ( ) ; } if ( f error handler == null ) { f error handler = new x pointer error handler ( ) ; } f error reporter . put message formatter ( x pointer message formatter . xpointe r_ domain , new x pointer message formatter ( ) ) ; }
public void run test ( ) throws throwable { document doc ; node list address list ; node test node ; named node map attributes ; attr street attr ; string value ; doc = ( document ) load ( str_ , bool_ ) ; address list = doc . get elements by tag name ( str_ ) ; test node = address list . item ( num_ ) ; attributes = test node . get attributes ( ) ; street attr = ( attr ) attributes . get named item ( str_ ) ; value = street attr . get value ( ) ; assert equals ( str_ , str_ , value ) ; }
public static long id for global id ( long global id ) { return syncing . id for global id ( conten t_ uri , global id ) ; }
private bitmap load image ( int id ) { bitmap bitmap = bitmap factory . decode resource ( context . get resources ( ) , id ) ; bitmap scaled = bitmap . create scaled bitmap ( bitmap , imag e_ width , imag e_ height , bool_ ) ; bitmap . recycle ( ) ; return scaled ; }
public void reset ( ) { super . reset ( ) ; h1 = num_ ; h2 = num_ ; h3 = num_ ; h4 = num_ ; h5 = num_ ; x off = num_ ; for ( int i = num_ ; i != x . length ; i ++ ) { x [ i ] = num_ ; } }
http request receive request header ( ) throws http exception , io exception ;
public string options tip text html ( ) { return str_ + str_ ; }
public fixed android handler ( ) { set formatter ( th e_ formatter ) ; }
public static c endless progress dialog show endless ( final window parent , final string description , final c endless helper thread thread ) { final c endless progress dialog dlg = new c endless progress dialog ( parent , constants . defaul t_ windo w_ title , description , thread ) ; c icon initializer . initialize window icons ( dlg ) ; thread . start ( ) ; dlg . set visible ( bool_ ) ; return dlg ; }
public device printer null ( string desc ) { m _s name = app local . get int string ( str_ ) ; m _s description = desc ; }
public boolean is preview enabled ( ) { return m show preview ; }
public static builder create builder ( header header , writable font data data ) { return new builder ( header , data ) ; }
default void remove permission ( permissible permissible , permission permission ) { this . set permission ( permissible , permission , null ) ; }
public boolean remove used prefix ( string prefix ) { prefix = prefix . replace ( str_ , str_ ) ; return used prefixes . remove ( prefix . intern ( ) ) ; }
public void read lock ( ) ;
private void clean db ( ) throws file not found exception , io exception , exception { test case utils . initialize test backend ( bool_ ) ; entry top entry = test case utils . make entry ( str_ + tes t_ roo t_ d n_ string , str_ , str_ , str_ , str_ + string uid ( num_ ) ) ; memory backend memory backend = ( memory backend ) directory server . get backend ( tes t_ backen d_ id ) ; memory backend . add entry ( top entry , null ) ; }
public typed read < k , v > with timestamp fn ( serializable function < kv < k , v > , instant > timestamp fn ) { check not null ( timestamp fn ) ; return with timestamp fn 2 ( unwrap kafka and then ( timestamp fn ) ) ; }
public static boolean copy certificate ( principal subject , key store dst , key store src ) throws exception { for ( string alias : collections . list ( src . aliases ( ) ) ) { if ( ! src . is certificate entry ( alias ) ) { continue ; } x 5 0 9 certificate cert = ( x 5 0 9 certificate ) src . get certificate ( alias ) ; if ( ! cert . get subject dn ( ) . equals ( subject ) ) { continue ; } dst . set certificate entry ( alias , cert ) ; return bool_ ; } return bool_ ; }
public void paint ( graphics g , j component c ) { if ( progress bar . is indeterminate ( ) ) { paint indeterminate ( g , c ) ; } else { paint determinate ( g , c ) ; } }
public void insert fmt pref ficha ( fmt pref ficha vo fmt pref ficha ) ;
public c m_ repor t_ player ( int opcode , state state , state ... rest states ) { super ( opcode , state , rest states ) ; }
public static boolean has captured parameters in invocation sequence ( invocation sequence data data ) { return ( null != data . get parameter content data ( ) ) && ! data . get parameter content data ( ) . is empty ( ) ; }
protected abstract svg exception create svg exception ( short type , string key , object [ ] args ) ;
private void show feedback ( string message ) { if ( my host != null ) { my host . show feedback ( message ) ; } else { system . out . println ( message ) ; } }
public int successful shards ( ) { return successful shards ; }
public string fault description ( object fault ) { fault descriptor fd = get fault descriptor ( fault ) ; if ( fd != null ) { return fd . get description ( fault ) ; } return fault . to string ( ) ; }
public boolean remove parser ( parser parser ) { boolean removed = bool_ ; if ( parser manager != null ) { removed = parser manager . remove parser ( parser ) ; } return removed ; }
public object invoke ( object o ) throws exception ;
public void send request ( string url , final i request callback ui updater ) { request request = new request . builder ( ) . url ( url ) . build ( ) ; send request ( request , ui updater ) ; }
public boolean is animated ( ) { return collapse pane . is animated ( ) ; }
public storage unit entity create storage unit entity ( string storage name , business object data key business object data key , boolean business object data latest version , string business object data status code , string storage unit status , string storage directory path ) { return create storage unit entity ( storage name , storage platform entity . s3 , business object data key , business object data latest version , business object data status code , storage unit status , storage directory path ) ; }
public string to xml string ( boolean include ns prefix , boolean declare ns ) throws xacml exception ;
public json array request ( string url , listener < json array > listener , error listener error listener ) { super ( method . get , url , null , listener , error listener ) ; }
protected sorting ( ) { }
public static double convert lat or long to double ( rational [ ] coordinate , string reference ) { try { double degrees = coordinate [ num_ ] . to double ( ) ; double minutes = coordinate [ num_ ] . to double ( ) ; double seconds = coordinate [ num_ ] . to double ( ) ; double result = degrees + minutes / num_ + seconds / num_ ; if ( ( reference . equals ( str_ ) || reference . equals ( str_ ) ) ) { return - result ; } return result ; } catch ( array index out of bounds exception e ) { throw new illegal argument exception ( ) ; } }
public boolean equals with epsilon ( rectangle that , float eps ) { float dx = math . abs ( x - that . x ) ; float dy = math . abs ( y - that . y ) ; float dw = math . abs ( width - that . width ) ; float dh = math . abs ( height - that . height ) ; return dx < eps && dy < eps && dw < eps && dh < eps ; }
public object invoke method ( string name , object args ) { try { return super . invoke method ( name , args ) ; } catch ( missing method exception mme ) { try { if ( name . equals ( mme . get method ( ) ) ) { object bound closure = get property ( name ) ; if ( bound closure != null && bound closure instanceof closure ) { return ( ( closure ) bound closure ) . call ( ( object [ ] ) args ) ; } else { throw mme ; } } else { throw mme ; } } catch ( missing property exception mpe ) { throw mme ; } } }
public cluster info reset props ( property list property list ) { return reset props ( property list , bool_ ) ; }
void close ( ) ;
public static void enter search query ( activity activity , string query ) { espresso test utils . click menu item ( activity , activity . get string ( r . string . action _search ) , r . id . action _search ) ; on view ( is assignable from ( auto complete text view . class ) ) . perform ( click ( ) , type text ( query ) , clear focus ( ) ) ; espresso . close soft keyboard ( ) ; }
public void on native library ready ( window android window android , tab content manager tab content manager ) { assert m layer title cache == null : str_ ; if ( device class manager . enable layer decoration cache ( ) ) { m layer title cache = new layer title cache ( get context ( ) ) ; } m compositor view . init native compositor ( sys utils . is low end device ( ) , window android , m layer title cache , tab content manager ) ; if ( m layer title cache != null ) { m layer title cache . set resource manager ( get resource manager ( ) ) ; } if ( m control container != null ) { m compositor view . get resource manager ( ) . get dynamic resource loader ( ) . register resource ( r . id . control _container , m control container . get toolbar resource adapter ( ) ) ; } }
public boolean is filter presence _out ( ) { return filter presence _out ; }
public static native void convert arg b 8 8 8 8 to yu v 4 2 0 sp ( int [ ] input , byte [ ] output , int width , int height ) ;
public not query exp ( query exp q ) { exp = q ; }
public abstract void engine set key entry ( string alias , byte [ ] key , certificate [ ] chain ) throws key store exception ;
public int size ( ) { return map . size ( ) ; }
public void add listener ( speedruns live listener listener ) { listeners . add ( listener ) ; }
public void fill ( int from index , int to index , double val ) { if ( to index > _pos ) { ensure capacity ( to index ) ; _pos = to index ; } arrays . fill ( _data , from index , to index , val ) ; }
int node id count ( ) { return nodes size ; }
public void put all ( map < ? extends k , ? extends v > map ) { iterator it = map . entry set ( ) . iterator ( ) ; while ( it . has next ( ) ) { map . entry < ? extends k , ? extends v > entry = ( map . entry < ? extends k , ? extends v > ) it . next ( ) ; put ( entry . get key ( ) , entry . get value ( ) ) ; } }
private void start if ready ( animator dependency animation ) { if ( m animator set . m terminated ) { return ; } dependency dependency to remove = null ; int num dependencies = m node . tmp dependencies . size ( ) ; for ( int i = num_ ; i < num dependencies ; ++ i ) { dependency dependency = m node . tmp dependencies . get ( i ) ; if ( dependency . rule == m rule && dependency . node . animation == dependency animation ) { dependency to remove = dependency ; dependency animation . remove listener ( this ) ; break ; } } m node . tmp dependencies . remove ( dependency to remove ) ; if ( m node . tmp dependencies . size ( ) == num_ ) { m node . animation . start ( ) ; m animator set . m playing set . add ( m node . animation ) ; } }
public abstract void load ( payload ... payloads ) ;
public object reference load object reference ( ) { if ( vm . verify assertions ) vm . _assert ( vm . no t_ reached ) ; return null ; }
protected frame < v > new frame ( final frame < ? extends v > src ) { return new frame < v > ( src ) ; }
protected exception ( string message , throwable cause , boolean enable suppression , boolean writable stack trace ) { super ( message , cause , enable suppression , writable stack trace ) ; }
public boolean is continuous layout ( ) { return continuous layout ; }
public gate ( ) { this ( vertical , null , null ) ; }
protected void insert text ( final string text , final notification type type ) { chat text sink dest = new chat text sink ( text pane . get document ( ) ) ; style set set = new style set ( style context . get default style context ( ) , get style ( type . get color ( ) , type . get style description ( ) ) ) ; set . set attribute ( style constants . foreground , type . get color ( ) ) ; formatter . format ( text , set , dest ) ; }
public int from ( ) { return v ; }
public void scroll to ( float scroll progress , boolean from touch ) ;
public void do get ( http servlet request request , http servlet response response ) throws servlet exception , io exception { do get post ( request , response ) ; }
public string debug dump ( int indent ) { indentation = indent ; string retval = this . debug dump ( ) ; indentation = num_ ; return retval ; }
public static igfs logger logger ( string endpoint , string igfs name , string dir , int batch size ) { if ( endpoint == null ) endpoint = str_ ; log lock . read lock ( ) . lock ( ) ; try { igfs logger log = loggers . get ( endpoint ) ; if ( log == null ) { log = new igfs logger ( endpoint , igfs name , dir , batch size ) ; igfs logger log 0 = loggers . put if absent ( endpoint , log ) ; if ( log 0 != null ) log = log 0 ; } log . use cnt . increment and get ( ) ; return log ; } finally { log lock . read lock ( ) . unlock ( ) ; } }
public void window closed ( window event e ) { synchronized ( get tree lock ( ) ) { window [ ] windows = get owned windows ( ) ; for ( window window : windows ) { if ( window != null ) { if ( window . is displayable ( ) ) { return ; } window . remove window listener ( this ) ; } } dispose ( ) ; } }
public synchronized void commit ( int task id ) throws interrupted exception { repl dbms header processed = task info [ task id ] . get last processed event ( ) ; if ( processed != null ) { repl dbms header committed = new repl dbms header data ( processed ) ; task info [ task id ] . set last committed event ( committed ) ; committed seqno . report ( task id , committed . get seqno ( ) , committed . get extracted tstamp ( ) . get time ( ) , committed ) ; if ( logger . is debug enabled ( ) ) { logger . debug ( str_ + name + str_ + task id + str_ + committed . get seqno ( ) ) ; } commit watches . process ( committed , task id ) ; } else { logger . warn ( str_ + this . name + str_ + task id ) ; } }
public void stop preview ( ) { if ( camera != null && previewing ) { if ( ! use one shot preview callback ) { camera . set preview callback ( null ) ; } camera . stop preview ( ) ; preview callback . set handler ( null , num_ ) ; auto focus callback . set handler ( null , num_ ) ; previewing = bool_ ; } }
public static _ fields find by thrift id ( int field id ) { switch ( field id ) { case num_ : return key ; case num_ : return versions ; default : return null ; } }
public void remove node ( n node ) ;
private void create gui ( ) { for ( final i results panel panel : m _factory ) { m _tabbed pane . add tab ( panel . get title ( ) , panel . get component ( ) ) ; } add ( m _tabbed pane , border layout . center ) ; m _tabbed pane . set visible ( bool_ ) ; }
public g f2 vector ( int length , int t , secure random sr ) { if ( t > length ) { throw new arithmetic exception ( str_ ) ; } this . length = length ; int size = ( length + num_ ) > > num_ ; v = new int [ size ] ; int [ ] help = new int [ length ] ; for ( int i = num_ ; i < length ; i ++ ) { help [ i ] = i ; } int m = length ; for ( int i = num_ ; i < t ; i ++ ) { int j = rand utils . next int ( sr , m ) ; set bit ( help [ j ] ) ; m -- ; help [ j ] = help [ m ] ; } }
public void paint component ( graphics g ) { g . draw image ( track , num_ , num_ , null ) ; graphics 2 d g 2d = ( graphics 2 d ) g . create ( ) ; g 2d . translate ( car position . x , car position . y ) ; g 2d . rotate ( math . to radians ( car rotation ) ) ; g 2d . translate ( - ( car position . x ) , - ( car position . y ) ) ; g 2d . draw image ( car , car position . x - car w half , car position . y - car h half , null ) ; }
private string make next link ( int skip ) throws o data exception { uri self lnk = get service root ( ) ; uri builder ub = new uri builder ( self lnk ) ; ub . set parameter ( str_ , string . value of ( skip ) ) ; return ub . to string ( ) ; }
public recursive production substitute ( recursive production other ) throws interrupted exception { recursive production new eqn = new recursive production ( this ) ; new eqn . substitute destructive ( other ) ; return new eqn ; }
void register system sqlj jar ( sqlj jar sqlj jar ) ;
public static void deregister connection handler ( connection handler < ? > handler ) { synchronized ( directory server . connection handlers ) { directory server . connection handlers . remove ( handler ) ; connection handler monitor monitor = handler . get connection handler monitor ( ) ; if ( monitor != null ) { deregister monitor provider ( monitor ) ; monitor . finalize monitor provider ( ) ; handler . set connection handler monitor ( null ) ; } } }
public boolean has occurred ( final date d , final boolean include today ) { if ( include today ) { return date ( ) . compare to ( d ) < num_ ; } else { return date ( ) . compare to ( d ) <= num_ ; } }
public native void hide field ( string field name ) ;
porter duff color filter update tint filter ( porter duff color filter tint filter , color state list tint , porter duff . mode tint mode ) { if ( tint == null || tint mode == null ) { return null ; } final int color = tint . get color for state ( get state ( ) , color . transparent ) ; tint filter = new porter duff color filter ( color , tint mode ) ; return tint filter ; }
public static string to hex ( string arg ) { return string . format ( str_ , new big integer ( num_ , arg . get bytes ( ) ) ) ; }
public void on event ( final disruptor referring event entry event entry wrap , final long sequence , final boolean end of batch ) throws exception { event entry impl event entry = event entry wrap . delegate ; on event ( event entry , sequence , end of batch ) ; }
public void read ( input stream in , drawing drawing , boolean replace ) throws io exception ;
public void skip ( ) { int we = w end ; if ( w offset == we ) { if ( top == null ) { w offset ++ ; flush ( ) ; } return ; } else { if ( we < num_ ) w offset = num_ ; else w offset = we ; } flush ( ) ; }
public static io file filter age file filter ( file cutoff reference , boolean accept older ) { return new age file filter ( cutoff reference , accept older ) ; }
private void add removed dashboards ( list < string > ids , list < dashboard > dashboards ) { if ( preconditions . no t_ empt y_ collection . test ( ids ) && preconditions . no t_ empt y_ collection . test ( dashboards ) ) { set < string > dash hash set = dashboards . stream ( ) . map ( null ) . collect ( collectors . to set ( ) ) ; list < dashboard > additional dashboards = ids . stream ( ) . filter ( null ) . map ( null ) . collect ( collectors . to list ( ) ) ; dashboards . add all ( additional dashboards ) ; } }
public static boolean track freed reference counts ( ) { return get instance ( ) . track freed reference counts ( ) ; }
void configure fab ( int drawable , view . on click listener on click listener ) ;
public sprog version ( sprog type t ) { if ( log . is debug enabled ( ) ) { log . debug ( str_ + t . to string ( ) ) ; } sprog type = t ; sprog version = str_ ; }
public test nano sparql server with proxy index manager 2 ( string name ) { this ( name , get temporary journal ( ) , test mode . triples ) ; }
public void offset children vertical ( int dy ) { if ( m recycler view != null ) { m recycler view . offset children vertical ( dy ) ; } }
public void remove cluster ( uri id ) { this . removed clusters . add ( id ) ; }
public static list < ? extends element > child element list ( document fragment fragment ) { if ( fragment == null ) return null ; list < element > elements = new linked list < element > ( ) ; node node = fragment . get first child ( ) ; if ( node != null ) { do { if ( node . get node type ( ) == node . elemen t_ node ) { element child element = ( element ) node ; elements . add ( child element ) ; } } while ( ( node = node . get next sibling ( ) ) != null ) ; } return elements ; }
private void update horizontal bounds ( point f finger position , point f view middle ) { if ( orientation == layout orientation . vertical ) { return ; } floating item bounds . left = ( int ) finger position . x ; if ( finger offset != null ) { floating item bounds . left += finger offset . x ; } if ( floating item bounds . left < - view middle . x ) { floating item bounds . left = - ( int ) view middle . x ; } floating item bounds . right = floating item bounds . left + floating item starting bounds . width ( ) ; }
public static void init threads flag ( c flags flags ) { flags . register optional ( str_ , thread s_ flag , integer . class , int , str_ ) . set category ( common flag categories . utility ) ; }
public static s m_ syste m_ message st r_ ms g_ forc e_ matc h_ jus t_ invite ( string value 0 ) { return new s m_ syste m_ message ( num_ , value 0 ) ; }
public boolean use energy ( double amount , boolean simulate ) ;
public static stopwatch create unstarted ( ticker ticker ) { return new stopwatch ( ticker ) ; }
public void paint panel background ( synth context context , graphics g , int x , int y , int w , int h ) { paint background ( context , g , x , y , w , h , null ) ; }
public void on destroy ( ) { m background execution . cancel ( bool_ ) ; return ; }
public final cc gap top ( string bounds size ) { ver . set gap before ( constraint parser . parse bound size ( bounds size , bool_ , bool_ ) ) ; return this ; }
private javax . swing . filechooser . file filter create file filter ( string description , string ... extensions ) { description = create file name filter description from extensions ( description , extensions ) ; return null ; }
private void glue core ( lime wire core lime wire core ) { lime wire core . get lime core glue ( ) . install ( ) ; }
public void add ( string source , population population ) { if ( populations . contains key ( source ) ) { throw new illegal argument exception ( str_ ) ; } populations . put ( source , population ) ; for ( solution solution : population ) { solution . set attribute ( sourc e_ attribute , source ) ; for ( solution s : combined population ) { if ( math arrays . distance ( s . get objectives ( ) , solution . get objectives ( ) ) < settings . eps ) { system . err . println ( str_ ) ; } } combined population . add ( solution ) ; } }
public void print view ( ) throws exception ;
leaf element split ( leaf element leaf , int offset , final char table table ) ;
public static boolean check for forced auth ( string xml composite advice ) { boolean return forced auth = bool_ ; try { string decoded advice xml = url decoder . decode ( xml composite advice ) ; map advice map = policy utils . parse advices xml ( decoded advice xml ) ; if ( util debug . message enabled ( ) ) { util debug . message ( str_ + str_ + decoded advice xml ) ; util debug . message ( str_ + advice map ) ; } if ( advice map != null ) { if ( advice map . contains key ( auth scheme condition . forc e_ aut h_ advice ) ) { return forced auth = bool_ ; } } } catch ( com . sun . identity . policy . policy exception pol exp ) { util debug . error ( str_ + str_ , pol exp ) ; } if ( util debug . message enabled ( ) ) { util debug . message ( str_ + str_ + return forced auth ) ; } return return forced auth ; }
public void cancel ( ) { pause ( ) ; m runnable = null ; }
public gingerbread purgeable decoder ( webp bitmap factory . webp error logger webp error logger ) { }
private table create table metadata ( string schema , string table name , boolean header ) { table metadata = new table ( schema , table name ) ; if ( header ) { metadata . add column ( new column ( str_ , types . char , num_ ) ) ; metadata . add column ( new column ( str_ , types . integer ) ) ; metadata . add column ( new column ( str_ , types . integer ) ) ; metadata . add column ( new column ( str_ , types . timestamp ) ) ; } metadata . add column ( new column ( str_ , types . integer ) ) ; metadata . add column ( new column ( str_ , types . varchar ) ) ; return metadata ; }
protected video reorder videos query owner id ( int value ) { return unsafe param ( str_ , value ) ; }
public set < string > extract roles ( http server request request ) { set < string > roles = null ; multi map headers = request . headers ( ) ; string proxy group header = headers . get ( group header ) ; string user roles = null ; if ( proxy group header != null ) { user roles = proxy group header ; } else { user roles = headers . get ( role header ) ; } if ( user roles != null ) { roles = new hash set < > ( ) ; set < string > all roles = new hash set < > ( arrays . as list ( user roles . split ( str_ ) ) ) ; for ( string r : all roles ) { r = r . trim ( ) ; r = r . to lower case ( ) ; matcher matcher = role pattern . matcher ( r ) ; if ( matcher . matches ( ) ) { roles . add ( matcher . group ( num_ ) ) ; } } } return roles ; }
public regexp query builder ( string name , string regexp ) { this . name = name ; this . regexp = regexp ; }
public void redrive task ( long task id ) ;
private void update progress ( int progress ) { if ( my host != null && progress != previous progress ) { my host . update progress ( progress ) ; } previous progress = progress ; }
private void return data ( object ret ) { if ( my host != null ) { my host . return data ( ret ) ; } }
public boolean is file visible ( virtual file file , boolean show hidden files ) { if ( file . is ( v file property . symlink ) && file . get canonical path ( ) == null ) { return bool_ ; } if ( ! file . is directory ( ) ) { if ( file element . is archive ( file ) ) { if ( ! my choose jars && ! my choose jar contents ) { return bool_ ; } } else if ( ! my choose files ) { return bool_ ; } if ( my file filter != null && ! my file filter . value ( file ) ) { return bool_ ; } } if ( is hide ignored ( ) && file type manager . get instance ( ) . is file ignored ( file ) ) { return bool_ ; } if ( ! show hidden files && file element . is file hidden ( file ) ) { return bool_ ; } return bool_ ; }
public static array list < byte > byte array to array list ( byte [ ] byte array ) { return byte array to array list ( byte array , num_ ) ; }
void delete events ( ngn predicate < ngn history event > predicate ) ;
t process definition name ( string process definition name ) ;
public static boolean is public static final ( field field ) { int modifiers = field . get modifiers ( ) ; return ( modifier . is public ( modifiers ) && modifier . is static ( modifiers ) && modifier . is final ( modifiers ) ) ; }
public void send auth cert reg request ( security server id security server , string address , byte [ ] auth cert ) throws exception { try ( http sender sender = management request client . create central http sender ( ) ) { send ( sender , get central service uri ( ) , new auth cert reg request ( auth cert , security server . get owner ( ) , builder . build auth cert reg request ( security server , address , auth cert ) ) ) ; } }
public derpibooru search options ( ) { }
public void check headers ( ) throws parse exception { if ( get c seq ( ) == null ) { throw new parse exception ( c seq . name + str_ , num_ ) ; } if ( get to ( ) == null ) { throw new parse exception ( to . name + str_ , num_ ) ; } if ( get from ( ) == null ) { throw new parse exception ( from . name + str_ , num_ ) ; } if ( get via headers ( ) == null ) { throw new parse exception ( via . name + str_ , num_ ) ; } if ( get call id ( ) == null ) { throw new parse exception ( call id . name + str_ , num_ ) ; } if ( get status code ( ) > num_ ) { throw new parse exception ( str_ + get status code ( ) , num_ ) ; } }
private void fire agent arrived ( string n ) { synchronized ( base listeners ) { iterator i = base listeners . iterator ( ) ; while ( i . has next ( ) ) ( ( i base listener ) i . next ( ) ) . agent arrived ( n ) ; } }
public string sql object _create sequence ( string catalog name , string schema name , string sequence name , long min , long max , long incr , boolean is cycled , long cache , long start ) ;
public void fling ( long time , float x , float y , float velocity x , float velocity y ) { reset resize timeout ( bool_ ) ; velocity x = math utils . flip sign if ( velocity x , localization utils . is layout rtl ( ) ) ; if ( m in reorder mode ) return ; int scroll delta remaining = num_ ; if ( ! m scroller . is finished ( ) ) { scroll delta remaining = m scroller . get final x ( ) - m scroll offset ; m interacting tab = null ; m scroller . force finished ( bool_ ) ; } m scroller . fling ( m scroll offset , num_ , ( int ) velocity x , num_ , ( int ) m min scroll offset , num_ , num_ , num_ , num_ , num_ , time ) ; m scroller . set final x ( m scroller . get final x ( ) + scroll delta remaining ) ; m update host . request update ( ) ; }
public static void main ( final string [ ] args ) { dom test case . do main ( nodeprocessinginstructionnodetype . class , args ) ; }
node safe remove named item ns ( string namespace uri , string name ) { return internal remove named item ns ( namespace uri , name , bool_ ) ; }
public static void delete ( file folder ) { if ( folder . is directory ( ) ) { file [ ] contents = folder . list files ( ) ; for ( file file : contents ) { file utils . delete ( file ) ; } folder . delete ( ) ; } else { folder . delete ( ) ; } }
public int height ( ) { return num_ ; }
public xml string xstr ( ) { int node = item ( num_ ) ; return ( node != dtm . null ) ? get string from node ( node ) : x string . emptystring ; }
public static void main ( final string [ ] args ) { dom test case . do main ( documentgetelementsbytagnametotallength . class , args ) ; }
private void add reminder ( ) { if ( m default reminder minutes == general preferences . n o_ reminder ) { event view utils . add reminder ( m activity , m scroll view , this , m reminder views , m reminder minute values , m reminder minute labels , m reminder method values , m reminder method labels , reminder entry . value of ( general preferences . reminde r_ defaul t_ time ) , m max reminders , m reminder change listener ) ; } else { event view utils . add reminder ( m activity , m scroll view , this , m reminder views , m reminder minute values , m reminder minute labels , m reminder method values , m reminder method labels , reminder entry . value of ( m default reminder minutes ) , m max reminders , m reminder change listener ) ; } event view utils . update add reminder button ( m view , m reminder views , m max reminders ) ; }
public void load image ( image view image view , string image path ) { load image ( image view , image path , num_ , num_ , null ) ; }
public int day ( ) { return day ; }
public void execute a sync ( process info pi ) { log . config ( str_ ) ; }
private boolean is nullable core type ( hash set < string > resolved types set ) { if ( resolved types set . size ( ) != num_ || ! resolved types set . contains ( types . str null ) ) { return bool_ ; } return resolved types set . contains ( types . str integer ) || resolved types set . contains ( types . str float ) || resolved types set . contains ( types . str resource ) ; }
public void test _ticket _ 1 4 6 3c ( ) throws exception { new test helper ( str_ , str_ , str_ , str_ ) . run test ( ) ; }
private void test preferred units recording ( int tab id ) { test preferred units ( r . string . unit _kilometer ) ; end to end test utils . start recording ( ) ; end to end test utils . solo . click on text ( track list activity . get string ( tab id ) ) ; end to end test utils . send gps ( num_ ) ; test preferred units ( r . string . unit _mile ) ; end to end test utils . send gps ( num_ , num_ ) ; end to end test utils . stop recording ( bool_ ) ; }
public static double cdf ( double val , double mu , double sigma , double xi ) { val = ( val - mu ) / sigma ; if ( val < num_ ) { return num_ ; } if ( xi < num_ && val > - num_ / xi ) { return num_ ; } return num_ - math . pow ( num_ + xi * val , - num_ / xi ) ; }
public void skip while ( string skip ) throws io exception { char ch ; do { ch = read ( ) ; } while ( skip . index of ( ch ) > - num_ ) ; unread character ( ch ) ; }
public double distance ( final line line ) { final vector 3 d normal = vector 3 d . cross product ( direction , line . direction ) ; final double n = normal . get norm ( ) ; if ( n < precision . saf e_ min ) { return distance ( line . zero ) ; } final double offset = line . zero . subtract ( zero ) . dot product ( normal ) / n ; return fast math . abs ( offset ) ; }
public final test subscriber < t > assert no values ( ) { if ( value count != num_ ) { throw new assertion error ( str_ + values . size ( ) + str_ + values , null ) ; } return this ; }
public split reciprocal ( ) { final double approximate inv = num_ / full ; final split split inv = new split ( approximate inv ) ; final split product = multiply ( split inv ) ; final double error = ( product . high - num_ ) + product . low ; return double . is na n ( error ) ? split inv : new split ( split inv . high , split inv . low - error / full ) ; }
public void init ( ) { set can grab graphic ( bool_ ) ; debug . message ( str_ , str_ ) ; set state machine ( new circle state machine ( this ) ) ; g points = new grab point [ num_ ] ; }
public range query builder time zone ( string timezone ) { this . time zone = timezone ; return this ; }
protected criteria create criteria internal ( ) { criteria criteria = new criteria ( ) ; return criteria ; }
public safe async task ( executor executor ) { this . executor = executor ; }
public configuration directory ( string directory path , boolean reload if changed ) throws exception { this . path = paths . get ( directory path ) ; this . reload if changed = reload if changed ; reload ( ) ; }
public abstract address malloc ( int size ) ;
public boolean is transient ( ) { return bool_ ; }
void on dialog sign up click ( string email address , string user name , ply android . query query on success , ply completion query on success completion , ply android . query error query error ) ;
public void on social login success ( string access token , string backend ) { login prefs . save social login token ( access token , backend ) ; task < ? > task = new profile task ( activity , access token , backend ) ; callback . on social login success ( access token , backend , task ) ; task . execute ( ) ; }
protected void _finish token ( ) throws io exception { _token incomplete = bool_ ; int ch = _type byte ; final int type = ( ( ch > > num_ ) & num_ ) ; ch &= num_ ; if ( type != cbor constants . majo r_ typ e_ text ) { if ( type == cbor constants . majo r_ typ e_ bytes ) { _binary value = _finish bytes ( _decode explicit length ( ch ) ) ; return ; } _throw internal ( ) ; } final int len = _decode explicit length ( ch ) ; if ( len <= num_ ) { if ( len < num_ ) { _finish chunked text ( ) ; } else { _text buffer . reset with empty ( ) ; } return ; } if ( len > ( _input end - _input ptr ) ) { if ( len >= _input buffer . length ) { _finish long text ( len ) ; return ; } _load to have at least ( len ) ; } _finish short text ( len ) ; }
public void test double missing function ( ) throws exception { check sort missing function ( str_ , str_ , str_ ) ; }
public pla point float dsn _to _board _rel ( double [ ] p _tuple ) { double x = dsn _to _board ( p _tuple [ num_ ] ) ; double y = dsn _to _board ( p _tuple [ num_ ] ) ; return new pla point float ( x , y ) ; }
public void active line range changed ( active line range event e ) ;
public cluster clone exception ( string message ) { super ( message ) ; }
public static set < feature > prefix ( string prefix , set < feature > features ) { set < feature > feats = new linked hash set < > ( ) ; for ( feature s : features ) feats . add ( s . prefix with ( prefix ) ) ; return feats ; }
public void write ( cdata cdata ) throws sax exception { string text = cdata . get text ( ) ; if ( lexical handler != null ) { lexical handler . start cdata ( ) ; write ( text ) ; lexical handler . end cdata ( ) ; } else { write ( text ) ; } }
public foo fetch by field 2 _ last ( boolean field 2 , com . liferay . portal . kernel . util . order by comparator < foo > order by comparator ) ;
protected abstract void command continuation request ( ) throws decoding exception ;
public final long remove ( final int from , final int count ) { if ( count < num_ || from < num_ ) return - num_ ; if ( from + count > size ) return - num_ ; final long o = list [ from ] ; final int oldsize = size ; size = size - count ; if ( from == size ) return o ; java . lang . system . arraycopy ( list , from + count , list , from , size - from ) ; return o ; }
public void execute ( ) throws mojo execution exception { if ( ! features directory . exists ( ) ) { throw new mojo execution exception ( str_ ) ; } final collection < file > feature files = file utils . list files ( features directory , new string [ ] { str_ } , bool_ ) ; create output dir if required ( ) ; file generator = create file generator ( ) ; file generator . generate cucumber it files ( output directory , feature files ) ; get log ( ) . info ( str_ + output directory . get absolute path ( ) + str_ ) ; project . add test compile source root ( output directory . get absolute path ( ) ) ; }
public void write unescaped ( string s ) throws io exception { end open tag ( ) ; current element ( ) . unformatted children = bool_ ; writer . write ( s ) ; }
private void run internal ( i marker marker ) throws core exception { assert . is not null ( marker ) ; pending rewrite pending = resolve without writing ( marker ) ; if ( pending == null ) { return ; } try { i region region = complete rewrite ( pending ) ; if ( region == null ) { return ; } i editor part part = editor utility . is open in editor ( pending . original unit ) ; if ( part instanceof i text editor ) { ( ( i text editor ) part ) . select and reveal ( region . get offset ( ) , region . get length ( ) ) ; } } finally { pending . original unit . discard working copy ( ) ; } }
public static < i , a > parser < i , a > fail ( ) { return null ; }
public void test input skip with buffering ( ) throws exception { int size = num_ ; file f = this . init file ( str_ ) ; write ascending int file ( f , size ) ; int jumps = size / num_ ; int jump size = size / jumps ; int jump offset = jump size * num_ ; int bsize = num_ ; for ( int b = num_ ; b < num_ ; b ++ ) { logger . info ( str_ + bsize ) ; buffered file data input bfdi = new buffered file data input ( f , bsize ) ; bsize *= num_ ; for ( int i = num_ ; i < jumps ; i ++ ) { int value = i * jump size ; long offset = i * jump offset ; bfdi . seek ( offset ) ; string position = str_ + i ; assert equals ( position , offset , bfdi . get offset ( ) ) ; assert equals ( position , value , bfdi . read int ( ) ) ; bfdi . skip ( jump offset ) ; } logger . info ( bfdi ) ; bfdi . close ( ) ; } }
public void start ( ) { stop ( ) ; m cache dispatcher = new cache dispatcher ( m cache queue , m network queue , m cache , m delivery ) ; m cache dispatcher . start ( ) ; for ( int i = num_ ; i < m dispatchers . length ; i ++ ) { network dispatcher network dispatcher = new network dispatcher ( m network queue , m network , m cache , m delivery ) ; m dispatchers [ i ] = network dispatcher ; network dispatcher . start ( ) ; } }
public void remove sample ( string name ) { if ( table . row key set ( ) . contains ( name ) ) { table . row key set ( ) . remove ( name ) ; sample order . remove ( name ) ; } }
final boolean try unpush ( fork join task < ? > t ) { fork join task < ? > [ ] a ; int s ; if ( ( a = array ) != null && ( s = top ) != base && u . compare and swap object ( a , ( ( ( a . length - num_ ) & -- s ) << ashift ) + abase , t , null ) ) { u . put ordered int ( this , qtop , s ) ; return bool_ ; } return bool_ ; }
public grid affinity assignment cached affinity ( affinity topology version top ver ) { if ( top ver . equals ( affinity topology version . none ) ) top ver = last version ( ) ; else await topology version ( top ver ) ; assert top ver . topology version ( ) >= num_ : top ver ; grid affinity assignment cache = head . get ( ) ; if ( ! cache . topology version ( ) . equals ( top ver ) ) { cache = aff cache . get ( top ver ) ; if ( cache == null ) { throw new illegal state exception ( str_ + str_ + ctx . discovery ( ) . local node ( ) + str_ + cache name + str_ + top ver + str_ + head . get ( ) . topology version ( ) + str_ + aff cache . key set ( ) + str_ ) ; } } assert cache . topology version ( ) . equals ( top ver ) : str_ + cache ; return cache ; }
protected abstract intermediate response ( ) { }
public void task info ( hadoop task info info ) { task info = info ; }
private void add termination task log ( execution state state , string detailed message ) { execution task log log = new execution task log ( ) ; log . set date ( new date ( ) ) ; log . set level ( log level . error . to string ( ) ) ; log . set message ( str_ ) ; log . set detail ( detailed message ) ; log . set phase ( execution phase . execute . name ( ) ) ; model client . save ( log ) ; state . add execution task log ( log ) ; model client . save ( state ) ; }
public void resolve layout direction ( int layout direction ) { }
public static string from i pv 4 address collection ( collection < integer > ip addresses ) { if ( ip addresses == null ) return str_ ; string buffer sb = new string buffer ( ) ; sb . append ( str_ ) ; for ( integer ip : ip addresses ) { sb . append ( from i pv 4 address ( ip ) ) ; sb . append ( str_ ) ; } sb . replace ( sb . length ( ) - num_ , sb . length ( ) , str_ ) ; return sb . to string ( ) ; }
public static double compute info gain ( instances data , attribute att ) throws exception { double info gain = compute entropy ( data ) ; instances [ ] split data = split data ( data , att ) ; for ( int j = num_ ; j < data . num distinct values ( att ) ; j ++ ) { if ( split data [ j ] . num instances ( ) > num_ ) { info gain -= ( ( double ) split data [ j ] . num instances ( ) / ( double ) data . num instances ( ) ) * compute entropy ( split data [ j ] ) ; } } return info gain ; }
void handle query ( dns incoming in , inet address addr , int port ) throws io exception { if ( logger . is loggable ( level . fine ) ) { logger . fine ( this . get name ( ) + str_ + in ) ; } boolean conflict detected = bool_ ; final long expiration time = system . current time millis ( ) + dns constants . know n_ answe r_ ttl ; for ( dns record answer : in . get all answers ( ) ) { conflict detected |= answer . handle query ( this , expiration time ) ; } this . io lock ( ) ; try { if ( _planned answer != null ) { _planned answer . append ( in ) ; } else { dns incoming planned answer = in . clone ( ) ; if ( in . is truncated ( ) ) { _planned answer = planned answer ; } this . start responder ( planned answer , port ) ; } } finally { this . io unlock ( ) ; } final long now = system . current time millis ( ) ; for ( dns record answer : in . get answers ( ) ) { this . handle record ( answer , now ) ; } if ( conflict detected ) { this . start prober ( ) ; } }
public static boolean are selections the same ( picked object a , picked object b ) { return a != null && b != null && a . get object ( ) == b . get object ( ) ; }
public void log ( string message , level level , object ... arguments ) { get bot ( ) . log ( this , message , level , arguments ) ; }
public boolean saved pattern exists ( ) { try { return get lock settings ( ) . have pattern ( get current or calling user id ( ) ) ; } catch ( remote exception re ) { return bool_ ; } }
private packet create remove entity packet ( int entity id , int condition ) { array list < integer > ids = new array list < integer > ( num_ ) ; ids . add ( entity id ) ; return create remove entity packet ( ids , condition ) ; }
int weigh ( k key , v value ) ;
public sip request create invite ( ) throws payload exception { string content = get dialog path ( ) . get local content ( ) ; if ( get first message ( ) != null ) { return create multipart invite request ( content ) ; } return create invite request ( content ) ; }
public instances content event ( instance content event event ) { this . add ( event . get instance content ( ) ) ; }
public string member _name ( ) throws org . omg . dynamic any . dyn any package . invalid value { org . omg . corba . portable . servant object $so = _servant _preinvoke ( str_ , _ops class ) ; dyn union operations $self = ( dyn union operations ) $so . servant ; try { return $self . member _name ( ) ; } finally { _servant _postinvoke ( $so ) ; } }
public final void yyclose ( ) throws java . io . io exception { zz at eof = bool_ ; zz end read = zz start read ; if ( zz reader != null ) zz reader . close ( ) ; }
public vec 2 d min ( readonly vec 2 d v ) ;
public string tojstring ( ) { return value ( ) . tojstring ( ) ; }
public void test invoke all 3 ( ) throws interrupted exception { executor service e = new fork join pool ( num_ ) ; pool cleaner cleaner = null ; try { cleaner = cleaner ( e ) ; list < callable < string > > l = new array list < callable < string > > ( ) ; l . add ( new string task ( ) ) ; l . add ( null ) ; try { e . invoke all ( l ) ; should throw ( ) ; } catch ( null pointer exception success ) { } } finally { if ( cleaner != null ) { cleaner . close ( ) ; } } }
public collision aware pitch accessor ( orbit view orbit view ) { if ( orbit view == null ) { string message = logging . get message ( str_ ) ; logging . logger ( ) . severe ( message ) ; throw new illegal argument exception ( message ) ; } this . orbit view = orbit view ; }
public text editor outdent ( ) { return outdent ( num_ ) ; }
protected boolean is read allowed ( ) throws io exception { if ( self closed ) { throw new io exception ( str_ ) ; } return ( wrapped stream != null ) ; }
public process executor ( boolean redirect std err ) { this . redirect std err = bool_ ; }
public boolean is change tab on focus ( ) { return change tab on focus ; }
void replace in xml file ( xml replacement ... xml replacements ) throws cargo exception ;
boolean is ready to publish ( final int message index ) ;
public void cancel ( ) { cancel = bool_ ; }
default builder add ( double t ) { accept ( t ) ; return this ; }
public static boolean is valid bed graph line ( string line ) { string [ ] bdg = line . split ( str_ ) ; if ( bdg . length < num_ ) { return bool_ ; } try { integer . parse int ( bdg [ num_ ] ) ; integer . parse int ( bdg [ num_ ] ) ; } catch ( number format exception e ) { return bool_ ; } return bool_ ; }
public static < node type extends i graph node < node type > & i selectable node > boolean are all children deselected ( final node type node ) { final i node filter < node type > filter = standard filters . get selected filter ( ) ; return graph algorithms . collect children ( node , filter ) . size ( ) == num_ ; }
boolean do action device configure local ( boolean discover required , inet address inet address , string ap ssid , string ap password , string random token , string device bssid ) ;
public static native int destroy ( long mutex ) ;
public void on tab closure cancelled ( long time , int id , boolean incognito ) { for ( int i = num_ ; i < m scene overlays . size ( ) ; i ++ ) { m scene overlays . get ( i ) . tab closure cancelled ( time , incognito , id ) ; } }
public well 4 4 4 9 7b ( int [ ] seed ) { super ( k , seed ) ; }
public void start external subset ( xml resource identifier identifier , augmentations augs ) throws xni exception { start parameter entity ( str_ , null , null , augs ) ; }
public map < integer , double > compute ( int ... dataset ) { return compute in place ( ints to doubles ( dataset ) ) ; }
public length constraint ( int length , string error message ) { this . length = length ; this . error message = error message ; }
public boolean is set store name ( ) { return this . store name != null ; }
private counting thread pool executor create executor ( int num threads ) { return new counting thread pool executor ( num threads , integer . ma x_ value , num_ , time unit . seconds , new linked blocking queue < runnable > ( ) ) ; }
protected buffered image compose filled image ( buffered image src img , symbol code symbol code ) { string fill path = this . compose fill path ( symbol code ) ; buffered image fill = this . read image ( fill path ) ; if ( fill == null ) { string msg = logging . get message ( str_ , symbol code ) ; logging . logger ( ) . severe ( msg ) ; throw new missing resource exception ( msg , buffered image . class . get name ( ) , fill path ) ; } int width = src img . get width ( ) ; int height = src img . get height ( ) ; buffered image filled img = new buffered image ( width , height , buffered image . typ e_ in t_ arg b_ pre ) ; this . draw image ( fill , filled img ) ; this . draw image ( src img , filled img ) ; return filled img ; }
public static size reduce ( size aspect ratio ) { big integer width = big integer . value of ( aspect ratio . width ( ) ) ; big integer height = big integer . value of ( aspect ratio . height ( ) ) ; big integer gcd = width . gcd ( height ) ; int numerator = math . max ( width . int value ( ) , height . int value ( ) ) / gcd . int value ( ) ; int denominator = math . min ( width . int value ( ) , height . int value ( ) ) / gcd . int value ( ) ; return new size ( numerator , denominator ) ; }
public void render tree ( ) { render tree ( - num_ ) ; }
public void init with text ( string text , cg size dimensions , cc label . text alignment alignment , string fontname , float font size ) { init with text ( text , dimensions , alignment , fontname , font size , typeface . normal ) ; }
public duration sorter ( boolean ascending ) { super ( ascending ) ; }
private void update value to the root ( bfi node < e > current , bloom filter < e > new value , ins del update statistics stat ) { assert current != null ; current . value . or bloom filter ( new value ) ; stat . nb bf accessed += num_ ; if ( current . parent != null ) { update value to the root ( current . parent , new value , stat ) ; } }
public double pdf ( int k ) { return arithmetic . binomial ( my _s , k ) * arithmetic . binomial ( my _ n - my _s , my _n - k ) / arithmetic . binomial ( my _ n , my _n ) ; }
public boolean needs input ( ) { return len <= num_ ; }
public static double [ ] minmax ( list < double > values ) { if ( values . size ( ) == num_ ) { return new double [ num_ ] ; } double min = values . get ( num_ ) ; double max = min ; int length = values . size ( ) ; for ( int i = num_ ; i < length ; i ++ ) { double value = values . get ( i ) ; min = math . min ( min , value ) ; max = math . max ( max , value ) ; } return new double [ ] { min , max } ; }
public node element at ( int i ) { if ( null == m _map ) return null ; return m _map [ i ] ; }
public random access stream open random access ( ) throws io exception { return get wrapped path ( ) . open random access ( ) ; }
public static string capitalize ( string expression ) { return objects . require non null ( expression , str_ ) . is empty ( ) ? expression : expression . substring ( num_ , num_ ) . to upper case ( ) + expression . substring ( num_ ) ; }
public final void yybegin ( int new state ) { zz lexical state = new state ; }
private void cleanup cache ( ) { if ( delegation cache . size ( ) > num_ ) { delegation cache . clear ( ) ; if ( delegation manager . debug . message enabled ( ) ) { delegation manager . debug . message ( str_ ) ; } } if ( subject evaluation cache . subject eval cache ttl > num_ && ! subject evaluation cache . subject evaluation cache . is empty ( ) ) { subject evaluation cache . subject evaluation cache . clear ( ) ; if ( delegation manager . debug . message enabled ( ) ) { delegation manager . debug . message ( str_ ) ; } } }
void _ _clear temp sta device list ( ) ;
void on scrolling finished ( wheel view wheel ) ;
private void decrease counter ( notify context notify context ) { if ( notify context . count dec ( ) ) { try { _filter manager . invoke filters ( filter operation codes . afte r_ al l_ notif y_ trigger , null , notify context ) ; } catch ( exception e ) { if ( _logger . is loggable ( level . fine ) ) _logger . log ( level . fine , str_ , e ) ; } } }
public triangle mesh add mesh ( mesh 3 d m ) { for ( face f : m . get faces ( ) ) { add face ( f . a , f . b , f . c , f . uv a , f . uv b , f . uv c ) ; } return this ; }
void before ( ) { if ( config . circuit breaker != null && ! config . circuit breaker . allows execution ( ) ) { completed = bool_ ; exception failure = new circuit breaker open exception ( ) ; if ( config != null ) config . handle complete ( null , failure , this , bool_ ) ; future . complete ( null , failure , config . fallback , bool_ ) ; return ; } if ( complete called && config != null ) config . handle retry ( last result , last failure , this ) ; super . before ( ) ; complete called = bool_ ; retry called = bool_ ; }
public boolean has binary attributes ( ) { return bool_ ; }
public inflater input stream ( input stream in , inflater inf ) { this ( in , inf , num_ ) ; }
public static int to unsigned short ( byte b 0 , byte b 1 ) { return ( ( b 0 & num_ ) << num_ ) | ( b 1 & num_ ) ; }
public void add to picking queue ( visual item item ) { if ( pitems . length == psize ) { int capacity = ( num_ * pitems . length ) / num_ + num_ ; visual item [ ] q = new visual item [ capacity ] ; int [ ] s = new int [ capacity ] ; system . arraycopy ( pitems , num_ , q , num_ , psize ) ; system . arraycopy ( pscores , num_ , s , num_ , psize ) ; pitems = q ; pscores = s ; } pitems [ psize ] = item ; pscores [ psize ++ ] = ( sort != null ? sort . score ( item ) : num_ ) ; psorted = bool_ ; }
private list < entry > reduce with douglas peuker ( list < entry > entries , double epsilon ) { if ( epsilon <= num_ || entries . size ( ) < num_ ) { return entries ; } keep [ num_ ] = bool_ ; keep [ entries . size ( ) - num_ ] = bool_ ; algorithm douglas peucker ( entries , epsilon , num_ , entries . size ( ) - num_ ) ; list < entry > reduced entries = new array list < > ( ) ; for ( int i = num_ ; i < entries . size ( ) ; i ++ ) { if ( keep [ i ] ) { entry cur entry = entries . get ( i ) ; reduced entries . add ( new entry ( cur entry . get val ( ) , cur entry . get x index ( ) ) ) ; } } return reduced entries ; }
public static script to script to transfer object ( script script ) { script to ret = new script to ( ) ; ret . set comments ( script . get comments ( ) ) ; ret . set created ( script . get created ( ) ) ; ret . set creator ( script . get creator ( ) ) ; ret . set id ( script . get id ( ) ) ; ret . set modified ( script . get modified ( ) ) ; ret . set name ( script . get name ( ) ) ; ret . set product name ( script . get product name ( ) ) ; ret . set runtime ( script . get runtime ( ) ) ; ret . set steps ( script steps to transferobject list ( script . get script steps ( ) ) ) ; return ret ; }
public unit bezier ( float c 0x , float c 0y , float c 1x , float c 1y ) { m x fn = new cubic bezier fn ( c 0x , c 1x ) ; m y fn = new cubic bezier fn ( c 0y , c 1y ) ; }
public void reboot ( list < vm information > vm infos ) ;
void on completed ( graph user user , response response ) ;
private void check is initialized ( ) { preconditions . check not null ( box drop exporter config , get class ( ) . get simple name ( ) + str_ ) ; }
public circle flow indicator ( context context , attribute set attrs ) { super ( context , attrs ) ; typed array a = context . obtain styled attributes ( attrs , r . styleable . circle flow indicator ) ; int active type = a . get int ( r . styleable . circle flow indicator _active type , styl e_ fill ) ; int active default color = num_ ; int active color = a . get color ( r . styleable . circle flow indicator _active color , active default color ) ; int inactive type = a . get int ( r . styleable . circle flow indicator _inactive type , styl e_ stroke ) ; int inactive default color = num_ ; int inactive color = a . get color ( r . styleable . circle flow indicator _inactive color , inactive default color ) ; radius = a . get dimension ( r . styleable . circle flow indicator _radius , num_ ) ; circle separation = a . get dimension ( r . styleable . circle flow indicator _circle separation , num_ * radius + radius ) ; active radius = a . get dimension ( r . styleable . circle flow indicator _active radius , num_ ) ; fade out time = a . get int ( r . styleable . circle flow indicator _fade out , num_ ) ; m centered = a . get boolean ( r . styleable . circle flow indicator _centered , bool_ ) ; init colors ( active color , inactive color , active type , inactive type ) ; }
void on processing complete ( ) ;
private void init ( output stream out , string encoding ) throws unsupported encoding exception , io exception { internal out = new output stream writer ( out , encoding ) ; if ( str_ . equals ( encoding ) ) { if ( get write utf 8 bom ( ) ) { out . write ( ut f 8 _ bom , num_ , ut f 8 _ bom . length ) ; } } else if ( str_ . equals ( encoding ) ) { out . write ( ut f 1 6 l e_ bom , num_ , ut f 1 6 l e_ bom . length ) ; } else if ( str_ . equals ( encoding ) ) { out . write ( ut f 1 6 b e_ bom , num_ , ut f 1 6 b e_ bom . length ) ; } else if ( str_ . equals ( encoding ) ) { out . write ( ut f 3 2 l e_ bom , num_ , ut f 3 2 l e_ bom . length ) ; } else if ( str_ . equals ( encoding ) || str_ . equals ( encoding ) ) { out . write ( ut f 3 2 b e_ bom , num_ , ut f 3 2 b e_ bom . length ) ; } }
private void process form field begin ( ) { current field position ++ ; form field field = form fields . get ( current field position ) ; slick form submit button . set text ( field . get step label ( ) ) ; slick field container . set visibility ( view . visible ) ; slick field container . set alpha ( num_ ) ; slick field container . animate ( ) . translation y ( slick form submit button . get y ( ) ) . alpha ( num_ ) ; apply slide down animation to ( slick form submit button ) ; slick field container . add view ( field ) ; }
public static boolean is torrent save folder path valid ( boolean check exist , file folder ) { if ( check exist ) { if ( ! ( folder . exists ( ) && folder . is directory ( ) && folder . can write ( ) ) ) { error message = i 1 8n . tr ( str_ ) ; return bool_ ; } } string lower case folder path = folder . get absolute path ( ) . to lower case ( ) ; if ( os utils . is windows ( ) && lower case folder path . contains ( system . getenv ( str_ ) . to lower case ( ) ) ) { return bool_ ; } return bool_ ; }
public static properties read properties ( input stream in , properties defaults ) throws io exception { properties result = new properties ( defaults ) ; try { result . load ( in ) ; } finally { in . close ( ) ; } return result ; }
public boolean can be long address ( int address ) { return is long address ( address ) ; }
public workbench request ( repository repository , http servlet request request , map < string , string > defaults ) throws repository exception , io exception , file upload exception { super ( request ) ; this . defaults = defaults ; this . decoder = new value decoder ( repository , ( repository == null ) ? simple value factory . get instance ( ) : repository . get value factory ( ) ) ; string url = request . get request url ( ) . to string ( ) ; if ( servlet file upload . is multipart content ( this ) ) { parameters = get multipart parameter map ( ) ; } else if ( request . get query string ( ) == null && url . contains ( str_ ) ) { parameters = get url parameter map ( url ) ; } }
append only stream reader ( distributed log manager dlm ) throws io exception { this . dlm = dlm ; reader = dlm . get input stream ( num_ ) ; current position = num_ ; }
private void process function begin ( tree begin node , map < string , integer > args ) { for ( int i = num_ ; i < begin node . get child count ( ) ; ++ i ) { tree child = begin node . get child ( i ) ; string key = child . get text ( ) . to lower case ( ) ; if ( args . contains key ( key ) ) { integer new value = args . get ( key ) + num_ ; args . put ( key , new value ) ; } if ( child . get type ( ) == delphi lexer . begin ) { process function begin ( child , args ) ; } } }
public boolean remove constraint ( particle constraint 2 d c ) { return constraints . remove ( c ) ; }
boolean should ignore intent ( intent intent ) ;
public int remove entry indexed field ( i entry holder eh , array list < i object info < i entry cache info > > deleted back refs , k field value , int refpos , boolean remove indexed value , i entry cache info p entry ) { if ( _fifo groups index extention == null || ! remove indexed value || field value == null ) return remove entry indexed field _impl ( eh , deleted back refs , field value , refpos , remove indexed value , p entry ) ; else return _fifo groups index extention . remove entry indexed field ( eh , deleted back refs , field value , refpos , remove indexed value , p entry ) ; }
public void disable header ( ) { intermediate header height = num_ ; maximum header height = num_ ; minimum header height = num_ ; large text view . set visibility ( view . gone ) ; ( ( view ) photo view . get parent ( ) ) . set visibility ( view . gone ) ; }
public void test bug 5 7 2 9 ( ) throws exception { if ( version meets minimum ( num_ , num_ ) ) { string value as string = str_ ; create table ( str_ , str_ ) ; this . stmt . execute update ( str_ + value as string + str_ ) ; this . rs = this . conn . prepare statement ( str_ ) . execute query ( ) ; this . rs . next ( ) ; assert true ( this . rs . get object ( num_ ) . to string ( ) . equals ( value as string ) ) ; } }
boolean send ( string device id , map < string , ? > properties , byte [ ] payload , string content type ) ;
private void apply locale ( configuration item item ) { string tooltip = controller access . get message ( locale , ms g_ toolti p_ prefix + item . get key ( ) , new object [ num_ ] ) ; if ( tooltip != null && ! tooltip . starts with ( str_ ) ) { item . set tooltip ( tooltip ) ; } else { item . set tooltip ( null ) ; } string display name = controller access . get message ( locale , ms g_ displaynam e_ prefix + item . get key ( ) , new object [ num_ ] ) ; if ( display name != null && ! display name . starts with ( str_ ) ) { item . set display name ( display name ) ; } else { item . set display name ( null ) ; } }
public void visit type argument ( ) { }
protected void error ( string s ) { err . println ( s ) ; }
private boolean is mineshafter present ( ) { try { class . for name ( str_ ) ; return bool_ ; } catch ( exception e ) { return bool_ ; } }
public string code ( ) { if ( codes == null ) return null ; if ( codes [ shift ] == null ) throw new number format exception ( str_ + shift ) ; return codes [ shift ] ; }
public boolean has largest changestamp ( ) { return has extension ( largest changestamp . class ) ; }
public coap response put ( string payload , int format ) { return synchronous ( format ( new put ( ) . set uri ( uri ) . set payload ( payload ) , format ) ) ; }
public void add ( string key , serializable value ) { list < serializable > entries = data . get ( key ) ; if ( entries == null ) { entries = new array list < serializable > ( ) ; data . put ( key , entries ) ; } entries . add ( value ) ; }
public future < boolean > create lease store if not exists ( ) ;
public string from template ( string template path , map < string , object > params , locale locale ) ;
public default chained executable create batch merge job ( cube segment merge segment , string submitter ) ;
public void roll left ( ) { if ( debug ) { debug . output ( str_ ) ; } do rotate z ( get roll left amount ( ) ) ; }
protected void copy ( object source , object dest ) { flow set fource = ( flow set ) source ; flow set fest = ( flow set ) dest ; fource . copy ( fest ) ; }
public void remove graph model listener ( graph listener listnr ) { m _listeners . remove ( listnr ) ; }
private void show feedback ( string message ) { if ( my host != null ) { my host . show feedback ( message ) ; } else { system . out . println ( message ) ; } }
public ads get demographics query ( vk api client client , user actor actor , int account id , ads get demographics ids type ids type , string ids , string period , string date from , string date to ) { super ( client , str_ , utils . build parametrized type ( list . class , demo stats . class ) ) ; access token ( actor . get access token ( ) ) ; account id ( account id ) ; ids type ( ids type ) ; ids ( ids ) ; period ( period ) ; date from ( date from ) ; date to ( date to ) ; }
public static void take screenshot ( activity activity , file to file ) { if ( activity == null ) { throw new illegal argument exception ( str_ ) ; } if ( to file == null ) { throw new illegal argument exception ( str_ ) ; } bitmap bitmap = null ; try { if ( ! to file . exists ( ) ) { to file . create new file ( ) ; } bitmap = take bitmap unchecked ( activity ) ; write bitmap ( bitmap , to file ) ; } catch ( exception e ) { string message = str_ + to file . get absolute path ( ) + str_ + activity . get class ( ) . get name ( ) ; log . e ( tag , message , e ) ; throw new unable to take screenshot exception ( message , e ) ; } finally { if ( bitmap != null ) { bitmap . recycle ( ) ; } } log . d ( tag , str_ + to file . get absolute path ( ) ) ; }
public void config params ( ) { int height = config . singleton config . get height ( ) ; int width = config . singleton config . get width ( ) ; assert equals ( ( height > num_ ) & ( width > num_ ) , bool_ ) ; }
boolean undo ( i node state ) ;
public void stop enumeration ( enumeration deletion context aws ) { aws . compute enumeration request . enumeration action = enumeration action . stop ; handle enumeration request for deletion ( aws ) ; }
public editable om circle ( om circle omc ) { set graphic ( omc ) ; }
public monster habitat cursor query habitat location ( long id ) { query helper qh = new query helper ( ) ; qh . distinct = bool_ ; qh . table = s . tabl e_ habitat ; qh . columns = null ; qh . selection = s . colum n_ habita t_ locatio n_ id + str_ ; qh . selection args = new string [ ] { string . value of ( id ) } ; qh . group by = null ; qh . having = null ; qh . order by = str_ + s . colum n_ monster s_ sor t_ name + str_ ; qh . limit = null ; return new monster habitat cursor ( wrap join helper ( builder habitat ( qh . distinct ) , qh ) ) ; }
boolean match attribute name ( name name , string q name , match context context ) ;
public static s m_ syste m_ message st r_ skil l_ suc c_ spell atk drain _ instant _ m e_ t o_ b ( int num 0 , string skilltarget , string skillname ) { return new s m_ syste m_ message ( num_ , num 0 , skilltarget , skillname ) ; }
private void compute filters from default ( indicator view state old state ) { filters = new array list < filter > ( ) ; set < string > default filter names = new hash set < string > ( ) ; for ( filter default filter : default filters ) { filters . add ( default filter ) ; if ( default filter . name != null ) default filter names . add ( default filter . name ) ; } if ( old state != null ) { for ( filter old filter : old state . filters ) { if ( old filter . name == null || ! default filter names . contains ( old filter . name ) ) filters . add ( old filter ) ; } } }
private void update action ( ) { int num selected = network panel . get selected model elements ( ) . size ( ) ; if ( num selected > num_ ) { set enabled ( bool_ ) ; } else { set enabled ( bool_ ) ; } }
private void apply on all in range ( example set example set , attribute [ ] all attributes , int min number of features , int max number of features ) throws operator exception { for ( int i = min number of features ; i <= max number of features ; i ++ ) { apply on all with exact number ( example set , all attributes , i ) ; } }
public model ( ) { listener list = new event listener list ( ) ; }
void transmit ( json rpc response response ) ;
public abstract void end packet ( ) ;
public static int binary search ( int [ ] array , int start index , int end index , int value ) { check index for binary search ( array . length , start index , end index ) ; int low = start index , mid = - num_ , high = end index - num_ ; while ( low <= high ) { mid = ( low + high ) > > > num_ ; if ( value > array [ mid ] ) { low = mid + num_ ; } else if ( value == array [ mid ] ) { return mid ; } else { high = mid - num_ ; } } if ( mid < num_ ) { int insert point = end index ; for ( int index = start index ; index < end index ; index ++ ) { if ( value < array [ index ] ) { insert point = index ; } } return - insert point - num_ ; } return - mid - ( value < array [ mid ] ? num_ : num_ ) ; }
public void reset ( ) { is filling = bool_ ; is completed = bool_ ; }
void remove listener ( i results panel listener listener ) ;
public void replace int ( int i , int v ) { _buffer [ i ] = ( byte ) ( v > > num_ ) ; _buffer [ i + num_ ] = ( byte ) ( v > > num_ ) ; _buffer [ i + num_ ] = ( byte ) ( v > > num_ ) ; _buffer [ i + num_ ] = ( byte ) ( v ) ; }
private static void print info ( ignite file system fs , igfs path path ) throws ignite exception { system . out . println ( ) ; system . out . println ( str_ + path + str_ + fs . info ( path ) ) ; }
public void clear ( ) { data change event [ ] events ; synchronized ( this ) { int cols = get column count ( ) ; int rows = get row count ( ) ; events = new data change event [ cols * rows ] ; for ( int row = num_ ; row < rows ; row ++ ) { for ( int col = num_ ; col < cols ; col ++ ) { events [ col + row * cols ] = new data change event ( this , col , row , get ( col , row ) , null ) ; } } this . rows . clear ( ) ; } notify data removed ( events ) ; }
public graph similarity comparator adapter ( ) { }
public void commit ( object config ) throws configuration exception { assert ( config . get class ( ) == config class ) : ( str_ + config . get class ( ) + str_ + config class ) ; set < string > done = new hash set < string > ( ) ; for ( iterator < string > vars = var list . iterator ( ) ; vars . has next ( ) ; ) { string var = vars . next ( ) ; if ( var map . contains key ( var ) ) { commit variable ( config , var , done ) ; } } for ( iterator < string > reqs = required list . iterator ( ) ; reqs . has next ( ) ; ) { string req = reqs . next ( ) ; if ( ! committed . contains ( req ) ) { throw new configuration exception . missing requirement ( req , null , null , - num_ ) ; } } }
public abstract xml stream writer create xml stream writer ( java . io . output stream stream , string encoding ) throws xml stream exception ;
public abstract int order byte to int ( byte [ ] data ) ;
protected void sequence _ t formal parameter ( i serialization context context , t formal parameter semantic object ) { generic sequencer . create sequence ( context , semantic object ) ; }
public static boolean is un available ( i_ s_ resource r , timestamp date time ) { timestamp date = time util . trunc ( date time , time util . trun c_ day ) ; final string where clause = columnnam e_ s_ resource _ id + str_ + str_ + columnnam e_ date from + str_ + str_ + columnnam e_ date to + str_ ; properties ctx = r instanceof po ? ( ( po ) r ) . get ctx ( ) : env . get ctx ( ) ; return new query ( ctx , i_ s_ resource un available . table _ name , where clause , null ) . set parameters ( r . get s_ resource _ id ( ) , r . get a d_ client _ id ( ) , date , date ) . match ( ) ; }
private boolean check mandatory ( j text field text field , string field name ) { if ( ! text field . is enabled ( ) ) { return bool_ ; } string value = text field . get text ( ) ; if ( value == null || value . trim ( ) . equals ( str_ ) ) { j option pane . show message dialog ( this , label util . get string ( str_ , field name ) , label util . get string ( str_ ) , j option pane . erro r_ message ) ; text field . request focus ( ) ; return bool_ ; } return bool_ ; }
private int pop ( ) { if ( output stack top > num_ ) { return output stack [ -- output stack top ] ; } else { return stack | - ( -- owner . input stack top ) ; } }
synchronized void remove unused sets ( ) { attributes pool . size ( ) ; }
public void do link block snapshot session target group ( storage system system , uri snapshot session uri , list < uri > snap session snapshot ur is , string copy mode , boolean targets exist , task completer completer ) throws device controller exception ;
final boolean try match data ( ) { object x = item ; if ( x != null && x != this && cas item ( x , null ) ) { lock support . unpark ( waiter ) ; return bool_ ; } return bool_ ; }
public static avedev projection expression avedev distinct ( string property name ) { return new avedev projection expression ( get prop expr ( property name ) , bool_ ) ; }
public static double map value from range to range ( double value , double from low , double from high , double to low , double to high ) { double from range size = from high - from low ; double to range size = to high - to low ; double value scale = ( value - from low ) / from range size ; return to low + ( value scale * to range size ) ; }
public static bitmap load bitmap ( string file name , int scale ) throws image load exception { return load bitmap ( new file source ( file name ) , scale ) ; }
public action listener ( context context , connection connection , action action , string client handle , string ... additional args ) { this . context = context ; this . c = connection ; this . action = action ; this . client handle = client handle ; this . additional args = additional args ; }
public static final string encode ( byte [ ] binary data ) { return xml utils . ignore line breaks ( ) ? encode ( binary data , integer . ma x_ value ) : encode ( binary data , bas e 6 4 defaultlength ) ; }
public static boolean is supported ( string name ) { return protocols by name . contains key ( name ) ; }
private void copy flds def ( archive flds impl flds ) { archive fld impl nfld = null ; for ( int i = num_ ; i < flds . count ( ) ; i ++ ) { archive fld impl fld = ( archive fld impl ) flds . get ( i ) ; nfld = new archive fld impl ( fld . get id ( ) , fld . get name ( ) , fld . get type ( ) , fld . get len ( ) , fld . is nullable ( ) , fld . get col name ( ) , fld . is doc ( ) , fld . is mult ( ) , fld . get remarks ( ) ) ; try { _flds . add fld ( ( archive fld ) nfld ) ; } catch ( exception e ) { } } }
public disposable object map ( final int initial capacity ) { super ( initial capacity ) ; }
private void before key ( ) throws json exception { scope context = peek ( ) ; if ( context == scope . nonempt y_ object ) { out . append ( str_ ) ; } else if ( context != scope . empt y_ object ) { throw new json exception ( str_ ) ; } newline ( ) ; replace top ( scope . danglin g_ key ) ; }
public boolean is token valid ( sso token token ) { return manager . is valid token ( token ) ; }
protected void close connection ( final operated client connection conn ) { if ( conn != null ) { try { conn . close ( ) ; } catch ( io exception ex ) { log . debug ( str_ , ex ) ; } } }
protected void append and push ( stylesheet handler handler , elem template element elem ) throws sax exception { super . append and push ( handler , elem ) ; elem . set dom back pointer ( handler . get originating node ( ) ) ; handler . get stylesheet ( ) . set template ( ( elem template ) elem ) ; }
void status changed ( i status status ) ;
public int start ( ) { return start ( num_ ) ; }
public void restart gesture ( ) { if ( ! m gesture in progress ) { return ; } stop gesture ( ) ; for ( int i = num_ ; i < ma x_ pointers ; i ++ ) { m start x [ i ] = m current x [ i ] ; m start y [ i ] = m current y [ i ] ; } start gesture ( ) ; }
public synchronized boolean is closed ( ) { return journal writer == null ; }
public void flush ( ) { writer . flush ( ) ; }
public pooling byte array output stream ( byte array pool pool ) { this ( pool , defaul t_ size ) ; }
index request builder prepare index ( string index , string type ) ;
private void move center ( rect f rect , float x , float y , rect f bounds , int view width , int view height , float snap radius ) { float dx = x - rect . center x ( ) ; float dy = y - rect . center y ( ) ; if ( rect . left + dx < num_ || rect . right + dx > view width || rect . left + dx < bounds . left || rect . right + dx > bounds . right ) { dx /= num_ ; m touch offset . x -= dx / num_ ; } if ( rect . top + dy < num_ || rect . bottom + dy > view height || rect . top + dy < bounds . top || rect . bottom + dy > bounds . bottom ) { dy /= num_ ; m touch offset . y -= dy / num_ ; } rect . offset ( dx , dy ) ; snap edges to bounds ( rect , bounds , snap radius ) ; }
public void accept yours ( final int [ ] rows ) { logger . info ( str_ + rows . length + str_ ) ; conflict helper . accept change async ( get selected conflicts ( rows ) , resolve conflicts command . auto resolve type . keep yours , this ) ; }
public void load perspective ( float fovy , float aspect , float near , float far ) { float top = near * ( float ) math . tan ( ( float ) ( fovy * math . pi / num_ ) ) ; float bottom = - top ; float left = bottom * aspect ; float right = top * aspect ; load frustum ( left , right , bottom , top , near , far ) ; }
public boolean is disliked ( string ref ) { return get liking impl ( ref , pre f_ dislike d_ entries ) ; }
public boolean publish record ( r record ) { if ( is open && queue . offer record ( record , bool_ ) ) { return bool_ ; } else { return bool_ ; } }
public final void println ( char ch ) throws io exception { write ( ch ) ; write ( _newline bytes , num_ , _newline bytes . length ) ; if ( _is flush on newline ) { flush ( ) ; } }
protected void pre insert ( e entry ) { }
public boolean can store heat ( i reactor reactor , item stack your stack , int x , int y ) ;
public int hash code ( ) { return num_ ; }
public static int rotate right ( int i , int distance ) { return ( i > > > distance ) | ( i << - distance ) ; }
public void append ( byte [ ] src ) ;
public static void close quietly ( auto closeable closeable ) { if ( closeable != null ) { try { closeable . close ( ) ; } catch ( runtime exception rethrown ) { throw rethrown ; } catch ( exception ignored ) { } } }
public boolean is final ( ) { return modifier . is final ( _method . get modifiers ( ) ) ; }
public string id ( ) { return node id ; }
private static native class < ? > for name 0 ( string name , boolean initialize , class loader loader , class < ? > caller ) throws class not found exception ;
abstract protected abstract mr message new message ( ) ;
public int parameter ( option id option id , int default value ) { super ( option id , integer . value of ( default value ) ) ; }
public static boolean check content can be pulled down ( ptr frame layout frame , view content , view header ) { return ! can child scroll up ( content ) ; }
final public void print ( object v ) { if ( v == null ) write ( _null chars , num_ , _null chars . length ) ; else { string s = v . to string ( ) ; write ( s , num_ , s . length ( ) ) ; } }
private thumbnail tab helper ( tab tab ) { m tab = tab ; m tab . add observer ( m tab observer ) ; m handler = new handler ( ) ; resources res = tab . get window android ( ) . get application context ( ) . get resources ( ) ; m thumbnail width = res . get dimension pixel size ( r . dimen . most _visited _thumbnail _width ) ; m thumbnail height = res . get dimension pixel size ( r . dimen . most _visited _thumbnail _height ) ; on content changed ( ) ; }
public field invert state ( string name ) { this . name = name ; }
private fs permission permission ( igfs file file ) { string perm = file . property ( igfs utils . pro p_ permission , null ) ; if ( perm == null ) return fs permission . get default ( ) ; try { return new fs permission ( ( short ) integer . parse int ( perm , num_ ) ) ; } catch ( number format exception ignore ) { return fs permission . get default ( ) ; } }
synchronized public void register index ( final string name , final i checkpoint protocol btree ) { assert unisolated instance ( ) ; if ( name == null ) throw new illegal argument exception ( ) ; if ( btree == null ) throw new illegal argument exception ( ) ; final byte [ ] key = get key ( name ) ; if ( super . contains ( key ) ) { throw new index exists exception ( name ) ; } final long checkpoint addr = btree . write checkpoint ( ) ; final entry entry = new entry ( name , checkpoint addr , num_ ) ; super . insert ( key , entry serializer . instance . serialize ( entry ) ) ; put on commit list ( name , btree , bool_ ) ; resource manager . open unisolated index ( name ) ; }
public marketplace access type uneligible for operation exception ( string message , string marketplace id ) { super ( message , new object [ ] { marketplace id } ) ; }
public static value getter space predicate < server entry > property less equal ( string property name , comparable < ? > value ) { return property ( property name , less equal ( value ) ) ; }
public cleaner ( string parent name , reference queue < k > queue , map < key holder < k > , v > entry infos , i cleaner listener < v > listener ) { super ( parent name + str_ ) ; _queue = queue ; _table = entry infos ; _listener = listener ; this . set daemon ( bool_ ) ; }
public boolean is callable constructor ( ) { return bool_ ; }
public final void dispatch on draw ( ) { if ( m on draw listeners != null ) { final array list < on draw listener > listeners = m on draw listeners ; int num listeners = listeners . size ( ) ; for ( int i = num_ ; i < num listeners ; ++ i ) { listeners . get ( i ) . on draw ( ) ; } } }
protected boolean is saved connection ( database connection connection ) { nested connection current saved = special connection . get ( ) ; if ( current saved == null ) { return bool_ ; } else if ( current saved . connection == connection ) { return bool_ ; } else { return bool_ ; } }
public boolean enable data connectivity ( ) throws android . os . remote exception { android . os . parcel _data = android . os . parcel . obtain ( ) ; android . os . parcel _reply = android . os . parcel . obtain ( ) ; boolean _result ; try { _data . write interface token ( descriptor ) ; m remote . transact ( stub . transactio n _enable data connectivity , _data , _reply , num_ ) ; _reply . read exception ( ) ; _result = ( num_ != _reply . read int ( ) ) ; } finally { _reply . recycle ( ) ; _data . recycle ( ) ; } return _result ; }
public egl surface create offscreen surface ( int width , int height ) { int [ ] surface attribs = { eg l 1 4 . eg l_ width , width , eg l 1 4 . eg l_ height , height , eg l 1 4 . eg l_ none } ; egl surface egl surface = eg l 1 4 . egl create pbuffer surface ( m egl display , m egl config , surface attribs , num_ ) ; check egl error ( str_ ) ; if ( egl surface == null ) { throw new runtime exception ( str_ ) ; } return egl surface ; }
public placard scroll pane layout ( ) { }
private void resize panels ( ) { }
protected void show tabs ( ) { if ( get page count ( ) > num_ ) { set page text ( num_ , get string ( str_ ) ) ; if ( get container ( ) instanceof c tab folder ) { ( ( c tab folder ) get container ( ) ) . set tab height ( swt . default ) ; point point = get container ( ) . get size ( ) ; get container ( ) . set size ( point . x , point . y - num_ ) ; } } }
public boolean is enabled ( ) { return m enabled ; }
public static final string generate hash ( final string s ) { try { message digest digest = java . security . message digest . get instance ( str_ ) ; digest . update ( s . get bytes ( ) ) ; byte message digest [ ] = digest . digest ( ) ; string buffer hex string = new string buffer ( ) ; for ( int i = num_ ; i < message digest . length ; i ++ ) { string h = integer . to hex string ( num_ & message digest [ i ] ) ; while ( h . length ( ) < num_ ) h = str_ + h ; hex string . append ( h ) ; } return hex string . to string ( ) ; } catch ( no such algorithm exception e ) { e . print stack trace ( ) ; } return str_ ; }
public matrix array right divide equals ( matrix b ) { check matrix dimensions ( b ) ; for ( int i = num_ ; i < m ; i ++ ) { for ( int j = num_ ; j < n ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] / b . a [ i ] [ j ] ; } } return this ; }
private void dump vdc object ( virtual data center vdc ) { log . info ( str_ , vdc . get id ( ) ) ; log . info ( str_ , vdc . get short id ( ) ) ; log . info ( str_ , vdc . get version ( ) ) ; log . info ( str_ , vdc . get host count ( ) ) ; log . info ( str_ , vdc . get local ( ) ) ; log . info ( str_ , vdc . get connection status ( ) ) ; }
private rect f view to source rect ( rect f v rect ) { point f s lt = view to source coord ( new point f ( v rect . left , v rect . top ) ) ; point f s rb = view to source coord ( new point f ( v rect . right , v rect . bottom ) ) ; return new rect f ( s lt . x , s lt . y , s rb . x , s rb . y ) ; }
public void append byte ( int val ) { buf [ pos ++ ] = ( byte ) val ; }
int size ( ) ;
private progress dialog create progress dialog ( ) { progress dialog dialog = new progress dialog ( m activity ) ; dialog . set indeterminate ( bool_ ) ; dialog . set progress style ( progress dialog . styl e_ spinner ) ; dialog . set canceled on touch outside ( bool_ ) ; dialog . set cancelable ( bool_ ) ; return dialog ; }
public promise < void > replace stream ( counted reference < web rtc media stream > media stream ) { return ask ( new peer connection actor . replace stream ( media stream . acquire ( ) ) ) ; }
public static name and tags search in names ( context ctx , string term , int max distance ) { map < string , name and tags > names search index = application . get name search index ( ctx ) ; name and tags result = null ; int last distance = integer . ma x_ value ; term = search index utils . normalize ( term ) ; for ( string n : names search index . key set ( ) ) { int distance = optimal string alignment . edit distance ( n , term , max distance ) ; if ( distance >= num_ && distance <= max distance ) { if ( distance < last distance ) { result = names search index . get ( n ) ; last distance = distance ; if ( distance == num_ ) { return result ; } } } } return result ; }
private static void check valid importable file ( psi element anchor , virtual file file ) { final qualified name q name = qualified name finder . find shortest importable q name ( anchor , file ) ; if ( ! py class refactoring util . is valid qualified name ( q name ) ) { throw new incorrect operation exception ( py bundle . message ( str_ , file . get name ( ) ) ) ; } }
protected abstract mixer ( mixer . info mixer info , control [ ] controls , line . info [ ] source line info , line . info [ ] target line info ) { super ( new line . info ( mixer . class ) , null , controls ) ; this . mixer = this ; if ( controls == null ) { controls = new control [ num_ ] ; } this . mixer info = mixer info ; this . source line info = source line info ; this . target line info = target line info ; }
protected expression plus ( int op pos ) throws transformer exception { return compile operation ( new plus ( ) , op pos ) ; }
public void post open init ( ) { if ( persistent data . is empty ( ) ) { return ; } vector to token dict = new n tree ( persistent data . get ( num_ ) . get dimension ( ) ) ; for ( data point point : persistent data ) { vector to token dict . add ( point ) ; } }
public expressions adapter factory ( ) { if ( model package == null ) { model package = expressions package . e instance ; } }
public static int find last visible item position ( recycler view rv ) { recycler view . layout manager lm = rv . get layout manager ( ) ; int last visible item position = recycler view . n o_ position ; if ( lm instanceof grid layout manager ) { last visible item position = ( ( grid layout manager ) lm ) . find last visible item position ( ) ; } else if ( lm instanceof linear layout manager ) { last visible item position = ( ( linear layout manager ) lm ) . find last visible item position ( ) ; } else if ( lm instanceof staggered grid layout manager ) { int positions [ ] = ( ( staggered grid layout manager ) lm ) . find last visible item positions ( null ) ; for ( int pos : positions ) { if ( pos > last visible item position ) { last visible item position = pos ; } } } return last visible item position ; }
public boolean remove listener ( animator . animator listener listener ) { return m listeners . remove ( listener ) ; }
public static string commit ( string ... args ) { return simple tag ( str_ , args ) ; }
private void create center panel ( ) { statu s_ component = new status component ( ) ; _center component = new j label ( ) ; _center panel = new j panel ( new grid bag layout ( ) ) ; _center panel . set opaque ( bool_ ) ; statu s_ component . set progress preferred size ( new dimension ( num_ , num_ ) ) ; grid bag constraints gbc = new grid bag constraints ( ) ; gbc . gridx = num_ ; gbc . gridy = num_ ; gbc . weightx = num_ ; gbc . fill = grid bag constraints . none ; gbc . anchor = grid bag constraints . center ; _center panel . add ( statu s_ component , gbc ) ; _center panel . add mouse listener ( statu s_ ba r_ listener ) ; statu s_ component . add mouse listener ( statu s_ ba r_ listener ) ; }
public int decrement and get ( t obj ) { for ( ; ; ) { int current = get ( obj ) ; int next = current - num_ ; if ( compare and set ( obj , current , next ) ) return next ; } }
private void create dep check box ( composite container ) { dep check = new button ( container , swt . check ) ; grid data grid data = new grid data ( ) ; grid data . grab excess horizontal space = bool_ ; grid data . horizontal indent = num_ ; grid data . vertical indent = num_ ; grid data . horizontal span = num_ ; grid data . horizontal alignment = swt . fill ; dep check . set text ( messages . dep chk box ) ; dep check . set layout data ( grid data ) ; }
private void show override comment text ( ) { sash form . set maximized control ( null ) ; sash form . set weights ( new int [ ] { num_ , num_ } ) ; }
public boolean is write locked by current thread ( ) { return sync . is held exclusively ( ) ; }
public int size ( ) { return n ; }
public boolean is connected ( string client handle ) { mqtt connection client = get connection ( client handle ) ; return client . is connected ( ) ; }
void on main activity resumed ( ) ;
public void random number ( ) throws io exception { print ( str_ , null ) ; }
public static image resize ( final image source , final int new width , final int new height ) { if ( source == null ) { return null ; } if ( source . is disposed ( ) ) { swt . error ( swt . erro r_ widge t_ disposed ) ; } final image scaled image = new image ( source . get device ( ) , new width , new height ) ; final gc gc = new gc ( scaled image ) ; gc . set antialias ( swt . on ) ; gc . set interpolation ( swt . high ) ; gc . draw image ( source , num_ , num_ , source . get bounds ( ) . width , source . get bounds ( ) . height , num_ , num_ , new width , new height ) ; gc . dispose ( ) ; return scaled image ; }
private static byte expected norm ( final classic similarity sim , final int length , final float boost ) { return ( byte ) sim . encode norm value ( boost / ( ( float ) math . sqrt ( length ) ) ) ; }
public void trace method calls ( boolean enable ) { }
public synchronized void add listener ( exception event listener listener ) { if ( ! this . listeners . contains ( listener ) ) { this . listeners . add ( listener ) ; } }
public void new processing instruction ( string target , reader reader ) { }
public list < type > lower bound argtypes ( type t ) { return lower bounds ( t . get parameter types ( ) ) ; }
public static chaining xml memory parser parse xml ( document document ) { return new chaining xml memory parser ( document ) ; }
private source section ( string kind , string identifier ) { this . source = null ; this . kind = kind ; this . identifier = identifier ; this . start line = - num_ ; this . start column = - num_ ; this . char index = - num_ ; this . char length = - num_ ; }
public show priorities action ( final network panel network panel ) { super ( str_ ) ; if ( network panel == null ) { throw new illegal argument exception ( str_ ) ; } this . network panel = network panel ; put value ( shor t_ description , str_ ) ; }
public mp 4 box header ( byte buffer header data ) { update ( header data ) ; }
public void on net connected ( net utils . net type type ) { }
big integer add ( long val ) { if ( val == num_ ) return this ; if ( signum == num_ ) return value of ( val ) ; if ( long . signum ( val ) == signum ) return new big integer ( add ( mag , math . abs ( val ) ) , signum ) ; int cmp = compare magnitude ( val ) ; if ( cmp == num_ ) return zero ; int [ ] result mag = ( cmp > num_ ? subtract ( mag , math . abs ( val ) ) : subtract ( math . abs ( val ) , mag ) ) ; result mag = trusted strip leading zero ints ( result mag ) ; return new big integer ( result mag , cmp == signum ? num_ : - num_ ) ; }
public java . sql . callable statement prepare call ( string sql ) throws sql exception { check closed ( ) ; try { return callable statement wrapper . get instance ( this , this . pooled connection , this . mc . prepare call ( sql ) ) ; } catch ( sql exception sql exception ) { check and fire connection error ( sql exception ) ; } return null ; }
public h 2 6 4 stream ( int camera id ) { super ( camera id ) ; m mime type = str_ ; m camera image format = image format . n v 2 1 ; m video encoder = media recorder . video encoder . h 2 6 4 ; m packetizer = new h 2 6 4 packetizer ( ) ; }
public void add candy ( pokemon family id family , int amount ) { if ( candies . contains key ( family ) ) { candies . put ( family , candies . get ( family ) + amount ) ; } else { candies . put ( family , amount ) ; } }
public string use cross validation tip text ( ) { return str_ + str_ + str_ + str_ ; }
public request handle head ( context context , string url , header [ ] headers , request params params , response handler interface response handler ) { http uri request request = new http head ( get url with query string ( is url encoding enabled , url , params ) ) ; if ( headers != null ) request . set headers ( headers ) ; return send request ( http client , http context , request , null , response handler , context ) ; }
private void update progress ( int progress ) { if ( my host != null && progress != previous progress ) { my host . update progress ( progress ) ; } previous progress = progress ; }
public connector handle ( connector connector , connection figure prototype ) { super ( connector . get owner ( ) ) ; this . connector = connector ; this . prototype = prototype ; }
public int session ( ) { return integer . parse int ( fields [ num_ ] ) ; }
public boolean is mutable ( ) { return is mutable ; }
public logging listener ( ) { level = level . debug ; }
boolean move to previous ( ) ;
private static string unroll ( list iterator < ? > it ) { if ( it . has previous ( ) ) { it . previous ( ) ; } if ( ! it . has next ( ) ) { return str_ ; } string builder sb = new string builder ( ) ; sb . append ( it . next ( ) ) ; while ( it . has next ( ) ) { sb . append ( str_ ) . append ( it . next ( ) ) ; } return sb . to string ( ) ; }
public source clip bo ( klv packet . header header , byte provider byte provider , map < integer , mxfuid > local tag to uid map , imf error logger imf error logger ) throws io exception { super ( header ) ; long num bytes to read = this . header . get v size ( ) ; structural metadata . populate ( this , byte provider , num bytes to read , local tag to uid map ) ; if ( this . instance _uid == null ) { imf error logger . add error ( imf error logger . imf errors . error codes . im f_ essenc e_ metadat a_ error , imf error logger . imf errors . error levels . no n_ fatal , source clip . erro r_ descriptio n_ prefix + str_ ) ; } if ( this . source _package _id == null ) { imf error logger . add error ( imf error logger . imf errors . error codes . im f_ essenc e_ metadat a_ error , imf error logger . imf errors . error levels . no n_ fatal , source clip . erro r_ descriptio n_ prefix + str_ ) ; } if ( this . duration == null ) { imf error logger . add error ( imf error logger . imf errors . error codes . im f_ essenc e_ metadat a_ error , imf error logger . imf errors . error levels . no n_ fatal , source clip . erro r_ descriptio n_ prefix + str_ ) ; } }
public void add date ( date date ) { get dates ( ) . add ( date ) ; }
void clear ( ) ;
public static string make link auto ( servlet context servlet context , http servlet request request , http servlet response response , string uri ) { request handler rh = request handler . get request handler ( servlet context ) ; return rh . make link auto ( request , response , uri , null , null , null , null , null , null , null ) ; }
public boolean add all unique ( collection < playlist > ps ) { boolean did change = bool_ ; for ( playlist p : ps ) { if ( p != null && ! m playlists . contains ( p ) ) { m playlists . add ( p ) ; did change = bool_ ; } } if ( did change ) { notify data set changed ( ) ; } return did change ; }
boolean is inside ( int cross ) { if ( rule == win d_ no n_ zero ) { return shape util . is inside non zero ( cross ) ; } return shape util . is inside even odd ( cross ) ; }
private int fp offset 2 sp offset ( int fp offset ) { return frame size + fp offset - wordsize ; }
c module create module ( sql provider provider , i navi raw module raw module ) throws couldnt load data exception , couldnt save data exception ;
private void write value ( value value ) throws io exception , rdf handler exception { if ( value instanceof iri ) { iri uri = ( iri ) value ; xml writer . text element ( ur i_ tag , uri . to string ( ) ) ; } else if ( value instanceof b node ) { b node b node = ( b node ) value ; xml writer . text element ( bnod e_ tag , b node . get id ( ) ) ; } else if ( value instanceof literal ) { literal literal = ( literal ) value ; iri datatype = literal . get datatype ( ) ; if ( literals . is language literal ( literal ) ) { xml writer . set attribute ( languag e_ att , literal . get language ( ) . get ( ) ) ; xml writer . text element ( plai n_ litera l_ tag , literal . get label ( ) ) ; } else { xml writer . set attribute ( datatyp e_ att , datatype . to string ( ) ) ; xml writer . text element ( type d_ litera l_ tag , literal . get label ( ) ) ; } } else { throw new rdf handler exception ( str_ + value . get class ( ) ) ; } }
public void test _ select left outer join ( ) throws sql exception { string sql = str_ + database creator . customer s_ table + str_ + database creator . salespeopl e_ table + str_ ; result set result = statement . execute query ( sql ) ; hash map < integer , integer > value = new hash map < integer , integer > ( ) ; value . put ( num_ , num_ ) ; value . put ( num_ , num_ ) ; value . put ( num_ , num_ ) ; value . put ( num_ , num_ ) ; value . put ( num_ , num_ ) ; while ( result . next ( ) ) { int key = result . get int ( str_ ) ; object val = result . get object ( str_ ) ; assert true ( str_ , value . contains key ( key ) ) ; assert equals ( str_ , value . get ( key ) , ( integer ) val ) ; value . remove ( key ) ; } assert true ( str_ , value . is empty ( ) ) ; result . close ( ) ; }
public static void log no more articles ( final logger logger , final archive description archive ) { logger . log message ( level . info , str_ + archive . to string ( ) + str_ ) ; }
public final object evaluate reader ( scriptable scope , reader in , string source name , int lineno , object security domain ) throws io exception { script script = compile reader ( scope , in , source name , lineno , security domain ) ; if ( script != null ) { return script . exec ( this , scope ) ; } else { return null ; } }
public boolean is streaming ( ) { return bool_ ; }
public void add music folder path ( string folder path ) { if ( folder path . contains ( str_ ) ) { folder path = folder path . replace ( str_ , str_ ) ; } content values values = new content values ( ) ; values . put ( folde r_ path , folder path ) ; get database ( ) . insert ( musi c_ folder s_ table , null , values ) ; }
public void on update ( ) { this . prev pos x = this . pos x ; this . prev pos y = this . pos y ; this . prev pos z = this . pos z ; if ( this . particle age ++ >= this . particle max age ) { this . set expired ( ) ; } this . set particle texture index ( num_ - this . particle age * num_ / this . particle max age ) ; this . move entity ( this . motion x , this . motion y , this . motion z ) ; this . motion x *= num_ ; this . motion y *= num_ ; this . motion z *= num_ ; }
range scan uploader result scan and upload ( int task id , scan options scan options , string placement , scan range scan range , table set table set ) throws io exception , interrupted exception ;
public int next ( int context , int current ) { int subtree root ident = make node identity ( context ) ; for ( current = make node identity ( current ) - num_ ; current >= num_ ; current -- ) { short type = _type ( current ) ; if ( attribut e_ node == type || namespac e_ node == type || is ancestor ( subtree root ident , current ) ) continue ; return make node handle ( current ) ; } return null ; }
public boolean is outer shell ( ) { return get outer hole ( ) != null ; }
protected void validate state ( state current state ) { validation utils . validate state ( current state ) ; }
public static string format stack trace element ( stack trace element element ) { return string . format ( str_ , element . get class name ( ) . replace ( str_ , str_ ) , element . get method name ( ) , element . get line number ( ) ) ; }
public simple job service ( string name , int max threads , int max requests , int keep alive ) { blocking queue < runnable > queue = new linked blocking queue < runnable > ( max requests ) ; thread factory factory = new simple thread factory ( name ) ; pool = new thread pool executor ( max threads , max threads , keep alive , time unit . seconds , queue , factory ) ; }
public static _ fields find by thrift id or throw ( int field id ) { _ fields fields = find by thrift id ( field id ) ; if ( fields == null ) throw new illegal argument exception ( str_ + field id + str_ ) ; return fields ; }
public element rule ( string name , xml syntax rule [ ] rules ) { this . name = name ; this . rules = rules ; }
void on position changed ( base fragment pager adapter adapter , fragment data data , int old pos , int new pos ) ;
private synchronized void before remove ( ) throws io exception { while ( being reconnected ) { if ( state == terminated ) { throw new io exception ( str_ ) ; } try { wait ( ) ; } catch ( interrupted exception ire ) { io exception ioe = new io exception ( ire . to string ( ) ) ; env help . init cause ( ioe , ire ) ; throw ioe ; } } if ( state == terminated ) { throw new io exception ( str_ ) ; } }
public void clear options ( ) { if ( get plugin ( ) == null ) { log ( ) . debug ( str_ ) ; } else { log ( ) . info ( str_ ) ; plugin option container container = get plugin ( ) . get plugin options ( ) ; while ( container . size ( ) > num_ ) { container . remove ( container . get by index ( num_ ) ) ; } } }
public static < b > builder < b > builder ( ) { return new builder < b > ( ) ; }
public void test _solution with all mock i vs ( ) { final i binding set expected = new list binding set ( ) ; expected . set ( var . var ( str_ ) , new constant < iv < ? , ? > > ( mock i v1 ) ) ; expected . set ( var . var ( str_ ) , new constant < iv < ? , ? > > ( mock i v2 ) ) ; expected . set ( var . var ( str_ ) , new constant < iv < ? , ? > > ( mock i v3 ) ) ; do encode decode test ( expected ) ; }
public long transfer to ( long position , long count , writable byte channel target ) throws io exception ;
void clear and send keys ( by by , string text ) ;
public void append entry batch ( byte [ ] buf , int offset , int len ) { if ( size + len + num_ > buffer . length ) { throw new illegal state exception ( str_ ) ; } assert ! is heartbeat ( ) ; byte buffer . put short ( ( short ) len ) ; byte buffer . put ( buf , offset , len ) ; size += len + num_ ; byte buffer . put short ( num_ , ( short ) size ) ; stats . append entry batch ( ) ; if ( message tracing ) { tracing info = string . format ( str_ , term , prev rid . term , prev rid . index + num_ , commit index , size - overhead [ typ e_ appen d_ entr y_ req ] ) ; } num commands ++ ; }
public extension query ( string plugin id , string extension point name , string attribute name ) { this . plugin id = extension point name . contains ( str_ ) ? null : plugin id ; this . extension point name = extension point name ; this . attribute name = attribute name ; }
public void test invoke any 5 ( ) throws throwable { executor service e = new fork join pool ( num_ ) ; pool cleaner cleaner = null ; try { cleaner = cleaner ( e ) ; list < callable < string > > l = new array list < callable < string > > ( ) ; l . add ( new npe task ( ) ) ; try { e . invoke any ( l ) ; should throw ( ) ; } catch ( execution exception success ) { assert true ( success . get cause ( ) instanceof null pointer exception ) ; } } finally { if ( cleaner != null ) { cleaner . close ( ) ; } } }
void remove sku ( long id ) throws exception ;
public static test suite ( ) { final test suite suite = new test suite ( test all . class . get package ( ) . get name ( ) ) ; suite . add test suite ( test slice input stream . class ) ; suite . add test suite ( test byte buffer streams . class ) ; suite . add test suite ( test fixed byte array buffer . class ) ; suite . add test suite ( test byte array buffer . class ) ; suite . add test suite ( test data output buffer . class ) ; return suite ; }
public synchronized void add logger listener ( final logger listener logger listener ) { if ( null == logger listener ) { throw new null pointer exception ( str_ ) ; } if ( null == m _logger listener ) { m _logger listener = logger listener ; } else { final string message = str_ ; throw new unsupported operation exception ( message ) ; } }
public static void main ( string args [ ] ) { string random str = null ; try { byte [ ] bytes = new byte [ num_ ] ; secure random random = secure random . get instance ( str_ ) ; random . next bytes ( bytes ) ; random str = base 6 4 . encode ( bytes ) . trim ( ) ; } catch ( exception e ) { random str = null ; e . print stack trace ( ) ; } if ( random str != null ) { system . out . println ( random str ) ; } }
protected boolean is side branch leaf ( table group join node table ) { if ( ! is required ( table ) || is ancestor ( table ) ) return bool_ ; for ( table group join node descendant : table ) { if ( ( descendant != table ) && is required ( descendant ) ) return bool_ ; } return bool_ ; }
public void add frame ( cc sprite frame frame ) { frames _ . add ( frame ) ; }
public static file write tmp file ( final string prefix , final string suffix , final boolean delete on exit , final list < string > args ) throws io exception { final file tmp file = file . create temp file ( prefix , suffix ) ; if ( delete on exit ) { tmp file . delete on exit ( ) ; } write file ( tmp file , args ) ; return tmp file ; }
void connect and bind ( string host , int port , bind type bind type , string system id , string password , string system type , type of number addr ton , numbering plan indicator addr npi , string address range , long timeout ) throws io exception ;
public static void fill ( short [ ] array , short value ) { for ( int i = num_ ; i < array . length ; i ++ ) { array [ i ] = value ; } }
int size ( ) ;
void fully unlock ( ) { take lock . unlock ( ) ; put lock . unlock ( ) ; }
public simple dialog message ( char sequence message ) { if ( m scroll view == null ) init scroll view ( ) ; if ( m message == null ) init message view ( ) ; if ( m scroll view . get child at ( num_ ) != m message ) { m scroll view . remove all views ( ) ; m scroll view . add view ( m message ) ; } m message . set text ( message ) ; if ( ! text utils . is empty ( message ) ) { m mode = mod e_ message ; super . content view ( m scroll view ) ; } return this ; }
< t > t side input ( p collection view < t > view , bounded window main input window ) ;
private void write long ( long l ) throws io exception { output . write ( ( int ) ( ( l & num_ ) > > > num_ ) ) ; output . write ( ( int ) ( ( l & num_ ) > > > num_ ) ) ; output . write ( ( int ) ( ( l & num_ ) > > > num_ ) ) ; output . write ( ( int ) ( l & num_ ) ) ; }
public json object opt json object ( string key ) { object object = this . opt ( key ) ; return object instanceof json object ? ( json object ) object : null ; }
credit card scanner create ( long native scanner , context context , window android window ) ;
protected void convert instance ( instance instance ) { instance inst ; m _ counter ++ ; try { inst = ( instance ) instance . copy ( ) ; copy values ( inst , bool_ , inst . dataset ( ) , get output format ( ) ) ; inst . set dataset ( null ) ; inst . insert attribute at ( m _ index . get index ( ) ) ; inst . set value ( m _ index . get index ( ) , m _ counter ) ; inst . set dataset ( get output format ( ) ) ; push ( inst ) ; } catch ( exception e ) { e . print stack trace ( ) ; } }
public string process ( string to _process ) { if ( to _process == null || to _process . length ( ) == num_ ) return str_ ; string buffer bs = new string buffer ( to _process . length ( ) + num_ ) ; string character iterator sci = new string character iterator ( to _process ) ; string tmp = null ; for ( char c = sci . first ( ) ; c != character iterator . done ; c = sci . next ( ) ) { tmp = string . value of ( c ) ; if ( has attribute ( tmp ) ) tmp = ( string ) this . get ( tmp ) ; int ii = c ; if ( ii > num_ ) tmp = str_ + ii + str_ ; bs . append ( tmp ) ; } return ( bs . to string ( ) ) ; }
public void add ( renderable item ) { this . add ( item , null ) ; }
private void show feedback ( string message ) { if ( my host != null ) { my host . show feedback ( message ) ; } else { system . out . println ( message ) ; } }
public boolean intersects segment ( vec 3 end point 1 , vec 3 end point 2 ) { if ( end point 1 == null || end point 2 == null ) { throw new illegal argument exception ( logger . log message ( logger . error , str_ , str_ , str_ ) ) ; } double distance 1 = this . dot ( end point 1 ) ; double distance 2 = this . dot ( end point 2 ) ; return distance 1 * distance 2 <= num_ ; }
private boolean use udp messaging if necessary ( ) { boolean result = bool_ ; internal distributed system sys = cache . get distributed system ( ) ; if ( sys != null && ! sys . thread owns resources ( ) ) { sys . get distribution manager ( ) . force udp messaging for current thread ( ) ; result = bool_ ; } return result ; }
protected void try run next worker ( ) { i worker pp ; if ( ! can spawn another process ( ) ) return ; pp = get next worker ( ) ; if ( pp == null ) return ; get running workers ( ) . add ( pp ) ; get status info ( ) . set status ( worker manager status . status . statu s_ working ) ; pp . process ( this , _es ) ; if ( can spawn another process ( ) ) try run next worker ( ) ; }
public static void launch settings page ( context context , string fragment name ) { intent intent = create intent for settings page ( context , fragment name ) ; context . start activity ( intent ) ; }
public int from ( ) { return v ; }
public static column from ord ( int i ) { if ( ( i < num_ ) || ( i >= column . values ( ) . length ) ) { throw new index out of bounds exception ( str_ ) ; } return column . values ( ) [ i ] ; }
public void test set options ( ) { if ( ! tes t_ optio n_ handling ) return ; if ( m _ option tester loader . get option handler ( ) != null ) { if ( ! m _ option tester loader . check set options ( ) ) fail ( str_ ) ; } if ( m _ option tester saver . get option handler ( ) != null ) { if ( ! m _ option tester saver . check set options ( ) ) fail ( str_ ) ; } }
public natural ranking ( na n strategy nan strategy , random generator random generator ) { super ( ) ; this . nan strategy = nan strategy ; this . ties strategy = ties strategy . random ; random data = random data generator . of ( random generator ) ; }
public void update ( byte input ) { digest . update ( input ) ; }
public boolean is number ( ) { return bool_ ; }
public void reset values ( ) { delegate . reset values ( ) ; }
private void paint pressed ( graphics 2 d g , j component c , int width , int height ) { paint menu ( g , c , width , height , pressed ) ; }
public void filter ( geometry geom ) { if ( geom instanceof line string ) { line string line = ( line string ) geom ; if ( line . is empty ( ) ) return ; int min size = ( ( line string ) line ) . is closed ( ) ? num_ : num_ ; tagged line string tagged line = new tagged line string ( ( line string ) line , min size ) ; linestring map . put ( line , tagged line ) ; } }
public static user list create user list ( final string raw json ) throws twitter exception { try { final json object json = new json object ( raw json ) ; return user list constructor . new instance ( json ) ; } catch ( final instantiation exception e ) { throw new twitter exception ( e ) ; } catch ( final illegal access exception e ) { throw new assertion error ( e ) ; } catch ( final invocation target exception e ) { throw new twitter exception ( e ) ; } catch ( final json exception e ) { throw new twitter exception ( e ) ; } }
public static key store create root certificate key store ( string key store type , x 5 0 9 certificate certificate , string private key alias , private key private key , string private key password , string provider ) { if ( private key password == null ) { throw new illegal argument exception ( str_ ) ; } key store new key store = key store util . create empty key store ( key store type , provider ) ; try { new key store . set key entry ( private key alias , private key , private key password . to char array ( ) , new certificate [ ] { certificate } ) ; } catch ( key store exception e ) { throw new key store access exception ( str_ , e ) ; } return new key store ; }
public void async skip entries ( int num entries to skip , individual deleted entries deleted entries , final skip entries callback callback , object ctx ) ;
public void table changed ( table model event e ) ;
public string min term freq tip text ( ) { return str_ + str_ ; }
boolean add gift to cart ( string sku , big decimal quantity , string promotion code ) ;
public item adapter < item > remove range ( int position , int item count ) { if ( m original items != null ) { int length = m original items . size ( ) ; int pre item count = get fast adapter ( ) . get pre item count ( position ) ; int save item count = math . min ( item count , length - position + pre item count ) ; for ( int i = num_ ; i < save item count ; i ++ ) { m original items . remove ( position - pre item count ) ; } perform filtering ( m constraint ) ; return item adapter . this ; } else { return item adapter . this . remove range ( position , item count ) ; } }
public j matrix times ( double s ) { j matrix x = new j matrix ( m , n ) ; double [ ] [ ] c = x . get array ( ) ; for ( int i = num_ ; i < m ; i ++ ) { for ( int j = num_ ; j < n ; j ++ ) { c [ i ] [ j ] = s * a [ i ] [ j ] ; } } return x ; }
public static cache builder spec parse ( string cache builder specification ) { cache builder spec spec = new cache builder spec ( cache builder specification ) ; if ( ! cache builder specification . is empty ( ) ) { for ( string key value pair : key s_ splitter . split ( cache builder specification ) ) { list < string > key and value = immutable list . copy of ( ke y_ valu e_ splitter . split ( key value pair ) ) ; check argument ( ! key and value . is empty ( ) , str_ ) ; check argument ( key and value . size ( ) <= num_ , str_ , key value pair ) ; string key = key and value . get ( num_ ) ; value parser value parser = valu e_ parsers . get ( key ) ; check argument ( value parser != null , str_ , key ) ; string value = key and value . size ( ) == num_ ? null : key and value . get ( num_ ) ; value parser . parse ( spec , key , value ) ; } } return spec ; }
private void call on load ( ) { if ( ! jni on load . is zero ( ) ) { int version = run jn i_ on load ( jni on load ) ; check jni version ( version ) ; } }
gregorian calendar ( time zone zone , locale locale , boolean flag ) { super ( zone , locale ) ; gdate = ( base calendar . date ) gcal . new calendar date ( get zone ( ) ) ; }
public lower case tokenizer factory ( map < string , string > args ) { super ( args ) ; if ( ! args . is empty ( ) ) { throw new illegal argument exception ( str_ + args ) ; } }
public boolean is yoyo ( ) { return is yoyo ; }
protected void close cache callback ( cache callback cb ) { if ( cb != null ) { try { cb . close ( ) ; } catch ( runtime exception ex ) { logger . warn ( localized message . create ( localized strings . abstract region _ cachecallbac k_ clos e_ exception ) , ex ) ; } } }
public new session action ( ) { super ( str_ ) ; }
public static int convert to dip ( display metrics display metrics , int size in pixels ) { return ( int ) typed value . apply dimension ( typed value . comple x_ uni t_ dip , size in pixels , display metrics ) ; }
i index register index ( string name , b tree btree ) ;
public static competitive properties panel create competitive properties panel ( final network panel np , final competitive props panel type panel type ) throws illegal argument exception { competitive properties panel cpp = new competitive properties panel ( np , panel type ) ; cpp . add listeners ( ) ; return cpp ; }
boolean supports change notification ( dn base dn ) throws ldap exception ;
public static < t > parallel flux < t > from ( publisher < ? extends t > source ) { return from ( source , runtime . get runtime ( ) . available processors ( ) , queue supplier . smal l_ buffe r_ size , queue supplier . small ( ) ) ; }
public ab outer scroll view ( context context , attribute set attrs ) { super ( context , attrs ) ; m gesture detector = new gesture detector ( new y scroll detector ( ) ) ; set fading edge length ( num_ ) ; }
public void try to delete video sharings ( contact id contact ) { m video sharing delete operation handler . post ( new video sharing delete task ( m video sharing service , this , m local content resolver , contact ) ) ; }
protected void merge ( object in 1 , object in 2 , object out ) { flow set in set 1 = ( flow set ) in 1 , in set 2 = ( flow set ) in 2 , out set = ( flow set ) out ; in set 1 . intersection ( in set 2 , out set ) ; }
boolean can zoom ( ) ;
protected void assert trace with ( final list < object > actual , final list < string > expected trace ) { assert equals ( expected trace . size ( ) , actual . size ( ) ) ; for ( int i = num_ ; i < expected trace . size ( ) ; i ++ ) { final object [ ] objs = ( object [ ] ) actual . get ( i ) ; final tlc state info state info = ( tlc state info ) objs [ num_ ] ; final string info = ( string ) state info . info ; if ( i == num_ ) { str_ . equals ( info ) ; } else { info . starts with ( str_ ) ; } assert equals ( expected trace . get ( i ) , state info . to string ( ) . trim ( ) ) ; assert equals ( i + num_ , objs [ num_ ] ) ; } }
public string builder encode body ( string builder retval ) { if ( address . get address type ( ) == address impl . addres s_ spec ) { retval . append ( les s_ than ) ; } address . encode ( retval ) ; if ( address . get address type ( ) == address impl . addres s_ spec ) { retval . append ( greate r_ than ) ; } if ( ! parameters . is empty ( ) ) { retval . append ( semicolon ) ; parameters . encode ( retval ) ; } return retval ; }
public void remove ( string key ) ;
public abstract void persist test data ( ) throws repository exception , instantiation exception , illegal access exception ;
public public key store find by fingerprint ( string fingerprint ) ;
public default mutable tree node ( object user object , boolean allows children ) { super ( ) ; parent = null ; this . allows children = allows children ; this . user object = user object ; }
private void assert described resource ( final bigdata value described resource , final i describe cache describe cache , final test helper h ) { final graph actual graph = describe cache . lookup ( described resource . get iv ( ) ) ; assert not null ( actual graph ) ; final set < statement > expected graph = get expected description ( described resource , h ) ; h . compare graphs ( new hash set < statement > ( actual graph ) , expected graph ) ; for ( statement stmt : actual graph ) { assert true ( stmt instanceof bigdata statement ) ; final bigdata statement st = ( bigdata statement ) stmt ; assert not null ( st . s ( ) ) ; assert not null ( st . p ( ) ) ; assert not null ( st . o ( ) ) ; if ( st . get context ( ) != null ) { assert not null ( st . c ( ) ) ; } } }
public < v extends enum < ? > > boolean check property ( v prop ) { return bool_ ; }
public void notify data set changed ( ) { internal adapter . notify data set changed ( ) ; }
public int degree ( ) { return coefficients . length - num_ ; }
static int add or subtract ( int a , int b ) { return a ^ b ; }
private boolean is visible ( soot class from , soot method m ) { from . check level ( soot class . hierarchy ) ; if ( m . is public ( ) ) return bool_ ; if ( m . is private ( ) ) { return from . equals ( m . get declaring class ( ) ) ; } if ( m . is protected ( ) ) { return can store class ( from , m . get declaring class ( ) ) ; } return from . get java package name ( ) . equals ( m . get declaring class ( ) . get java package name ( ) ) ; }
public boolean skip write if empty ( ) { return bool_ ; }
protected abstract conn pool ( ) { issued connections = new hash set < basic pool entry ref > ( ) ; idle conn handler = new idle connection handler ( ) ; boolean fair = bool_ ; pool lock = new reentrant lock ( fair ) ; }
private collection < string > read process output ( process proc ) throws io exception { buffered reader rdr = new buffered reader ( new input stream reader ( proc . get input stream ( ) ) ) ; collection < string > res = new array list < > ( ) ; string s ; while ( ( s = rdr . read line ( ) ) != null ) res . add ( s ) ; return res ; }
public call resolver ( final i call resolver target target , final j frame parent ) { assert target != null ; this . parent = parent ; this . target = target ; debugger = target . get debugger ( ) ; target . add listener ( internal target listener ) ; }
public synchronized void add ( final long value ) { values [ index ] . set ( value ) ; index ++ ; if ( index == size ) { index = num_ ; } }
public process parameter ( frame frame , int window no , process info pi ) { super ( frame , pi . get title ( ) , bool_ ) ; m _frame = frame ; try { jb init ( ) ; } catch ( exception ex ) { log . log ( level . severe , ex . get message ( ) ) ; } m _ window no = window no ; m _process info = pi ; }
public boolean is connected ( ) { return bt connection manager . is connected ( ) ; }
public string format ( double number , int decimal places ) { if ( decimal places == num_ ) { return format ( ( double ) ( ( long ) number ) ) ; } double pos = num_ ; for ( int iter = num_ ; iter < decimal places ; iter ++ ) { pos *= num_ ; } long ln = ( long ) ( number * pos ) ; number = ( ( double ) ln ) / pos ; return format ( number ) ; }
public string to string ( ) { long diff = diff ( ) ; long millis = diff % num_ ; long secs = ( diff / num_ ) % num_ ; long mins = ( diff / ( num_ * num_ ) ) % num_ ; long hs = ( diff / ( num_ * num_ ) ) % num_ ; long days = diff / ( num_ * num_ * num_ ) ; if ( days > num_ ) return days + str_ + hs + str_ + mins + str_ + secs + str_ + millis + str_ ; if ( hs > num_ ) return hs + str_ + mins + str_ + secs + str_ + millis + str_ ; if ( mins > num_ ) return mins + str_ + secs + str_ + millis + str_ ; if ( secs > num_ ) return secs + str_ + millis + str_ ; return millis + str_ ; }
public void clear ( ) { for ( int i = num_ ; i < this . num buckets ; i ++ ) { if ( this . buckets [ i ] != null ) this . buckets [ i ] . length = num_ ; } this . size = num_ ; }
public message entry ( ) { super ( ) ; this . get categories ( ) . add ( category ) ; }
boolean is allowed ( sso token token , delegation permission permission , map < string , set < string > > env parameters ) throws sso exception , delegation exception ;
public add reviewer result ( string reviewer , boolean confirm ) { this ( reviewer ) ; this . confirm = confirm ; }
private void write q name ( javax . xml . namespace . q name qname , javax . xml . stream . xml stream writer xml writer ) throws javax . xml . stream . xml stream exception { java . lang . string namespace uri = qname . get namespace uri ( ) ; if ( namespace uri != null ) { java . lang . string prefix = xml writer . get prefix ( namespace uri ) ; if ( prefix == null ) { prefix = generate prefix ( namespace uri ) ; xml writer . write namespace ( prefix , namespace uri ) ; xml writer . set prefix ( prefix , namespace uri ) ; } if ( prefix . trim ( ) . length ( ) > num_ ) { xml writer . write characters ( prefix + str_ + org . apache . axis 2 . databinding . utils . converter util . convert to string ( qname ) ) ; } else { xml writer . write characters ( org . apache . axis 2 . databinding . utils . converter util . convert to string ( qname ) ) ; } } else { xml writer . write characters ( org . apache . axis 2 . databinding . utils . converter util . convert to string ( qname ) ) ; } }
private static void set static double field ( jni environment env , int class jref , int field id , double field value ) { if ( trace jni ) vm . sys write ( str_ ) ; runtime entrypoints . check jni count down to gc ( ) ; try { rvm field field = member reference . get field ref ( field id ) . resolve ( ) ; field . set double value unchecked ( null , field value ) ; } catch ( throwable unexpected ) { if ( trace jni ) unexpected . print stack trace ( system . err ) ; env . record exception ( unexpected ) ; } }
public http request part ( final string name , final string filename , final file part ) throws http request exception { return part ( name , filename , null , part ) ; }
public static void add shutdown hook ( thread hook ) { throw new error ( str_ ) ; }
public paired stats snapshot ( ) { return new paired stats ( x stats . snapshot ( ) , y stats . snapshot ( ) , sum of products of deltas ) ; }
public boolean is sub menu ( ) { return is sub menu ; }
public connection request ( string url ) { this ( ) ; set url ( url ) ; }
public final static char [ ] to char array ( byte [ ] barr ) throws unsupported encoding exception { return new string ( barr , charset util . ut f _ 8 ) . to char array ( ) ; }
public static boolean has parents ( ) { return baggage contents . contains ( xtrac e_ baggag e_ namespace , paren t_ even t_ i d_ baggag e_ field ) ; }
public static string now ( ) { calendar cal = calendar . get instance ( ) ; simple date format sdf = new simple date format ( str_ ) ; return sdf . format ( cal . get time ( ) ) ; }
public void append value ( database type database type , string builder sb , list < argument holder > arg list ) throws sql exception ;
public void add controller ( base controller controller ) { controllers . add ( controller ) ; }
public void update ( final int v ) { chkbuf . clear ( ) ; chkbuf . put int ( v ) ; chk . update ( chkbuf . array ( ) , num_ , num_ ) ; }
protected int define ( movie movie , swf tag types timeline writer , swf tag types definition writer ) throws io exception { integer integer id = ( integer ) movie . defined symbols . get ( this ) ; if ( integer id == null ) { integer id = new integer ( define symbol ( movie , timeline writer , definition writer ) ) ; movie . defined symbols . put ( this , integer id ) ; } id = integer id . int value ( ) ; return id ; }
public int indentation multiplier ( ) { return style . indentation multiplier ( ) ; }
public input stream fetch cifs server info ( final argument argument , final map < string , object > key map , int index ) throws vnx file plugin exception { _logger . info ( str_ ) ; input stream i stream = null ; try { _logger . info ( str_ , ( string ) key map . get ( vnx file constants . move r_ id ) + str_ + ( string ) key map . get ( vnx file constants . datamove r_ name ) , key map . get ( vnx file constants . isvdm ) ) ; mover or vdm ref mover = new mover or vdm ref ( ) ; mover . set mover ( ( string ) key map . get ( vnx file constants . move r_ id ) ) ; mover . set mover id is vdm ( boolean . value of ( ( string ) key map . get ( vnx file constants . isvdm ) ) ) ; cifs server query params cifs query = new cifs server query params ( ) ; cifs query . set mover or vdm ( mover ) ; query query = new query ( ) ; query . get query request choice ( ) . add ( cifs query ) ; i stream = _vnx file input request builder . get query param packet ( cifs query , bool_ ) ; } catch ( jaxb exception jaxb exception ) { throw new vnx file plugin exception ( str_ , jaxb exception . get cause ( ) ) ; } return i stream ; }
private void update progress ( string progress label , int progress ) { if ( my host != null && ( ( progress != previous progress ) || ( ! progress label . equals ( previous progress label ) ) ) ) { my host . update progress ( progress label , progress ) ; } previous progress = progress ; previous progress label = progress label ; }
public overload scanner ( transpilation handler log handler , j sweet context context ) { super ( log handler , context , null ) ; this . types = types . instance ( context ) ; }
public static void add properties for location ( warning property set < warning property > property set , class context class context , method method , int pc ) { try { location location = pc to location ( class context , method , pc ) ; if ( location != null ) { add properties for data mining ( property set , class context , method , location ) ; } } catch ( cfg builder exception e ) { } }
public statistics ( iterable < ? extends comparable < ? > > data ) { statistics = new hash map < string , double > ( ) ; this . data = data ; }
public static vector 3f cartesian z to spherical ( vector 3f cart coords , vector 3f store ) { if ( cart coords . x == num_ ) { cart coords . x = fast math . fl t_ epsilon ; } store . x = fast math . sqrt ( ( cart coords . x * cart coords . x ) + ( cart coords . y * cart coords . y ) + ( cart coords . z * cart coords . z ) ) ; store . z = fast math . atan ( cart coords . z / cart coords . x ) ; if ( cart coords . x < num_ ) { store . z += fast math . pi ; } store . y = fast math . asin ( cart coords . y / store . x ) ; return store ; }
public schema read schema ( ) throws directory exception , config exception , initialization exception { schema handler schema handler = server context . get schema handler ( ) ; final file schema dir = schema handler . get schema directory path ( ) ; final list < string > file names = static utils . get file names ( schema utils . get schema files ( schema dir ) ) ; schema base schema = get base schema ( ) ; schema builder schema builder = new schema builder ( base schema ) ; for ( string schema file : file names ) { schema handler . load schema file into schema builder ( new file ( schema dir , schema file ) , schema builder , base schema ) ; } return build schema ( schema builder ) ; }
public static native byte [ ] [ ] ss l _get _peer _cert _chain ( long ssl native pointer ) ;
private void view invalidate ( ) { invalidate ( ) ; }
protected static boolean network monitor exist ( string nw mon name ) { string class method = str_ ; if ( debug . message enabled ( ) ) { debug . message ( class method + str_ + nw mon name ) ; } if ( ( nw mon name == null ) || ( nw mon name . length ( ) == num_ ) ) { if ( debug . warning enabled ( ) ) { debug . warning ( class method + str_ ) ; } return bool_ ; } set < string > ntw stats = network monitor . get instance names ( ) ; string ss = nw mon name . to lower case ( ) ; if ( ntw stats . contains ( ss ) ) { return bool_ ; } else { return bool_ ; } }
public boolean contains instruction ( instruction handle handle ) { return instruction set . get ( handle . get position ( ) ) ; }
public abstract void write _ulong ( int value ) ;
private boolean can change nickname ( legion legion , int target object id , string new nickname ) { if ( ! is valid nickname ( new nickname ) ) { return bool_ ; } else if ( ! legion . is member ( target object id ) ) { return bool_ ; } return bool_ ; }
private void update overscroll animation ( final int scrolled offset ) { if ( m edge glow left == null || m edge glow right == null ) return ; int next scroll position = m current x + scrolled offset ; if ( m fling tracker == null || m fling tracker . is finished ( ) ) { if ( next scroll position < num_ ) { int overscroll = math . abs ( scrolled offset ) ; m edge glow left . on pull ( ( float ) overscroll / get render width ( ) ) ; if ( ! m edge glow right . is finished ( ) ) { m edge glow right . on release ( ) ; } } else if ( next scroll position > m max x ) { int overscroll = math . abs ( scrolled offset ) ; m edge glow right . on pull ( ( float ) overscroll / get render width ( ) ) ; if ( ! m edge glow left . is finished ( ) ) { m edge glow left . on release ( ) ; } } } }
public void init path array ( int size ) { if ( debug ) { debug ( str_ + size ) ; } num states = size ; state paths = new viterbi path [ size ] ; }
private void check permissions ( ) { boolean need drive permission = send request . is send drive ( ) ; if ( ! need drive permission && send request . is send fusion tables ( ) ) { need drive permission = preferences utils . get boolean ( this , r . string . export _google _fusion _tables _public _key , preferences utils . expor t_ googl e_ fusio n_ table s_ publi c_ default ) ; } if ( ! need drive permission ) { need drive permission = send request . is send spreadsheets ( ) ; } if ( need drive permission ) { start check permission ( send to google utils . driv e_ scope ) ; } else { on drive permission success ( ) ; } }
protected void fire value changed ( tree checking event e ) { object [ ] listeners = this . listener list . get listener list ( ) ; for ( int i = listeners . length - num_ ; i >= num_ ; i -= num_ ) { if ( listeners [ i ] == tree checking listener . class ) { ( ( tree checking listener ) listeners [ i + num_ ] ) . value changed ( e ) ; } } }
public static int [ ] index sort ( comparable [ ] a ) { int n = a . length ; int [ ] index = new int [ n ] ; for ( int i = num_ ; i < n ; i ++ ) index [ i ] = i ; for ( int i = num_ ; i < n ; i ++ ) for ( int j = i ; j > num_ && less ( a [ index [ j ] ] , a [ index [ j - num_ ] ] ) ; j -- ) exch ( index , j , j - num_ ) ; return index ; }
public int hash code ( ) { return ( get name ( ) . hash code ( ) ^ mask ) ; }
private object write replace ( ) throws java . io . object stream exception { return new key rep ( key rep . type . secret , get algorithm ( ) , get format ( ) , get encoded ( ) ) ; }
private void clear sensor panel ( ) { if ( current sensor panel != null ) { main panel . remove ( current sensor panel ) ; } }
void start service action ( service request buffer service request buffer ) throws sql exception ;
void complete trade internally ( ) { trade . complete trade internally ( ) ; }
public enumeration < message header > entries ( ) { return entries . elements ( ) ; }
public limit limit ( string limit ) { return new limit ( this , limit ) ; }
private void show feedback ( string feedback ) { if ( my host != null ) { my host . show feedback ( feedback ) ; } else { system . out . println ( feedback ) ; } }
public visual coverage action ( final graph frame graph frame ) { super ( str_ ) ; this . graph frame = graph frame ; }
boolean supports transaction isolation level ( int level ) throws sql exception ;
public boolean release ( t instance ) ;
public static void register family ( string family name , string full name , string path ) { font program factory . register font family ( family name , full name , path ) ; }
public sliced multivariate tree parameter model ( tree model tree , parameter parameter , boolean include root , boolean include tips , int dim , int slice ) { super ( tree , parameter , include root , include tips , dim ) ; this . slice = slice ; }
public hex dump ( ) { super ( ) ; }
public static void writeln ( char c ) { writeln ( c , bool_ ) ; }
boolean is being used ( ) { return this . usage count > num_ ; }
protected t annotable element impl ( ) { super ( ) ; }
public byte next byte ( ) { return ( byte ) ( next ( num_ ) ) ; }
public abstract void write ( char [ ] cbuf , int off , int len ) throws java . io . io exception ;
private static void add dependency ( project project , dependency on plugin new dep ) { external dependencies manager manager = external dependencies manager . get instance ( project ) ; list < project external dependency > deps = lists . new array list ( manager . get all dependencies ( ) ) ; boolean added = bool_ ; for ( int i = num_ ; i < deps . size ( ) ; i ++ ) { project external dependency dep = deps . get ( i ) ; if ( ! ( dep instanceof dependency on plugin ) ) { continue ; } dependency on plugin plugin dep = ( dependency on plugin ) dep ; if ( plugin dep . get plugin id ( ) . equals ( new dep . get plugin id ( ) ) ) { added = bool_ ; deps . set ( i , new dep ) ; } } if ( ! added ) { deps . add ( new dep ) ; } manager . set all dependencies ( deps ) ; }
protected indexable field create field ( string name , string val , org . apache . lucene . document . field type type , float boost ) { field f = new field ( name , val , type ) ; f . set boost ( boost ) ; return f ; }
final public boolean add child ( final i running query child query ) { synchronized ( children ) { final uuid child id = child query . get query id ( ) ; if ( children . contains key ( child id ) ) { return bool_ ; } if ( future . is done ( ) ) { child query . cancel ( bool_ ) ; throw new runtime exception ( str_ ) ; } children . put ( child id , child query ) ; return bool_ ; } }
public static array list < ast node > find descendant elements ( psi element element , i element type to find , ast node cursor ) { return find descendant elements ( element , to find , cursor , null ) ; }
public void create sub usage scenario 1 4 ( ) throws exception { long usage start time = date time handling . calculate millis ( str_ ) ; billing integration test base . set date factory instance ( usage start time ) ; vo service details service details = service setup . create publish and activate marketable service ( basic setup . get supplier admin key ( ) , str_ , test service . example , test price model . exampl e_ peruni t_ mont h_ roles , technical service , supplier marketplace ) ; set cut off day ( basic setup . get supplier admin key ( ) , num_ ) ; vo role definition role = vo service factory . get role ( service details , str_ ) ; container . login ( basic setup . get customer admin key ( ) , rol e_ organizatio n_ admin ) ; vo subscription details sub details = subscr setup . subscribe to service ( str_ , service details , basic setup . get customer user 1 ( ) , role ) ; reset cut off day ( basic setup . get supplier admin key ( ) ) ; billing integration test base . update subscription list for tests ( str_ , sub details ) ; }
public schema lock schema ( ) { m _locked = bool_ ; return this ; }
< nk , nv > mutable sorted map < nk , nv > to sorted map ( comparator < ? super nk > comparator , function < ? super t , ? extends nk > key function , function < ? super t , ? extends nv > value function ) ;
public metaphone ( ) { super ( ) ; }
public neighbor highlight control ( ) { this ( null ) ; }
public object clone ( ) { web services clients the clone = null ; try { the clone = ( web services clients ) super . clone ( ) ; } catch ( clone not supported exception e ) { throw new internal error ( ) ; } if ( selected web services clients != null ) { the clone . selected web services clients = new hash set ( ) ; the clone . selected web services clients . add all ( selected web services clients ) ; } return the clone ; }
protected void sequence _ parameterized type ref structural _ t struct member list _ type ref without modifiers ( i serialization context context , parameterized type ref structural semantic object ) { generic sequencer . create sequence ( context , semantic object ) ; }
public static string remove binary attribute flag ( string attribute name ) { if ( is binary attribute ( attribute name ) ) { return attribute name . substring ( num_ , attribute name . last index of ( binar y_ flag ) ) ; } else { return attribute name ; } }
public static < e > void register type converter ( class < e > cls , type converter < e > converter ) { typ e_ converters . put ( cls , converter ) ; }
public bpm result login ( final login data login data ) { switch ( login data . get login type ( ) ) { case googl e_ auth : if ( login data . is valid google login ( ) ) { return log on google auth ( login data ) ; } break ; case ptc : if ( login data . is valid ptc login ( ) ) { return log on ptc ( login data ) ; } break ; default : } return new bpm result ( str_ ) ; }
static void use authorization identity request control ( connection connection ) throws ldap exception { if ( is supported ( authorization identity request control . oid ) ) { final string dn = str_ ; final char [ ] pwd = str_ . to char array ( ) ; system . out . println ( str_ + dn ) ; final bind request request = requests . new simple bind request ( dn , pwd ) . add control ( authorization identity request control . new control ( bool_ ) ) ; final bind result result = connection . bind ( request ) ; try { final authorization identity response control control = result . get control ( authorization identity response control . decoder , new decode options ( ) ) ; system . out . println ( str_ + control . get authorization id ( ) ) ; } catch ( final decode exception e ) { system . err . println ( e . get message ( ) ) ; system . exit ( result code . clien t_ sid e_ decodin g_ error . int value ( ) ) ; } } else { system . err . println ( str_ ) ; } }
protected void load file ( string filename , abstract file loader ... loaders ) { abstract file loader loader ; instances data ; if ( loaders == null || loaders . length == num_ ) { loader = converter utils . get loader for file ( filename ) ; } else { loader = loaders [ num_ ] ; } if ( loader != null ) { try { loader . set file ( new file ( filename ) ) ; data = loader . get data set ( ) ; ml utils . fix relation name ( data ) ; ml utils . prepare data ( data ) ; set instances ( data ) ; } catch ( exception e ) { component helper . show message box ( null , str_ , e . to string ( ) , j option pane . o k_ cance l_ option , j option pane . erro r_ message ) ; system . out . println ( e ) ; set instances ( null ) ; } } }
public ellipsoid ( position center position , double north south radius , double vertical radius , double east west radius , angle heading , angle tilt , angle roll ) { if ( center position == null ) { string message = logging . get message ( str_ ) ; logging . logger ( ) . severe ( message ) ; throw new illegal argument exception ( message ) ; } if ( north south radius <= num_ || east west radius <= num_ || vertical radius <= num_ ) { string message = logging . get message ( str_ , str_ ) ; logging . logger ( ) . severe ( message ) ; throw new illegal argument exception ( message ) ; } this . center position = center position ; this . north south radius = north south radius ; this . vertical radius = vertical radius ; this . east west radius = east west radius ; this . heading = heading ; this . tilt = tilt ; this . roll = roll ; this . set up geometry cache ( ) ; }
public int size ( ) { return m size ; }
private static list < c operand tree > clone ( final list < c operand tree > operands ) { final list < c operand tree > cloned operands = new filled list < c operand tree > ( ) ; for ( final c operand tree operand : operands ) { cloned operands . add ( operand . clone tree ( ) ) ; } return cloned operands ; }
public static void close if not null ( closeable closeable ) { if ( closeable != null ) { try { closeable . close ( ) ; } catch ( io exception ignored ) { } } }
public void test _key builder _successor _float _ na n ( ) { try { successor util . successor ( float . na n ) ; fail ( str_ + no successor exception . class ) ; } catch ( no successor exception ex ) { system . err . println ( str_ + ex ) ; } }
public file info find physical index file ( string physical name ) { if ( physical files == null ) { map < string , file info > files = new hash map ( ) ; for ( file info file info : index files ) { files . put ( file info . physical name ( ) , file info ) ; } this . physical files = files ; } return physical files . get ( physical name ) ; }
private void paint restore pressed ( graphics 2 d g , j component c , int width , int height ) { restore painter . paint pressed ( g , c , width , height ) ; }
maven dom contributor add contributor ( ) ;
public boolean element available ( q name elem name ) { return m _avail elems . contains key ( elem name ) ; }
public class define class ( class node class node , string file , string new code base ) { code source code source = null ; try { code source = new code source ( new url ( str_ , str_ , new code base ) , ( java . security . cert . certificate [ ] ) null ) ; } catch ( malformed url exception e ) { } compilation unit unit = create compilation unit ( config , code source ) ; class collector collector = create collector ( unit , class node . get module ( ) . get context ( ) ) ; try { unit . add class node ( class node ) ; unit . set classgen callback ( collector ) ; unit . compile ( phases . clas s_ generation ) ; define package internal ( collector . generated class . get name ( ) ) ; return collector . generated class ; } catch ( compilation failed exception e ) { throw new runtime exception ( e ) ; } }
public static string rsa sign ( string content , string private key , string charset ) throws commons exception { try { private key pri key = get private key from pkc s8 ( signature constant . sig n_ typ e_ rsa , new byte array input stream ( private key . get bytes ( ) ) ) ; java . security . signature signature = java . security . signature . get instance ( signature constant . sig n_ algorithms ) ; signature . init sign ( pri key ) ; if ( string utils . is empty ( charset ) ) { signature . update ( content . get bytes ( ) ) ; } else { signature . update ( content . get bytes ( charset ) ) ; } byte [ ] signed = signature . sign ( ) ; return new string ( base 6 4 . encode base 6 4 ( signed ) ) ; } catch ( exception e ) { throw new commons exception ( error type . sy s 0 0 0 4 ) ; } }
public builder use su ( ) { return set shell ( str_ ) ; }
public void add float ( int o , float x , double d ) { if ( force _defaults || x != d ) { add float ( x ) ; slot ( o ) ; } }
private void update progress ( string progress label , int progress ) { if ( my host != null ) { my host . update progress ( progress label , progress ) ; } else { system . out . println ( progress label + str_ + progress + str_ ) ; } }
boolean is thread transform disabled ( ) ;
public boolean is changed ( ) { return changed ; }
public static m product for s_ resource _ id ( properties ctx , int s_ resource _ id ) { return for s_ resource _ id ( ctx , s_ resource _ id , null ) ; }
refresh token create refresh token ( string grant type , string client id , string resource owner id , string redirect uri , set < string > scope , o auth 2 request request ) throws server exception , not found exception ;
public void push filter ( stream filter filter ) { filter . init ( _source ) ; _source = filter ; }
void on failure ( string error message ) ;
public boolean is rule support ( ) { return rule support ; }
public void start ( ) { log . info ( str_ , port , log level ) ; try { component . start ( ) ; } catch ( exception e ) { throw new illegal state exception ( str_ , e ) ; } log . info ( str_ , port ) ; running = bool_ ; started = system . current time millis ( ) ; }
public boolean is namespace aware ( ) { return bool_ ; }
public long opt long ( string key , long default value ) { lazy node token = get optional field token ( key ) ; if ( token == null ) return default value ; if ( token . type == lazy node . valu e_ null ) return default value ; return token . get long value ( cbuf ) ; }
final void sync ( ) { if ( font == null ) { set properties from attributes ( ) ; } }
protected void initialize ( xml encoder encoder ) { }
public void test add param ( ) throws exception { final py expression class parameter = my generator . create parameter ( str_ ) ; final py expression function parameter = my generator . create parameter ( str_ ) ; do test ( class parameter , function parameter ) ; }
public void read fitness ( final evolution state state , final line number reader reader ) throws io exception { set fitness ( state , code . read double with preamble ( fitnes s_ preamble , state , reader ) ) ; }
private static array list < integer > load integer array ( resources r , int res num ) { int [ ] vals = r . get int array ( res num ) ; int size = vals . length ; array list < integer > list = new array list < integer > ( size ) ; for ( int i = num_ ; i < size ; i ++ ) { list . add ( vals [ i ] ) ; } return list ; }
public column ( string label , string variable , string type ) { this . label = label ; this . variable = variable ; this . type = type ; }
public void window closing ( java . awt . event . window event e ) { done button action performed ( ) ; }
public static < s extends has data changed handlers & has handlers > void fire ( s source , java script object js obj ) { if ( type != null ) { data changed event event = new data changed event ( js obj ) ; source . fire event ( event ) ; } }
public object invoke function ( string name , object ... args ) throws script exception , no such method exception ;
protected t value recycle ( t key key , t value value ) { return value ; }
private int measure long ( int measure spec ) { int result ; int spec mode = measure spec . get mode ( measure spec ) ; int spec size = measure spec . get size ( measure spec ) ; if ( ( spec mode == measure spec . exactly ) || ( m view pager == null ) ) { result = spec size ; } else { final int count = m view pager . get adapter ( ) . get count ( ) ; result = ( int ) ( get padding left ( ) + get padding right ( ) + ( count * num_ * m radius ) + ( count - num_ ) * m radius + num_ ) ; if ( spec mode == measure spec . a t_ most ) { result = math . min ( result , spec size ) ; } } return result ; }
public static void main ( string [ ] args ) { system . out . println ( ( new alan voice directory ( ) ) . to string ( ) ) ; }
public tor discovery ( network parameters net params , tor client tor client ) { this ( net params . get dns seeds ( ) , net params , tor client ) ; }
private float check valid ( final float val ) { float tempval = val ; if ( val > num_ ) { tempval = num_ ; } if ( val < num_ ) { tempval = num_ ; } return tempval ; }
public static < e > immutable list < e > of ( e e 1 , e e 2 ) { return construct ( e 1 , e 2 ) ; }
protected void prepare test ( string local data , list < string > endpoint data ) throws exception { if ( endpoint data . size ( ) > ma x_ endpoints ) throw new runtime exception ( str_ + endpoint data . size ( ) + str_ ) ; if ( local data != null ) { load data set ( local repository , local data ) ; } int i = num_ ; for ( string s : endpoint data ) { load data set ( get repository ( i ++ ) , s ) ; } }
public file attribute ( string file name , int file size ) throws parameter exception { if ( file name == null || file name . length ( ) == num_ ) { throw new parameter exception ( str_ ) ; } if ( file size <= num_ ) { throw new parameter exception ( str_ ) ; } size = file size ; name = file name ; date date = cloud sim . get simulation calendar ( ) . get time ( ) ; if ( date == null ) { creation time = num_ ; } else { creation time = date . get time ( ) ; } owner name = null ; id = file . no t_ registered ; checksum = num_ ; type = file . typ e_ unkown ; last update time = num_ ; cost = num_ ; resource id = - num_ ; master copy = bool_ ; read only = bool_ ; }
private void checkfor row set interface ( ) throws sql exception { if ( ( this instanceof javax . sql . row set ) == bool_ ) { throw new sql exception ( str_ + str_ ) ; } }
private static void configure head less simulation ( ) { system . set property ( str_ , str_ ) ; gama . set head less mode ( ) ; }
template variable ( template variable type type , string name , string [ ] values , int [ ] offsets ) { assert . is not null ( type ) ; assert . is not null ( name ) ; f type = type ; f name = name ; set values ( values ) ; set offsets ( offsets ) ; set unambiguous ( bool_ ) ; set resolved ( bool_ ) ; f initial length = values [ num_ ] . length ( ) ; }
private static string make hash ( file file ) throws io exception { return string . value of ( file utils . checksum cr c 3 2 ( file ) ) ; }
string build command line ( job job , file working dir , file path mapper file path mapper ) throws binding exception ;
private void reset network ( ) { for ( int noc = num_ ; noc < m _num classes ; noc ++ ) { m _outputs [ noc ] . reset ( ) ; } }
public void compress ( byte [ ] bytes , int off , int len , output stream os ) { try { os . write ( bytes , off , len ) ; } catch ( io exception e ) { throw new runtime exception ( e ) ; } }
public signature visitor visit superclass ( ) { return this ; }
public boolean is default instance ( ) { return this . sort rules . is empty ( ) ; }
public byte array output stream ( int size ) { if ( size < num_ ) { throw new illegal argument exception ( str_ + size ) ; } synchronized ( this ) { need new buffer ( size ) ; } }
public string to string ( ) { return str_ + scale x + str_ + scale y + str_ + skew 0 + str_ + skew 1 + str_ + translate x + str_ + translate y + str_ ; }
public void on session expired ( uuid subj id ) ;
private long back ref to value ( content provider result [ ] back refs , int num back refs , integer back ref index ) { if ( back ref index >= num back refs ) { log . e ( tag , this . to string ( ) ) ; throw new array index out of bounds exception ( str_ + back ref index + str_ + num back refs + str_ ) ; } content provider result back ref = back refs [ back ref index ] ; long back ref value ; if ( back ref . uri != null ) { back ref value = content uris . parse id ( back ref . uri ) ; } else { back ref value = back ref . count ; } return back ref value ; }
public void put message ( message m ) { queue 1 . add ( m ) ; queue size ++ ; }
public void dcbz ( ) { if ( vm . verify assertions ) vm . _assert ( vm . no t_ reached ) ; }
public boolean dial ( bluetooth device device , string number ) { if ( dbg ) log ( str_ ) ; if ( m service != null && is enabled ( ) && is valid device ( device ) ) { try { return m service . dial ( device , number ) ; } catch ( remote exception e ) { log . e ( tag , log . get stack trace string ( new throwable ( ) ) ) ; } } if ( m service == null ) log . w ( tag , str_ ) ; return bool_ ; }
public void add menu item ( reside menu item menu item , int direction ) { if ( direction == directio n_ left ) { this . left menu items . add ( menu item ) ; layout left menu . add view ( menu item ) ; } else { this . right menu items . add ( menu item ) ; layout right menu . add view ( menu item ) ; } }
protected void append and push ( stylesheet handler handler , elem template element elem ) throws org . xml . sax . sax exception { processor characters char processor = ( processor characters ) handler . get processor for ( null , str_ , str_ ) ; char processor . set xsl text element ( ( elem text ) elem ) ; elem template element parent = handler . get elem template element ( ) ; parent . append child ( elem ) ; elem . set dom back pointer ( handler . get originating node ( ) ) ; }
public final void add from configuration ( configuration conf ) { add from properties ( to properties ( conf , streaming application . d t_ prefix ) , null ) ; }
public boolean is start stop text ( ) { return start stop text ; }
public boolean has block ( ) { return get block opt ( ) . get num child ( ) != num_ ; }
protected boolean do not read from output repo ( ) { return bool_ ; }
public native byte b device sub class ( ) ;
public boolean is zone based accessibility ( ) { return zone based accessibility ; }
public void register 4 ( string name , type arg 1 , type arg 2 , type arg 3 , type arg 4 , invocation plugin plugin ) { plugins . register ( plugin , bool_ , allow overwrite , declaring type , name , arg 1 , arg 2 , arg 3 , arg 4 ) ; }
public static sem optimizer ricf serializable instance ( ) { return new sem optimizer ricf ( ) ; }
public static string array combine ( string [ ] list , char separator char ) { statement builder buff = new statement builder ( ) ; for ( string s : list ) { buff . append except first ( string . value of ( separator char ) ) ; if ( s == null ) { s = str_ ; } for ( int j = num_ , length = s . length ( ) ; j < length ; j ++ ) { char c = s . char at ( j ) ; if ( c == str_ || c == separator char ) { buff . append ( str_ ) ; } buff . append ( c ) ; } } return buff . to string ( ) ; }
http params copy ( ) ;
private void update set ( int i 1 , double a 1 , double c ) { i0 [ i 1 ] = a 1 > num_ && a 1 < c ; }
private void write attribute ( java . lang . string namespace , java . lang . string att name , java . lang . string att value , javax . xml . stream . xml stream writer xml writer ) throws javax . xml . stream . xml stream exception { if ( namespace . equals ( str_ ) ) { xml writer . write attribute ( att name , att value ) ; } else { register prefix ( xml writer , namespace ) ; xml writer . write attribute ( namespace , att name , att value ) ; } }
public < t extends jc tree > t translate ( t tree , type type ) { return ( tree == null ) ? null : box if needed ( translate ( tree ) , type ) ; }
void success ( t response ) ;
public abstract logger new logger ( string name ) ;
public static void assert not null ( object object , string error message ) { if ( verbose ) { log ( str_ + object + str_ + error message + str_ ) ; } assert bool ( object != null , error message ) ; }
public static w listbox new data table ( ) { w listbox data table = new w listbox ( ) ; data table . set width ( str_ ) ; data table . set height ( str_ ) ; data table . set fixed layout ( bool_ ) ; data table . set vflex ( bool_ ) ; return data table ; }
private static string normalize ( final string word ) { if ( word . length ( ) > num_ ) { return word ; } else if ( word . equals ( str_ ) ) { return str_ ; } else if ( word . equals ( str_ ) ) { return str_ ; } else if ( word . equals ( str_ ) ) { return str_ ; } else if ( word . equals ( str_ ) ) { return str_ ; } return word ; }
public static char next char ( ) { synchronized ( random ) { return random . next char ( ) ; } }
public boolean is compatible ( meta data input , compatibility level level ) ;
public void load cv model ( variable table model var model , cv table model cv model , indexed cv table model i cv model ) { if ( cv model == null ) { log . error ( str_ ) ; return ; } if ( m root element == null ) { log . error ( str_ ) ; return ; } try { if ( var model != null ) { loco file . load variable model ( m root element . get child ( str_ ) , var model ) ; } loco file . load cv model ( m root element . get child ( str_ ) , cv model , i cv model , get decoder family ( ) ) ; } catch ( exception ex ) { log . error ( str_ , ex ) ; try { j option pane . show message dialog ( null , resource bundle . get bundle ( str_ ) . get string ( str_ ) , resource bundle . get bundle ( str_ ) . get string ( str_ ) , j option pane . erro r_ message ) ; } catch ( headless exception he ) { } } }
protected void add to build spec ( string builder id ) throws core exception { i project description description = project . get description ( ) ; i command [ ] commands = description . get build spec ( ) ; int command index = get command index ( commands , builder id ) ; if ( command index == - num_ ) { i command command = description . new command ( ) ; command . set builder name ( builder id ) ; command . set building ( incremental project builder . aut o_ build , bool_ ) ; i command [ ] new commands = array util . prepend ( command , commands ) ; description . set build spec ( new commands ) ; project . set description ( description , null ) ; } }
public static view action check descendant view action ( matcher < view > view matcher , view assertion view assertion ) { return view actions . action with assertions ( new check descendant view action ( view matcher , view assertion ) ) ; }
public process builder command ( string ... command ) { return command ( new array list < string > ( arrays . as list ( command ) ) ) ; }
public static c view create view ( final abstract sql provider provider , final i navi project project , final i navi view view , final string name , final string description ) throws couldnt save data exception { preconditions . check not null ( project , str_ ) ; preconditions . check not null ( view , str_ ) ; preconditions . check not null ( name , str_ ) ; preconditions . check state ( view . in same database ( provider ) , str_ ) ; return create view ( provider , project . get configuration ( ) . get id ( ) , view , name , description , c table names . project s_ table , c table names . projec t_ view s_ table , new c project view generator ( provider , project ) ) ; }
public select component value it case ( string name ) { super ( name ) ; }
public boolean is recursive ( ) { return recursive ; }
private collection < unit > fire aa ( final route route , final collection < unit > units ) { if ( m _aa in move util == null ) { m _aa in move util = new aa in move util ( ) ; } m _aa in move util . initialize ( m _bridge ) ; final collection < unit > r val = m _aa in move util . fire aa ( route , units , unit comparator . get lowest to highest movement comparator ( ) , m _current move ) ; m _aa in move util = null ; return r val ; }
private void continue set ( channel channel , session status state , byte [ ] remainder , channel handler context channel handler context ) { state . cmd . element . set data ( remainder ) ; channels . fire message received ( channel handler context , state . cmd , channel handler context . get channel ( ) . get remote address ( ) ) ; }
private static int read code ( boolean [ ] rawbits , int start index , int length ) { int res = num_ ; for ( int i = start index ; i < start index + length ; i ++ ) { res <<= num_ ; if ( rawbits [ i ] ) { res |= num_ ; } } return res ; }
int divider bottom margin ( int position , recycler view parent ) ;
public closeable static bitmap ( bitmap bitmap , resource releaser < bitmap > resource releaser , quality info quality info , int rotation angle ) { m bitmap = preconditions . check not null ( bitmap ) ; m bitmap reference = closeable reference . of ( m bitmap , preconditions . check not null ( resource releaser ) ) ; m quality info = quality info ; m rotation angle = rotation angle ; }
public < v > boolean has ( tuple tag < v > tag ) { return value map . contains key ( tag ) ; }
public s_ do create s_ do ( ) { s_ do impl s _ do = new s_ do impl ( ) ; return s _ do ; }
public static string pretty print json ( string json ) throws io exception { object mapper object mapper = new object mapper ( ) ; object json object = object mapper . read value ( json , object . class ) ; return object mapper . writer with default pretty printer ( ) . write value as string ( json object ) ; }
public abstract abstract sentence and ( string sentence ) ;
public static com . google . android . vending . licensing . i license result listener as interface ( android . os . i binder obj ) { if ( ( obj == null ) ) { return null ; } android . os . i interface iin = ( android . os . i interface ) obj . query local interface ( descriptor ) ; if ( ( ( iin != null ) && ( iin instanceof com . google . android . vending . licensing . i license result listener ) ) ) { return ( ( com . google . android . vending . licensing . i license result listener ) iin ) ; } return new com . google . android . vending . licensing . i license result listener . stub . proxy ( obj ) ; }
private void select node ( final default mutable tree node node ) { final tree path tree path = new tree path ( node . get path ( ) ) ; tree . set selection path ( tree path ) ; final rectangle bounds = tree . get path bounds ( tree path ) ; bounds . x = num_ ; tree . scroll rect to visible ( bounds ) ; }
public request handle put ( context context , string url , header [ ] headers , http entity entity , string content type , response handler interface response handler ) { http entity enclosing request base request = add entity to request base ( new http put ( url ) , entity ) ; if ( headers != null ) request . set headers ( headers ) ; return send request ( http client , http context , request , content type , response handler , context ) ; }
private vector linear combination ( int base index , double f 1 , double f 2 , double f 3 , double f 4 ) { final vector r 1 = retrieve ( base index - num_ ) . multiply ( f 1 ) ; final vector r 2 = retrieve ( base index ) . multiply ( f 2 ) ; final vector r 3 = retrieve ( base index + num_ ) . multiply ( f 3 ) ; final vector r 4 = retrieve ( base index + num_ ) . multiply ( f 4 ) ; return r 1 . add ( r 2 ) . add ( r 3 ) . add ( r 4 ) ; }
public string t 1 tip text ( ) { return str_ + str_ ; }
public get addon details ( string addonid , string ... properties ) { super ( ) ; add parameter to request ( str_ , addonid ) ; add parameter to request ( str_ , properties ) ; }
public simplify span build append multi clickable special unit ( special clickable unit special clickable unit , object ... special unit or strings ) { process multi clickable special unit ( bool_ , special clickable unit , special unit or strings ) ; return this ; }
public void put ( e e ) throws interrupted exception { check not null ( e ) ; final reentrant lock lock = this . lock ; lock . lock interruptibly ( ) ; try { while ( count == items . length ) not full . await ( ) ; enqueue ( e ) ; } finally { lock . unlock ( ) ; } }
private void delete impl ( final int start index , final int end index , final int len ) { system . arraycopy ( buffer , end index , buffer , start index , size - end index ) ; size -= len ; }
public quaternionf rotation x ( float angle ) { float cos = ( float ) math . cos ( angle * num_ ) ; float sin = ( float ) math . sin ( angle * num_ ) ; w = cos ; x = sin ; y = num_ ; z = num_ ; return this ; }
protected void transform space ( rectangle rect ) { }
public char sequence load label ( package manager pm ) { return m receiver . load label ( pm ) ; }
public void remove index user to experiment ( user . id user id , experiment . id experiment id , context context , application . name app name ) { final string cql = str_ + str_ ; try { prepared cql query < application . name , string > query = driver . get keyspace ( ) . prepare query ( keyspace . user experiment index cf ( ) ) . with cql ( cql ) . as prepared statement ( ) . with byte buffer value ( user id , user id serializer . get ( ) ) . with byte buffer value ( experiment id , experiment id serializer . get ( ) ) . with string value ( context . get context ( ) ) . with byte buffer value ( app name , application name serializer . get ( ) ) ; query . execute ( ) ; } catch ( connection exception e ) { throw new repository exception ( str_ + user id + str_ + experiment id , e ) ; } }
public authorization flow build ( ) { return new authorization flow ( this ) ; }
public void merge ( registry search response other ) { assert util . assert not null ( other , str_ ) ; if ( other . results != null ) { num results += other . num results ; if ( results == null ) { results = new array list < result > ( ) ; } results . add all ( other . results ) ; } }
public abstract float read float ( ) throws io exception ;
public vector floor ( ) { return new vector ( math . floor ( x ) , math . floor ( y ) , math . floor ( z ) ) ; }
public boolean is split forced by newline ( ) { return split forced by newline ; }
public void restore files from set name ( string set name ) throws io exception { copy backup set ( new file ( get backup root ( ) , set name ) , get operations root ( ) ) ; }
public void issue client update ( ) ;
private void handle on button click ( int idx , boolean action ) { listener . on button click ( idx , action ) ; }
public class < ? extends annotation > annotation type ( ) { return annotation type ; }
public static final criterion header date after ( string header name , date date , date resolution res ) { return new header criterion ( header name , new date operator ( date comparator . after , date , res ) ) ; }
private boolean is mineshafter present ( ) { try { class . for name ( str_ ) ; return bool_ ; } catch ( exception e ) { return bool_ ; } }
public static int to int ( byte [ ] bytes , int start ) { return to int ( bytes [ start ] , bytes [ start + num_ ] , bytes [ start + num_ ] , bytes [ start + num_ ] ) ; }
public static < k , v > map < k , v > new identity hash map ( function < k , v > loader ) { return new loading map < > ( new identity hash map < > ( ) , loader ) ; }
boolean verify ( byte [ ] digest , byte [ ] expected ) ;
public boolean is paging supported ( ) ;
public void save preferences ( ) { application preferences . get preferences ( ) . flush ( ) ; }
protected import declaration impl ( ) { super ( ) ; }
public boolean newline ( ) { return append ( str_ ) ; }
public boolean is processed ok ( ) { return m _ok ; }
private sequence < i string > to sequence ( int [ ] tm tokens ) { final i string [ ] tokens = new i string [ tm tokens . length ] ; for ( int i = num_ ; i < tm tokens . length ; ++ i ) { assert tm tokens [ i ] < tm 2 sys . length ; int system id = tm 2 sys [ tm tokens [ i ] ] ; tokens [ i ] = new i string ( system id ) ; } return new array sequence < > ( bool_ , tokens ) ; }
public string remove property ( string property ) { return this . properties . remove ( property ) ; }
public void test set f 1 8 momentary ( ) { boolean f 1 8 momentary = bool_ ; abstract throttle instance = new abstract throttle impl ( ) ; instance . set f 1 8 momentary ( f 1 8 momentary ) ; }
public boolean is enabled ( int position ) { final list adapter adapter = m list adapter ; if ( adapter != null ) { return adapter . is enabled ( position ) ; } else { return bool_ ; } }
void legal tag context ( tag element tag ) throws changed char set exception { if ( legal element context ( tag . get element ( ) ) ) { mark first time ( tag . get element ( ) ) ; return ; } if ( tag . breaks flow ( ) && ( stack != null ) && ! stack . tag . breaks flow ( ) ) { end tag ( bool_ ) ; legal tag context ( tag ) ; return ; } for ( tag stack s = stack ; s != null ; s = s . next ) { if ( s . tag . get element ( ) == dtd . head ) { while ( stack != s ) { end tag ( bool_ ) ; } end tag ( bool_ ) ; legal tag context ( tag ) ; return ; } } error ( str_ , tag . get element ( ) . get name ( ) ) ; }
public address leader ( ) { return selector . leader ( ) ; }
public static void configure viewport ( string small display content , string large display content ) { display handler . configure viewport ( small display content , large display content ) ; }
private tbs cert list ( int version , algorithm identifier signature , name issuer , date this update , date next update , list < revoked certificate > revoked certificates , extensions crl extensions , byte [ ] encoding ) { this . version = version ; this . signature = signature ; this . issuer = issuer ; this . this update = this update ; this . next update = next update ; this . revoked certificates = revoked certificates ; this . crl extensions = crl extensions ; this . encoding = encoding ; }
protected void parse alter ( marker marker ) { consume statement ( ) ; }
protected image create image ( component c , int w , int h , graphics configuration config , object [ ] args ) { if ( config == null ) { return new buffered image ( w , h , buffered image . typ e_ in t_ argb ) ; } return config . create compatible image ( w , h , transparency . translucent ) ; }
public void delete ( int start index , int end index ) ;
public static set < string > available doc values formats ( ) { return holder . get loader ( ) . available services ( ) ; }
public static search request new search request ( final string name , final search scope scope , final string filter , final string ... attribute descriptions ) { reject . if null ( name , scope , filter ) ; final search request request = new search request impl ( dn . value of ( name ) , scope , filter . value of ( filter ) ) ; for ( final string attribute description : attribute descriptions ) { request . add attribute ( attribute description ) ; } return request ; }
protected final tuple add internal ( tuple t ) { if ( m _tuples . add ( t ) ) { return t ; } else { return null ; } }
public void on destroy ( ) { activity activity = this . cordova . get activity ( ) ; if ( is enabled ) { activity . stop service ( update service intent ) ; unbind service from webview ( activity , update service intent ) ; } }
protected void init table ( ) throws bad element exception { this . table pdf = new table ( this . model . get number of columns ( ) ) ; this . table pdf . set cells fit page ( bool_ ) ; this . table pdf . set width ( num_ ) ; this . table pdf . set padding ( num_ ) ; this . table pdf . set spacing ( num_ ) ; this . small font = font factory . get font ( font factory . helvetica , num_ , font . normal , new color ( num_ , num_ , num_ ) ) ; }
public boolean ok to send ( ) { return status ( ) ; }
public static ftp client open ( string url ) throws io exception { ftp client client = new ftp client ( ) ; client . connect ( url ) ; return client ; }
entity snapshot create snapshot ( entity entity , view view , date snapshot date , user author ) ;
public void undoable edit happened ( mx undoable edit undoable edit ) { if ( enabled ) { if ( undoable edit . get transparent ( ) ) { } else if ( ! undoable edit . get undoable ( ) ) { not undoable edit happened ( ) ; } else if ( collection ) { collected . add ( undoable edit ) ; fire event ( new mx event object ( mx event . add , str_ , undoable edit ) ) ; } else { collected . add ( undoable edit ) ; add event list ( ) ; fire event ( new mx event object ( mx event . add , str_ , undoable edit ) ) ; } } }
public static direction random entry ( list < direction > l ) { int dir index = random int ( l . size ( ) - num_ ) ; return l . get ( dir index ) ; }
public invalid search filter exception ( ) { super ( ) ; }
public linked hash map < pokemon , nickname pokemon response . result > bulk rename with pattern ( final string pattern , final bi consumer < nickname pokemon response . result , pokemon > per poke callback ) { final linked hash map < pokemon , nickname pokemon response . result > results = new linked hash map < > ( ) ; mons . for each ( null ) ; return results ; }
private void write registration identifiers ( long trigger process key ) throws exception { registration identifiers reg ids = determine registration ids ( trigger process key ) ; create trigger process identifier ( trigger process key , trigger process identifier name . use r_ id , reg ids . get user id ( ) ) ; create trigger process identifier ( trigger process key , trigger process identifier name . use r_ email , reg ids . get user mail ( ) ) ; }
protected abstract probe skeleton create probe ( method method ) ;
public void clear ( ) ;
private long insert settings in transaction ( sq lite database db , content values values ) { string key = values . get as string ( settings . key ) ; if ( text utils . is empty ( key ) ) { throw new illegal argument exception ( str_ ) ; } string [ ] key array = new string [ ] { key } ; cursor cursor = null ; try { cursor = db . query ( tabl e_ settings , new string [ ] { settings . key } , settings . key + str_ , key array , null , null , null ) ; if ( cursor . move to next ( ) ) { long id = cursor . get long ( num_ ) ; db . update ( tabl e_ settings , values , settings . key + str_ , key array ) ; return id ; } else { return db . insert or throw ( tabl e_ settings , settings . value , values ) ; } } finally { if ( cursor != null ) cursor . close ( ) ; } }
public static boolean is authenticated ( ) { return org . apache . shiro . security utils . get subject ( ) . is authenticated ( ) ; }
public void move view to x ( float x index ) { runnable job = new move view job ( m view port handler , x index , num_ , get transformer ( axis dependency . left ) , this ) ; if ( m view port handler . has chart dimens ( ) ) { post ( job ) ; } else { m jobs . add ( job ) ; } }
public static string make link auto ( http servlet request request , http servlet response response , string uri ) { request handler rh = request handler . get request handler ( request . get servlet context ( ) ) ; return rh . make link auto ( request , response , uri , null , null , null , null , null , null , null ) ; }
private void log recon end ( reconciliation context recon context , context root context , status status , string logger message ) throws synchronization exception { recon audit event logger recon audit event = new recon audit event logger ( null , name , root context ) ; recon audit event . set entry type ( recon audit event logger . reco n_ lo g_ entr y_ typ e_ reco n_ end ) ; recon audit event . set reconciliation service recon action ( recon context . get recon action ( ) ) ; recon audit event . set status ( status ) ; recon audit event . set recon id ( recon context . get recon id ( ) ) ; string simple summary = recon context . get statistics ( ) . simple summary ( ) ; recon audit event . set message ( simple summary ) ; recon audit event . set message detail ( json ( recon context . get summary ( ) ) ) ; log entry ( recon audit event , recon context ) ; logger . info ( logger message + str_ + simple summary ) ; }
public rbf net ( int num centroids , phase 1 learner cl , phase 2 learner bl , double alpha , int p , distance metric dm , classifier base classifier ) { set num centroids ( num centroids ) ; set phase 1 learner ( cl ) ; set phase 2 learner ( bl ) ; set alpha ( alpha ) ; set p ( p ) ; set distance metric ( dm ) ; this . base classifier = base classifier ; if ( base classifier instanceof regressor ) base regressor = ( regressor ) base classifier ; }
private void return data ( object ret ) { if ( my host != null ) { my host . return data ( ret ) ; } }
public state set enumerator ( ) { }
private static void handle method insn node ( get static graph static usage tree , class node cn , method node mn , method insn node method call , int depth ) { if ( method call . get opcode ( ) != opcodes . invokestatic ) { return ; } string callee class name = method call . owner . replace all ( str_ , str_ ) ; if ( bytecode instrumentation . check if can instrument ( callee class name ) ) { logger . debug ( str_ + method call . name ) ; handle class initializer ( static usage tree , cn , mn , method call . owner , depth ) ; if ( ! static usage tree . has static method call ( cn . name , mn . name + mn . desc , method call . owner , method call . name + method call . desc ) ) { static usage tree . add static method call ( cn . name , mn . name + mn . desc , method call . owner , method call . name + method call . desc ) ; handle ( static usage tree , method call . owner , method call . name + method call . desc , depth ) ; } } }
public boolean is locked ( ) throws ignite exception ;
public j hex view ( ) { for ( int i = num_ ; i < m _colored ranges . length ; i ++ ) { m _colored ranges [ i ] = new colored range manager ( ) ; } set focusable ( bool_ ) ; set layout ( new border layout ( ) ) ; set font ( m _font ) ; init listeners ( ) ; init hotkeys ( ) ; init scrollbar ( ) ; img = new buffered image ( ( get width ( ) + num_ ) - m _scrollbar . get width ( ) , ( get height ( ) + num_ ) - m _horizontal scrollbar . get height ( ) , buffered image . typ e_ in t_ rgb ) ; buffer graphics = img . get graphics ( ) ; update offset view width ( ) ; set enabled ( bool_ ) ; }
private list < record < integer , integer > > records ( int ... keys ) { list < record < integer , integer > > records = new array list < > ( ) ; for ( int key : keys ) { records . add ( record . from ( key , key ) ) ; } return records ; }
public grow shrink ( independence test test ) { if ( test == null ) { throw new null pointer exception ( ) ; } this . independence test = test ; this . variables = test . get variables ( ) ; }
public static int reverse bytes ( int i ) { i = ( ( i > > > num_ ) & num_ ) | ( ( i & num_ ) << num_ ) ; return ( i > > > num_ ) | ( i << num_ ) ; }
public static boolean resolve host name enabled ( ) { return resolve host name ; }
public tree ( final com . google . security . zynamics . zylib . types . trees . tree < object type > tree ) { m _root node = new tree node < object type > ( tree . get root node ( ) . get object ( ) ) ; generate ( m _root node , tree . get root node ( ) ) ; }
public xml document add element ( xml element ) { if ( content == null ) content = element ; else content . add element ( element ) ; return ( this ) ; }
public void test dropped offer ( ) { submission publisher < integer > p = new submission publisher < integer > ( basic executor , num_ ) ; test subscriber s 1 = new test subscriber ( ) ; s 1 . request = bool_ ; test subscriber s 2 = new test subscriber ( ) ; s 2 . request = bool_ ; p . subscribe ( s 1 ) ; p . subscribe ( s 2 ) ; s 2 . await subscribe ( ) ; s 1 . await subscribe ( ) ; for ( int i = num_ ; i <= num_ ; ++ i ) assert true ( p . offer ( i , null ) >= num_ ) ; p . offer ( num_ , null ) ; assert true ( p . offer ( num_ , null ) < num_ ) ; s 1 . sn . request ( num_ ) ; assert true ( p . offer ( num_ , null ) < num_ ) ; s 2 . sn . request ( num_ ) ; p . close ( ) ; s 2 . await complete ( ) ; assert true ( s 2 . nexts >= num_ ) ; s 1 . await complete ( ) ; assert true ( s 1 . nexts >= num_ ) ; }
public image loader ( request queue queue , image cache image cache ) { m request queue = queue ; m cache = image cache ; }
public vector clock ( ) { this ( new array list < clock entry > ( num_ ) , system . current time millis ( ) ) ; }
public static s m_ syste m_ message st r_ buddylis t_ ad d_ budd y_ rejected ( string value 0 ) { return new s m_ syste m_ message ( num_ , value 0 ) ; }
public int next ( ) { int node = _current node ; int current = make node identity ( node ) ; while ( bool_ ) { current ++ ; int type = _type 2 ( current ) ; if ( null == type ) { _current node = null ; return return node ( node ) ; } if ( attribut e_ node == type || namespac e_ node == type ) continue ; _current node = make node handle ( current ) ; return return node ( node ) ; } }
public footer view holder on create footer view holder ( view group parent , int footer user type ) { return null ; }
private drawer layout . layout params process drawer layout params ( drawer layout . layout params params ) { if ( params != null ) { if ( drawer gravity != num_ && ( drawer gravity == gravity . right || drawer gravity == gravity . end ) ) { params . right margin = num_ ; if ( build . version . sd k_ int >= num_ ) { params . set margin end ( num_ ) ; } params . left margin = activity . get resources ( ) . get dimension pixel size ( r . dimen . dd _debug _drawer _margin ) ; if ( build . version . sd k_ int >= num_ ) { params . set margin end ( activity . get resources ( ) . get dimension pixel size ( r . dimen . dd _debug _drawer _margin ) ) ; } } if ( drawer width > - num_ ) { params . width = drawer width ; } else { params . width = ui utils . get optimal drawer width ( activity ) ; } } return params ; }
public field expandable ode ( final field ordinary differential equation < t > primary ) { this . primary = primary ; this . components = new array list < field secondary ode < t > > ( ) ; this . mapper = new field equations mapper < t > ( null , primary . get dimension ( ) ) ; }
protected lazy node ( byte type , int start index ) { this . start index = start index ; this . type = type ; }
public void test value of long max ( ) { long long val = long . ma x_ value ; big integer a number = big integer . value of ( long val ) ; byte r bytes [ ] = { num_ , - num_ , - num_ , - num_ , - num_ , - num_ , - num_ , - num_ } ; byte res bytes [ ] = new byte [ r bytes . length ] ; res bytes = a number . to byte array ( ) ; for ( int i = num_ ; i < res bytes . length ; i ++ ) { assert true ( res bytes [ i ] == r bytes [ i ] ) ; } assert equals ( str_ , num_ , a number . signum ( ) ) ; }
public tabbed pane tab area painter ( which state ) { super ( ) ; this . state = state ; this . ctx = new paint context ( cache mode . n o_ caching ) ; switch ( state ) { case backgroun d_ disable d_ top : case backgroun d_ disable d_ left : case backgroun d_ disable d_ bottom : case backgroun d_ disable d_ right : is disabled = bool_ ; break ; case backgroun d_ enable d_ top : case backgroun d_ enable d_ left : case backgroun d_ enable d_ bottom : case backgroun d_ enable d_ right : is disabled = bool_ ; break ; } }
static long x ( long d , long m , long over ) { if ( d > over ) return long . ma x_ value ; if ( d < - over ) return long . mi n_ value ; return d * m ; }
void fatal ( string message ) ;
public static r environment lookup on search path ( string name ) { search path search path = r context . get instance ( ) . state r environment . get search path ( ) ; int i = lookup index on search path ( name ) ; return i <= num_ ? null : search path . get ( i - num_ ) ; }
private static native int exec ( string [ ] command , string [ ] environment , string working directory , file descriptor in , file descriptor out , file descriptor err , boolean redirect error stream ) throws io exception ;
public vcpc fast runner ( graph source graph wrapper , parameters params , knowledge box model knowledge box model ) { super ( graph wrapper . get graph ( ) , params , knowledge box model ) ; }
public synchronized integer update access ( data callback < integer > callback , string unit id , boolean visited ) { content values values = new content values ( ) ; values . put ( db structure . column . assessmen t_ t b_ uni t_ watched , visited ) ; db operation update op = new db operation update ( db structure . table . assessment , values , db structure . column . assessmen t_ t b_ uni t_ id + str_ + db structure . column . assessmen t_ t b_ username + str_ , new string [ ] { unit id , username ( ) } ) ; op . set callback ( callback ) ; return enqueue ( op ) ; }
object remove attribute ( io session session , object key ) ;
public static void remove selected nodes keep edges ( final zy graph graph ) { preconditions . check not null ( graph , str_ ) ; final list < navi node > selected nodes = filter hidden nodes ( graph . get selected nodes ( ) ) ; for ( final navi node navi node : selected nodes ) { connect parents with children ( graph . get raw view ( ) , navi node . get raw node ( ) ) ; } graph . delete nodes ( selected nodes ) ; }
public resource node ( string node name , object object , string e tag , string path ) { this . node name = node name ; this . object = object ; this . e tag = e tag ; this . path = path ; }
string construct component name ( ) { synchronized ( checkbox menu item . class ) { return base + name counter ++ ; } }
public static string read ascii line ( final input stream in ) throws io exception { final string builder result = new string builder ( num_ ) ; while ( bool_ ) { final int c = in . read ( ) ; if ( c == - num_ ) { throw new eof exception ( ) ; } else if ( c == str_ ) { break ; } result . append ( ( char ) c ) ; } final int length = result . length ( ) ; if ( length > num_ && result . char at ( length - num_ ) == str_ ) { result . set length ( length - num_ ) ; } return result . to string ( ) ; }
protected date time converter make converter ( object default value ) { return new date converter ( default value ) ; }
public float translate y ( float y ) { return scale y ( y ) ; }
private void check root block ( final i root block view rbv ) { final long nxt offset = rbv . get next offset ( ) ; final int nxtalloc = - ( int ) ( nxt offset > > num_ ) ; final int meta bits addr = - ( int ) nxt offset ; final long meta addr = rbv . get meta start addr ( ) ; final long raw meta bits addr = rbv . get meta bits addr ( ) ; if ( meta addr == num_ || raw meta bits addr == num_ ) { log . warn ( str_ ) ; } if ( m _quorum == null && log . is trace enabled ( ) ) { final int commit record addr = ( int ) ( rbv . get commit record addr ( ) > > num_ ) ; log . trace ( str_ + rbv . get commit record addr ( ) + str_ + physical address ( commit record addr ) ) ; } final long commit counter = rbv . get commit counter ( ) ; if ( log . is trace enabled ( ) ) log . trace ( str_ + nxtalloc + str_ + meta bits addr + str_ + commit counter ) ; }
private static access control context create wrapper ( domain combiner combiner , class < ? > caller , access control context parent , access control context context , permission [ ] perms ) { protection domain caller pd = get caller pd ( caller ) ; if ( context != null && ! context . is authorized ( ) && system . get security manager ( ) != null && ! caller pd . implies create access control context ( ) ) { protection domain null pd = new protection domain ( null , null ) ; return new access control context ( new protection domain [ ] { null pd } ) ; } else { return new access control context ( caller pd , combiner , parent , context , perms ) ; } }
public double distance sq ( final int 2 d p ) { final double dx = ( double ) this . x - p . x ; final double dy = ( double ) this . y - p . y ; return ( dx * dx + dy * dy ) ; }
public void on target click ( tap target view view ) { view . dismiss ( bool_ ) ; }
boolean is entity op permitted ( class < ? > entity class , entity op entity op ) ;
public com . sun . identity . wsfederation . jaxb . wsaddr . relates to element create relates to element ( ) throws javax . xml . bind . jaxb exception { return new com . sun . identity . wsfederation . jaxb . wsaddr . impl . relates to element impl ( ) ; }
private void notify listeners with supervision ( final t tag ) { listener lock . read lock ( ) . lock ( ) ; try { for ( cache supervision listener < ? super t > cache listener : listeners with supervision ) { cache listener . on supervision change ( tag ) ; } } finally { listener lock . read lock ( ) . unlock ( ) ; } }
final long now ( ) { return system . nano time ( ) ; }
static public void assert equals ( float expected , float actual , float delta ) { assert equals ( null , expected , actual , delta ) ; }
private spring move spring ( ) { spring config spring config = null ; if ( spring type == spring type . origami ) { if ( is values not set ( ) ) { first value = defaul t_ tension ; second value = defaul t_ friction ; } spring config = spring config . from origami tension and friction ( first value , second value ) ; } else if ( spring type == spring type . speedbounciness ) { if ( is values not set ( ) ) { first value = defaul t_ bounceness ; second value = defaul t_ speed ; } spring config = spring config . from bounciness and speed ( first value , second value ) ; } if ( move spring == null ) { if ( spring config != null ) { move spring = spring system . create ( ) . create spring ( ) . set spring config ( spring config ) ; } } else { move spring . set spring config ( spring config ) ; } return move spring ; }
public static void delete owner ( abstract ai ai 2 ) { ai 2 . get owner ( ) . get controller ( ) . on delete ( ) ; }
public synchronized void delete rights ( drm rights rights ) { int res = native delete rights ( rights ) ; if ( jn i_ dr m_ failure == res ) return ; }
public default task config router ( ) { this ( system . getenv ( ) ) ; }
public static boolean parse and wrap string content ( psi builder b , int l ) { assert b instanceof perl builder ; i element type token type = b . get token type ( ) ; if ( token type instanceof perl string content token type ) { perl string wrapper string wrapper = ( ( perl builder ) b ) . get string wrapper ( ) ; if ( string wrapper == null || ! string wrapper . can process ( ) || token type != strin g_ identifier ) { b . advance lexer ( ) ; } else { string wrapper . wrap next token ( ( perl builder ) b ) ; } return bool_ ; } return bool_ ; }
public parameters ( ) { }
public boolean is editable ( ) { return is editable ; }
public void paint slider track background ( synth context context , graphics g , int x , int y , int w , int h , int orientation ) { paint background ( context , g , x , y , w , h , orientation ) ; }
public fs css value ( org . w 3c . dom . css . css primitive value primitive , string new value ) { this ( primitive ) ; this . _css text = new value ; }
public static s m_ syste m_ message st r_ skil l_ suc c_ skill atk drain _ instant _ a_ t o_ b ( string skillcaster , int num 0 , string skilltarget , string skillname ) { return new s m_ syste m_ message ( num_ , skillcaster , num 0 , skilltarget , skillname ) ; }
public group chat message delete task ( chat service impl chat service , instant messaging service im service , local content resolver content resolver ) { super ( content resolver , message data . conten t_ uri , message data . ke y_ messag e_ id , message data . ke y_ cha t_ id , selectio n_ grou p_ chatmessages ) ; m chat service = chat service ; m im service = im service ; }
public stationary movement ( settings s ) { super ( s ) ; int coords [ ] ; coords = s . get csv ints ( locatio n_ s , num_ ) ; this . loc = new coord ( coords [ num_ ] , coords [ num_ ] ) ; }
public dotted border ( color color , float width ) { super ( color , width ) ; }
public abstract boolean is secondary arc weapon ( int weapon id ) ;
public void before ( property info rest rep old props , property info rest rep new props ) { if ( ! is property changed ( old props , new props , _property name ) ) { return ; } string new value = new props . get property ( _property name ) ; argument validator . check range ( integer . parse int ( new value ) , constants . mi n_ aut h_ lockou t_ tim e_ i n_ minutes , constants . ma x_ aut h_ lockou t_ tim e_ i n_ minutes , _property name ) ; }
private void assert set resources cleared ( ) { assert set iterators cleared ( ) ; for ( int i = num_ ; i < grid count ( ) ; i ++ ) { ignite kernal grid = ( ignite kernal ) grid ( i ) ; for ( ignite cache cache : grid . caches ( ) ) { cache data structures manager ds mgr = grid . internal cache ( cache . get name ( ) ) . context ( ) . data structures ( ) ; map map = grid test utils . get field value ( ds mgr , str_ ) ; assert equals ( str_ + i + str_ + map + str_ , num_ , map . size ( ) ) ; map = grid test utils . get field value ( ds mgr , str_ ) ; assert equals ( str_ + i + str_ + cache . get name ( ) + str_ + map + str_ , num_ , map . size ( ) ) ; } } }
void dispatch ( event event ) ;
public span term query ( term term , term context context ) { this . term = objects . require non null ( term ) ; this . term context = context ; }
public string body ( final string text , final string mime type , charset charset ) throws unsupported encoding exception { super ( mime type ) ; if ( text == null ) { throw new illegal argument exception ( str_ ) ; } if ( charset == null ) { charset = charset . for name ( http . ut f _ 8 ) ; } this . content = text . get bytes ( charset . name ( ) ) ; this . charset = charset ; }
private static string parse expression ( string text , int start pos , int len , odbc escape type type , pattern pattern ) { string val = parse expression ( text , start pos , len ) ; if ( ! pattern . matcher ( val ) . matches ( ) ) throw new ignite exception ( str_ + type + str_ + substring ( text , start pos , len ) ) ; return val ; }
public static byte [ ] encode base 6 4 ( final byte [ ] binary data , final boolean is chunked ) { return encode base 6 4 ( binary data , is chunked , bool_ ) ; }
public certificate policies ( ) { }
protected void on release resources ( list < t > datas ) { }
private void return data ( object ret ) { if ( my host != null ) { my host . return data ( ret ) ; } }
public static distribution guess sigma ( data set d ) { return rbf kernel . guess sigma ( d ) ; }
public double norm 2 ( ) { return math . sqrt ( sum 2 ( ) ) ; }
boolean is customizable ( string client type ) ;
public boolean is http 1 1 ( ) { if ( m version . equals ignore case ( htt p 1 1 ) ) { return bool_ ; } return bool_ ; }
public void test other to string default ( ) { number converter converter = make converter ( ) ; assert equals ( str_ , str_ , converter . convert ( string . class , new string buffer ( str_ ) ) ) ; }
public static s m_ syste m_ message st r_ skil l_ suc c_ dispel de buff mental _ m e_ t o_ b ( string skilltarget , string skillname ) { return new s m_ syste m_ message ( num_ , skilltarget , skillname ) ; }
static < t > list < t > cast ( iterable < t > iterable ) { return ( list < t > ) iterable ; }
public life support gear ( string name , string clazz , string subclass , map < string , string > attributes ) { super ( name , clazz , subclass , attributes ) ; }
protected boolean is shared store ( ) { return bool_ ; }
public void write ( byte [ ] buf ) throws io exception { bout . write ( buf , num_ , buf . length , bool_ ) ; }
double table value ( int mw , int nw ) { int internal val = mw & num_ ; double stepwidth = ( double ) num_ / ( meta tbl values . length - num_ ) ; int pos = ( int ) ( internal val / stepwidth ) ; int ofs = ( int ) ( internal val % stepwidth ) ; int val before = meta tbl values [ pos ] ; int val after = pos < meta tbl values . length - num_ ? meta tbl values [ pos + num_ ] : val before ; return ( ( val before + ( val after - val before ) * ofs / stepwidth ) + offset - nw ) * factor ; }
namespace iam role authorization update namespace iam role authorization ( string namespace , namespace iam role authorization update request request ) ;
public static void is false ( boolean val , string msg ) { if ( val ) throw new illegal argument exception ( msg ) ; }
public after extended ( expression expression 1 , expression expression 2 ) { super ( expression 1 , expression 2 ) ; }
protected void on click add widget button ( view view ) { if ( logd ) log . d ( tag , str_ ) ; if ( m is safe mode enabled ) { toast . make text ( this , r . string . safemode _widget _error , toast . lengt h_ short ) . show ( ) ; } else { show widgets view ( bool_ , bool_ ) ; if ( m launcher callbacks != null ) { m launcher callbacks . on click add widget button ( view ) ; } } }
public void use item ( item id type ) throws remote server exception , login failed exception { if ( type == item id . unrecognized ) { throw new illegal argument exception ( str_ ) ; } switch ( type ) { case ite m_ incens e_ ordinary : case ite m_ incens e_ spicy : case ite m_ incens e_ cool : case ite m_ incens e_ floral : use incense ( type ) ; break ; default : break ; } }
void do refresh mirror link ( storage system system , file share source , file share target , task completer completer ) ;
public object factory ( ) { }
public string trim ( ) { int start = offset , last = offset + count - num_ ; int end = last ; while ( ( start <= end ) && ( value [ start ] <= str_ ) ) { start ++ ; } while ( ( end >= start ) && ( value [ end ] <= str_ ) ) { end -- ; } if ( start == offset && end == last ) { return this ; } return new string ( start , end - start + num_ , value ) ; }
boolean is cell ( item stack is ) ;
public void message thread ( boolean msg thread ) ;
public boolean is override content type ( ) { return override content type ; }
public void do get ( http servlet request request , http servlet response response ) throws servlet exception , io exception { do get post ( request , response ) ; }
void close connections ( int n ) ;
public void test clone ( ) throws exception { relay log position rlp = new relay log position ( ) ; file f = new file ( str_ ) ; rlp . set position ( f , num_ ) ; relay log position rlp 2 = rlp . clone ( ) ; assert equals ( str_ , f , rlp 2 . get file ( ) ) ; assert equals ( str_ , num_ , rlp 2 . get offset ( ) ) ; assert true ( str_ , rlp 2 . has reached ( str_ , num_ ) ) ; }
public http method client ( final int connection timeout , final int socket timeout , final int request timeout ) { final request config config = request config . custom ( ) . set connect timeout ( connection timeout ) . set connection request timeout ( connection timeout ) . set socket timeout ( socket timeout ) . set redirects enabled ( bool_ ) . build ( ) ; this . http client = http async clients . custom ( ) . set default request config ( config ) . set max conn per route ( ma x_ connection s_ pe r_ route ) . set max conn total ( ma x_ connections ) . build ( ) ; this . http client . start ( ) ; this . request timeout = request timeout ; }
public void rollback ( ) throws sql exception ;
public source < string > of fixed number of code points ( int code points ) { argument assertions . check arguments ( code points >= num_ , str_ , code points ) ; return strings . of fixed number of code points strings ( min code point , max code point , code points ) ; }
public void meet ( ) throws parse exception { meet or slice = svg preserve aspect ratio . sv g_ meetorslic e_ meet ; }
public void dispose ( ) throws io exception { buffer = null ; super . dispose ( ) ; }
private void init quad program ( ) { gl use program ( quad program ) ; int tex uniform = gl get uniform location ( quad program , str_ ) ; gl uniform 1i ( tex uniform , num_ ) ; gl use program ( num_ ) ; }
public boolean remove name ( string s ) { if ( s == null ) { return bool_ ; } character old key = name to key . remove ( s ) ; if ( old key != null ) { key to name . remove ( old key ) ; } if ( s . equals ( mega slot name ) ) { mega slot name = null ; } non support . remove ( s ) ; return team names . remove ( s ) ; }
public boolean non empty ( ) { return tail != null ; }
private void initialize ( ) { frame = new j frame ( ) ; frame . set bounds ( num_ , num_ , num_ , num_ ) ; frame . set default close operation ( j frame . exi t_ o n_ close ) ; frame . get content pane ( ) . set layout ( null ) ; frame . get content pane ( ) . add ( get panel ( ) ) ; }
private void dispatch message ( of message m ) { this . switch manager . handle message ( this . sw , m , null ) ; }
public final void test encrypted private key info stringbyte array 6 ( ) { try { new encrypted private key info ( str_ , new byte [ ] { } ) ; fail ( str_ ) ; } catch ( no such algorithm exception e ) { } }
public static void call setter ( object o , string prop , object value ) throws security exception , no such method exception , illegal argument exception , illegal access exception , invocation target exception { prop = str_ + string util . uc first ( prop ) ; class c = o . get class ( ) ; object [ ] o arg = new object [ ] { value } ; method parameter pair mp = get method parameter pair ignore case ( c , prop , o arg ) ; if ( ! mp . get method ( ) . get return type ( ) . get name ( ) . equals ( str_ ) ) throw new no such method exception ( str_ + mp . get method ( ) . get name ( ) + str_ + mp . get method ( ) . get return type ( ) . get name ( ) + str_ ) ; mp . get method ( ) . invoke ( o , mp . get parameters ( ) ) ; }
public rational ( polynomial n , polynomial d ) { this . n = new polynomial ( n ) ; this . d = new polynomial ( d ) ; }
private map < string , configuration > read shared configuration from disk ( ) throws sax exception , parser configuration exception , transformer factory configuration error , transformer exception { string [ ] subdirectory names = get subdirectories ( config dir path ) ; map < string , configuration > shared configuration = new hash map < string , configuration > ( ) ; if ( subdirectory names != null ) { for ( string subdirectory name : subdirectory names ) { string fullpath = filename utils . concat ( config dir path , subdirectory name ) ; configuration configuration = read configuration ( subdirectory name , fullpath ) ; shared configuration . put ( subdirectory name , configuration ) ; } } return shared configuration ; }
public code 3 9 reader ( boolean using check digit ) { this ( using check digit , bool_ ) ; }
private void initialize ( ) { this . set layout ( new card layout ( ) ) ; this . set name ( constant . messages . get string ( str_ ) ) ; if ( model . get singleton ( ) . get options param ( ) . get view param ( ) . get wm ui handling option ( ) == num_ ) { this . set size ( num_ , num_ ) ; } security protocols panel = new security protocols panel ( ) ; this . add ( get panel proxy ( ) , get panel proxy ( ) . get name ( ) ) ; get chk reverse proxy ( ) . set visible ( constant . is sp ( ) ) ; get panel reverse proxy ( ) . set visible ( constant . is sp ( ) ) ; }
public void hide palette ( ) { if ( palette == null ) { return ; } if ( environment . get boolean ( environment . use internal frames ) ) { try { ( ( j internal frame ) palette ) . set closed ( bool_ ) ; } catch ( java . beans . property veto exception evt ) { com . bbn . openmap . util . assert . assert exp ( bool_ , str_ ) ; } } else { palette . set visible ( bool_ ) ; } }
private type ( final int sort , final char [ ] buf , final int off , final int len ) { this . sort = sort ; this . buf = buf ; this . off = off ; this . len = len ; }
protected void start activity for result ( intent intent , int code ) { activity . start activity for result ( intent , code ) ; }
public boolean is anonymous ( ) { if ( key exchange == ke y_ exchang e_ d h _anon || key exchange == ke y_ exchang e_ d h _anon _ export || key exchange == ke y_ exchang e_ ecd h _anon ) { return bool_ ; } return bool_ ; }
public void zoom out image ( float delta scale ) { zoom out image ( delta scale , m crop rect . center x ( ) , m crop rect . center y ( ) ) ; }
public static native void resize to ( int width , int height ) ;
public final ac grow prio ( int p , int ... indexes ) { for ( int i = indexes . length - num_ ; i >= num_ ; i -- ) { int ix = indexes [ i ] ; make size ( ix ) ; c list . get ( ix ) . set grow priority ( p ) ; } return this ; }
public void notify data set changed ( int id ) { final array < variable info > variables = get all variable infos by id ( id ) ; if ( variables == null ) { throw new data bind exception ( str_ + id + str_ + str_ ) ; } apply data internal ( id , null , variables , bool_ ) ; m tmp variables . clear ( ) ; m data resolver . clear objects ( ) ; }
public static gson expose gson ( ) { return new provider module ( ) . provide gson ( config ) ; }
public slick form with fields ( form field [ ] fields ) { collections . add all ( this . form fields , fields ) ; return this ; }
public void paint internal frame title pane border ( synth context context , graphics g , int x , int y , int w , int h ) { }
i guild create guild ( string name , i region region ) throws rate limit exception , discord exception ;
public object run safely ( catbert . fast stack stack ) throws exception { ui manager ui mgr = stack . get ui mgr ( ) ; if ( ui mgr == null ) return new integer ( num_ ) ; else return new integer ( ui mgr . get root panel ( ) . get height ( ) ) ; }
public static void validate soap header ( soap header soap header ) { set < q name > fields = new hash set < > ( ) ; iterator < ? > it = soap header . get child elements ( ) ; while ( it . has next ( ) ) { object next = it . next ( ) ; if ( next instanceof soap element ) { soap element soap element = ( soap element ) next ; if ( ! fields . add ( soap element . get element q name ( ) ) ) { throw new coded exception ( x_ duplicat e_ heade r_ field , str_ , soap element . get element q name ( ) ) ; } } } }
public void update ( ) { while ( edge source . has next ( ) ) { edge e = ( edge ) edge source . next ( ) ; if ( set . contains ( e . get src ( ) ) ) add method ( e . get tgt ( ) ) ; } while ( unprocessed methods . has next ( ) ) { method or method context m = ( method or method context ) unprocessed methods . next ( ) ; iterator < edge > targets = cg . edges out of ( m ) ; if ( filter != null ) targets = filter . wrap ( targets ) ; add methods ( new targets ( targets ) ) ; } }
public static int hash ( final object [ ] objects ) { if ( objects . length == num_ ) { return num_ ; } final object obj = objects [ num_ ] ; int hash = ( obj == null ? num_ : objects [ num_ ] . hash code ( ) ) + num_ ; for ( int i = num_ ; i < objects . length ; i ++ ) { final object ob = objects [ i ] ; final int h = ob == null ? num_ : ob . hash code ( ) ; hash = pair hash ( hash , h ) ; } return hash ; }
dict parse ( element element ) throws xml parse exception { if ( ! str_ . equals ignore case ( element . get node name ( ) ) ) { throw new xml parse exception ( str_ + element . get node name ( ) ) ; } node n = element . get first child ( ) ; while ( n != null && ! n . get node name ( ) . equals ( str_ ) ) { n = n . get next sibling ( ) ; } dict result = ( dict ) parse element ( n ) ; return result ; }
public void append ( char c [ ] ) throws io exception { append ( new string ( c ) ) ; }
private int read short ( byte [ ] b , int off ) { int hi = read byte ( b [ off ] ) ; int lo = read byte ( b [ off + num_ ] ) ; return ( hi << num_ ) | lo ; }
public static void main ( final string [ ] args ) { dom test case . do main ( hc _nodeclonegetparentnull . class , args ) ; }
public element remove end start modifier ( ) { set end start modifier defined ( bool_ ) ; return ( this ) ; }
public abstract void verify ( public key key ) throws certificate exception , no such algorithm exception , invalid key exception , no such provider exception , signature exception ;
public void open panel ( ) { drag helper . smooth slide view to ( toolbar , num_ , drag range ) ; invalidate ( ) ; }
int size ( ) { return specs . size ( ) ; }
private void show feedback ( string message ) { if ( my host != null ) { my host . show feedback ( message ) ; } else { system . out . println ( message ) ; } }
public void on create ( bundle saved instance state ) { m sliding menu = ( sliding menu ) layout inflater . from ( m activity ) . inflate ( r . layout . slidingmenumain , null ) ; }
public block parse ( ) throws parse exception { block program = parse program ( ) ; tq . expect empty ( ) ; return program ; }
void on surface lost ( ) ;
list < user role > find by role id ( long role id ) ;
public void clone ( float [ ] source ) { system . arraycopy ( source , num_ , points , num_ , num_ ) ; }
public boolean is error ( ) { return this . type == typ e_ malforme d_ input || this . type == typ e_ unmappabl e_ char ; }
void try drain reference queues ( ) { if ( try lock ( ) ) { try { drain reference queues ( ) ; } finally { unlock ( ) ; } } }
public abstract void populate ( selected symbol selected symbol ) ;
public void test single polygon many points holes round trip ( ) throws sql exception { polygon generator pg = new polygon generator ( ) ; pg . set geometry factory ( geometry factory ) ; pg . set bounding box ( new envelope ( num_ , num_ , num_ , num_ ) ) ; pg . set generation algorithm ( polygon generator . box ) ; pg . set number points ( num_ ) ; pg . set number holes ( num_ ) ; polygon pt = ( polygon ) pg . create ( ) ; ora writer ow = new ora writer ( ) ; struct st = ow . write ( pt , get connection ( ) ) ; ora reader or = new ora reader ( ) ; polygon pt 2 = ( polygon ) or . read ( st ) ; assert true ( str_ , pt . equals ( pt 2 ) ) ; }
public final boolean has tag ( tag t ) { return all tags . contains ( t ) ; }
public abstract void decode term ( long [ ] longs , data input in , field info field info , block term state state , boolean absolute ) throws io exception ;
protected interest result policy ( string name ) { this . name = name ; this . ordinal = next ordinal ++ ; values [ this . ordinal ] = this ; }
public static s m_ syste m_ message st r_ skil l_ suc c_ heal castor on target dead _ interva l_ hea l_ t o_ me ( int num 0 , string skillname ) { return new s m_ syste m_ message ( num_ , num 0 , skillname ) ; }
public void add decorator ( day view decorator decorator ) { if ( decorator == null ) { return ; } day view decorators . add ( decorator ) ; adapter . set decorators ( day view decorators ) ; }
protected synchronized void read dont verify ( ) throws io exception , file encryption exception { if ( backing random access file . length ( ) < header size ( ) ) { throw new file encryption exception ( str_ ) ; } long oldpos = backing random access file . get file pointer ( ) ; backing random access file . seek ( num_ ) ; byte [ ] header _data = new byte [ header size ( ) - file header . aut h_ ta g_ size ] ; backing random access file . read ( header _data ) ; backing random access file . seek ( oldpos ) ; data input stream istream = new data input stream ( new byte array input stream ( header _data ) ) ; byte [ ] tmpmagic = new byte [ panbo x_ fil e_ magic . length ] ; istream . read ( tmpmagic ) ; if ( ! arrays . equals ( tmpmagic , panbo x_ fil e_ magic ) ) { throw new file encryption exception ( str_ ) ; } byte [ ] tmpversion = new byte [ panbo x_ fil e_ version . length ] ; istream . read ( tmpversion ) ; if ( ! arrays . equals ( tmpversion , panbo x_ fil e_ version ) ) { throw new file encryption exception ( str_ + panbo x_ fil e_ version . to string ( ) ) ; } this . share key version = istream . read int ( ) ; istream . close ( ) ; }
public abstract rest response build response ( response response ) throws exception ;
private void process patch ( create virtual network workflow document state ) { try { switch ( state . task state . sub stage ) { case enforc e_ quota : enforce quotas ( state ) ; break ; case allocat e_ i p_ addres s_ space : allocate ip address space ( state ) ; break ; case ge t_ i p_ addres s_ space : get ip address space ( state ) ; break ; case ge t_ ns x_ configuration : get nsx configuration ( state ) ; break ; case creat e_ logica l_ switch : create logical switch ( state ) ; break ; case creat e_ logica l_ router : create logical router ( state ) ; break ; case se t_ u p_ logica l_ router : set up logical router ( state ) ; break ; } } catch ( throwable t ) { fail ( state , t ) ; } }
public ndef message ( ndef record record , ndef record ... records ) { if ( record == null ) throw new null pointer exception ( str_ ) ; for ( ndef record r : records ) { if ( r == null ) { throw new null pointer exception ( str_ ) ; } } m records = new ndef record [ num_ + records . length ] ; m records [ num_ ] = record ; system . arraycopy ( records , num_ , m records , num_ , records . length ) ; }
public static < t , k , l extends list < t > > consumer < partition < t , k , l > > evict oldest ( ) { return null ; }
public void tab hidden ( tab tab ) { m recent tabs . add ( new weak reference < tab > ( tab ) ) ; if ( m recent tabs . size ( ) <= ma x_ recen t_ tabs ) return ; freeze ( m recent tabs . remove ( num_ ) . get ( ) ) ; }
public node set dtm ( node set dtm nodelist ) { super ( ) ; m _manager = nodelist . get dtm manager ( ) ; m _root = nodelist . get root ( ) ; add nodes ( ( dtm iterator ) nodelist ) ; }
public void close ( ) throws ade exception { }
private void initialize password repetition edit text ( ) { password repetition edit text = ( edit text ) find view by id ( r . id . password _repetition _edit _text ) ; password repetition edit text . add validator ( validators . equal ( this , r . string . equal _validator _error _message , password edit text ) ) ; }
public boolean is exception edge ( ) { return type == handle d_ exceptio n_ edge || type == unhandle d_ exceptio n_ edge ; }
public void zoom in image ( float scale , float center x , float center y ) { if ( scale <= get max scale ( ) ) { post scale ( scale / get current scale ( ) , center x , center y ) ; } }
void handle click ( ) ;
public static < v > ism record < v > of ( list < ? > key components , v value ) { check argument ( ! key components . is empty ( ) , str_ ) ; check argument ( ! is metadata key ( key components ) , str_ ) ; return new auto value _ ism format _ ism record < v > ( key components , value , null ) ; }
public void dispose ( ) { m yellow = null ; super . dispose ( ) ; }
public static iterator keys by prefix ( string prefix ) { configuration conf = instance ( ) ; iterator iter = conf . properties . key set ( ) . iterator ( ) ; list l = new array list ( ) ; while ( iter . has next ( ) ) { string key = ( string ) iter . next ( ) ; if ( key . starts with ( prefix ) ) { l . add ( key ) ; } } return l . iterator ( ) ; }
public object map to ( final object object to map , final jbbp mapper custom field processor custom field processor ) { return jbbp mapper . map ( this , object to map , custom field processor ) ; }
void resume ( ) ;
private void refresh ( ) { try { final completable future < ? extends collection < resolver tuple > > fut = underlying . get tuples ( ) ; synchronized ( this ) { current fut = fut . when complete async ( null , scheduler ) ; if ( closed ) fut . cancel ( bool_ ) ; } } catch ( exception ex ) { synchronized ( this ) { exception = ex ; } reschedule ( failur e_ reschedul e_ delay ) ; } }
public void print ( ) { for ( int i = num_ ; i < num arguments ; i ++ ) { system . out . println ( str_ + arg ( i ) + str_ + op . human name ( type ( i ) ) + str_ + size ( i ) ) ; } }
static boolean has class ( element element , string cls ) { check not null ( element ) ; check not null ( cls ) ; for ( string str : element . get attribute ( str_ ) . split ( str_ ) ) { if ( str . equals ( cls ) ) { return bool_ ; } } return bool_ ; }
public j check box menu item ( string text , boolean b ) { this ( text , null , b ) ; }
protected static boolean is groovy meta class getter ( annotated method am ) { class < ? > rt = am . get raw type ( ) ; if ( rt == null || rt . is array ( ) ) { return bool_ ; } package pkg = rt . get package ( ) ; if ( pkg != null && pkg . get name ( ) . starts with ( str_ ) ) { return bool_ ; } return bool_ ; }
public t flash mode ( flash mode mode ) { return ( flash modes ( new flash mode [ ] { mode } ) ) ; }
public gauss window ( int length , double prescaling factor ) { this ( length , defaul t_ sigma , prescaling factor ) ; }
public static i path compute default container path ( string container id ) { return new path ( container id ) ; }
protected void spawn helpers ( int npc id , int count , int distance ) { if ( ! is already dead ( ) ) { for ( int i = num_ ; i < count ; i ++ ) { spawn template summon = null ; summon = rnd spawn in range ( npc id , distance ) ; visible object npc = spawn engine . spawn object ( summon , get position ( ) . get instance id ( ) ) ; packet send utility . broadcast packet ( get owner ( ) , new s m_ np c_ info ( ( npc ) npc , str_ ) ) ; synchronized ( spawned npc ) { spawned npc . add ( npc . get object id ( ) ) ; } } } }
private static boolean find tables in from ( grid sql element from , ignite predicate < grid sql element > c ) { if ( from == null ) return bool_ ; if ( from instanceof grid sql table || from instanceof grid sql subquery ) return c . apply ( from ) ; if ( from instanceof grid sql join ) { if ( find tables in from ( from . child ( num_ ) , c ) ) return bool_ ; if ( find tables in from ( from . child ( num_ ) , c ) ) return bool_ ; return bool_ ; } else if ( from instanceof grid sql alias ) return find tables in from ( from . child ( ) , c ) ; else if ( from instanceof grid sql function ) return bool_ ; throw new illegal state exception ( from . get class ( ) . get name ( ) + str_ + from . get sql ( ) ) ; }
public cc timer ( object targ , string s ) { this ( targ , s , num_ ) ; }
protected abstract void _write ( i calendar ical ) throws io exception ;
public static user identity token create anonymous identity token ( endpoint description ep ) throws service result exception { user token policy policy = ep . find user token policy ( user token type . anonymous ) ; if ( policy == null ) throw new service result exception ( status codes . bad _ identity token rejected , str_ ) ; return new anonymous identity token ( policy . get policy id ( ) ) ; }
public abstract void on resume ( ) ;
private json value do source sync ( context context , string resource id , json value value ) throws synchronization exception { return do source sync ( context , resource id , value , bool_ , null ) ; }
public void detach ( ) throws io exception { synchronized ( this ) { if ( fd != - num_ ) { close ( fd ) ; fd = - num_ ; } } }
public string to pattern ( ) { return ndf . to pattern ( ) ; }
public final void replace all ( object from , object to ) { replace all ( from , to , bool_ ) ; }
abstract public boolean is potentially assigned ( field binding field ) ;
private void check and display matrix ( ) { check matrix bounds ( ) ; set image view matrix ( get display matrix ( ) ) ; }
boolean is install location ( string path ) ;
protected abstract object create jvm memory m bean ( string group name , string group oid , object name group objname , m bean server server ) ;
public static double next double ( ) { synchronized ( random ) { return random . next double ( ) ; } }
public static boolean is cvs version ( ) { return i s_ cv s_ version ; }
public static void apply to or set gone ( image holder image holder , image view image view ) { apply to or set gone ( image holder , image view , null ) ; }
public void reshape ( int x , int y , int width , int height ) { if ( ( width != this . width ) || ( height != this . height ) ) { reset mapping ( ) ; } super . reshape ( x , y , width , height ) ; }
protected digester create stop digester ( ) { digester digester = new digester ( ) ; digester . set use context class loader ( bool_ ) ; digester . add object create ( str_ , str_ , str_ ) ; digester . add set properties ( str_ ) ; digester . add set next ( str_ , str_ , str_ ) ; return ( digester ) ; }
public basic constraints ( int path len constraint ) { this . c a = as n1 boolean . get instance ( bool_ ) ; this . path len constraint = new as n1 integer ( path len constraint ) ; }
public matrix minus ( matrix b ) { check matrix dimensions ( b ) ; matrix x = new matrix ( m , n ) ; double [ ] [ ] c = x . get array ( ) ; for ( int i = num_ ; i < m ; i ++ ) { for ( int j = num_ ; j < n ; j ++ ) { c [ i ] [ j ] = a [ i ] [ j ] - b . a [ i ] [ j ] ; } } return x ; }
public builder config tread callback ( boolean is thread callback ) { this . m is thread callback = is thread callback ; return this ; }
public builder customization id ( string customization id ) { this . customization id = customization id ; return this ; }
public byte [ ] engine canonicalize x path node set ( set < node > xpath node set , string inclusive namespaces ) throws canonicalization exception { throw new canonicalization exception ( str_ ) ; }
public void execute ( transformer impl transformer ) throws transformer exception { transformer . push current template rule is null ( bool_ ) ; boolean push mode = bool_ ; try { q name mode = transformer . get mode ( ) ; if ( ! m _is default template ) { if ( ( ( null == mode ) && ( null != m _mode ) ) || ( ( null != mode ) && ! mode . equals ( m _mode ) ) ) { push mode = bool_ ; transformer . push mode ( m _mode ) ; } } transform selected nodes ( transformer ) ; } finally { if ( push mode ) transformer . pop mode ( ) ; transformer . pop current template rule is null ( ) ; } }
public abstract void do action on element ( t current element ) ;
void invalidate pos ( ) { if ( this . state == i n_ memory ) { state = i n_ memor y_ invalid ; } }
protected final int is left ( double [ ] a , double [ ] b , double [ ] o ) { final double cross = get rx ( a , o ) * get ry ( b , o ) - get ry ( a , o ) * get rx ( b , o ) ; if ( cross == num_ ) { final double dista = math . abs ( get rx ( a , o ) ) + math . abs ( get ry ( a , o ) ) ; final double distb = math . abs ( get rx ( b , o ) ) + math . abs ( get ry ( b , o ) ) ; return double . compare ( dista , distb ) ; } return double . compare ( cross , num_ ) ; }
public void handle tbl bootstrap res off button delete request ( request invocation event event ) throws model control exception { set submit cycle ( bool_ ) ; cc action table table = ( cc action table ) get child ( am admin constants . discover y_ servic e_ nam e_ bootstra p_ re s_ off ) ; table . restore state data ( ) ; cc action table model tbl model = ( cc action table model ) property sheet model . get model ( am admin constants . discover y_ servic e_ nam e_ bootstra p_ re s_ off ) ; integer [ ] selected = tbl model . get selected rows ( ) ; if ( ( selected != null ) && ( selected . length > num_ ) ) { try { ordered set tbl values = ( ordered set ) get page session attribute ( am admin constants . discover y_ servic e_ nam e_ bootstra p_ re s_ off ) ; sm discovery service data sm entry = sm discovery service data . get entries ( tbl values ) ; sm entry . delete disco entries ( selected ) ; tbl values = ( ordered set ) sm entry . get discovery entries ( ) ; set page session attribute ( am admin constants . discover y_ servic e_ nam e_ bootstra p_ re s_ off , tbl values ) ; populate bootstrap res off table ( tbl values ) ; } catch ( am console exception e ) { set inline alert message ( cc alert . typ e_ error , str_ , e . get message ( ) ) ; } } forward to ( ) ; }
public synchronized void remove ( class t , event listener l ) { if ( ! t . is instance ( l ) ) { throw new illegal argument exception ( str_ + l + str_ + t ) ; } if ( l == null ) { throw new illegal argument exception ( str_ + l + str_ ) ; } int index = - num_ ; for ( int i = listener list . length - num_ ; i >= num_ ; i -= num_ ) { if ( ( listener list [ i ] == t ) && ( listener list [ i + num_ ] == l ) ) { index = i ; break ; } } if ( index != - num_ ) { object [ ] tmp = new object [ listener list . length - num_ ] ; system . arraycopy ( listener list , num_ , tmp , num_ , index ) ; if ( index < tmp . length ) system . arraycopy ( listener list , index + num_ , tmp , index , tmp . length - index ) ; listener list = ( tmp . length == num_ ) ? nul l_ array : tmp ; } }
public boolean is valid ( list < s2 point > vertices ) { int n = vertices . size ( ) ; for ( int i = num_ ; i < n ; ++ i ) { if ( ! s2 . is unit length ( vertices . get ( i ) ) ) { log . info ( str_ + i + str_ ) ; return bool_ ; } } for ( int i = num_ ; i < n ; ++ i ) { if ( vertices . get ( i - num_ ) . equals ( vertices . get ( i ) ) || vertices . get ( i - num_ ) . equals ( s2 point . neg ( vertices . get ( i ) ) ) ) { log . info ( str_ + ( i - num_ ) + str_ + i + str_ ) ; return bool_ ; } } return bool_ ; }
protected layout manager create layout ( ) { gridbag = new grid bag layout ( ) ; c = get grid bag constraints ( ) ; return gridbag ; }
public itps read metadata ( final string id , final long timestamp ) { return get file metadata index ( ) . read ( metadata schema , id , timestamp , timestamp + num_ , null ) ; }
void add after ( string name , io filter filter ) ;
public static multisig aggregate modification transaction create multisig modification ( ) { return new multisig aggregate modification transaction ( time instant . zero , utils . generate random account ( ) , collections . singleton list ( new multisig cosignatory modification ( multisig modification type . add cosignatory , utils . generate random account ( ) ) ) ) ; }
static string read ( ixml reader reader , char entity char ) throws io exception , xml parse exception { char ch = reader . read ( ) ; string buffer buf = new string buffer ( ) ; buf . append ( ch ) ; if ( ch == entity char ) { while ( ch != str_ ) { ch = reader . read ( ) ; buf . append ( ch ) ; } } return buf . to string ( ) ; }
public boolean is empty ( ) { return queue . is empty ( ) ; }
private char [ ] convert to char array ( char sequence char sequence ) { if ( char sequence == null ) { return null ; } char [ ] char array = new char [ char sequence . length ( ) ] ; for ( int i = num_ ; i < char sequence . length ( ) ; i ++ ) { char array [ i ] = char sequence . char at ( i ) ; } return char array ; }
public zookeeper state machine ensemble ( curator framework curator client , string base path ) { this ( curator client , base path , bool_ , defaul t_ logsize ) ; }
public static void load emergency classes ( ) { }
public void dialog field changed ( ) { if ( f dialog field listener != null ) { f dialog field listener . dialog field changed ( this ) ; } }
public boolean member ( t value ) { if ( value == null ) { throw new illegal argument exception ( str_ ) ; } if ( root == null ) { return bool_ ; } binary node < t > node = root ; while ( node != null ) { int c = value . compare to ( node . value ) ; if ( c == num_ ) { return bool_ ; } if ( c < num_ ) { node = node . get left son ( ) ; } else { node = node . get right son ( ) ; } } return bool_ ; }
private void update progress ( int progress ) { if ( my host != null && progress != previous progress ) { my host . update progress ( progress ) ; } previous progress = progress ; }
public boolean is cached ( string request url , int max width , int max height , scale type scale type ) { throw if not on main thread ( ) ; string cache key = get cache key ( request url , max width , max height , scale type ) ; return m cache . get bitmap ( cache key ) != null ; }
public int size ( ) { assert ( this . index != null ) : str_ + this . close date + str_ + new date ( ) ; if ( this . index == null ) { log . severe ( str_ + this . close date + str_ + new date ( ) + this . heap file == null ? str_ : ( str_ + this . heap file . to string ( ) ) ) ; return num_ ; } return ( this . index == null ) ? num_ : this . index . size ( ) ; }
protected void add ifd data ( ifd data data ) { m ifd datas [ data . get id ( ) ] = data ; }
value [ ] next ( ) ;
public fast item adapter < item > remove ( int position ) { m item adapter . remove ( position ) ; return this ; }
public boolean match ( string clear text password , string encpassword ) { if ( string utils . starts with ( encpassword , constants . cryp t_ sh a _ 5 1 2 ) ) { string hashed value = crypt . crypt ( clear text password , encpassword ) ; return encpassword . equals ( hashed value ) ; } else { string encrypted value = encryption provider . get encrypted string ( clear text password ) ; return encpassword . equals ( encrypted value ) ; } }
public void on displayed ( ) ;
public void initialize ( menu item impl item data , int menu type ) ;
abstract void impl compress ( byte [ ] b , int ofs ) ;
public boolean starts with ( string prefix , int toffset ) { return value . starts with ( prefix , toffset ) ; }
public file descriptor proto to proto ( ) { return proto ; }
public static string guess display user from session ( session in _session ) { object user = session utils . guess user from session ( in _session ) ; return escape xml ( user ) ; }
protected boolean [ ] can predict ( boolean nominal predictor , boolean numeric predictor , boolean string predictor , boolean date predictor , boolean relational predictor , boolean multi instance ) { print ( str_ ) ; print attribute summary ( nominal predictor , numeric predictor , string predictor , date predictor , relational predictor , multi instance ) ; print ( str_ ) ; vector < string > accepts = new vector < string > ( ) ; accepts . add element ( str_ ) ; accepts . add element ( str_ ) ; accepts . add element ( str_ ) ; accepts . add element ( str_ ) ; accepts . add element ( str_ ) ; accepts . add element ( str_ ) ; accepts . add element ( str_ ) ; accepts . add element ( str_ ) ; accepts . add element ( str_ ) ; int num train = get num instances ( ) , missing level = num_ ; boolean predictor missing = bool_ ; return run basic test ( nominal predictor , numeric predictor , string predictor , date predictor , relational predictor , multi instance , missing level , predictor missing , num train , accepts ) ; }
public void tree expanded ( tree expansion event event ) { get handler ( ) . tree expanded ( event ) ; }
public static lua view dialog create full screen ( context context ) { return new lua view dialog ( context , android . r . style . theme _ translucent _ no title bar _ fullscreen ) ; }
public static < t > list iterator < t > empty list iterator ( ) { return collections . < t > empty list ( ) . list iterator ( ) ; }
private static void find snap ( collection < constraint widget > widgets , constraint widget widget , snap candidate candidate , boolean check horizontal ) { array list < constraint anchor > anchors source = widget . get anchors ( ) ; for ( constraint widget w : widgets ) { if ( w == widget ) { continue ; } array list < constraint anchor > anchors target = w . get anchors ( ) ; for ( constraint anchor as : anchors source ) { if ( check horizontal && as . is vertical anchor ( ) ) { continue ; } else if ( ! check horizontal && ! as . is vertical anchor ( ) ) { continue ; } for ( constraint anchor at : anchors target ) { snap check ( as , at , candidate , connectio n_ slope ) ; } } } }
public deferred wizard result ( ) { can abort = bool_ ; }
public static void filter inv periodical ( image input img , int in start , int in len , int in step , image output img , int out start , int out len , int out step , filter filter ) { int f start = num_ ; int f end = num_ ; int i start = num_ ; for ( int i = num_ ; i < out len ; i ++ ) { f start = common util . ceiling half ( filter . get start ( ) + i ) ; f end = common util . floor half ( filter . get end ( ) + i ) ; i start = common util . mod ( f start , in len ) ; for ( int j = f start ; j <= f end ; j ++ ) { output img . get data ( ) [ out start + i * out step ] += filter . get data ( ) [ ( num_ * j ) - i - filter . get start ( ) ] * input img . get data ( ) [ in start + i start * in step ] ; i start ++ ; if ( i start >= in len ) { i start -= in len ; } } } }
public int load unsigned 1 6 ( int addr ) { return load unsigned 1 6 ( addr , access source . code ) ; }
public boolean is no store ( ) { return no store ; }
public object new instance ( class java content interface ) throws jaxb exception { if ( java content interface == null ) { throw new jaxb exception ( messages . format ( messages . c i_ no t_ null ) ) ; } try { class c = gi . get default implementation ( java content interface ) ; if ( c == null ) throw new jaxb exception ( messages . format ( messages . missin g_ interface , java content interface ) ) ; return c . new instance ( ) ; } catch ( exception e ) { throw new jaxb exception ( e ) ; } }
public d view secret key ( j dialog parent , string title , dialog . modality type modality , secret key secret key ) throws crypto exception { super ( parent , title , modality ) ; this . secret key = secret key ; init components ( ) ; }
public static intent new svc intent ( final context ctx , final string action , final string message , final string to ) { final intent i = new intent ( action , null , ctx , main service . class ) ; if ( message != null ) { i . put extra ( str_ , message ) ; } if ( to != null ) { i . put extra ( str_ , to ) ; } return i ; }
private static int check field type signature ( final string signature , int pos ) { switch ( get char ( signature , pos ) ) { case str_ : return check class type signature ( signature , pos ) ; case str_ : return check type signature ( signature , pos + num_ ) ; default : return check type variable signature ( signature , pos ) ; } }
boolean converged ( int iteration , pair previous , pair current ) ;
private boolean is inaccessible ( psi modifier list owner element , boolean no protected ) { }
protected abstract void valued valued ( ) ;
public boolean same ( object expected , object actual ) { return framework . same ( expected , actual ) ; }
public static string to json ( object o ) throws exception { return object mapper . write value as string ( o ) ; }
public self with link to container ( linkable container other container , string alias ) { add link ( other container , alias ) ; return self ( ) ; }
protected method declarator _ impl ( ) { super ( ) ; }
public annotated method remove ( annotated method am ) { return remove ( am . get annotated ( ) ) ; }
public string to string ( ) { return operation ; }
public static uri with appended path ( uri base uri , string path segment ) { builder builder = base uri . build upon ( ) ; builder = builder . append encoded path ( path segment ) ; return builder . build ( ) ; }
public final boolean has contended ( ) { return head != null ; }
public static string print unsigned int ( long val ) { if ( the converter == null ) init converter ( ) ; return the converter . print unsigned int ( val ) ; }
ast node copy element ( ) ;
public basic managed entity ( http entity entity , managed client connection conn , boolean reuse ) { super ( entity ) ; if ( conn == null ) throw new illegal argument exception ( str_ ) ; this . managed conn = conn ; this . attempt reuse = reuse ; }
public void resumed ( final int detail ) { is suspended = bool_ ; thread . fire resume event ( detail ) ; }
public static string to string ( double d ) { return real to string . get instance ( ) . double to string ( d ) ; }
public subscription price model table ( ) { super ( subscriptio n_ p m_ tabl e_ fil e_ name ) ; }
private string proxy to string ( object proxy ) { class < ? > [ ] interfaces = proxy . get class ( ) . get interfaces ( ) ; if ( interfaces . length == num_ ) { return str_ + this + str_ ; } string iface = interfaces [ num_ ] . get name ( ) ; if ( iface . equals ( str_ ) && interfaces . length > num_ ) { iface = interfaces [ num_ ] . get name ( ) ; } int dot = iface . last index of ( str_ ) ; if ( dot >= num_ ) { iface = iface . substring ( dot + num_ ) ; } return str_ + iface + str_ + this + str_ ; }
private string create style definition ( ) { int font size = get font ( ) . get size ( ) + num_ ; return str_ + font name + str_ + font size + str_ ; }
public void add window ( activity activity ) { string name = activity . get title ( ) . to string ( ) ; if ( text utils . is empty ( name ) ) { name = activity . get class ( ) . get canonical name ( ) + str_ + system . identity hash code ( activity ) ; } else { name += str_ + activity . get class ( ) . get canonical name ( ) + str_ ; } add window ( activity . get window ( ) . get decor view ( ) , name ) ; }
default time range to unbounded ( ) { return to ( optional . empty ( ) ) ; }
public abstract void refresh all editors ( ) ;
public boolean is ui locked ( ) { return m _is locked ; }
public cursor fetch all ( long rule action id , long action parameter id , string rule action parameter data ) { sq lite query builder qb = new sq lite query builder ( ) ; qb . set tables ( databas e_ table ) ; qb . append where ( str_ ) ; if ( rule action id != null ) { qb . append where ( str_ + ke y_ ruleactionid + str_ + rule action id ) ; } if ( action parameter id != null ) { qb . append where ( str_ + ke y_ actionparameterid + str_ + action parameter id ) ; } if ( rule action parameter data != null ) { qb . append where ( str_ + ke y_ ruleactionparameterdata + str_ ) ; qb . append where escape string ( rule action parameter data ) ; } return qb . query ( database , keys , null , null , null , null , null ) ; }
public static string to match value ( object value ) { if ( value == null ) { return null ; } else if ( value instanceof string ) { return ( string ) value ; } else if ( value instanceof boolean ) { return to match value ( ( boolean ) value ) ; } else if ( value instanceof uri ) { return to match value ( ( uri ) value ) ; } else if ( value instanceof enum ) { return to match value ( ( enum < ? > ) value ) ; } else { return value . to string ( ) ; } }
public entry event item provider ( adapter factory adapter factory ) { super ( adapter factory ) ; }
private void on bluetooth connected ( context context , intent intent ) { bluetooth device device ; device = ( bluetooth device ) intent . get parcelable extra ( bluetooth device . extr a_ device ) ; log . info ( str_ + device + str_ ) ; }
synchronized void close trap socket if needed ( ) { if ( ( trap socket != null ) && ( state != online ) ) { trap socket . close ( ) ; trap socket = null ; } }
private static void read lsd ( gif parameters gif ) throws java . io . io exception { gif . image . set logical width ( read short ( gif ) ) ; gif . image . set logical height ( read short ( gif ) ) ; int packed = gif . input . read ( ) ; gif . gct flag = ( packed & num_ ) != num_ ; gif . m _gbpc = ( packed & num_ ) + num_ ; gif . bg index = gif . input . read ( ) ; gif . pixel aspect = gif . input . read ( ) ; }
protected category graph ( wikipedia p wiki , set < integer > p page i ds ) throws wiki api exception { construct category graph ( p wiki , p page i ds , null ) ; }
private object execute lt ( page context pc , sql sql , query qr , operation 2 expression , int row ) throws page exception { return ( execute compare ( pc , sql , qr , expression , row ) < num_ ) ? boolean . true : boolean . false ; }
public static string time to string ( long start , long finish ) { duration duration = new duration ( finish - start ) ; period formatter formatter = new period formatter builder ( ) . append days ( ) . append suffix ( str_ ) . append hours ( ) . append suffix ( str_ ) . append minutes ( ) . append suffix ( str_ ) . append seconds ( ) . append suffix ( str_ ) . append millis ( ) . append suffix ( str_ ) . to formatter ( ) ; return formatter . print ( duration . to period ( ) ) ; }
public static void main ( string [ ] args ) { string [ ] a = std in . read all strings ( ) ; int n = a . length ; int w = a [ num_ ] . length ( ) ; for ( int i = num_ ; i < n ; i ++ ) assert a [ i ] . length ( ) == w : str_ ; sort ( a , w ) ; for ( int i = num_ ; i < n ; i ++ ) std out . println ( a [ i ] ) ; }
public void test read string invalid utf 8 ( ) throws exception { byte string . output raw output = byte string . new output ( ) ; coded output stream output = coded output stream . new instance ( raw output ) ; int tag = wire format . make tag ( num_ , wire format . wiretyp e_ lengt h_ delimited ) ; output . write raw varint 3 2 ( tag ) ; output . write raw varint 3 2 ( num_ ) ; output . write raw bytes ( new byte [ ] { ( byte ) num_ } ) ; output . flush ( ) ; coded input stream input = raw output . to byte string ( ) . new coded input ( ) ; assert equals ( tag , input . read tag ( ) ) ; string text = input . read string ( ) ; assert equals ( num_ , text . char at ( num_ ) ) ; }
boolean select ( final i workbench part [ ] workbench parts ) ;
public static final double [ ] recombination _t ( double p [ ] , int l , instances i template ) { double y [ ] = new double [ l ] ; for ( int k = num_ ; k < p . length ; k ++ ) { string d _string = i template . class attribute ( ) . value ( k ) ; int d [ ] = ml utils . to int array ( d _string ) ; for ( int j : d ) { y [ j ] += p [ k ] ; } } return y ; }
public void add listener ( am client data listener cdl ) { synchronized ( listeners ) { if ( ! listeners . contains ( cdl ) ) { listeners . add ( cdl ) ; } } }
public void refresh ( boolean retain ) ;
void on reload ignoring cache ( ) ;
public str str map ( map < string , string > map ) { this . map . put all ( map ) ; }
public saxsvg document factory ( string parser , boolean dd ) { super ( svgdom implementation . get dom implementation ( ) , parser , dd ) ; }
public double num ( x path context xctxt ) throws javax . xml . transform . transformer exception { return m _val ; }
public void on tabs view shown ( ) { m uma . on tabs view shown ( ) ; }
public abstract query result parser ( value factory value factory ) { set value factory ( value factory ) ; set parser config ( new parser config ( ) ) ; }
private string lookup string ( ) { string name = lookup class . get name ( ) ; string suffix = str_ ; if ( lookup modes == num_ ) suffix = str_ ; else if ( lookup modes == public ) suffix = str_ ; else if ( lookup modes == ( public | package ) ) suffix = str_ ; else if ( lookup modes == ( public | package | private ) ) suffix = str_ ; else if ( lookup modes == ( public | package | private | protected ) ) suffix = str_ ; else suffix = str_ + integer . to hex string ( lookup modes ) ; return name + suffix ; }
public com . sun . identity . liberty . ws . idpp . jaxb . l postal address element create l postal address element ( ) throws javax . xml . bind . jaxb exception { return new com . sun . identity . liberty . ws . idpp . jaxb . impl . l postal address element impl ( ) ; }
private void move to first ( ) throws io exception { next header position = position ; next header = r . read line ( ) ; if ( next header != null ) { position += next header . length ( ) + end of line bytes ; string a line ; while ( ( a line = r . read line ( ) ) != null ) { if ( a line . starts with ( str_ ) ) { next next header position = position ; next next header = a line ; position += a line . length ( ) + end of line bytes ; break ; } else { position += a line . length ( ) + end of line bytes ; parts . add ( a line ) ; } } next sequence = basic . concatenate and remove white spaces ( parts ) ; parts . clear ( ) ; } else close ( ) ; }
public int fails ( ) ;
protected abstract void case array store stmt ( array ref dest , local src ) ;
public network zoning param ( export group export group , export mask export mask , db client db client ) { string storage system = export mask . get storage device ( ) . to string ( ) ; set virtual array ( export group . get virtual array ( ) ) ; if ( export group . has alt virtual array ( storage system ) ) { set alt virtual array ( uri . create ( export group . get alt virtual arrays ( ) . get ( storage system ) ) ) ; } set has existing volumes ( export mask . has any existing volumes ( ) ) ; set export group ( export group . get id ( ) ) ; set export group display ( export group . for display ( ) ) ; set mask name ( export mask . get mask name ( ) ) ; set mask id ( export mask . get id ( ) ) ; if ( export mask . get volumes ( ) != null ) { set volumes ( string set util . string set to uri list ( export mask . get volumes ( ) . key set ( ) ) ) ; } else { set volumes ( new array list < uri > ( ) ) ; } set < initiator > initiators = export mask utils . get initiators for export mask ( db client , export mask , transport . fc ) ; network scheduler . check zoning map ( export group , export mask , initiators , db client ) ; set zoning map ( export mask . get zoning map ( ) ) ; }
public floor ( ) { super ( str_ , num_ ) ; }
public void action performed ( action event e ) { if ( on ) { eeze frame . set glass pane ( original glass pane ) ; grid glass pane . set visible ( bool_ ) ; } else { original glass pane = eeze frame . get glass pane ( ) ; eeze frame . set glass pane ( grid glass pane ) ; grid glass pane . set visible ( bool_ ) ; } on = ! on ; }
private void add entry ( cache data page cache data page , int entry idx , entry new entry ) throws io exception { update entry ( cache data page , entry idx , new entry , update type . add ) ; }
public boolean has linked from url ( ) { return has value ( ) ; }
protected void transmit partial task ( final task < diff > result ) throws timeout exception { if ( this . part counter == num_ ) { this . result . set task type ( task types . tas k_ partia l_ first ) ; this . task transmitter . transmit diff ( result ) ; } else { this . result . set task type ( task types . tas k_ partial ) ; this . task transmitter . transmit partial diff ( result ) ; } }
public void initialize header ( object reference object ) { byte old value = vm . object model . read available byte ( object ) ; byte new value = ( byte ) ( ( old value & g c_ mar k_ bi t_ mask ) | mark state ) ; if ( header byte . need s_ unlogge d_ bit ) new value |= header byte . unlogge d_ bit ; vm . object model . write available byte ( object , new value ) ; }
private void change of address ( ) { current address = addr selector . get address ( ) ; if ( current address == null ) { return ; } for ( int i = num_ ; i < listeners . size ( ) ; i ++ ) { address listener l = listeners . get ( i ) ; if ( log . is debug enabled ( ) ) { log . debug ( str_ + l . get class ( ) ) ; } l . notify address chosen ( current address ) ; } boolean request ok = instance manager . throttle manager instance ( ) . request throttle ( get current address ( ) , roster entry , this ) ; if ( ! request ok ) { j option pane . show message dialog ( main panel , bundle . get message ( str_ ) ) ; } }
public abstract void add listener ( string store name , mapping store listener listener ) throws unknown store exception ;
public boolean is significant ( ) { return bool_ ; }
public static boolean has extension ( int type , string name ) { switch ( type ) { case num_ : if ( name . to lower case ( ) . ends with ( str_ ) ) return bool_ ; break ; case num_ : if ( ( name . to lower case ( ) . ends with ( str_ ) ) || ( name . to lower case ( ) . ends with ( str_ ) ) || ( name . to lower case ( ) . ends with ( str_ ) ) ) return bool_ ; break ; } return bool_ ; }
public transaction hashes notification ( final list < hash meta data pair > pairs ) { super ( notification type . transaction hashes ) ; this . pairs = pairs ; }
public void system ready ( ) ;
public list < integer > duplicates ( int [ ] a , int [ ] b ) { list < integer > res = new array list < integer > ( ) ; if ( a == null || b == null || a . length == num_ || b . length == num_ ) return res ; int i = num_ ; int j = num_ ; while ( i < a . length && j < b . length ) { if ( a [ i ] < b [ j ] ) { i ++ ; } else if ( a [ i ] > b [ j ] ) { j ++ ; } else { res . add ( a [ i ] ) ; i ++ ; j ++ ; } } return res ; }
private void create persons ( string home zone , string work zone , double commuters , double relative amount of car uses ) { for ( int i = num_ ; i <= commuters ; i ++ ) { string mode = str_ ; double carcommuters = commuters * relative amount of car uses ; if ( i > carcommuters ) mode = str_ ; coord homec = this . get coord in landuse from zone ( home zone , landuse type . home ) ; coord workc = this . get coord in landuse from zone ( work zone , landuse type . work ) ; double personal random = rnd . next double ( ) ; create one person ( homec , workc , mode , home zone + str_ + work zone + str_ , personal random ) ; } }
protected url connection create file url connection ( url url , file file ) { return new file url connection ( url , file ) ; }
public void resume ( ) { is paused = bool_ ; }
public byte vector put 1 2 ( final int b , final int s ) { int length = this . length ; if ( length + num_ > data . length ) { enlarge ( num_ ) ; } byte [ ] data = this . data ; data [ length ++ ] = ( byte ) b ; data [ length ++ ] = ( byte ) ( s > > > num_ ) ; data [ length ++ ] = ( byte ) s ; this . length = length ; return this ; }
public final int yystate ( ) { return zz lexical state ; }
public void reset all events ( ) ;
public translation decode ( sentence sentence ) { try { decoder task decoder task = new decoder task ( this . grammars , decoder . weights , this . feature functions , joshua configuration ) ; return decoder task . translate ( sentence ) ; } catch ( io exception e ) { throw new runtime exception ( string . format ( str_ , sentence . id ( ) , e . get message ( ) ) , e ) ; } }
void print value ( long value ) { log . write ( value ) ; }
private view drag helper ( context context , view group for parent , callback cb ) { if ( for parent == null ) { throw new illegal argument exception ( str_ ) ; } if ( cb == null ) { throw new illegal argument exception ( str_ ) ; } m parent view = for parent ; m callback = cb ; final view configuration vc = view configuration . get ( context ) ; final float density = context . get resources ( ) . get display metrics ( ) . density ; m edge size = ( int ) ( edg e_ size * density + num_ ) ; m touch slop = vc . get scaled touch slop ( ) ; m max velocity = vc . get scaled maximum fling velocity ( ) ; m min velocity = vc . get scaled minimum fling velocity ( ) ; m scroller = scroller compat . create ( context , s interpolator ) ; }
public synchronized void animate zoom ( final point 2 d p , double scale , long duration ) { point 2 d pp = new point 2 d . double ( ) ; m _itransform . transform ( p , pp ) ; animate zoom abs ( pp , scale , duration ) ; }
protected boolean is right method for unmarshall ( o data request request ) { o data request . method method = request . get method ( ) ; return is post method ( method ) || is patch method ( method ) || is put method ( method ) ; }
public static response properties create partial content response ( string status message ) { return new response properties ( http servlet response . s c_ partia l_ content , status message ) ; }
public void on browser event ( context context , element elem , final t object , native event event ) { final int index = context . get index ( ) ; value updater < c > value updater = ( field updater == null ) ? null : ( value updater < c > ) null ; cell . on browser event ( context , elem , get value ( object ) , event , value updater ) ; }
public property validate asserter versions ( v card version ... versions ) { this . versions = versions ; return this ; }
refresh token create refresh token ( string grant type , string client id , string resource owner id , string redirect uri , set < string > scope , o auth 2 request request , string validated claims , string auth grant id , long auth time ) throws server exception , not found exception ;
public boolean is receiver pointer ( ) ;
d find one target ( t_ id source id , string field name , query spec query spec ) ;
void give back ( item item ) ;
private void on equipment down ( final long equipment id , final timestamp timestamp , final string message ) { if ( logger . is debug enabled ( ) ) { string buffer str = new string buffer ( str_ ) ; str . append ( str_ + equipment id ) ; str . append ( str_ ) ; str . append ( timestamp ) ; str . append ( str_ ) ; str . append ( message ) ; logger . debug ( str . to string ( ) ) ; } equipment facade . suspend ( equipment id , timestamp , message ) ; final equipment equipment copy = equipment cache . get copy ( equipment id ) ; long state tag id = equipment copy . get state tag id ( ) ; if ( state tag id == null ) { logger . error ( str_ + equipment copy . get id ( ) + str_ ) ; } else { try { control tag facade . update and validate ( state tag id , supervision status . down . to string ( ) , message , timestamp ) ; } catch ( cache element not found exception cache ex ) { logger . error ( str_ + state tag id + str_ + equipment copy . get id ( ) ) ; } } }
public void on camera view started ( int width , int height ) ;
public range query builder query name ( string query name ) { this . query name = query name ; return this ; }
void flush buffer ( ) throws io exception { se . flush buffer ( ) ; }
public void add property ( string key , string value ) { carbon properties . set property ( key , value ) ; }
public ignite uuid surrogate id ( int idx ) { assert surrogate ids != null ; assert idx > last existing idx ; assert idx < surrogate ids . length ; return surrogate ids [ idx ] ; }
public string build activiti id string ( string namespace cd , string job name ) { map < string , string > path to token value map = new hash map < > ( ) ; path to token value map . put ( get namespace token ( ) , namespace cd ) ; path to token value map . put ( get job name token ( ) , job name ) ; string activiti id = get activiti job definition template ( ) ; for ( map . entry < string , string > map entry : path to token value map . entry set ( ) ) { activiti id = activiti id . replace all ( map entry . get key ( ) , map entry . get value ( ) ) ; } return activiti id ; }
public void add configured license mapper ( mapper mapper ) { if ( license mapper != null ) { throw new build exception ( str_ ) ; } this . license mapper = mapper . get implementation ( ) ; }
static boolean is valid ( string name ) { return bool_ ; }
public boolean add ( observe relation relation ) { if ( relation == null ) throw new null pointer exception ( ) ; observe relation previous = observe relations . put ( relation . get key ( ) , relation ) ; if ( null != previous ) { previous . cancel ( ) ; return bool_ ; } return bool_ ; }
byte [ ] backup ( ) throws exception ;
public void add swipe listener ( swipe listener listener ) { if ( m listeners == null ) { m listeners = new array list < swipe listener > ( ) ; } m listeners . add ( listener ) ; }
public static double logbeta ( double p , double q ) { return ( lngamma ( p ) + lngamma ( q ) - lngamma ( p + q ) ) ; }
public boolean contains details view ( details view details view ) { return get display area ( details view . get tab ( ) ) != null ; }
public boolean is console preferences supported ( ) { return console preferences supported ; }
public list < object > parse ( insert insert , query state state ) throws sql exception { if ( ! insert . get columns ( ) . is present ( ) ) throw new sql exception ( str_ ) ; if ( insert . get query ( ) . get query body ( ) == null ) throw new sql exception ( str_ ) ; if ( ! ( insert . get query ( ) . get query body ( ) instanceof values ) ) throw new sql exception ( str_ ) ; list < string > fields = insert . get columns ( ) . get ( ) ; list < object > values = insert . get query ( ) . get query body ( ) . accept ( this , state ) ; if ( state . has exception ( ) ) throw state . get exception ( ) ; for ( string field : fields ) state . get heading ( ) . add ( new column ( field ) ) ; return values ; }
private boolean is focus inside ( object new focused comp ) { if ( new focused comp instanceof popup ) { return bool_ ; } if ( new focused comp instanceof component && ! swing utilities . is descending from ( ( component ) new focused comp , this ) ) { if ( containing window == null ) { return bool_ ; } window focused window = keyboard focus manager . get current keyboard focus manager ( ) . get active window ( ) ; if ( containing window == focused window ) { return bool_ ; } } return bool_ ; }
private char replace entity ( ) throws xml stream exception { if ( ( _state == stat e_ comment ) || ( _state == stat e_ pi ) || ( _state == stat e_ cdata ) ) return str_ ; int start = _index ; _data [ _index ++ ] = str_ ; while ( bool_ ) { if ( _read index >= _read count ) reload buffer ( ) ; char c = _data [ _index ++ ] = _read buffer [ _read index ++ ] ; if ( c == str_ ) break ; if ( c <= str_ ) throw new xml stream exception ( str_ , _location ) ; } while ( start + _entities . get max length ( ) >= _data . length ) { increase data buffer ( ) ; } int length = _entities . replace entity ( _data , start , _index - start ) ; _index = start + length ; if ( _read index >= _read count ) reload buffer ( ) ; char c = _read buffer [ _read index ++ ] ; return ( c == str_ ) ? ( c = replace entity ( ) ) : c ; }
public boolean handle event with state ( message < string > event , string state ) { state machine . stop ( ) ; list < state machine access < string , string > > with all regions = state machine . get state machine accessor ( ) . with all regions ( ) ; for ( state machine access < string , string > a : with all regions ) { a . reset state machine ( new default state machine context < string , string > ( state , null , null , null ) ) ; } state machine . start ( ) ; return state machine . send event ( event ) ; }
public boolean show parameter ( ) { return parameter ; }
public int size ( ) { return delegate . size ( ) ; }
public colour ramp ( ) { }
public boolean pause batch ( long batch id ) { int batch status = batch repository . get batch status ( batch id ) ; if ( download status . is running ( batch status ) ) { downloads repository . pause download with batch id ( batch id ) ; return bool_ ; } else { return bool_ ; } }
public static void add link ( pagination link link , pagination < ? > pages , uri builder uri builder , mapping response processor response processor , map < string , uri > body links ) { link . get page ( pages ) . if present ( null ) ; }
private void step input ( ) { for ( final port port : port . values ) { final pipe receiving pipe = get casing ( ) . get receiving pipe ( get face ( ) , port ) ; if ( ! receiving pipe . is reading ( ) ) { receiving pipe . begin read ( ) ; } if ( receiving pipe . can transfer ( ) ) { process ( receiving pipe . read ( ) ) ; receiving pipe . begin read ( ) ; } } }
public void test fork get ( ) { test fork get ( main pool ( ) ) ; }
public boolean is show customer select step ( ) { if ( model . get selected billing data type ( ) == null ) return bool_ ; if ( model . get selected billing data type ( ) . equals ( billing data type . revenue share ) ) return bool_ ; if ( model . get billing shares result types ( ) . contains ( billing shares result type . reseller ) ) return bool_ ; if ( model . get billing shares result types ( ) . contains ( billing shares result type . supplier ) ) return bool_ ; return bool_ ; }
public as n1 input stream ( byte [ ] input , boolean lazy evaluate ) { this ( new byte array input stream ( input ) , input . length , lazy evaluate ) ; }
public void remove all ( ) { final delete value delete value = new delete value . builder ( location ) . build ( ) ; logger . debug ( str_ , location ) ; try ( timer . context context = delete timer . time ( ) ) { client . execute async ( delete value ) ; } }
public ewma ( double alpha , long interval , time unit interval unit ) { this . interval = interval unit . to nanos ( interval ) ; this . alpha = alpha ; }
public boolean is continuous ( ) { if ( this . size ( ) < num_ ) return bool_ ; int sen index = this . first ( ) . idx ; for ( word w : this ) { if ( w . idx != sen index ++ ) return bool_ ; } return bool_ ; }
protected void do gather test ( final edges enum gather edges , final set < ? extends statement > expected , final value starting vertex ) throws exception { final igas engine gas engine = get graph fixture ( ) . new gas engine ( num_ ) ; try { final i graph accessor graph accessor = get graph fixture ( ) . new graph accessor ( null ) ; final igas context < set < statement > , set < statement > , set < statement > > gas context = gas engine . new gas context ( graph accessor , new mock gas program ( gather edges ) ) ; final igas state < set < statement > , set < statement > , set < statement > > gas state = gas context . get gas state ( ) ; gas state . set frontier ( gas context , starting vertex ) ; gas context . do round ( new gas stats ( ) ) ; final set < statement > actual = gas state . get state ( starting vertex ) ; assert same edges ( expected , actual ) ; } finally { gas engine . shutdown now ( ) ; } }
public static void flush actual tab switch latency metric ( ) { if ( s tab switch start time <= num_ || ! s tab switch latency metric required ) return ; log perceived tab switch latency metric ( ) ; flush tab switch latency metric ( bool_ ) ; s tab switch start time = num_ ; s tab switch latency metric required = bool_ ; }
public boolean are v disks destroyed ( property handler param handler ) throws exception ;
public void disable vertex attribute ( string name ) { int location = fetch attribute location ( name ) ; if ( location == - num_ ) return ; gle s 2 0 . gl disable vertex attrib array ( location ) ; }
private void close all channels except ( string [ ] except ) { set < string > copy = c . get open channels ( ) ; for ( string channel : copy ) { if ( ! arrays . as list ( except ) . contains ( channel ) ) { close channel ( channel ) ; } } }
boolean can provide energy ( item stack item stack ) ;
public void update ( final long p id , final object p value , final string p value desc , final timestamp p timestamp ) { final rule buffer object buffer obj ; log . trace ( p id + str_ ) ; synchronized ( buffe r_ lock ) { if ( ! rul e_ objec t_ buf . contains key ( p id ) ) { buffer obj = new rule buffer object ( p id , p value , p value desc , p timestamp ) ; rul e_ objec t_ buf . put ( p id , buffer obj ) ; } else { buffer obj = ( rule buffer object ) rul e_ objec t_ buf . get ( p id ) ; buffer obj . update ( p value , p value desc , p timestamp ) ; } schedule cache updater task ( p id ) ; } log . trace ( p id + str_ ) ; }
public void test receive _ non block no server buf full ( ) throws exception { this . channel 1 . configure blocking ( bool_ ) ; connect without server ( ) ; byte buffer dst = allocate full buf ( ) ; assert null ( this . channel 1 . receive ( dst ) ) ; }
private void show feedback ( string message ) { if ( my host != null ) { my host . show feedback ( message ) ; } else { system . out . println ( message ) ; } }
public cc vertex 3 d original vertex ( cc grid size pos ) { int index = ( pos . x * ( grid size _ . y + num_ ) + pos . y ) * num_ ; cc vertex 3 d vert = new cc vertex 3 d ( original vertices . get ( index + num_ ) , original vertices . get ( index + num_ ) , original vertices . get ( index + num_ ) ) ; return vert ; }
public click to delete item listener impl ( int id ) { this . m delete view id = id ; }
private directory environment config ( properties properties , boolean check if server is running ) { this . check if server is running = check if server is running ; config properties = new hash map < > ( ) ; if ( properties != null ) { enumeration < ? > property names = properties . property names ( ) ; while ( property names . has more elements ( ) ) { object o = property names . next element ( ) ; config properties . put ( string . value of ( o ) , string . value of ( properties . get ( o ) ) ) ; } } }
public void append text child ( string str ) ;
protected void install components ( ) { if ( scrollable tab layout enabled ( ) ) { if ( tab scroller == null ) { tab scroller = new scrollable tab support ( tab pane . get tab placement ( ) ) ; tab pane . add ( tab scroller . viewport ) ; } } }
private util ( ) { }
public boolean on preference change ( preference preference , object new value ) { if ( boolean . parse boolean ( system properties . get ( telephony properties . propert y_ inec m_ mode ) ) ) { } else { set airplane mode on ( ( boolean ) new value ) ; } return bool_ ; }
void add mutable tree listener ( mutable tree listener listener ) ;
private void draw drag border ( final execution unit process , final graphics 2 d g 2 ) { double width = model . get process width ( process ) ; double height = model . get process height ( process ) ; shape drag frame = new round rectangle 2 d . double ( dra g_ borde r_ padding , dra g_ borde r_ padding , width - num_ * dra g_ borde r_ padding , height - num_ * dra g_ borde r_ padding , dra g_ borde r_ corner , dra g_ borde r_ corner ) ; g 2 . set color ( borde r_ dra g_ color ) ; g 2 . set stroke ( borde r_ dra g_ stroke ) ; g 2 . draw ( drag frame ) ; }
public void initialise all dimensions ( int source dimensions , int dest dimensions , int dest past dimensions ) throws exception { this . dest dimensions = dest dimensions ; this . source dimensions = source dimensions ; this . dest past dimensions = dest past dimensions ; added more than one observation set = bool_ ; k = num_ ; te kernel estimator . initialise ( dest past dimensions , source dimensions , kernel width , kernel width ) ; next state kernel estimator . initialise ( dest dimensions , kernel width ) ; dest past vectors = null ; dest next vectors = null ; source vectors = null ; local prob next cond past = null ; }
public void populate edit text ( string match ) { toggle search ( ) ; string text = match . trim ( ) ; set search string ( text ) ; search ( text ) ; }
void on drawer opened ( view drawer view ) ;
public void reset ( ) { release dtmxr tree frags ( ) ; if ( m _rtfdtm _stack != null ) for ( java . util . enumeration e = m _rtfdtm _stack . elements ( ) ; e . has more elements ( ) ; ) m _dtm manager . release ( ( dtm ) e . next element ( ) , bool_ ) ; m _rtfdtm _stack = null ; m _which _rtfdtm = - num_ ; if ( m _global _rtfdtm != null ) m _dtm manager . release ( m _global _rtfdtm , bool_ ) ; m _global _rtfdtm = null ; m _dtm manager = dtm manager . new instance ( org . apache . xpath . objects . xml string factory impl . get factory ( ) ) ; m _sax locations . remove all elements ( ) ; m _axes iterator stack . remove all elements ( ) ; m _context node lists . remove all elements ( ) ; m _current expression nodes . remove all elements ( ) ; m _current nodes . remove all elements ( ) ; m _iterator roots . remove all no clear ( ) ; m _predicate pos . remove all elements ( ) ; m _predicate roots . remove all no clear ( ) ; m _prefix resolvers . remove all elements ( ) ; m _prefix resolvers . push ( null ) ; m _current nodes . push ( dtm . null ) ; m _current expression nodes . push ( dtm . null ) ; m _sax locations . push ( null ) ; }
public void flush pending ( ) throws sax exception { if ( m _need to call start document ) { start document internal ( ) ; m _need to call start document = bool_ ; } if ( m _elem context . m _start tag open ) { close start tag ( ) ; m _elem context . m _start tag open = bool_ ; } if ( m _cdata tag open ) { close cdata ( ) ; m _cdata tag open = bool_ ; } }
public noframes add element ( string hashcode , element element ) { add element to registry ( hashcode , element ) ; return ( this ) ; }
void remove quota ( container id container id ) ;
public register ( final string name ) { this . name = name ; }
public final native void open confirm ( string template , cm confirm callback overlay callback ) ;
public string parse string ( string lexical xsd string ) ;
public boolean is eligible for movement ( ) { if ( is off board ( ) || is assault drop in progress ( ) ) { return bool_ ; } if ( ! game . get options ( ) . boolean option ( str_ ) ) { return bool_ ; } boolean is active = ( ! shut down || is manual shutdown ( ) ) && ! destroyed && get crew ( ) . is active ( ) && ! unloaded this turn && deployed ; if ( ! is active || ( is immobile ( ) && ! is manual shutdown ( ) && ! can unjam rac ( ) && ! game . get options ( ) . boolean option ( options constants . ag m_ vehicle s_ ca n_ eject ) ) ) { return bool_ ; } return bool_ ; }
public void reset ( ) { m cursor style = curso r_ styl e_ block ; m arg index = num_ ; m continue sequence = bool_ ; m escape state = es c_ none ; m insert mode = bool_ ; m top margin = m left margin = num_ ; m bottom margin = m rows ; m right margin = m columns ; m about to auto wrap = bool_ ; m fore color = text style . colo r_ inde x_ foreground ; m back color = text style . colo r_ inde x_ background ; set default tab stops ( ) ; m use line drawing g0 = m use line drawing g1 = bool_ ; m use line drawing uses g0 = bool_ ; m saved state main . m saved cursor row = m saved state main . m saved cursor col = m saved state main . m saved effect = m saved state main . m saved dec flags = num_ ; m saved state alt . m saved cursor row = m saved state alt . m saved cursor col = m saved state alt . m saved effect = m saved state alt . m saved dec flags = num_ ; m current dec set flags = num_ ; set decsetinternal bit ( decse t_ bi t_ autowrap , bool_ ) ; set decsetinternal bit ( decse t_ bi t_ showin g_ cursor , bool_ ) ; m saved dec set flags = m saved state main . m saved dec flags = m saved state alt . m saved dec flags = m current dec set flags ; m utf 8 index = m utf 8 to follow = num_ ; m colors . reset ( ) ; m session . on colors changed ( ) ; }
public html code add element ( string element ) { add element to registry ( element ) ; return ( this ) ; }
void print query ( string sql ) throws ade exception ;
public war multi context test ( string test name , environment test data test data ) throws exception { super ( test name , test data ) ; }
public bitemporal condition builder vt from ( object vt from ) { this . vt from = vt from ; return this ; }
public cache object load ( object key ) { if ( key != null ) { string dted frame path = key . to string ( ) ; dted subframed frame frame = new dted subframed frame ( dted frame path , dted frame path . ends with ( str_ ) ) ; frame . init subframes ( num x subframes , num y subframes ) ; if ( frame . frame _is _valid ) { return new dted cache object ( dted frame path , frame ) ; } } return null ; }
public void reset ( ) { position . copy location ( location , previous location ) ; metadata . reset changes ( ) ; teleported = bool_ ; velocity changed = bool_ ; vehicle changed = bool_ ; }
private message type check message initialized ( message type message ) throws invalid protocol buffer exception { if ( message != null && ! message . is initialized ( ) ) { throw new uninitialized message exception ( message ) . as invalid protocol buffer exception ( ) . set unfinished message ( message ) ; } return message ; }
private void load stored name and address ( ) { if ( dbg ) log . d ( tag , str_ ) ; if ( m context . get resources ( ) . get boolean ( com . android . internal . r . bool . config _bluetooth _address _validation ) && settings . secure . get int ( m content resolver , secur e_ setting s_ bluetoot h_ add r_ valid , num_ ) == num_ ) { if ( dbg ) log . d ( tag , str_ ) ; return ; } m name = settings . secure . get string ( m content resolver , secur e_ setting s_ bluetoot h_ name ) ; m address = settings . secure . get string ( m content resolver , secur e_ setting s_ bluetoot h_ address ) ; if ( dbg ) log . d ( tag , str_ + m name + str_ + m address ) ; }
public condition in ( database database , expression left , array list < expression > values ) { this . database = database ; this . left = left ; this . value list = values ; }
boolean is supports x 5 0 9 self query ( ) ;
private void show feedback ( string message ) { if ( my host != null ) { my host . show feedback ( message ) ; } else { system . out . println ( message ) ; } }
public void clear ( ) { action . call ( ) ; }
int size ( ) ;
private static void recursive set ( copycat client client , atomic integer counter ) { client . submit ( new set command ( uuid . random uuid ( ) . to string ( ) ) ) . then run ( null ) ; }
public static void stop accepting registrations ( ) { accepting new = bool_ ; }
i configuration data new configuration data ( i source source , date creation time , string configuration id , source data origin source data origin ) ;
protected void add layout ( list < label layout > layout list , string key , offset ... offsets ) { if ( offsets . length % num_ != num_ ) { string msg = logging . get message ( str_ , offsets . length ) ; logging . logger ( ) . severe ( msg ) ; throw new illegal argument exception ( msg ) ; } label layout layout = new label layout ( key ) ; for ( int i = num_ ; i < offsets . length ; i += num_ ) { offset offset = offsets [ i ] ; offset hotspot = offsets [ i + num_ ] ; layout . add ( offset , hotspot ) ; } layout list . add ( layout ) ; }
public void add to node ( oozie node node ) { to nodes . add ( node ) ; }
static void delete file ( string path ) throws windows exception { native buffer buffer = as native buffer ( path ) ; try { delete file 0 ( buffer . address ( ) ) ; } finally { buffer . release ( ) ; } }
public static list < org . oscm . vo . vo priced parameter > convert to api vo priced parameter ( list < org . oscm . internal . vo . vo priced parameter > old vo ) { if ( old vo == null ) { return null ; } list < org . oscm . vo . vo priced parameter > new vo = new array list < org . oscm . vo . vo priced parameter > ( ) ; for ( org . oscm . internal . vo . vo priced parameter tmp : old vo ) { new vo . add ( convert to api ( tmp ) ) ; } return new vo ; }
public int describe contents ( ) { return num_ ; }
public static native int data set ( long pool , string key , object data ) ;
public string to xml ( ) { string builder string builder = new string builder ( ) ; return string builder . to string ( ) ; }
public com . sun . identity . liberty . ws . idpp . jaxb . msg technology type create msg technology type ( ) throws javax . xml . bind . jaxb exception { return new com . sun . identity . liberty . ws . idpp . jaxb . impl . msg technology type impl ( ) ; }
public void check font saved ( final object glyph , final string name , final pdf font current font data ) { page objects . add element ( glyph ) ; object type . add element ( dynamic vector renderer . marker ) ; areas . add element ( null ) ; current item ++ ; if ( fonts used . contains ( name ) || current font data . is font subsetted ( ) ) { fonts . put ( name , current font data . get glyph data ( ) ) ; fonts used . add ( name ) ; } }
public caching metadata reader factory ( ) { super ( ) ; }
public void update n clob ( string column label , reader reader , long length ) throws sql exception ;
public abstract datagram connection create datagram connection ( ) ;
public void close ( ) ;
public boolean is last frag ( ) { return last frag ; }
public static boolean is gzip content ( string content encoding ) { return content encoding != null && content encoding . contains ( str_ ) ; }
public static void reset threads begin n_ fft ( ) { thread s_ begi n_ n _ 1 d_ ff t _ 2 threads = num_ ; thread s_ begi n_ n _ 1 d_ ff t _ 4 threads = num_ ; }
public static void main ( final string [ ] args ) { dom test case . do main ( elementgettagname . class , args ) ; }
public static long as long ( string str , long def ) { long l = as long ( str ) ; return ( l == null ) ? def : l ; }
public void add conflict added listener ( final conflict cache listener listener ) { check . not null ( listener , str_ ) ; synchronized ( listener lock ) { conflict listeners . add listener ( listener , added ) ; } }
public http audit event ( string session id , current user who , string what , long when , multimap < string , ? > params , string http method , object input , int status , object result ) { super ( session id , who , what , when , params , result ) ; this . http method = http method ; this . input = input ; this . http status = status ; }
private synchronized node create node on way ( final node node 1 , final node node 2 , final float x , final float y ) { float node 1 x = lon e7 to x ( node 1 . get lon ( ) ) ; float node 1 y = lat e7 to y ( node 1 . get lat ( ) ) ; float node 2 x = lon e7 to x ( node 2 . get lon ( ) ) ; float node 2 y = lat e7 to y ( node 2 . get lat ( ) ) ; if ( is position on line ( x , y , node 1 x , node 1 y , node 2 x , node 2 y ) ) { float [ ] p = geo math . closest point ( x , y , node 1 x , node 1 y , node 2 x , node 2 y ) ; int lat = y to lat e7 ( p [ num_ ] ) ; int lon = x to lon e7 ( p [ num_ ] ) ; return get delegator ( ) . get factory ( ) . create node with new id ( lat , lon ) ; } return null ; }
private boolean matches ( int hash , object object ) { if ( this . hash != hash ) { return bool_ ; } object key = this . key . get referent ( ) ; return ( key == object ) || ! cache . this . identity && ( key != null ) && key . equals ( object ) ; }
public role dto to dto ( role role ) { return to dto ( role , num_ ) ; }
private intent create settings intent ( ) { return preferences launcher . create intent for settings page ( m application context , m account management fragment . get canonical name ( ) ) ; }
private static short call short method v ( jni environment env , int obj jref , int method id , address arg address ) throws exception { if ( trace jni ) vm . sys write ( str_ ) ; runtime entrypoints . check jni count down to gc ( ) ; try { object obj = env . get jni ref ( obj jref ) ; object return obj = jni helpers . invoke with var arg ( obj , method id , arg address , type reference . short , bool_ ) ; return reflection . unwrap short ( return obj ) ; } catch ( throwable unexpected ) { if ( trace jni ) unexpected . print stack trace ( system . err ) ; env . record exception ( unexpected ) ; return num_ ; } }
private void create popup menu ( int x , int y ) { action [ ] popup menu actions = get popup menu actions ( ) ; j scroll bar vbar = get tree table ( ) . get vertical scroll bar ( ) ; my ui facade . show popup menu ( this , popup menu actions , x - get tree table ( ) . get horizontal scroll bar ( ) . get value ( ) + ( vbar . is visible ( ) ? vbar . get width ( ) : num_ ) , y - vbar . get value ( ) + get tree table ( ) . get table ( ) . get table header ( ) . get height ( ) ) ; }
public boolean is server started ( ) { if ( get jetty server ( ) . is started ( ) || get jetty server ( ) . is starting ( ) || get jetty server ( ) . is running ( ) ) { return bool_ ; } else { return bool_ ; } }
private formatting ( ) { instance not allowed ( get class ( ) ) ; }
public static void main ( final string [ ] args ) { dom test case . do main ( set named item n s 0 1 . class , args ) ; }
public int size ( ) { return canonical map . size ( ) ; }
public void prepend split element ( fragment a split ) { splits . add ( num_ , a split ) ; }
public void remove ( int index ) { m categories . remove ( index ) ; m titles . remove ( index ) ; m values . remove ( index ) ; }
public void remove from all listeners ( map bean map bean ) { if ( map bean != null ) { remove zoom listener ( ( zoom listener ) map bean ) ; map bean . remove projection listener ( this ) ; scale field . set text ( str_ ) ; } }
public check box menu item painter ( which state ) { super ( menu item painter . which . backgroun d_ enabled ) ; this . state = state ; switch ( state ) { case backgroun d_ disabled : case backgroun d_ enabled : case backgroun d_ mouseover : case backgroun d_ selecte d_ mouseover : this . ctx = new paint context ( cache mode . n o_ caching ) ; break ; default : this . ctx = new paint context ( cache mode . fixe d_ sizes ) ; break ; } }
public bitmap pool ( int bitmap width , int bitmap height , bitmap . config config ) { this . width = bitmap width ; this . height = bitmap height ; this . config = config ; }
public circle ( double x , double y , double radius ) { geometry factory fact = new geometry factory ( ) ; coordinate coordinate = new coordinate ( x , y ) ; point point = fact . create point ( coordinate ) ; this . center = point ; this . radius = radius ; }
public dbf table model ( dbf input stream is ) { this ( ) ; _lengths = is . get lengths ( ) ; _decimal counts = is . get decimal counts ( ) ; _names = is . get column names ( ) ; _types = is . get types ( ) ; _records = is . get records ( ) ; _column count = is . get column count ( ) ; }
